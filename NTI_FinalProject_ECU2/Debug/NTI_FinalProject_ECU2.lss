
NTI_FinalProject_ECU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000076c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000304  00800060  000076c6  0000775a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e6  00800364  00800364  00007a5e  2**0
                  ALLOC
  3 .stab         00005910  00000000  00000000  00007a60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004c49  00000000  00000000  0000d370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000260  00000000  00000000  00011fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000002af  00000000  00000000  00012219  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003a03  00000000  00000000  000124c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001abd  00000000  00000000  00015ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000190e  00000000  00000000  00017988  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000280  00000000  00000000  00019298  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003b4  00000000  00000000  00019518  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000258c  00000000  00000000  000198cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  0001be58  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 31 21 	jmp	0x4262	; 0x4262 <__vector_6>
      1c:	0c 94 da 36 	jmp	0x6db4	; 0x6db4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 64 21 	jmp	0x42c8	; 0x42c8 <__vector_9>
      28:	0c 94 fe 20 	jmp	0x41fc	; 0x41fc <__vector_10>
      2c:	0c 94 cb 20 	jmp	0x4196	; 0x4196 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 8b 16 	jmp	0x2d16	; 0x2d16 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 63 29 	jmp	0x52c6	; 0x52c6 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	13 e0       	ldi	r17, 0x03	; 3
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ec       	ldi	r30, 0xC6	; 198
      68:	f6 e7       	ldi	r31, 0x76	; 118
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 36       	cpi	r26, 0x64	; 100
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	a4 e6       	ldi	r26, 0x64	; 100
      7a:	b3 e0       	ldi	r27, 0x03	; 3
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 34       	cpi	r26, 0x4A	; 74
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b5 37 	call	0x6f6a	; 0x6f6a <main>
      8a:	0c 94 61 3b 	jmp	0x76c2	; 0x76c2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__muldi3>:
      92:	a0 e3       	ldi	r26, 0x30	; 48
      94:	b0 e0       	ldi	r27, 0x00	; 0
      96:	ef e4       	ldi	r30, 0x4F	; 79
      98:	f0 e0       	ldi	r31, 0x00	; 0
      9a:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__prologue_saves__>
      9e:	a8 e0       	ldi	r26, 0x08	; 8
      a0:	4e 01       	movw	r8, r28
      a2:	08 94       	sec
      a4:	81 1c       	adc	r8, r1
      a6:	91 1c       	adc	r9, r1
      a8:	f4 01       	movw	r30, r8
      aa:	ba 2f       	mov	r27, r26
      ac:	11 92       	st	Z+, r1
      ae:	ba 95       	dec	r27
      b0:	e9 f7       	brne	.-6      	; 0xac <__muldi3+0x1a>
      b2:	29 83       	std	Y+1, r18	; 0x01
      b4:	3a 83       	std	Y+2, r19	; 0x02
      b6:	4b 83       	std	Y+3, r20	; 0x03
      b8:	5c 83       	std	Y+4, r21	; 0x04
      ba:	6d 83       	std	Y+5, r22	; 0x05
      bc:	7e 83       	std	Y+6, r23	; 0x06
      be:	8f 83       	std	Y+7, r24	; 0x07
      c0:	98 87       	std	Y+8, r25	; 0x08
      c2:	ce 01       	movw	r24, r28
      c4:	09 96       	adiw	r24, 0x09	; 9
      c6:	fc 01       	movw	r30, r24
      c8:	11 92       	st	Z+, r1
      ca:	aa 95       	dec	r26
      cc:	e9 f7       	brne	.-6      	; 0xc8 <__muldi3+0x36>
      ce:	a9 86       	std	Y+9, r10	; 0x09
      d0:	ba 86       	std	Y+10, r11	; 0x0a
      d2:	cb 86       	std	Y+11, r12	; 0x0b
      d4:	dc 86       	std	Y+12, r13	; 0x0c
      d6:	ed 86       	std	Y+13, r14	; 0x0d
      d8:	fe 86       	std	Y+14, r15	; 0x0e
      da:	0f 87       	std	Y+15, r16	; 0x0f
      dc:	18 8b       	std	Y+16, r17	; 0x10
      de:	29 81       	ldd	r18, Y+1	; 0x01
      e0:	3a 81       	ldd	r19, Y+2	; 0x02
      e2:	4b 81       	ldd	r20, Y+3	; 0x03
      e4:	5c 81       	ldd	r21, Y+4	; 0x04
      e6:	2d a7       	std	Y+45, r18	; 0x2d
      e8:	3e a7       	std	Y+46, r19	; 0x2e
      ea:	4f a7       	std	Y+47, r20	; 0x2f
      ec:	58 ab       	std	Y+48, r21	; 0x30
      ee:	79 01       	movw	r14, r18
      f0:	8a 01       	movw	r16, r20
      f2:	8f ef       	ldi	r24, 0xFF	; 255
      f4:	9f ef       	ldi	r25, 0xFF	; 255
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b0 e0       	ldi	r27, 0x00	; 0
      fa:	e8 22       	and	r14, r24
      fc:	f9 22       	and	r15, r25
      fe:	0a 23       	and	r16, r26
     100:	1b 23       	and	r17, r27
     102:	1a 01       	movw	r2, r20
     104:	44 24       	eor	r4, r4
     106:	55 24       	eor	r5, r5
     108:	29 85       	ldd	r18, Y+9	; 0x09
     10a:	3a 85       	ldd	r19, Y+10	; 0x0a
     10c:	4b 85       	ldd	r20, Y+11	; 0x0b
     10e:	5c 85       	ldd	r21, Y+12	; 0x0c
     110:	29 a7       	std	Y+41, r18	; 0x29
     112:	3a a7       	std	Y+42, r19	; 0x2a
     114:	4b a7       	std	Y+43, r20	; 0x2b
     116:	5c a7       	std	Y+44, r21	; 0x2c
     118:	59 01       	movw	r10, r18
     11a:	6a 01       	movw	r12, r20
     11c:	a8 22       	and	r10, r24
     11e:	b9 22       	and	r11, r25
     120:	ca 22       	and	r12, r26
     122:	db 22       	and	r13, r27
     124:	3a 01       	movw	r6, r20
     126:	88 24       	eor	r8, r8
     128:	99 24       	eor	r9, r9
     12a:	c6 01       	movw	r24, r12
     12c:	b5 01       	movw	r22, r10
     12e:	a8 01       	movw	r20, r16
     130:	97 01       	movw	r18, r14
     132:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
     136:	6d a3       	std	Y+37, r22	; 0x25
     138:	7e a3       	std	Y+38, r23	; 0x26
     13a:	8f a3       	std	Y+39, r24	; 0x27
     13c:	98 a7       	std	Y+40, r25	; 0x28
     13e:	c4 01       	movw	r24, r8
     140:	b3 01       	movw	r22, r6
     142:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
     146:	69 a3       	std	Y+33, r22	; 0x21
     148:	7a a3       	std	Y+34, r23	; 0x22
     14a:	8b a3       	std	Y+35, r24	; 0x23
     14c:	9c a3       	std	Y+36, r25	; 0x24
     14e:	c6 01       	movw	r24, r12
     150:	b5 01       	movw	r22, r10
     152:	a2 01       	movw	r20, r4
     154:	91 01       	movw	r18, r2
     156:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
     15a:	7b 01       	movw	r14, r22
     15c:	8c 01       	movw	r16, r24
     15e:	c4 01       	movw	r24, r8
     160:	b3 01       	movw	r22, r6
     162:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
     166:	5b 01       	movw	r10, r22
     168:	6c 01       	movw	r12, r24
     16a:	89 a1       	ldd	r24, Y+33	; 0x21
     16c:	9a a1       	ldd	r25, Y+34	; 0x22
     16e:	ab a1       	ldd	r26, Y+35	; 0x23
     170:	bc a1       	ldd	r27, Y+36	; 0x24
     172:	8e 0d       	add	r24, r14
     174:	9f 1d       	adc	r25, r15
     176:	a0 1f       	adc	r26, r16
     178:	b1 1f       	adc	r27, r17
     17a:	89 a3       	std	Y+33, r24	; 0x21
     17c:	9a a3       	std	Y+34, r25	; 0x22
     17e:	ab a3       	std	Y+35, r26	; 0x23
     180:	bc a3       	std	Y+36, r27	; 0x24
     182:	2d a1       	ldd	r18, Y+37	; 0x25
     184:	3e a1       	ldd	r19, Y+38	; 0x26
     186:	4f a1       	ldd	r20, Y+39	; 0x27
     188:	58 a5       	ldd	r21, Y+40	; 0x28
     18a:	ca 01       	movw	r24, r20
     18c:	aa 27       	eor	r26, r26
     18e:	bb 27       	eor	r27, r27
     190:	29 a1       	ldd	r18, Y+33	; 0x21
     192:	3a a1       	ldd	r19, Y+34	; 0x22
     194:	4b a1       	ldd	r20, Y+35	; 0x23
     196:	5c a1       	ldd	r21, Y+36	; 0x24
     198:	28 0f       	add	r18, r24
     19a:	39 1f       	adc	r19, r25
     19c:	4a 1f       	adc	r20, r26
     19e:	5b 1f       	adc	r21, r27
     1a0:	29 a3       	std	Y+33, r18	; 0x21
     1a2:	3a a3       	std	Y+34, r19	; 0x22
     1a4:	4b a3       	std	Y+35, r20	; 0x23
     1a6:	5c a3       	std	Y+36, r21	; 0x24
     1a8:	2e 15       	cp	r18, r14
     1aa:	3f 05       	cpc	r19, r15
     1ac:	40 07       	cpc	r20, r16
     1ae:	51 07       	cpc	r21, r17
     1b0:	40 f4       	brcc	.+16     	; 0x1c2 <__muldi3+0x130>
     1b2:	80 e0       	ldi	r24, 0x00	; 0
     1b4:	90 e0       	ldi	r25, 0x00	; 0
     1b6:	a1 e0       	ldi	r26, 0x01	; 1
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	a8 0e       	add	r10, r24
     1bc:	b9 1e       	adc	r11, r25
     1be:	ca 1e       	adc	r12, r26
     1c0:	db 1e       	adc	r13, r27
     1c2:	89 a1       	ldd	r24, Y+33	; 0x21
     1c4:	9a a1       	ldd	r25, Y+34	; 0x22
     1c6:	ab a1       	ldd	r26, Y+35	; 0x23
     1c8:	bc a1       	ldd	r27, Y+36	; 0x24
     1ca:	9d 01       	movw	r18, r26
     1cc:	44 27       	eor	r20, r20
     1ce:	55 27       	eor	r21, r21
     1d0:	2a 0d       	add	r18, r10
     1d2:	3b 1d       	adc	r19, r11
     1d4:	4c 1d       	adc	r20, r12
     1d6:	5d 1d       	adc	r21, r13
     1d8:	2d 8f       	std	Y+29, r18	; 0x1d
     1da:	3e 8f       	std	Y+30, r19	; 0x1e
     1dc:	4f 8f       	std	Y+31, r20	; 0x1f
     1de:	58 a3       	std	Y+32, r21	; 0x20
     1e0:	6c 01       	movw	r12, r24
     1e2:	bb 24       	eor	r11, r11
     1e4:	aa 24       	eor	r10, r10
     1e6:	8d a1       	ldd	r24, Y+37	; 0x25
     1e8:	9e a1       	ldd	r25, Y+38	; 0x26
     1ea:	af a1       	ldd	r26, Y+39	; 0x27
     1ec:	b8 a5       	ldd	r27, Y+40	; 0x28
     1ee:	a0 70       	andi	r26, 0x00	; 0
     1f0:	b0 70       	andi	r27, 0x00	; 0
     1f2:	a8 0e       	add	r10, r24
     1f4:	b9 1e       	adc	r11, r25
     1f6:	ca 1e       	adc	r12, r26
     1f8:	db 1e       	adc	r13, r27
     1fa:	a9 8e       	std	Y+25, r10	; 0x19
     1fc:	ba 8e       	std	Y+26, r11	; 0x1a
     1fe:	cb 8e       	std	Y+27, r12	; 0x1b
     200:	dc 8e       	std	Y+28, r13	; 0x1c
     202:	9a 8c       	ldd	r9, Y+26	; 0x1a
     204:	8b 8c       	ldd	r8, Y+27	; 0x1b
     206:	7c 8c       	ldd	r7, Y+28	; 0x1c
     208:	9e 8d       	ldd	r25, Y+30	; 0x1e
     20a:	6f 8d       	ldd	r22, Y+31	; 0x1f
     20c:	78 a1       	ldd	r23, Y+32	; 0x20
     20e:	fe 01       	movw	r30, r28
     210:	71 96       	adiw	r30, 0x11	; 17
     212:	88 e0       	ldi	r24, 0x08	; 8
     214:	df 01       	movw	r26, r30
     216:	1d 92       	st	X+, r1
     218:	8a 95       	dec	r24
     21a:	e9 f7       	brne	.-6      	; 0x216 <__muldi3+0x184>
     21c:	2d 8b       	std	Y+21, r18	; 0x15
     21e:	9e 8b       	std	Y+22, r25	; 0x16
     220:	6f 8b       	std	Y+23, r22	; 0x17
     222:	78 8f       	std	Y+24, r23	; 0x18
     224:	2d 85       	ldd	r18, Y+13	; 0x0d
     226:	3e 85       	ldd	r19, Y+14	; 0x0e
     228:	4f 85       	ldd	r20, Y+15	; 0x0f
     22a:	58 89       	ldd	r21, Y+16	; 0x10
     22c:	6d a5       	ldd	r22, Y+45	; 0x2d
     22e:	7e a5       	ldd	r23, Y+46	; 0x2e
     230:	8f a5       	ldd	r24, Y+47	; 0x2f
     232:	98 a9       	ldd	r25, Y+48	; 0x30
     234:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
     238:	7b 01       	movw	r14, r22
     23a:	8c 01       	movw	r16, r24
     23c:	2d 81       	ldd	r18, Y+5	; 0x05
     23e:	3e 81       	ldd	r19, Y+6	; 0x06
     240:	4f 81       	ldd	r20, Y+7	; 0x07
     242:	58 85       	ldd	r21, Y+8	; 0x08
     244:	69 a5       	ldd	r22, Y+41	; 0x29
     246:	7a a5       	ldd	r23, Y+42	; 0x2a
     248:	8b a5       	ldd	r24, Y+43	; 0x2b
     24a:	9c a5       	ldd	r25, Y+44	; 0x2c
     24c:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
     250:	e6 0e       	add	r14, r22
     252:	f7 1e       	adc	r15, r23
     254:	08 1f       	adc	r16, r24
     256:	19 1f       	adc	r17, r25
     258:	6d 89       	ldd	r22, Y+21	; 0x15
     25a:	7e 89       	ldd	r23, Y+22	; 0x16
     25c:	8f 89       	ldd	r24, Y+23	; 0x17
     25e:	98 8d       	ldd	r25, Y+24	; 0x18
     260:	6e 0d       	add	r22, r14
     262:	7f 1d       	adc	r23, r15
     264:	80 1f       	adc	r24, r16
     266:	91 1f       	adc	r25, r17
     268:	6d 8b       	std	Y+21, r22	; 0x15
     26a:	7e 8b       	std	Y+22, r23	; 0x16
     26c:	8f 8b       	std	Y+23, r24	; 0x17
     26e:	98 8f       	std	Y+24, r25	; 0x18
     270:	ee 89       	ldd	r30, Y+22	; 0x16
     272:	2a 2d       	mov	r18, r10
     274:	39 2d       	mov	r19, r9
     276:	48 2d       	mov	r20, r8
     278:	57 2d       	mov	r21, r7
     27a:	7e 2f       	mov	r23, r30
     27c:	8f 89       	ldd	r24, Y+23	; 0x17
     27e:	98 8d       	ldd	r25, Y+24	; 0x18
     280:	e0 96       	adiw	r28, 0x30	; 48
     282:	e2 e1       	ldi	r30, 0x12	; 18
     284:	0c 94 5a 38 	jmp	0x70b4	; 0x70b4 <__epilogue_restores__>

00000288 <__lshrdi3>:
     288:	ef 92       	push	r14
     28a:	ff 92       	push	r15
     28c:	0f 93       	push	r16
     28e:	df 93       	push	r29
     290:	cf 93       	push	r28
     292:	cd b7       	in	r28, 0x3d	; 61
     294:	de b7       	in	r29, 0x3e	; 62
     296:	60 97       	sbiw	r28, 0x10	; 16
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	de bf       	out	0x3e, r29	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	a8 2f       	mov	r26, r24
     2a4:	00 23       	and	r16, r16
     2a6:	09 f4       	brne	.+2      	; 0x2aa <__lshrdi3+0x22>
     2a8:	61 c0       	rjmp	.+194    	; 0x36c <__lshrdi3+0xe4>
     2aa:	7e 01       	movw	r14, r28
     2ac:	08 94       	sec
     2ae:	e1 1c       	adc	r14, r1
     2b0:	f1 1c       	adc	r15, r1
     2b2:	88 e0       	ldi	r24, 0x08	; 8
     2b4:	f7 01       	movw	r30, r14
     2b6:	11 92       	st	Z+, r1
     2b8:	8a 95       	dec	r24
     2ba:	e9 f7       	brne	.-6      	; 0x2b6 <__lshrdi3+0x2e>
     2bc:	29 83       	std	Y+1, r18	; 0x01
     2be:	3a 83       	std	Y+2, r19	; 0x02
     2c0:	4b 83       	std	Y+3, r20	; 0x03
     2c2:	5c 83       	std	Y+4, r21	; 0x04
     2c4:	6d 83       	std	Y+5, r22	; 0x05
     2c6:	7e 83       	std	Y+6, r23	; 0x06
     2c8:	af 83       	std	Y+7, r26	; 0x07
     2ca:	98 87       	std	Y+8, r25	; 0x08
     2cc:	80 e2       	ldi	r24, 0x20	; 32
     2ce:	80 1b       	sub	r24, r16
     2d0:	e8 2f       	mov	r30, r24
     2d2:	ff 27       	eor	r31, r31
     2d4:	e7 fd       	sbrc	r30, 7
     2d6:	f0 95       	com	r31
     2d8:	4d 81       	ldd	r20, Y+5	; 0x05
     2da:	5e 81       	ldd	r21, Y+6	; 0x06
     2dc:	6f 81       	ldd	r22, Y+7	; 0x07
     2de:	78 85       	ldd	r23, Y+8	; 0x08
     2e0:	18 16       	cp	r1, r24
     2e2:	84 f0       	brlt	.+32     	; 0x304 <__lshrdi3+0x7c>
     2e4:	1d 86       	std	Y+13, r1	; 0x0d
     2e6:	1e 86       	std	Y+14, r1	; 0x0e
     2e8:	1f 86       	std	Y+15, r1	; 0x0f
     2ea:	18 8a       	std	Y+16, r1	; 0x10
     2ec:	88 27       	eor	r24, r24
     2ee:	99 27       	eor	r25, r25
     2f0:	8e 1b       	sub	r24, r30
     2f2:	9f 0b       	sbc	r25, r31
     2f4:	04 c0       	rjmp	.+8      	; 0x2fe <__lshrdi3+0x76>
     2f6:	76 95       	lsr	r23
     2f8:	67 95       	ror	r22
     2fa:	57 95       	ror	r21
     2fc:	47 95       	ror	r20
     2fe:	8a 95       	dec	r24
     300:	d2 f7       	brpl	.-12     	; 0x2f6 <__lshrdi3+0x6e>
     302:	28 c0       	rjmp	.+80     	; 0x354 <__lshrdi3+0xcc>
     304:	20 2f       	mov	r18, r16
     306:	33 27       	eor	r19, r19
     308:	27 fd       	sbrc	r18, 7
     30a:	30 95       	com	r19
     30c:	db 01       	movw	r26, r22
     30e:	ca 01       	movw	r24, r20
     310:	02 2e       	mov	r0, r18
     312:	04 c0       	rjmp	.+8      	; 0x31c <__lshrdi3+0x94>
     314:	b6 95       	lsr	r27
     316:	a7 95       	ror	r26
     318:	97 95       	ror	r25
     31a:	87 95       	ror	r24
     31c:	0a 94       	dec	r0
     31e:	d2 f7       	brpl	.-12     	; 0x314 <__lshrdi3+0x8c>
     320:	8d 87       	std	Y+13, r24	; 0x0d
     322:	9e 87       	std	Y+14, r25	; 0x0e
     324:	af 87       	std	Y+15, r26	; 0x0f
     326:	b8 8b       	std	Y+16, r27	; 0x10
     328:	04 c0       	rjmp	.+8      	; 0x332 <__lshrdi3+0xaa>
     32a:	44 0f       	add	r20, r20
     32c:	55 1f       	adc	r21, r21
     32e:	66 1f       	adc	r22, r22
     330:	77 1f       	adc	r23, r23
     332:	ea 95       	dec	r30
     334:	d2 f7       	brpl	.-12     	; 0x32a <__lshrdi3+0xa2>
     336:	89 81       	ldd	r24, Y+1	; 0x01
     338:	9a 81       	ldd	r25, Y+2	; 0x02
     33a:	ab 81       	ldd	r26, Y+3	; 0x03
     33c:	bc 81       	ldd	r27, Y+4	; 0x04
     33e:	04 c0       	rjmp	.+8      	; 0x348 <__lshrdi3+0xc0>
     340:	b6 95       	lsr	r27
     342:	a7 95       	ror	r26
     344:	97 95       	ror	r25
     346:	87 95       	ror	r24
     348:	2a 95       	dec	r18
     34a:	d2 f7       	brpl	.-12     	; 0x340 <__lshrdi3+0xb8>
     34c:	48 2b       	or	r20, r24
     34e:	59 2b       	or	r21, r25
     350:	6a 2b       	or	r22, r26
     352:	7b 2b       	or	r23, r27
     354:	49 87       	std	Y+9, r20	; 0x09
     356:	5a 87       	std	Y+10, r21	; 0x0a
     358:	6b 87       	std	Y+11, r22	; 0x0b
     35a:	7c 87       	std	Y+12, r23	; 0x0c
     35c:	29 85       	ldd	r18, Y+9	; 0x09
     35e:	3a 85       	ldd	r19, Y+10	; 0x0a
     360:	4b 85       	ldd	r20, Y+11	; 0x0b
     362:	5c 85       	ldd	r21, Y+12	; 0x0c
     364:	6d 85       	ldd	r22, Y+13	; 0x0d
     366:	7e 85       	ldd	r23, Y+14	; 0x0e
     368:	af 85       	ldd	r26, Y+15	; 0x0f
     36a:	98 89       	ldd	r25, Y+16	; 0x10
     36c:	8a 2f       	mov	r24, r26
     36e:	60 96       	adiw	r28, 0x10	; 16
     370:	0f b6       	in	r0, 0x3f	; 63
     372:	f8 94       	cli
     374:	de bf       	out	0x3e, r29	; 62
     376:	0f be       	out	0x3f, r0	; 63
     378:	cd bf       	out	0x3d, r28	; 61
     37a:	cf 91       	pop	r28
     37c:	df 91       	pop	r29
     37e:	0f 91       	pop	r16
     380:	ff 90       	pop	r15
     382:	ef 90       	pop	r14
     384:	08 95       	ret

00000386 <__ashldi3>:
     386:	ef 92       	push	r14
     388:	ff 92       	push	r15
     38a:	0f 93       	push	r16
     38c:	df 93       	push	r29
     38e:	cf 93       	push	r28
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
     394:	60 97       	sbiw	r28, 0x10	; 16
     396:	0f b6       	in	r0, 0x3f	; 63
     398:	f8 94       	cli
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	cd bf       	out	0x3d, r28	; 61
     3a0:	a8 2f       	mov	r26, r24
     3a2:	00 23       	and	r16, r16
     3a4:	09 f4       	brne	.+2      	; 0x3a8 <__ashldi3+0x22>
     3a6:	61 c0       	rjmp	.+194    	; 0x46a <__ashldi3+0xe4>
     3a8:	7e 01       	movw	r14, r28
     3aa:	08 94       	sec
     3ac:	e1 1c       	adc	r14, r1
     3ae:	f1 1c       	adc	r15, r1
     3b0:	88 e0       	ldi	r24, 0x08	; 8
     3b2:	f7 01       	movw	r30, r14
     3b4:	11 92       	st	Z+, r1
     3b6:	8a 95       	dec	r24
     3b8:	e9 f7       	brne	.-6      	; 0x3b4 <__ashldi3+0x2e>
     3ba:	29 83       	std	Y+1, r18	; 0x01
     3bc:	3a 83       	std	Y+2, r19	; 0x02
     3be:	4b 83       	std	Y+3, r20	; 0x03
     3c0:	5c 83       	std	Y+4, r21	; 0x04
     3c2:	6d 83       	std	Y+5, r22	; 0x05
     3c4:	7e 83       	std	Y+6, r23	; 0x06
     3c6:	af 83       	std	Y+7, r26	; 0x07
     3c8:	98 87       	std	Y+8, r25	; 0x08
     3ca:	80 e2       	ldi	r24, 0x20	; 32
     3cc:	80 1b       	sub	r24, r16
     3ce:	e8 2f       	mov	r30, r24
     3d0:	ff 27       	eor	r31, r31
     3d2:	e7 fd       	sbrc	r30, 7
     3d4:	f0 95       	com	r31
     3d6:	49 81       	ldd	r20, Y+1	; 0x01
     3d8:	5a 81       	ldd	r21, Y+2	; 0x02
     3da:	6b 81       	ldd	r22, Y+3	; 0x03
     3dc:	7c 81       	ldd	r23, Y+4	; 0x04
     3de:	18 16       	cp	r1, r24
     3e0:	84 f0       	brlt	.+32     	; 0x402 <__ashldi3+0x7c>
     3e2:	19 86       	std	Y+9, r1	; 0x09
     3e4:	1a 86       	std	Y+10, r1	; 0x0a
     3e6:	1b 86       	std	Y+11, r1	; 0x0b
     3e8:	1c 86       	std	Y+12, r1	; 0x0c
     3ea:	88 27       	eor	r24, r24
     3ec:	99 27       	eor	r25, r25
     3ee:	8e 1b       	sub	r24, r30
     3f0:	9f 0b       	sbc	r25, r31
     3f2:	04 c0       	rjmp	.+8      	; 0x3fc <__ashldi3+0x76>
     3f4:	44 0f       	add	r20, r20
     3f6:	55 1f       	adc	r21, r21
     3f8:	66 1f       	adc	r22, r22
     3fa:	77 1f       	adc	r23, r23
     3fc:	8a 95       	dec	r24
     3fe:	d2 f7       	brpl	.-12     	; 0x3f4 <__ashldi3+0x6e>
     400:	28 c0       	rjmp	.+80     	; 0x452 <__ashldi3+0xcc>
     402:	20 2f       	mov	r18, r16
     404:	33 27       	eor	r19, r19
     406:	27 fd       	sbrc	r18, 7
     408:	30 95       	com	r19
     40a:	db 01       	movw	r26, r22
     40c:	ca 01       	movw	r24, r20
     40e:	02 2e       	mov	r0, r18
     410:	04 c0       	rjmp	.+8      	; 0x41a <__ashldi3+0x94>
     412:	88 0f       	add	r24, r24
     414:	99 1f       	adc	r25, r25
     416:	aa 1f       	adc	r26, r26
     418:	bb 1f       	adc	r27, r27
     41a:	0a 94       	dec	r0
     41c:	d2 f7       	brpl	.-12     	; 0x412 <__ashldi3+0x8c>
     41e:	89 87       	std	Y+9, r24	; 0x09
     420:	9a 87       	std	Y+10, r25	; 0x0a
     422:	ab 87       	std	Y+11, r26	; 0x0b
     424:	bc 87       	std	Y+12, r27	; 0x0c
     426:	04 c0       	rjmp	.+8      	; 0x430 <__ashldi3+0xaa>
     428:	76 95       	lsr	r23
     42a:	67 95       	ror	r22
     42c:	57 95       	ror	r21
     42e:	47 95       	ror	r20
     430:	ea 95       	dec	r30
     432:	d2 f7       	brpl	.-12     	; 0x428 <__ashldi3+0xa2>
     434:	8d 81       	ldd	r24, Y+5	; 0x05
     436:	9e 81       	ldd	r25, Y+6	; 0x06
     438:	af 81       	ldd	r26, Y+7	; 0x07
     43a:	b8 85       	ldd	r27, Y+8	; 0x08
     43c:	04 c0       	rjmp	.+8      	; 0x446 <__ashldi3+0xc0>
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	aa 1f       	adc	r26, r26
     444:	bb 1f       	adc	r27, r27
     446:	2a 95       	dec	r18
     448:	d2 f7       	brpl	.-12     	; 0x43e <__ashldi3+0xb8>
     44a:	48 2b       	or	r20, r24
     44c:	59 2b       	or	r21, r25
     44e:	6a 2b       	or	r22, r26
     450:	7b 2b       	or	r23, r27
     452:	4d 87       	std	Y+13, r20	; 0x0d
     454:	5e 87       	std	Y+14, r21	; 0x0e
     456:	6f 87       	std	Y+15, r22	; 0x0f
     458:	78 8b       	std	Y+16, r23	; 0x10
     45a:	29 85       	ldd	r18, Y+9	; 0x09
     45c:	3a 85       	ldd	r19, Y+10	; 0x0a
     45e:	4b 85       	ldd	r20, Y+11	; 0x0b
     460:	5c 85       	ldd	r21, Y+12	; 0x0c
     462:	6d 85       	ldd	r22, Y+13	; 0x0d
     464:	7e 85       	ldd	r23, Y+14	; 0x0e
     466:	af 85       	ldd	r26, Y+15	; 0x0f
     468:	98 89       	ldd	r25, Y+16	; 0x10
     46a:	8a 2f       	mov	r24, r26
     46c:	60 96       	adiw	r28, 0x10	; 16
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	f8 94       	cli
     472:	de bf       	out	0x3e, r29	; 62
     474:	0f be       	out	0x3f, r0	; 63
     476:	cd bf       	out	0x3d, r28	; 61
     478:	cf 91       	pop	r28
     47a:	df 91       	pop	r29
     47c:	0f 91       	pop	r16
     47e:	ff 90       	pop	r15
     480:	ef 90       	pop	r14
     482:	08 95       	ret

00000484 <__fixunssfsi>:
     484:	ef 92       	push	r14
     486:	ff 92       	push	r15
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	7b 01       	movw	r14, r22
     48e:	8c 01       	movw	r16, r24
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	40 e0       	ldi	r20, 0x00	; 0
     496:	5f e4       	ldi	r21, 0x4F	; 79
     498:	0e 94 03 13 	call	0x2606	; 0x2606 <__gesf2>
     49c:	88 23       	and	r24, r24
     49e:	8c f0       	brlt	.+34     	; 0x4c2 <__fixunssfsi+0x3e>
     4a0:	c8 01       	movw	r24, r16
     4a2:	b7 01       	movw	r22, r14
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	30 e0       	ldi	r19, 0x00	; 0
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	5f e4       	ldi	r21, 0x4F	; 79
     4ac:	0e 94 9f 10 	call	0x213e	; 0x213e <__subsf3>
     4b0:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__fixsfsi>
     4b4:	9b 01       	movw	r18, r22
     4b6:	ac 01       	movw	r20, r24
     4b8:	20 50       	subi	r18, 0x00	; 0
     4ba:	30 40       	sbci	r19, 0x00	; 0
     4bc:	40 40       	sbci	r20, 0x00	; 0
     4be:	50 48       	sbci	r21, 0x80	; 128
     4c0:	06 c0       	rjmp	.+12     	; 0x4ce <__fixunssfsi+0x4a>
     4c2:	c8 01       	movw	r24, r16
     4c4:	b7 01       	movw	r22, r14
     4c6:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__fixsfsi>
     4ca:	9b 01       	movw	r18, r22
     4cc:	ac 01       	movw	r20, r24
     4ce:	b9 01       	movw	r22, r18
     4d0:	ca 01       	movw	r24, r20
     4d2:	1f 91       	pop	r17
     4d4:	0f 91       	pop	r16
     4d6:	ff 90       	pop	r15
     4d8:	ef 90       	pop	r14
     4da:	08 95       	ret

000004dc <__udivdi3>:
     4dc:	ae e5       	ldi	r26, 0x5E	; 94
     4de:	b0 e0       	ldi	r27, 0x00	; 0
     4e0:	e4 e7       	ldi	r30, 0x74	; 116
     4e2:	f2 e0       	ldi	r31, 0x02	; 2
     4e4:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__prologue_saves__>
     4e8:	a8 e0       	ldi	r26, 0x08	; 8
     4ea:	4e 01       	movw	r8, r28
     4ec:	08 94       	sec
     4ee:	81 1c       	adc	r8, r1
     4f0:	91 1c       	adc	r9, r1
     4f2:	f4 01       	movw	r30, r8
     4f4:	6a 2e       	mov	r6, r26
     4f6:	11 92       	st	Z+, r1
     4f8:	6a 94       	dec	r6
     4fa:	e9 f7       	brne	.-6      	; 0x4f6 <__udivdi3+0x1a>
     4fc:	29 83       	std	Y+1, r18	; 0x01
     4fe:	3a 83       	std	Y+2, r19	; 0x02
     500:	4b 83       	std	Y+3, r20	; 0x03
     502:	5c 83       	std	Y+4, r21	; 0x04
     504:	6d 83       	std	Y+5, r22	; 0x05
     506:	7e 83       	std	Y+6, r23	; 0x06
     508:	8f 83       	std	Y+7, r24	; 0x07
     50a:	98 87       	std	Y+8, r25	; 0x08
     50c:	ce 01       	movw	r24, r28
     50e:	09 96       	adiw	r24, 0x09	; 9
     510:	fc 01       	movw	r30, r24
     512:	11 92       	st	Z+, r1
     514:	aa 95       	dec	r26
     516:	e9 f7       	brne	.-6      	; 0x512 <__udivdi3+0x36>
     518:	a9 86       	std	Y+9, r10	; 0x09
     51a:	ba 86       	std	Y+10, r11	; 0x0a
     51c:	cb 86       	std	Y+11, r12	; 0x0b
     51e:	dc 86       	std	Y+12, r13	; 0x0c
     520:	ed 86       	std	Y+13, r14	; 0x0d
     522:	fe 86       	std	Y+14, r15	; 0x0e
     524:	0f 87       	std	Y+15, r16	; 0x0f
     526:	18 8b       	std	Y+16, r17	; 0x10
     528:	29 84       	ldd	r2, Y+9	; 0x09
     52a:	3a 84       	ldd	r3, Y+10	; 0x0a
     52c:	4b 84       	ldd	r4, Y+11	; 0x0b
     52e:	5c 84       	ldd	r5, Y+12	; 0x0c
     530:	ed 84       	ldd	r14, Y+13	; 0x0d
     532:	fe 84       	ldd	r15, Y+14	; 0x0e
     534:	0f 85       	ldd	r16, Y+15	; 0x0f
     536:	18 89       	ldd	r17, Y+16	; 0x10
     538:	69 80       	ldd	r6, Y+1	; 0x01
     53a:	7a 80       	ldd	r7, Y+2	; 0x02
     53c:	8b 80       	ldd	r8, Y+3	; 0x03
     53e:	9c 80       	ldd	r9, Y+4	; 0x04
     540:	6d a6       	std	Y+45, r6	; 0x2d
     542:	7e a6       	std	Y+46, r7	; 0x2e
     544:	8f a6       	std	Y+47, r8	; 0x2f
     546:	98 aa       	std	Y+48, r9	; 0x30
     548:	6d 80       	ldd	r6, Y+5	; 0x05
     54a:	7e 80       	ldd	r7, Y+6	; 0x06
     54c:	8f 80       	ldd	r8, Y+7	; 0x07
     54e:	98 84       	ldd	r9, Y+8	; 0x08
     550:	e1 14       	cp	r14, r1
     552:	f1 04       	cpc	r15, r1
     554:	01 05       	cpc	r16, r1
     556:	11 05       	cpc	r17, r1
     558:	09 f0       	breq	.+2      	; 0x55c <__udivdi3+0x80>
     55a:	b3 c3       	rjmp	.+1894   	; 0xcc2 <__stack+0x463>
     55c:	62 14       	cp	r6, r2
     55e:	73 04       	cpc	r7, r3
     560:	84 04       	cpc	r8, r4
     562:	95 04       	cpc	r9, r5
     564:	08 f0       	brcs	.+2      	; 0x568 <__udivdi3+0x8c>
     566:	3d c1       	rjmp	.+634    	; 0x7e2 <__udivdi3+0x306>
     568:	00 e0       	ldi	r16, 0x00	; 0
     56a:	20 16       	cp	r2, r16
     56c:	00 e0       	ldi	r16, 0x00	; 0
     56e:	30 06       	cpc	r3, r16
     570:	01 e0       	ldi	r16, 0x01	; 1
     572:	40 06       	cpc	r4, r16
     574:	00 e0       	ldi	r16, 0x00	; 0
     576:	50 06       	cpc	r5, r16
     578:	88 f4       	brcc	.+34     	; 0x59c <__udivdi3+0xc0>
     57a:	1f ef       	ldi	r17, 0xFF	; 255
     57c:	21 16       	cp	r2, r17
     57e:	31 04       	cpc	r3, r1
     580:	41 04       	cpc	r4, r1
     582:	51 04       	cpc	r5, r1
     584:	39 f0       	breq	.+14     	; 0x594 <__udivdi3+0xb8>
     586:	30 f0       	brcs	.+12     	; 0x594 <__udivdi3+0xb8>
     588:	48 e0       	ldi	r20, 0x08	; 8
     58a:	e4 2e       	mov	r14, r20
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	18 c0       	rjmp	.+48     	; 0x5c4 <__udivdi3+0xe8>
     594:	ee 24       	eor	r14, r14
     596:	ff 24       	eor	r15, r15
     598:	87 01       	movw	r16, r14
     59a:	14 c0       	rjmp	.+40     	; 0x5c4 <__udivdi3+0xe8>
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	22 16       	cp	r2, r18
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	32 06       	cpc	r3, r18
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	42 06       	cpc	r4, r18
     5a8:	21 e0       	ldi	r18, 0x01	; 1
     5aa:	52 06       	cpc	r5, r18
     5ac:	30 f0       	brcs	.+12     	; 0x5ba <__udivdi3+0xde>
     5ae:	38 e1       	ldi	r19, 0x18	; 24
     5b0:	e3 2e       	mov	r14, r19
     5b2:	f1 2c       	mov	r15, r1
     5b4:	01 2d       	mov	r16, r1
     5b6:	11 2d       	mov	r17, r1
     5b8:	05 c0       	rjmp	.+10     	; 0x5c4 <__udivdi3+0xe8>
     5ba:	20 e1       	ldi	r18, 0x10	; 16
     5bc:	e2 2e       	mov	r14, r18
     5be:	f1 2c       	mov	r15, r1
     5c0:	01 2d       	mov	r16, r1
     5c2:	11 2d       	mov	r17, r1
     5c4:	d2 01       	movw	r26, r4
     5c6:	c1 01       	movw	r24, r2
     5c8:	0e 2c       	mov	r0, r14
     5ca:	04 c0       	rjmp	.+8      	; 0x5d4 <__udivdi3+0xf8>
     5cc:	b6 95       	lsr	r27
     5ce:	a7 95       	ror	r26
     5d0:	97 95       	ror	r25
     5d2:	87 95       	ror	r24
     5d4:	0a 94       	dec	r0
     5d6:	d2 f7       	brpl	.-12     	; 0x5cc <__udivdi3+0xf0>
     5d8:	8f 52       	subi	r24, 0x2F	; 47
     5da:	9f 4f       	sbci	r25, 0xFF	; 255
     5dc:	dc 01       	movw	r26, r24
     5de:	2c 91       	ld	r18, X
     5e0:	80 e2       	ldi	r24, 0x20	; 32
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	a0 e0       	ldi	r26, 0x00	; 0
     5e6:	b0 e0       	ldi	r27, 0x00	; 0
     5e8:	8e 19       	sub	r24, r14
     5ea:	9f 09       	sbc	r25, r15
     5ec:	a0 0b       	sbc	r26, r16
     5ee:	b1 0b       	sbc	r27, r17
     5f0:	7c 01       	movw	r14, r24
     5f2:	8d 01       	movw	r16, r26
     5f4:	e2 1a       	sub	r14, r18
     5f6:	f1 08       	sbc	r15, r1
     5f8:	01 09       	sbc	r16, r1
     5fa:	11 09       	sbc	r17, r1
     5fc:	e1 14       	cp	r14, r1
     5fe:	f1 04       	cpc	r15, r1
     600:	01 05       	cpc	r16, r1
     602:	11 05       	cpc	r17, r1
     604:	a1 f1       	breq	.+104    	; 0x66e <__udivdi3+0x192>
     606:	0e 2c       	mov	r0, r14
     608:	04 c0       	rjmp	.+8      	; 0x612 <__udivdi3+0x136>
     60a:	22 0c       	add	r2, r2
     60c:	33 1c       	adc	r3, r3
     60e:	44 1c       	adc	r4, r4
     610:	55 1c       	adc	r5, r5
     612:	0a 94       	dec	r0
     614:	d2 f7       	brpl	.-12     	; 0x60a <__udivdi3+0x12e>
     616:	a4 01       	movw	r20, r8
     618:	93 01       	movw	r18, r6
     61a:	0e 2c       	mov	r0, r14
     61c:	04 c0       	rjmp	.+8      	; 0x626 <__udivdi3+0x14a>
     61e:	22 0f       	add	r18, r18
     620:	33 1f       	adc	r19, r19
     622:	44 1f       	adc	r20, r20
     624:	55 1f       	adc	r21, r21
     626:	0a 94       	dec	r0
     628:	d2 f7       	brpl	.-12     	; 0x61e <__udivdi3+0x142>
     62a:	80 e2       	ldi	r24, 0x20	; 32
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	8e 19       	sub	r24, r14
     630:	9f 09       	sbc	r25, r15
     632:	6d a4       	ldd	r6, Y+45	; 0x2d
     634:	7e a4       	ldd	r7, Y+46	; 0x2e
     636:	8f a4       	ldd	r8, Y+47	; 0x2f
     638:	98 a8       	ldd	r9, Y+48	; 0x30
     63a:	04 c0       	rjmp	.+8      	; 0x644 <__udivdi3+0x168>
     63c:	96 94       	lsr	r9
     63e:	87 94       	ror	r8
     640:	77 94       	ror	r7
     642:	67 94       	ror	r6
     644:	8a 95       	dec	r24
     646:	d2 f7       	brpl	.-12     	; 0x63c <__udivdi3+0x160>
     648:	62 2a       	or	r6, r18
     64a:	73 2a       	or	r7, r19
     64c:	84 2a       	or	r8, r20
     64e:	95 2a       	or	r9, r21
     650:	ad a4       	ldd	r10, Y+45	; 0x2d
     652:	be a4       	ldd	r11, Y+46	; 0x2e
     654:	cf a4       	ldd	r12, Y+47	; 0x2f
     656:	d8 a8       	ldd	r13, Y+48	; 0x30
     658:	04 c0       	rjmp	.+8      	; 0x662 <__udivdi3+0x186>
     65a:	aa 0c       	add	r10, r10
     65c:	bb 1c       	adc	r11, r11
     65e:	cc 1c       	adc	r12, r12
     660:	dd 1c       	adc	r13, r13
     662:	ea 94       	dec	r14
     664:	d2 f7       	brpl	.-12     	; 0x65a <__udivdi3+0x17e>
     666:	ad a6       	std	Y+45, r10	; 0x2d
     668:	be a6       	std	Y+46, r11	; 0x2e
     66a:	cf a6       	std	Y+47, r12	; 0x2f
     66c:	d8 aa       	std	Y+48, r13	; 0x30
     66e:	62 01       	movw	r12, r4
     670:	ee 24       	eor	r14, r14
     672:	ff 24       	eor	r15, r15
     674:	cd aa       	std	Y+53, r12	; 0x35
     676:	de aa       	std	Y+54, r13	; 0x36
     678:	ef aa       	std	Y+55, r14	; 0x37
     67a:	f8 ae       	std	Y+56, r15	; 0x38
     67c:	92 01       	movw	r18, r4
     67e:	81 01       	movw	r16, r2
     680:	20 70       	andi	r18, 0x00	; 0
     682:	30 70       	andi	r19, 0x00	; 0
     684:	09 af       	std	Y+57, r16	; 0x39
     686:	1a af       	std	Y+58, r17	; 0x3a
     688:	2b af       	std	Y+59, r18	; 0x3b
     68a:	3c af       	std	Y+60, r19	; 0x3c
     68c:	c4 01       	movw	r24, r8
     68e:	b3 01       	movw	r22, r6
     690:	a7 01       	movw	r20, r14
     692:	96 01       	movw	r18, r12
     694:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     698:	7b 01       	movw	r14, r22
     69a:	8c 01       	movw	r16, r24
     69c:	c4 01       	movw	r24, r8
     69e:	b3 01       	movw	r22, r6
     6a0:	2d a9       	ldd	r18, Y+53	; 0x35
     6a2:	3e a9       	ldd	r19, Y+54	; 0x36
     6a4:	4f a9       	ldd	r20, Y+55	; 0x37
     6a6:	58 ad       	ldd	r21, Y+56	; 0x38
     6a8:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     6ac:	c9 01       	movw	r24, r18
     6ae:	da 01       	movw	r26, r20
     6b0:	3c 01       	movw	r6, r24
     6b2:	4d 01       	movw	r8, r26
     6b4:	c4 01       	movw	r24, r8
     6b6:	b3 01       	movw	r22, r6
     6b8:	29 ad       	ldd	r18, Y+57	; 0x39
     6ba:	3a ad       	ldd	r19, Y+58	; 0x3a
     6bc:	4b ad       	ldd	r20, Y+59	; 0x3b
     6be:	5c ad       	ldd	r21, Y+60	; 0x3c
     6c0:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
     6c4:	9b 01       	movw	r18, r22
     6c6:	ac 01       	movw	r20, r24
     6c8:	87 01       	movw	r16, r14
     6ca:	ff 24       	eor	r15, r15
     6cc:	ee 24       	eor	r14, r14
     6ce:	ad a4       	ldd	r10, Y+45	; 0x2d
     6d0:	be a4       	ldd	r11, Y+46	; 0x2e
     6d2:	cf a4       	ldd	r12, Y+47	; 0x2f
     6d4:	d8 a8       	ldd	r13, Y+48	; 0x30
     6d6:	c6 01       	movw	r24, r12
     6d8:	aa 27       	eor	r26, r26
     6da:	bb 27       	eor	r27, r27
     6dc:	57 01       	movw	r10, r14
     6de:	68 01       	movw	r12, r16
     6e0:	a8 2a       	or	r10, r24
     6e2:	b9 2a       	or	r11, r25
     6e4:	ca 2a       	or	r12, r26
     6e6:	db 2a       	or	r13, r27
     6e8:	a2 16       	cp	r10, r18
     6ea:	b3 06       	cpc	r11, r19
     6ec:	c4 06       	cpc	r12, r20
     6ee:	d5 06       	cpc	r13, r21
     6f0:	e0 f4       	brcc	.+56     	; 0x72a <__udivdi3+0x24e>
     6f2:	08 94       	sec
     6f4:	61 08       	sbc	r6, r1
     6f6:	71 08       	sbc	r7, r1
     6f8:	81 08       	sbc	r8, r1
     6fa:	91 08       	sbc	r9, r1
     6fc:	a2 0c       	add	r10, r2
     6fe:	b3 1c       	adc	r11, r3
     700:	c4 1c       	adc	r12, r4
     702:	d5 1c       	adc	r13, r5
     704:	a2 14       	cp	r10, r2
     706:	b3 04       	cpc	r11, r3
     708:	c4 04       	cpc	r12, r4
     70a:	d5 04       	cpc	r13, r5
     70c:	70 f0       	brcs	.+28     	; 0x72a <__udivdi3+0x24e>
     70e:	a2 16       	cp	r10, r18
     710:	b3 06       	cpc	r11, r19
     712:	c4 06       	cpc	r12, r20
     714:	d5 06       	cpc	r13, r21
     716:	48 f4       	brcc	.+18     	; 0x72a <__udivdi3+0x24e>
     718:	08 94       	sec
     71a:	61 08       	sbc	r6, r1
     71c:	71 08       	sbc	r7, r1
     71e:	81 08       	sbc	r8, r1
     720:	91 08       	sbc	r9, r1
     722:	a2 0c       	add	r10, r2
     724:	b3 1c       	adc	r11, r3
     726:	c4 1c       	adc	r12, r4
     728:	d5 1c       	adc	r13, r5
     72a:	a2 1a       	sub	r10, r18
     72c:	b3 0a       	sbc	r11, r19
     72e:	c4 0a       	sbc	r12, r20
     730:	d5 0a       	sbc	r13, r21
     732:	c6 01       	movw	r24, r12
     734:	b5 01       	movw	r22, r10
     736:	2d a9       	ldd	r18, Y+53	; 0x35
     738:	3e a9       	ldd	r19, Y+54	; 0x36
     73a:	4f a9       	ldd	r20, Y+55	; 0x37
     73c:	58 ad       	ldd	r21, Y+56	; 0x38
     73e:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     742:	7b 01       	movw	r14, r22
     744:	8c 01       	movw	r16, r24
     746:	c6 01       	movw	r24, r12
     748:	b5 01       	movw	r22, r10
     74a:	2d a9       	ldd	r18, Y+53	; 0x35
     74c:	3e a9       	ldd	r19, Y+54	; 0x36
     74e:	4f a9       	ldd	r20, Y+55	; 0x37
     750:	58 ad       	ldd	r21, Y+56	; 0x38
     752:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     756:	c9 01       	movw	r24, r18
     758:	da 01       	movw	r26, r20
     75a:	5c 01       	movw	r10, r24
     75c:	6d 01       	movw	r12, r26
     75e:	c6 01       	movw	r24, r12
     760:	b5 01       	movw	r22, r10
     762:	29 ad       	ldd	r18, Y+57	; 0x39
     764:	3a ad       	ldd	r19, Y+58	; 0x3a
     766:	4b ad       	ldd	r20, Y+59	; 0x3b
     768:	5c ad       	ldd	r21, Y+60	; 0x3c
     76a:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
     76e:	9b 01       	movw	r18, r22
     770:	ac 01       	movw	r20, r24
     772:	87 01       	movw	r16, r14
     774:	ff 24       	eor	r15, r15
     776:	ee 24       	eor	r14, r14
     778:	8d a5       	ldd	r24, Y+45	; 0x2d
     77a:	9e a5       	ldd	r25, Y+46	; 0x2e
     77c:	af a5       	ldd	r26, Y+47	; 0x2f
     77e:	b8 a9       	ldd	r27, Y+48	; 0x30
     780:	a0 70       	andi	r26, 0x00	; 0
     782:	b0 70       	andi	r27, 0x00	; 0
     784:	e8 2a       	or	r14, r24
     786:	f9 2a       	or	r15, r25
     788:	0a 2b       	or	r16, r26
     78a:	1b 2b       	or	r17, r27
     78c:	e2 16       	cp	r14, r18
     78e:	f3 06       	cpc	r15, r19
     790:	04 07       	cpc	r16, r20
     792:	15 07       	cpc	r17, r21
     794:	c0 f4       	brcc	.+48     	; 0x7c6 <__udivdi3+0x2ea>
     796:	08 94       	sec
     798:	a1 08       	sbc	r10, r1
     79a:	b1 08       	sbc	r11, r1
     79c:	c1 08       	sbc	r12, r1
     79e:	d1 08       	sbc	r13, r1
     7a0:	e2 0c       	add	r14, r2
     7a2:	f3 1c       	adc	r15, r3
     7a4:	04 1d       	adc	r16, r4
     7a6:	15 1d       	adc	r17, r5
     7a8:	e2 14       	cp	r14, r2
     7aa:	f3 04       	cpc	r15, r3
     7ac:	04 05       	cpc	r16, r4
     7ae:	15 05       	cpc	r17, r5
     7b0:	50 f0       	brcs	.+20     	; 0x7c6 <__udivdi3+0x2ea>
     7b2:	e2 16       	cp	r14, r18
     7b4:	f3 06       	cpc	r15, r19
     7b6:	04 07       	cpc	r16, r20
     7b8:	15 07       	cpc	r17, r21
     7ba:	28 f4       	brcc	.+10     	; 0x7c6 <__udivdi3+0x2ea>
     7bc:	08 94       	sec
     7be:	a1 08       	sbc	r10, r1
     7c0:	b1 08       	sbc	r11, r1
     7c2:	c1 08       	sbc	r12, r1
     7c4:	d1 08       	sbc	r13, r1
     7c6:	d3 01       	movw	r26, r6
     7c8:	99 27       	eor	r25, r25
     7ca:	88 27       	eor	r24, r24
     7cc:	86 01       	movw	r16, r12
     7ce:	75 01       	movw	r14, r10
     7d0:	e8 2a       	or	r14, r24
     7d2:	f9 2a       	or	r15, r25
     7d4:	0a 2b       	or	r16, r26
     7d6:	1b 2b       	or	r17, r27
     7d8:	e9 aa       	std	Y+49, r14	; 0x31
     7da:	fa aa       	std	Y+50, r15	; 0x32
     7dc:	0b ab       	std	Y+51, r16	; 0x33
     7de:	1c ab       	std	Y+52, r17	; 0x34
     7e0:	cf c4       	rjmp	.+2462   	; 0x1180 <__stack+0x921>
     7e2:	21 14       	cp	r2, r1
     7e4:	31 04       	cpc	r3, r1
     7e6:	41 04       	cpc	r4, r1
     7e8:	51 04       	cpc	r5, r1
     7ea:	71 f4       	brne	.+28     	; 0x808 <__udivdi3+0x32c>
     7ec:	61 e0       	ldi	r22, 0x01	; 1
     7ee:	70 e0       	ldi	r23, 0x00	; 0
     7f0:	80 e0       	ldi	r24, 0x00	; 0
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 e0       	ldi	r20, 0x00	; 0
     7fa:	50 e0       	ldi	r21, 0x00	; 0
     7fc:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     800:	c9 01       	movw	r24, r18
     802:	da 01       	movw	r26, r20
     804:	1c 01       	movw	r2, r24
     806:	2d 01       	movw	r4, r26
     808:	00 e0       	ldi	r16, 0x00	; 0
     80a:	20 16       	cp	r2, r16
     80c:	00 e0       	ldi	r16, 0x00	; 0
     80e:	30 06       	cpc	r3, r16
     810:	01 e0       	ldi	r16, 0x01	; 1
     812:	40 06       	cpc	r4, r16
     814:	00 e0       	ldi	r16, 0x00	; 0
     816:	50 06       	cpc	r5, r16
     818:	88 f4       	brcc	.+34     	; 0x83c <__udivdi3+0x360>
     81a:	1f ef       	ldi	r17, 0xFF	; 255
     81c:	21 16       	cp	r2, r17
     81e:	31 04       	cpc	r3, r1
     820:	41 04       	cpc	r4, r1
     822:	51 04       	cpc	r5, r1
     824:	31 f0       	breq	.+12     	; 0x832 <__udivdi3+0x356>
     826:	28 f0       	brcs	.+10     	; 0x832 <__udivdi3+0x356>
     828:	48 e0       	ldi	r20, 0x08	; 8
     82a:	50 e0       	ldi	r21, 0x00	; 0
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	17 c0       	rjmp	.+46     	; 0x860 <__stack+0x1>
     832:	40 e0       	ldi	r20, 0x00	; 0
     834:	50 e0       	ldi	r21, 0x00	; 0
     836:	60 e0       	ldi	r22, 0x00	; 0
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	12 c0       	rjmp	.+36     	; 0x860 <__stack+0x1>
     83c:	20 e0       	ldi	r18, 0x00	; 0
     83e:	22 16       	cp	r2, r18
     840:	20 e0       	ldi	r18, 0x00	; 0
     842:	32 06       	cpc	r3, r18
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	42 06       	cpc	r4, r18
     848:	21 e0       	ldi	r18, 0x01	; 1
     84a:	52 06       	cpc	r5, r18
     84c:	28 f0       	brcs	.+10     	; 0x858 <__udivdi3+0x37c>
     84e:	48 e1       	ldi	r20, 0x18	; 24
     850:	50 e0       	ldi	r21, 0x00	; 0
     852:	60 e0       	ldi	r22, 0x00	; 0
     854:	70 e0       	ldi	r23, 0x00	; 0
     856:	04 c0       	rjmp	.+8      	; 0x860 <__stack+0x1>
     858:	40 e1       	ldi	r20, 0x10	; 16
     85a:	50 e0       	ldi	r21, 0x00	; 0
     85c:	60 e0       	ldi	r22, 0x00	; 0
     85e:	70 e0       	ldi	r23, 0x00	; 0
     860:	d2 01       	movw	r26, r4
     862:	c1 01       	movw	r24, r2
     864:	04 2e       	mov	r0, r20
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	b6 95       	lsr	r27
     86a:	a7 95       	ror	r26
     86c:	97 95       	ror	r25
     86e:	87 95       	ror	r24
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	8f 52       	subi	r24, 0x2F	; 47
     876:	9f 4f       	sbci	r25, 0xFF	; 255
     878:	dc 01       	movw	r26, r24
     87a:	2c 91       	ld	r18, X
     87c:	e0 e2       	ldi	r30, 0x20	; 32
     87e:	ee 2e       	mov	r14, r30
     880:	f1 2c       	mov	r15, r1
     882:	01 2d       	mov	r16, r1
     884:	11 2d       	mov	r17, r1
     886:	d8 01       	movw	r26, r16
     888:	c7 01       	movw	r24, r14
     88a:	84 1b       	sub	r24, r20
     88c:	95 0b       	sbc	r25, r21
     88e:	a6 0b       	sbc	r26, r22
     890:	b7 0b       	sbc	r27, r23
     892:	82 1b       	sub	r24, r18
     894:	91 09       	sbc	r25, r1
     896:	a1 09       	sbc	r26, r1
     898:	b1 09       	sbc	r27, r1
     89a:	00 97       	sbiw	r24, 0x00	; 0
     89c:	a1 05       	cpc	r26, r1
     89e:	b1 05       	cpc	r27, r1
     8a0:	61 f4       	brne	.+24     	; 0x8ba <__stack+0x5b>
     8a2:	64 01       	movw	r12, r8
     8a4:	53 01       	movw	r10, r6
     8a6:	a2 18       	sub	r10, r2
     8a8:	b3 08       	sbc	r11, r3
     8aa:	c4 08       	sbc	r12, r4
     8ac:	d5 08       	sbc	r13, r5
     8ae:	31 e0       	ldi	r19, 0x01	; 1
     8b0:	63 2e       	mov	r6, r19
     8b2:	71 2c       	mov	r7, r1
     8b4:	81 2c       	mov	r8, r1
     8b6:	91 2c       	mov	r9, r1
     8b8:	1e c1       	rjmp	.+572    	; 0xaf6 <__stack+0x297>
     8ba:	6f 96       	adiw	r28, 0x1f	; 31
     8bc:	8f af       	std	Y+63, r24	; 0x3f
     8be:	6f 97       	sbiw	r28, 0x1f	; 31
     8c0:	08 2e       	mov	r0, r24
     8c2:	04 c0       	rjmp	.+8      	; 0x8cc <__stack+0x6d>
     8c4:	22 0c       	add	r2, r2
     8c6:	33 1c       	adc	r3, r3
     8c8:	44 1c       	adc	r4, r4
     8ca:	55 1c       	adc	r5, r5
     8cc:	0a 94       	dec	r0
     8ce:	d2 f7       	brpl	.-12     	; 0x8c4 <__stack+0x65>
     8d0:	ee 2d       	mov	r30, r14
     8d2:	e8 1b       	sub	r30, r24
     8d4:	64 01       	movw	r12, r8
     8d6:	53 01       	movw	r10, r6
     8d8:	0e 2e       	mov	r0, r30
     8da:	04 c0       	rjmp	.+8      	; 0x8e4 <__stack+0x85>
     8dc:	d6 94       	lsr	r13
     8de:	c7 94       	ror	r12
     8e0:	b7 94       	ror	r11
     8e2:	a7 94       	ror	r10
     8e4:	0a 94       	dec	r0
     8e6:	d2 f7       	brpl	.-12     	; 0x8dc <__stack+0x7d>
     8e8:	a4 01       	movw	r20, r8
     8ea:	93 01       	movw	r18, r6
     8ec:	6f 96       	adiw	r28, 0x1f	; 31
     8ee:	0f ac       	ldd	r0, Y+63	; 0x3f
     8f0:	6f 97       	sbiw	r28, 0x1f	; 31
     8f2:	04 c0       	rjmp	.+8      	; 0x8fc <__stack+0x9d>
     8f4:	22 0f       	add	r18, r18
     8f6:	33 1f       	adc	r19, r19
     8f8:	44 1f       	adc	r20, r20
     8fa:	55 1f       	adc	r21, r21
     8fc:	0a 94       	dec	r0
     8fe:	d2 f7       	brpl	.-12     	; 0x8f4 <__stack+0x95>
     900:	6d a4       	ldd	r6, Y+45	; 0x2d
     902:	7e a4       	ldd	r7, Y+46	; 0x2e
     904:	8f a4       	ldd	r8, Y+47	; 0x2f
     906:	98 a8       	ldd	r9, Y+48	; 0x30
     908:	0e 2e       	mov	r0, r30
     90a:	04 c0       	rjmp	.+8      	; 0x914 <__stack+0xb5>
     90c:	96 94       	lsr	r9
     90e:	87 94       	ror	r8
     910:	77 94       	ror	r7
     912:	67 94       	ror	r6
     914:	0a 94       	dec	r0
     916:	d2 f7       	brpl	.-12     	; 0x90c <__stack+0xad>
     918:	84 01       	movw	r16, r8
     91a:	73 01       	movw	r14, r6
     91c:	e2 2a       	or	r14, r18
     91e:	f3 2a       	or	r15, r19
     920:	04 2b       	or	r16, r20
     922:	15 2b       	or	r17, r21
     924:	e9 a6       	std	Y+41, r14	; 0x29
     926:	fa a6       	std	Y+42, r15	; 0x2a
     928:	0b a7       	std	Y+43, r16	; 0x2b
     92a:	1c a7       	std	Y+44, r17	; 0x2c
     92c:	32 01       	movw	r6, r4
     92e:	88 24       	eor	r8, r8
     930:	99 24       	eor	r9, r9
     932:	92 01       	movw	r18, r4
     934:	81 01       	movw	r16, r2
     936:	20 70       	andi	r18, 0x00	; 0
     938:	30 70       	andi	r19, 0x00	; 0
     93a:	21 96       	adiw	r28, 0x01	; 1
     93c:	0c af       	std	Y+60, r16	; 0x3c
     93e:	1d af       	std	Y+61, r17	; 0x3d
     940:	2e af       	std	Y+62, r18	; 0x3e
     942:	3f af       	std	Y+63, r19	; 0x3f
     944:	21 97       	sbiw	r28, 0x01	; 1
     946:	c6 01       	movw	r24, r12
     948:	b5 01       	movw	r22, r10
     94a:	a4 01       	movw	r20, r8
     94c:	93 01       	movw	r18, r6
     94e:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     952:	7b 01       	movw	r14, r22
     954:	8c 01       	movw	r16, r24
     956:	c6 01       	movw	r24, r12
     958:	b5 01       	movw	r22, r10
     95a:	a4 01       	movw	r20, r8
     95c:	93 01       	movw	r18, r6
     95e:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     962:	c9 01       	movw	r24, r18
     964:	da 01       	movw	r26, r20
     966:	25 96       	adiw	r28, 0x05	; 5
     968:	8c af       	std	Y+60, r24	; 0x3c
     96a:	9d af       	std	Y+61, r25	; 0x3d
     96c:	ae af       	std	Y+62, r26	; 0x3e
     96e:	bf af       	std	Y+63, r27	; 0x3f
     970:	25 97       	sbiw	r28, 0x05	; 5
     972:	bc 01       	movw	r22, r24
     974:	cd 01       	movw	r24, r26
     976:	21 96       	adiw	r28, 0x01	; 1
     978:	2c ad       	ldd	r18, Y+60	; 0x3c
     97a:	3d ad       	ldd	r19, Y+61	; 0x3d
     97c:	4e ad       	ldd	r20, Y+62	; 0x3e
     97e:	5f ad       	ldd	r21, Y+63	; 0x3f
     980:	21 97       	sbiw	r28, 0x01	; 1
     982:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
     986:	9b 01       	movw	r18, r22
     988:	ac 01       	movw	r20, r24
     98a:	87 01       	movw	r16, r14
     98c:	ff 24       	eor	r15, r15
     98e:	ee 24       	eor	r14, r14
     990:	a9 a4       	ldd	r10, Y+41	; 0x29
     992:	ba a4       	ldd	r11, Y+42	; 0x2a
     994:	cb a4       	ldd	r12, Y+43	; 0x2b
     996:	dc a4       	ldd	r13, Y+44	; 0x2c
     998:	c6 01       	movw	r24, r12
     99a:	aa 27       	eor	r26, r26
     99c:	bb 27       	eor	r27, r27
     99e:	5c 01       	movw	r10, r24
     9a0:	6d 01       	movw	r12, r26
     9a2:	ae 28       	or	r10, r14
     9a4:	bf 28       	or	r11, r15
     9a6:	c0 2a       	or	r12, r16
     9a8:	d1 2a       	or	r13, r17
     9aa:	a2 16       	cp	r10, r18
     9ac:	b3 06       	cpc	r11, r19
     9ae:	c4 06       	cpc	r12, r20
     9b0:	d5 06       	cpc	r13, r21
     9b2:	60 f5       	brcc	.+88     	; 0xa0c <__stack+0x1ad>
     9b4:	25 96       	adiw	r28, 0x05	; 5
     9b6:	6c ad       	ldd	r22, Y+60	; 0x3c
     9b8:	7d ad       	ldd	r23, Y+61	; 0x3d
     9ba:	8e ad       	ldd	r24, Y+62	; 0x3e
     9bc:	9f ad       	ldd	r25, Y+63	; 0x3f
     9be:	25 97       	sbiw	r28, 0x05	; 5
     9c0:	61 50       	subi	r22, 0x01	; 1
     9c2:	70 40       	sbci	r23, 0x00	; 0
     9c4:	80 40       	sbci	r24, 0x00	; 0
     9c6:	90 40       	sbci	r25, 0x00	; 0
     9c8:	25 96       	adiw	r28, 0x05	; 5
     9ca:	6c af       	std	Y+60, r22	; 0x3c
     9cc:	7d af       	std	Y+61, r23	; 0x3d
     9ce:	8e af       	std	Y+62, r24	; 0x3e
     9d0:	9f af       	std	Y+63, r25	; 0x3f
     9d2:	25 97       	sbiw	r28, 0x05	; 5
     9d4:	a2 0c       	add	r10, r2
     9d6:	b3 1c       	adc	r11, r3
     9d8:	c4 1c       	adc	r12, r4
     9da:	d5 1c       	adc	r13, r5
     9dc:	a2 14       	cp	r10, r2
     9de:	b3 04       	cpc	r11, r3
     9e0:	c4 04       	cpc	r12, r4
     9e2:	d5 04       	cpc	r13, r5
     9e4:	98 f0       	brcs	.+38     	; 0xa0c <__stack+0x1ad>
     9e6:	a2 16       	cp	r10, r18
     9e8:	b3 06       	cpc	r11, r19
     9ea:	c4 06       	cpc	r12, r20
     9ec:	d5 06       	cpc	r13, r21
     9ee:	70 f4       	brcc	.+28     	; 0xa0c <__stack+0x1ad>
     9f0:	61 50       	subi	r22, 0x01	; 1
     9f2:	70 40       	sbci	r23, 0x00	; 0
     9f4:	80 40       	sbci	r24, 0x00	; 0
     9f6:	90 40       	sbci	r25, 0x00	; 0
     9f8:	25 96       	adiw	r28, 0x05	; 5
     9fa:	6c af       	std	Y+60, r22	; 0x3c
     9fc:	7d af       	std	Y+61, r23	; 0x3d
     9fe:	8e af       	std	Y+62, r24	; 0x3e
     a00:	9f af       	std	Y+63, r25	; 0x3f
     a02:	25 97       	sbiw	r28, 0x05	; 5
     a04:	a2 0c       	add	r10, r2
     a06:	b3 1c       	adc	r11, r3
     a08:	c4 1c       	adc	r12, r4
     a0a:	d5 1c       	adc	r13, r5
     a0c:	a2 1a       	sub	r10, r18
     a0e:	b3 0a       	sbc	r11, r19
     a10:	c4 0a       	sbc	r12, r20
     a12:	d5 0a       	sbc	r13, r21
     a14:	c6 01       	movw	r24, r12
     a16:	b5 01       	movw	r22, r10
     a18:	a4 01       	movw	r20, r8
     a1a:	93 01       	movw	r18, r6
     a1c:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     a20:	7b 01       	movw	r14, r22
     a22:	8c 01       	movw	r16, r24
     a24:	c6 01       	movw	r24, r12
     a26:	b5 01       	movw	r22, r10
     a28:	a4 01       	movw	r20, r8
     a2a:	93 01       	movw	r18, r6
     a2c:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     a30:	c9 01       	movw	r24, r18
     a32:	da 01       	movw	r26, r20
     a34:	3c 01       	movw	r6, r24
     a36:	4d 01       	movw	r8, r26
     a38:	c4 01       	movw	r24, r8
     a3a:	b3 01       	movw	r22, r6
     a3c:	21 96       	adiw	r28, 0x01	; 1
     a3e:	2c ad       	ldd	r18, Y+60	; 0x3c
     a40:	3d ad       	ldd	r19, Y+61	; 0x3d
     a42:	4e ad       	ldd	r20, Y+62	; 0x3e
     a44:	5f ad       	ldd	r21, Y+63	; 0x3f
     a46:	21 97       	sbiw	r28, 0x01	; 1
     a48:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	87 01       	movw	r16, r14
     a52:	ff 24       	eor	r15, r15
     a54:	ee 24       	eor	r14, r14
     a56:	89 a5       	ldd	r24, Y+41	; 0x29
     a58:	9a a5       	ldd	r25, Y+42	; 0x2a
     a5a:	ab a5       	ldd	r26, Y+43	; 0x2b
     a5c:	bc a5       	ldd	r27, Y+44	; 0x2c
     a5e:	a0 70       	andi	r26, 0x00	; 0
     a60:	b0 70       	andi	r27, 0x00	; 0
     a62:	57 01       	movw	r10, r14
     a64:	68 01       	movw	r12, r16
     a66:	a8 2a       	or	r10, r24
     a68:	b9 2a       	or	r11, r25
     a6a:	ca 2a       	or	r12, r26
     a6c:	db 2a       	or	r13, r27
     a6e:	a2 16       	cp	r10, r18
     a70:	b3 06       	cpc	r11, r19
     a72:	c4 06       	cpc	r12, r20
     a74:	d5 06       	cpc	r13, r21
     a76:	e0 f4       	brcc	.+56     	; 0xab0 <__stack+0x251>
     a78:	08 94       	sec
     a7a:	61 08       	sbc	r6, r1
     a7c:	71 08       	sbc	r7, r1
     a7e:	81 08       	sbc	r8, r1
     a80:	91 08       	sbc	r9, r1
     a82:	a2 0c       	add	r10, r2
     a84:	b3 1c       	adc	r11, r3
     a86:	c4 1c       	adc	r12, r4
     a88:	d5 1c       	adc	r13, r5
     a8a:	a2 14       	cp	r10, r2
     a8c:	b3 04       	cpc	r11, r3
     a8e:	c4 04       	cpc	r12, r4
     a90:	d5 04       	cpc	r13, r5
     a92:	70 f0       	brcs	.+28     	; 0xab0 <__stack+0x251>
     a94:	a2 16       	cp	r10, r18
     a96:	b3 06       	cpc	r11, r19
     a98:	c4 06       	cpc	r12, r20
     a9a:	d5 06       	cpc	r13, r21
     a9c:	48 f4       	brcc	.+18     	; 0xab0 <__stack+0x251>
     a9e:	08 94       	sec
     aa0:	61 08       	sbc	r6, r1
     aa2:	71 08       	sbc	r7, r1
     aa4:	81 08       	sbc	r8, r1
     aa6:	91 08       	sbc	r9, r1
     aa8:	a2 0c       	add	r10, r2
     aaa:	b3 1c       	adc	r11, r3
     aac:	c4 1c       	adc	r12, r4
     aae:	d5 1c       	adc	r13, r5
     ab0:	8d a5       	ldd	r24, Y+45	; 0x2d
     ab2:	9e a5       	ldd	r25, Y+46	; 0x2e
     ab4:	af a5       	ldd	r26, Y+47	; 0x2f
     ab6:	b8 a9       	ldd	r27, Y+48	; 0x30
     ab8:	6f 96       	adiw	r28, 0x1f	; 31
     aba:	0f ac       	ldd	r0, Y+63	; 0x3f
     abc:	6f 97       	sbiw	r28, 0x1f	; 31
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__stack+0x269>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	0a 94       	dec	r0
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__stack+0x261>
     acc:	8d a7       	std	Y+45, r24	; 0x2d
     ace:	9e a7       	std	Y+46, r25	; 0x2e
     ad0:	af a7       	std	Y+47, r26	; 0x2f
     ad2:	b8 ab       	std	Y+48, r27	; 0x30
     ad4:	a2 1a       	sub	r10, r18
     ad6:	b3 0a       	sbc	r11, r19
     ad8:	c4 0a       	sbc	r12, r20
     ada:	d5 0a       	sbc	r13, r21
     adc:	25 96       	adiw	r28, 0x05	; 5
     ade:	ec ac       	ldd	r14, Y+60	; 0x3c
     ae0:	fd ac       	ldd	r15, Y+61	; 0x3d
     ae2:	0e ad       	ldd	r16, Y+62	; 0x3e
     ae4:	1f ad       	ldd	r17, Y+63	; 0x3f
     ae6:	25 97       	sbiw	r28, 0x05	; 5
     ae8:	d7 01       	movw	r26, r14
     aea:	99 27       	eor	r25, r25
     aec:	88 27       	eor	r24, r24
     aee:	68 2a       	or	r6, r24
     af0:	79 2a       	or	r7, r25
     af2:	8a 2a       	or	r8, r26
     af4:	9b 2a       	or	r9, r27
     af6:	82 01       	movw	r16, r4
     af8:	22 27       	eor	r18, r18
     afa:	33 27       	eor	r19, r19
     afc:	29 96       	adiw	r28, 0x09	; 9
     afe:	0c af       	std	Y+60, r16	; 0x3c
     b00:	1d af       	std	Y+61, r17	; 0x3d
     b02:	2e af       	std	Y+62, r18	; 0x3e
     b04:	3f af       	std	Y+63, r19	; 0x3f
     b06:	29 97       	sbiw	r28, 0x09	; 9
     b08:	a2 01       	movw	r20, r4
     b0a:	91 01       	movw	r18, r2
     b0c:	40 70       	andi	r20, 0x00	; 0
     b0e:	50 70       	andi	r21, 0x00	; 0
     b10:	2d 96       	adiw	r28, 0x0d	; 13
     b12:	2c af       	std	Y+60, r18	; 0x3c
     b14:	3d af       	std	Y+61, r19	; 0x3d
     b16:	4e af       	std	Y+62, r20	; 0x3e
     b18:	5f af       	std	Y+63, r21	; 0x3f
     b1a:	2d 97       	sbiw	r28, 0x0d	; 13
     b1c:	c6 01       	movw	r24, r12
     b1e:	b5 01       	movw	r22, r10
     b20:	29 96       	adiw	r28, 0x09	; 9
     b22:	2c ad       	ldd	r18, Y+60	; 0x3c
     b24:	3d ad       	ldd	r19, Y+61	; 0x3d
     b26:	4e ad       	ldd	r20, Y+62	; 0x3e
     b28:	5f ad       	ldd	r21, Y+63	; 0x3f
     b2a:	29 97       	sbiw	r28, 0x09	; 9
     b2c:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     b30:	7b 01       	movw	r14, r22
     b32:	8c 01       	movw	r16, r24
     b34:	c6 01       	movw	r24, r12
     b36:	b5 01       	movw	r22, r10
     b38:	29 96       	adiw	r28, 0x09	; 9
     b3a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b3c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b3e:	4e ad       	ldd	r20, Y+62	; 0x3e
     b40:	5f ad       	ldd	r21, Y+63	; 0x3f
     b42:	29 97       	sbiw	r28, 0x09	; 9
     b44:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     b48:	c9 01       	movw	r24, r18
     b4a:	da 01       	movw	r26, r20
     b4c:	61 96       	adiw	r28, 0x11	; 17
     b4e:	8c af       	std	Y+60, r24	; 0x3c
     b50:	9d af       	std	Y+61, r25	; 0x3d
     b52:	ae af       	std	Y+62, r26	; 0x3e
     b54:	bf af       	std	Y+63, r27	; 0x3f
     b56:	61 97       	sbiw	r28, 0x11	; 17
     b58:	bc 01       	movw	r22, r24
     b5a:	cd 01       	movw	r24, r26
     b5c:	2d 96       	adiw	r28, 0x0d	; 13
     b5e:	2c ad       	ldd	r18, Y+60	; 0x3c
     b60:	3d ad       	ldd	r19, Y+61	; 0x3d
     b62:	4e ad       	ldd	r20, Y+62	; 0x3e
     b64:	5f ad       	ldd	r21, Y+63	; 0x3f
     b66:	2d 97       	sbiw	r28, 0x0d	; 13
     b68:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
     b6c:	9b 01       	movw	r18, r22
     b6e:	ac 01       	movw	r20, r24
     b70:	87 01       	movw	r16, r14
     b72:	ff 24       	eor	r15, r15
     b74:	ee 24       	eor	r14, r14
     b76:	ad a4       	ldd	r10, Y+45	; 0x2d
     b78:	be a4       	ldd	r11, Y+46	; 0x2e
     b7a:	cf a4       	ldd	r12, Y+47	; 0x2f
     b7c:	d8 a8       	ldd	r13, Y+48	; 0x30
     b7e:	c6 01       	movw	r24, r12
     b80:	aa 27       	eor	r26, r26
     b82:	bb 27       	eor	r27, r27
     b84:	57 01       	movw	r10, r14
     b86:	68 01       	movw	r12, r16
     b88:	a8 2a       	or	r10, r24
     b8a:	b9 2a       	or	r11, r25
     b8c:	ca 2a       	or	r12, r26
     b8e:	db 2a       	or	r13, r27
     b90:	a2 16       	cp	r10, r18
     b92:	b3 06       	cpc	r11, r19
     b94:	c4 06       	cpc	r12, r20
     b96:	d5 06       	cpc	r13, r21
     b98:	60 f5       	brcc	.+88     	; 0xbf2 <__stack+0x393>
     b9a:	61 96       	adiw	r28, 0x11	; 17
     b9c:	6c ad       	ldd	r22, Y+60	; 0x3c
     b9e:	7d ad       	ldd	r23, Y+61	; 0x3d
     ba0:	8e ad       	ldd	r24, Y+62	; 0x3e
     ba2:	9f ad       	ldd	r25, Y+63	; 0x3f
     ba4:	61 97       	sbiw	r28, 0x11	; 17
     ba6:	61 50       	subi	r22, 0x01	; 1
     ba8:	70 40       	sbci	r23, 0x00	; 0
     baa:	80 40       	sbci	r24, 0x00	; 0
     bac:	90 40       	sbci	r25, 0x00	; 0
     bae:	61 96       	adiw	r28, 0x11	; 17
     bb0:	6c af       	std	Y+60, r22	; 0x3c
     bb2:	7d af       	std	Y+61, r23	; 0x3d
     bb4:	8e af       	std	Y+62, r24	; 0x3e
     bb6:	9f af       	std	Y+63, r25	; 0x3f
     bb8:	61 97       	sbiw	r28, 0x11	; 17
     bba:	a2 0c       	add	r10, r2
     bbc:	b3 1c       	adc	r11, r3
     bbe:	c4 1c       	adc	r12, r4
     bc0:	d5 1c       	adc	r13, r5
     bc2:	a2 14       	cp	r10, r2
     bc4:	b3 04       	cpc	r11, r3
     bc6:	c4 04       	cpc	r12, r4
     bc8:	d5 04       	cpc	r13, r5
     bca:	98 f0       	brcs	.+38     	; 0xbf2 <__stack+0x393>
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	70 f4       	brcc	.+28     	; 0xbf2 <__stack+0x393>
     bd6:	61 50       	subi	r22, 0x01	; 1
     bd8:	70 40       	sbci	r23, 0x00	; 0
     bda:	80 40       	sbci	r24, 0x00	; 0
     bdc:	90 40       	sbci	r25, 0x00	; 0
     bde:	61 96       	adiw	r28, 0x11	; 17
     be0:	6c af       	std	Y+60, r22	; 0x3c
     be2:	7d af       	std	Y+61, r23	; 0x3d
     be4:	8e af       	std	Y+62, r24	; 0x3e
     be6:	9f af       	std	Y+63, r25	; 0x3f
     be8:	61 97       	sbiw	r28, 0x11	; 17
     bea:	a2 0c       	add	r10, r2
     bec:	b3 1c       	adc	r11, r3
     bee:	c4 1c       	adc	r12, r4
     bf0:	d5 1c       	adc	r13, r5
     bf2:	a2 1a       	sub	r10, r18
     bf4:	b3 0a       	sbc	r11, r19
     bf6:	c4 0a       	sbc	r12, r20
     bf8:	d5 0a       	sbc	r13, r21
     bfa:	c6 01       	movw	r24, r12
     bfc:	b5 01       	movw	r22, r10
     bfe:	29 96       	adiw	r28, 0x09	; 9
     c00:	2c ad       	ldd	r18, Y+60	; 0x3c
     c02:	3d ad       	ldd	r19, Y+61	; 0x3d
     c04:	4e ad       	ldd	r20, Y+62	; 0x3e
     c06:	5f ad       	ldd	r21, Y+63	; 0x3f
     c08:	29 97       	sbiw	r28, 0x09	; 9
     c0a:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     c0e:	7b 01       	movw	r14, r22
     c10:	8c 01       	movw	r16, r24
     c12:	c6 01       	movw	r24, r12
     c14:	b5 01       	movw	r22, r10
     c16:	29 96       	adiw	r28, 0x09	; 9
     c18:	2c ad       	ldd	r18, Y+60	; 0x3c
     c1a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c1c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c1e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c20:	29 97       	sbiw	r28, 0x09	; 9
     c22:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     c26:	c9 01       	movw	r24, r18
     c28:	da 01       	movw	r26, r20
     c2a:	5c 01       	movw	r10, r24
     c2c:	6d 01       	movw	r12, r26
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	2d 96       	adiw	r28, 0x0d	; 13
     c34:	2c ad       	ldd	r18, Y+60	; 0x3c
     c36:	3d ad       	ldd	r19, Y+61	; 0x3d
     c38:	4e ad       	ldd	r20, Y+62	; 0x3e
     c3a:	5f ad       	ldd	r21, Y+63	; 0x3f
     c3c:	2d 97       	sbiw	r28, 0x0d	; 13
     c3e:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
     c42:	9b 01       	movw	r18, r22
     c44:	ac 01       	movw	r20, r24
     c46:	87 01       	movw	r16, r14
     c48:	ff 24       	eor	r15, r15
     c4a:	ee 24       	eor	r14, r14
     c4c:	8d a5       	ldd	r24, Y+45	; 0x2d
     c4e:	9e a5       	ldd	r25, Y+46	; 0x2e
     c50:	af a5       	ldd	r26, Y+47	; 0x2f
     c52:	b8 a9       	ldd	r27, Y+48	; 0x30
     c54:	a0 70       	andi	r26, 0x00	; 0
     c56:	b0 70       	andi	r27, 0x00	; 0
     c58:	e8 2a       	or	r14, r24
     c5a:	f9 2a       	or	r15, r25
     c5c:	0a 2b       	or	r16, r26
     c5e:	1b 2b       	or	r17, r27
     c60:	e2 16       	cp	r14, r18
     c62:	f3 06       	cpc	r15, r19
     c64:	04 07       	cpc	r16, r20
     c66:	15 07       	cpc	r17, r21
     c68:	c0 f4       	brcc	.+48     	; 0xc9a <__stack+0x43b>
     c6a:	08 94       	sec
     c6c:	a1 08       	sbc	r10, r1
     c6e:	b1 08       	sbc	r11, r1
     c70:	c1 08       	sbc	r12, r1
     c72:	d1 08       	sbc	r13, r1
     c74:	e2 0c       	add	r14, r2
     c76:	f3 1c       	adc	r15, r3
     c78:	04 1d       	adc	r16, r4
     c7a:	15 1d       	adc	r17, r5
     c7c:	e2 14       	cp	r14, r2
     c7e:	f3 04       	cpc	r15, r3
     c80:	04 05       	cpc	r16, r4
     c82:	15 05       	cpc	r17, r5
     c84:	50 f0       	brcs	.+20     	; 0xc9a <__stack+0x43b>
     c86:	e2 16       	cp	r14, r18
     c88:	f3 06       	cpc	r15, r19
     c8a:	04 07       	cpc	r16, r20
     c8c:	15 07       	cpc	r17, r21
     c8e:	28 f4       	brcc	.+10     	; 0xc9a <__stack+0x43b>
     c90:	08 94       	sec
     c92:	a1 08       	sbc	r10, r1
     c94:	b1 08       	sbc	r11, r1
     c96:	c1 08       	sbc	r12, r1
     c98:	d1 08       	sbc	r13, r1
     c9a:	61 96       	adiw	r28, 0x11	; 17
     c9c:	ec ac       	ldd	r14, Y+60	; 0x3c
     c9e:	fd ac       	ldd	r15, Y+61	; 0x3d
     ca0:	0e ad       	ldd	r16, Y+62	; 0x3e
     ca2:	1f ad       	ldd	r17, Y+63	; 0x3f
     ca4:	61 97       	sbiw	r28, 0x11	; 17
     ca6:	d7 01       	movw	r26, r14
     ca8:	99 27       	eor	r25, r25
     caa:	88 27       	eor	r24, r24
     cac:	96 01       	movw	r18, r12
     cae:	85 01       	movw	r16, r10
     cb0:	08 2b       	or	r16, r24
     cb2:	19 2b       	or	r17, r25
     cb4:	2a 2b       	or	r18, r26
     cb6:	3b 2b       	or	r19, r27
     cb8:	09 ab       	std	Y+49, r16	; 0x31
     cba:	1a ab       	std	Y+50, r17	; 0x32
     cbc:	2b ab       	std	Y+51, r18	; 0x33
     cbe:	3c ab       	std	Y+52, r19	; 0x34
     cc0:	62 c2       	rjmp	.+1220   	; 0x1186 <__stack+0x927>
     cc2:	6e 14       	cp	r6, r14
     cc4:	7f 04       	cpc	r7, r15
     cc6:	80 06       	cpc	r8, r16
     cc8:	91 06       	cpc	r9, r17
     cca:	08 f4       	brcc	.+2      	; 0xcce <__stack+0x46f>
     ccc:	51 c2       	rjmp	.+1186   	; 0x1170 <__stack+0x911>
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	e2 16       	cp	r14, r18
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	f2 06       	cpc	r15, r18
     cd6:	21 e0       	ldi	r18, 0x01	; 1
     cd8:	02 07       	cpc	r16, r18
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	12 07       	cpc	r17, r18
     cde:	88 f4       	brcc	.+34     	; 0xd02 <__stack+0x4a3>
     ce0:	3f ef       	ldi	r19, 0xFF	; 255
     ce2:	e3 16       	cp	r14, r19
     ce4:	f1 04       	cpc	r15, r1
     ce6:	01 05       	cpc	r16, r1
     ce8:	11 05       	cpc	r17, r1
     cea:	31 f0       	breq	.+12     	; 0xcf8 <__stack+0x499>
     cec:	28 f0       	brcs	.+10     	; 0xcf8 <__stack+0x499>
     cee:	48 e0       	ldi	r20, 0x08	; 8
     cf0:	50 e0       	ldi	r21, 0x00	; 0
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	17 c0       	rjmp	.+46     	; 0xd26 <__stack+0x4c7>
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	60 e0       	ldi	r22, 0x00	; 0
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	12 c0       	rjmp	.+36     	; 0xd26 <__stack+0x4c7>
     d02:	40 e0       	ldi	r20, 0x00	; 0
     d04:	e4 16       	cp	r14, r20
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	f4 06       	cpc	r15, r20
     d0a:	40 e0       	ldi	r20, 0x00	; 0
     d0c:	04 07       	cpc	r16, r20
     d0e:	41 e0       	ldi	r20, 0x01	; 1
     d10:	14 07       	cpc	r17, r20
     d12:	28 f0       	brcs	.+10     	; 0xd1e <__stack+0x4bf>
     d14:	48 e1       	ldi	r20, 0x18	; 24
     d16:	50 e0       	ldi	r21, 0x00	; 0
     d18:	60 e0       	ldi	r22, 0x00	; 0
     d1a:	70 e0       	ldi	r23, 0x00	; 0
     d1c:	04 c0       	rjmp	.+8      	; 0xd26 <__stack+0x4c7>
     d1e:	40 e1       	ldi	r20, 0x10	; 16
     d20:	50 e0       	ldi	r21, 0x00	; 0
     d22:	60 e0       	ldi	r22, 0x00	; 0
     d24:	70 e0       	ldi	r23, 0x00	; 0
     d26:	d8 01       	movw	r26, r16
     d28:	c7 01       	movw	r24, r14
     d2a:	04 2e       	mov	r0, r20
     d2c:	04 c0       	rjmp	.+8      	; 0xd36 <__stack+0x4d7>
     d2e:	b6 95       	lsr	r27
     d30:	a7 95       	ror	r26
     d32:	97 95       	ror	r25
     d34:	87 95       	ror	r24
     d36:	0a 94       	dec	r0
     d38:	d2 f7       	brpl	.-12     	; 0xd2e <__stack+0x4cf>
     d3a:	8f 52       	subi	r24, 0x2F	; 47
     d3c:	9f 4f       	sbci	r25, 0xFF	; 255
     d3e:	dc 01       	movw	r26, r24
     d40:	2c 91       	ld	r18, X
     d42:	30 e2       	ldi	r19, 0x20	; 32
     d44:	a3 2e       	mov	r10, r19
     d46:	b1 2c       	mov	r11, r1
     d48:	c1 2c       	mov	r12, r1
     d4a:	d1 2c       	mov	r13, r1
     d4c:	d6 01       	movw	r26, r12
     d4e:	c5 01       	movw	r24, r10
     d50:	84 1b       	sub	r24, r20
     d52:	95 0b       	sbc	r25, r21
     d54:	a6 0b       	sbc	r26, r22
     d56:	b7 0b       	sbc	r27, r23
     d58:	82 1b       	sub	r24, r18
     d5a:	91 09       	sbc	r25, r1
     d5c:	a1 09       	sbc	r26, r1
     d5e:	b1 09       	sbc	r27, r1
     d60:	00 97       	sbiw	r24, 0x00	; 0
     d62:	a1 05       	cpc	r26, r1
     d64:	b1 05       	cpc	r27, r1
     d66:	89 f4       	brne	.+34     	; 0xd8a <__stack+0x52b>
     d68:	e6 14       	cp	r14, r6
     d6a:	f7 04       	cpc	r15, r7
     d6c:	08 05       	cpc	r16, r8
     d6e:	19 05       	cpc	r17, r9
     d70:	08 f4       	brcc	.+2      	; 0xd74 <__stack+0x515>
     d72:	f2 c1       	rjmp	.+996    	; 0x1158 <__stack+0x8f9>
     d74:	6d a4       	ldd	r6, Y+45	; 0x2d
     d76:	7e a4       	ldd	r7, Y+46	; 0x2e
     d78:	8f a4       	ldd	r8, Y+47	; 0x2f
     d7a:	98 a8       	ldd	r9, Y+48	; 0x30
     d7c:	62 14       	cp	r6, r2
     d7e:	73 04       	cpc	r7, r3
     d80:	84 04       	cpc	r8, r4
     d82:	95 04       	cpc	r9, r5
     d84:	08 f0       	brcs	.+2      	; 0xd88 <__stack+0x529>
     d86:	e8 c1       	rjmp	.+976    	; 0x1158 <__stack+0x8f9>
     d88:	f3 c1       	rjmp	.+998    	; 0x1170 <__stack+0x911>
     d8a:	6e 96       	adiw	r28, 0x1e	; 30
     d8c:	8f af       	std	Y+63, r24	; 0x3f
     d8e:	6e 97       	sbiw	r28, 0x1e	; 30
     d90:	08 2e       	mov	r0, r24
     d92:	04 c0       	rjmp	.+8      	; 0xd9c <__stack+0x53d>
     d94:	ee 0c       	add	r14, r14
     d96:	ff 1c       	adc	r15, r15
     d98:	00 1f       	adc	r16, r16
     d9a:	11 1f       	adc	r17, r17
     d9c:	0a 94       	dec	r0
     d9e:	d2 f7       	brpl	.-12     	; 0xd94 <__stack+0x535>
     da0:	6a 2d       	mov	r22, r10
     da2:	68 1b       	sub	r22, r24
     da4:	d2 01       	movw	r26, r4
     da6:	c1 01       	movw	r24, r2
     da8:	06 2e       	mov	r0, r22
     daa:	04 c0       	rjmp	.+8      	; 0xdb4 <__stack+0x555>
     dac:	b6 95       	lsr	r27
     dae:	a7 95       	ror	r26
     db0:	97 95       	ror	r25
     db2:	87 95       	ror	r24
     db4:	0a 94       	dec	r0
     db6:	d2 f7       	brpl	.-12     	; 0xdac <__stack+0x54d>
     db8:	5c 01       	movw	r10, r24
     dba:	6d 01       	movw	r12, r26
     dbc:	ae 28       	or	r10, r14
     dbe:	bf 28       	or	r11, r15
     dc0:	c0 2a       	or	r12, r16
     dc2:	d1 2a       	or	r13, r17
     dc4:	ad a2       	std	Y+37, r10	; 0x25
     dc6:	be a2       	std	Y+38, r11	; 0x26
     dc8:	cf a2       	std	Y+39, r12	; 0x27
     dca:	d8 a6       	std	Y+40, r13	; 0x28
     dcc:	72 01       	movw	r14, r4
     dce:	61 01       	movw	r12, r2
     dd0:	6e 96       	adiw	r28, 0x1e	; 30
     dd2:	0f ac       	ldd	r0, Y+63	; 0x3f
     dd4:	6e 97       	sbiw	r28, 0x1e	; 30
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <__stack+0x581>
     dd8:	cc 0c       	add	r12, r12
     dda:	dd 1c       	adc	r13, r13
     ddc:	ee 1c       	adc	r14, r14
     dde:	ff 1c       	adc	r15, r15
     de0:	0a 94       	dec	r0
     de2:	d2 f7       	brpl	.-12     	; 0xdd8 <__stack+0x579>
     de4:	c9 a2       	std	Y+33, r12	; 0x21
     de6:	da a2       	std	Y+34, r13	; 0x22
     de8:	eb a2       	std	Y+35, r14	; 0x23
     dea:	fc a2       	std	Y+36, r15	; 0x24
     dec:	64 01       	movw	r12, r8
     dee:	53 01       	movw	r10, r6
     df0:	06 2e       	mov	r0, r22
     df2:	04 c0       	rjmp	.+8      	; 0xdfc <__stack+0x59d>
     df4:	d6 94       	lsr	r13
     df6:	c7 94       	ror	r12
     df8:	b7 94       	ror	r11
     dfa:	a7 94       	ror	r10
     dfc:	0a 94       	dec	r0
     dfe:	d2 f7       	brpl	.-12     	; 0xdf4 <__stack+0x595>
     e00:	d4 01       	movw	r26, r8
     e02:	c3 01       	movw	r24, r6
     e04:	6e 96       	adiw	r28, 0x1e	; 30
     e06:	0f ac       	ldd	r0, Y+63	; 0x3f
     e08:	6e 97       	sbiw	r28, 0x1e	; 30
     e0a:	04 c0       	rjmp	.+8      	; 0xe14 <__stack+0x5b5>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	aa 1f       	adc	r26, r26
     e12:	bb 1f       	adc	r27, r27
     e14:	0a 94       	dec	r0
     e16:	d2 f7       	brpl	.-12     	; 0xe0c <__stack+0x5ad>
     e18:	ed a4       	ldd	r14, Y+45	; 0x2d
     e1a:	fe a4       	ldd	r15, Y+46	; 0x2e
     e1c:	0f a5       	ldd	r16, Y+47	; 0x2f
     e1e:	18 a9       	ldd	r17, Y+48	; 0x30
     e20:	04 c0       	rjmp	.+8      	; 0xe2a <__stack+0x5cb>
     e22:	16 95       	lsr	r17
     e24:	07 95       	ror	r16
     e26:	f7 94       	ror	r15
     e28:	e7 94       	ror	r14
     e2a:	6a 95       	dec	r22
     e2c:	d2 f7       	brpl	.-12     	; 0xe22 <__stack+0x5c3>
     e2e:	37 01       	movw	r6, r14
     e30:	48 01       	movw	r8, r16
     e32:	68 2a       	or	r6, r24
     e34:	79 2a       	or	r7, r25
     e36:	8a 2a       	or	r8, r26
     e38:	9b 2a       	or	r9, r27
     e3a:	6d 8e       	std	Y+29, r6	; 0x1d
     e3c:	7e 8e       	std	Y+30, r7	; 0x1e
     e3e:	8f 8e       	std	Y+31, r8	; 0x1f
     e40:	98 a2       	std	Y+32, r9	; 0x20
     e42:	ed a0       	ldd	r14, Y+37	; 0x25
     e44:	fe a0       	ldd	r15, Y+38	; 0x26
     e46:	0f a1       	ldd	r16, Y+39	; 0x27
     e48:	18 a5       	ldd	r17, Y+40	; 0x28
     e4a:	38 01       	movw	r6, r16
     e4c:	88 24       	eor	r8, r8
     e4e:	99 24       	eor	r9, r9
     e50:	98 01       	movw	r18, r16
     e52:	87 01       	movw	r16, r14
     e54:	20 70       	andi	r18, 0x00	; 0
     e56:	30 70       	andi	r19, 0x00	; 0
     e58:	65 96       	adiw	r28, 0x15	; 21
     e5a:	0c af       	std	Y+60, r16	; 0x3c
     e5c:	1d af       	std	Y+61, r17	; 0x3d
     e5e:	2e af       	std	Y+62, r18	; 0x3e
     e60:	3f af       	std	Y+63, r19	; 0x3f
     e62:	65 97       	sbiw	r28, 0x15	; 21
     e64:	c6 01       	movw	r24, r12
     e66:	b5 01       	movw	r22, r10
     e68:	a4 01       	movw	r20, r8
     e6a:	93 01       	movw	r18, r6
     e6c:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     e70:	7b 01       	movw	r14, r22
     e72:	8c 01       	movw	r16, r24
     e74:	c6 01       	movw	r24, r12
     e76:	b5 01       	movw	r22, r10
     e78:	a4 01       	movw	r20, r8
     e7a:	93 01       	movw	r18, r6
     e7c:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     e80:	c9 01       	movw	r24, r18
     e82:	da 01       	movw	r26, r20
     e84:	1c 01       	movw	r2, r24
     e86:	2d 01       	movw	r4, r26
     e88:	c2 01       	movw	r24, r4
     e8a:	b1 01       	movw	r22, r2
     e8c:	65 96       	adiw	r28, 0x15	; 21
     e8e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e90:	3d ad       	ldd	r19, Y+61	; 0x3d
     e92:	4e ad       	ldd	r20, Y+62	; 0x3e
     e94:	5f ad       	ldd	r21, Y+63	; 0x3f
     e96:	65 97       	sbiw	r28, 0x15	; 21
     e98:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
     e9c:	9b 01       	movw	r18, r22
     e9e:	ac 01       	movw	r20, r24
     ea0:	87 01       	movw	r16, r14
     ea2:	ff 24       	eor	r15, r15
     ea4:	ee 24       	eor	r14, r14
     ea6:	ad 8c       	ldd	r10, Y+29	; 0x1d
     ea8:	be 8c       	ldd	r11, Y+30	; 0x1e
     eaa:	cf 8c       	ldd	r12, Y+31	; 0x1f
     eac:	d8 a0       	ldd	r13, Y+32	; 0x20
     eae:	c6 01       	movw	r24, r12
     eb0:	aa 27       	eor	r26, r26
     eb2:	bb 27       	eor	r27, r27
     eb4:	57 01       	movw	r10, r14
     eb6:	68 01       	movw	r12, r16
     eb8:	a8 2a       	or	r10, r24
     eba:	b9 2a       	or	r11, r25
     ebc:	ca 2a       	or	r12, r26
     ebe:	db 2a       	or	r13, r27
     ec0:	a2 16       	cp	r10, r18
     ec2:	b3 06       	cpc	r11, r19
     ec4:	c4 06       	cpc	r12, r20
     ec6:	d5 06       	cpc	r13, r21
     ec8:	00 f5       	brcc	.+64     	; 0xf0a <__stack+0x6ab>
     eca:	08 94       	sec
     ecc:	21 08       	sbc	r2, r1
     ece:	31 08       	sbc	r3, r1
     ed0:	41 08       	sbc	r4, r1
     ed2:	51 08       	sbc	r5, r1
     ed4:	ed a0       	ldd	r14, Y+37	; 0x25
     ed6:	fe a0       	ldd	r15, Y+38	; 0x26
     ed8:	0f a1       	ldd	r16, Y+39	; 0x27
     eda:	18 a5       	ldd	r17, Y+40	; 0x28
     edc:	ae 0c       	add	r10, r14
     ede:	bf 1c       	adc	r11, r15
     ee0:	c0 1e       	adc	r12, r16
     ee2:	d1 1e       	adc	r13, r17
     ee4:	ae 14       	cp	r10, r14
     ee6:	bf 04       	cpc	r11, r15
     ee8:	c0 06       	cpc	r12, r16
     eea:	d1 06       	cpc	r13, r17
     eec:	70 f0       	brcs	.+28     	; 0xf0a <__stack+0x6ab>
     eee:	a2 16       	cp	r10, r18
     ef0:	b3 06       	cpc	r11, r19
     ef2:	c4 06       	cpc	r12, r20
     ef4:	d5 06       	cpc	r13, r21
     ef6:	48 f4       	brcc	.+18     	; 0xf0a <__stack+0x6ab>
     ef8:	08 94       	sec
     efa:	21 08       	sbc	r2, r1
     efc:	31 08       	sbc	r3, r1
     efe:	41 08       	sbc	r4, r1
     f00:	51 08       	sbc	r5, r1
     f02:	ae 0c       	add	r10, r14
     f04:	bf 1c       	adc	r11, r15
     f06:	c0 1e       	adc	r12, r16
     f08:	d1 1e       	adc	r13, r17
     f0a:	a2 1a       	sub	r10, r18
     f0c:	b3 0a       	sbc	r11, r19
     f0e:	c4 0a       	sbc	r12, r20
     f10:	d5 0a       	sbc	r13, r21
     f12:	c6 01       	movw	r24, r12
     f14:	b5 01       	movw	r22, r10
     f16:	a4 01       	movw	r20, r8
     f18:	93 01       	movw	r18, r6
     f1a:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     f1e:	7b 01       	movw	r14, r22
     f20:	8c 01       	movw	r16, r24
     f22:	c6 01       	movw	r24, r12
     f24:	b5 01       	movw	r22, r10
     f26:	a4 01       	movw	r20, r8
     f28:	93 01       	movw	r18, r6
     f2a:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
     f2e:	c9 01       	movw	r24, r18
     f30:	da 01       	movw	r26, r20
     f32:	3c 01       	movw	r6, r24
     f34:	4d 01       	movw	r8, r26
     f36:	c4 01       	movw	r24, r8
     f38:	b3 01       	movw	r22, r6
     f3a:	65 96       	adiw	r28, 0x15	; 21
     f3c:	2c ad       	ldd	r18, Y+60	; 0x3c
     f3e:	3d ad       	ldd	r19, Y+61	; 0x3d
     f40:	4e ad       	ldd	r20, Y+62	; 0x3e
     f42:	5f ad       	ldd	r21, Y+63	; 0x3f
     f44:	65 97       	sbiw	r28, 0x15	; 21
     f46:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
     f4a:	9b 01       	movw	r18, r22
     f4c:	ac 01       	movw	r20, r24
     f4e:	87 01       	movw	r16, r14
     f50:	ff 24       	eor	r15, r15
     f52:	ee 24       	eor	r14, r14
     f54:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f56:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f58:	af 8d       	ldd	r26, Y+31	; 0x1f
     f5a:	b8 a1       	ldd	r27, Y+32	; 0x20
     f5c:	a0 70       	andi	r26, 0x00	; 0
     f5e:	b0 70       	andi	r27, 0x00	; 0
     f60:	57 01       	movw	r10, r14
     f62:	68 01       	movw	r12, r16
     f64:	a8 2a       	or	r10, r24
     f66:	b9 2a       	or	r11, r25
     f68:	ca 2a       	or	r12, r26
     f6a:	db 2a       	or	r13, r27
     f6c:	a2 16       	cp	r10, r18
     f6e:	b3 06       	cpc	r11, r19
     f70:	c4 06       	cpc	r12, r20
     f72:	d5 06       	cpc	r13, r21
     f74:	00 f5       	brcc	.+64     	; 0xfb6 <__stack+0x757>
     f76:	08 94       	sec
     f78:	61 08       	sbc	r6, r1
     f7a:	71 08       	sbc	r7, r1
     f7c:	81 08       	sbc	r8, r1
     f7e:	91 08       	sbc	r9, r1
     f80:	6d a1       	ldd	r22, Y+37	; 0x25
     f82:	7e a1       	ldd	r23, Y+38	; 0x26
     f84:	8f a1       	ldd	r24, Y+39	; 0x27
     f86:	98 a5       	ldd	r25, Y+40	; 0x28
     f88:	a6 0e       	add	r10, r22
     f8a:	b7 1e       	adc	r11, r23
     f8c:	c8 1e       	adc	r12, r24
     f8e:	d9 1e       	adc	r13, r25
     f90:	a6 16       	cp	r10, r22
     f92:	b7 06       	cpc	r11, r23
     f94:	c8 06       	cpc	r12, r24
     f96:	d9 06       	cpc	r13, r25
     f98:	70 f0       	brcs	.+28     	; 0xfb6 <__stack+0x757>
     f9a:	a2 16       	cp	r10, r18
     f9c:	b3 06       	cpc	r11, r19
     f9e:	c4 06       	cpc	r12, r20
     fa0:	d5 06       	cpc	r13, r21
     fa2:	48 f4       	brcc	.+18     	; 0xfb6 <__stack+0x757>
     fa4:	08 94       	sec
     fa6:	61 08       	sbc	r6, r1
     fa8:	71 08       	sbc	r7, r1
     faa:	81 08       	sbc	r8, r1
     fac:	91 08       	sbc	r9, r1
     fae:	a6 0e       	add	r10, r22
     fb0:	b7 1e       	adc	r11, r23
     fb2:	c8 1e       	adc	r12, r24
     fb4:	d9 1e       	adc	r13, r25
     fb6:	d6 01       	movw	r26, r12
     fb8:	c5 01       	movw	r24, r10
     fba:	82 1b       	sub	r24, r18
     fbc:	93 0b       	sbc	r25, r19
     fbe:	a4 0b       	sbc	r26, r20
     fc0:	b5 0b       	sbc	r27, r21
     fc2:	89 8f       	std	Y+25, r24	; 0x19
     fc4:	9a 8f       	std	Y+26, r25	; 0x1a
     fc6:	ab 8f       	std	Y+27, r26	; 0x1b
     fc8:	bc 8f       	std	Y+28, r27	; 0x1c
     fca:	d1 01       	movw	r26, r2
     fcc:	99 27       	eor	r25, r25
     fce:	88 27       	eor	r24, r24
     fd0:	64 01       	movw	r12, r8
     fd2:	53 01       	movw	r10, r6
     fd4:	a8 2a       	or	r10, r24
     fd6:	b9 2a       	or	r11, r25
     fd8:	ca 2a       	or	r12, r26
     fda:	db 2a       	or	r13, r27
     fdc:	a9 aa       	std	Y+49, r10	; 0x31
     fde:	ba aa       	std	Y+50, r11	; 0x32
     fe0:	cb aa       	std	Y+51, r12	; 0x33
     fe2:	dc aa       	std	Y+52, r13	; 0x34
     fe4:	86 01       	movw	r16, r12
     fe6:	75 01       	movw	r14, r10
     fe8:	2f ef       	ldi	r18, 0xFF	; 255
     fea:	3f ef       	ldi	r19, 0xFF	; 255
     fec:	40 e0       	ldi	r20, 0x00	; 0
     fee:	50 e0       	ldi	r21, 0x00	; 0
     ff0:	e2 22       	and	r14, r18
     ff2:	f3 22       	and	r15, r19
     ff4:	04 23       	and	r16, r20
     ff6:	15 23       	and	r17, r21
     ff8:	a6 01       	movw	r20, r12
     ffa:	66 27       	eor	r22, r22
     ffc:	77 27       	eor	r23, r23
     ffe:	6d 96       	adiw	r28, 0x1d	; 29
    1000:	4c af       	std	Y+60, r20	; 0x3c
    1002:	5d af       	std	Y+61, r21	; 0x3d
    1004:	6e af       	std	Y+62, r22	; 0x3e
    1006:	7f af       	std	Y+63, r23	; 0x3f
    1008:	6d 97       	sbiw	r28, 0x1d	; 29
    100a:	a9 a0       	ldd	r10, Y+33	; 0x21
    100c:	ba a0       	ldd	r11, Y+34	; 0x22
    100e:	cb a0       	ldd	r12, Y+35	; 0x23
    1010:	dc a0       	ldd	r13, Y+36	; 0x24
    1012:	6f ef       	ldi	r22, 0xFF	; 255
    1014:	7f ef       	ldi	r23, 0xFF	; 255
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	a6 22       	and	r10, r22
    101c:	b7 22       	and	r11, r23
    101e:	c8 22       	and	r12, r24
    1020:	d9 22       	and	r13, r25
    1022:	89 a1       	ldd	r24, Y+33	; 0x21
    1024:	9a a1       	ldd	r25, Y+34	; 0x22
    1026:	ab a1       	ldd	r26, Y+35	; 0x23
    1028:	bc a1       	ldd	r27, Y+36	; 0x24
    102a:	1d 01       	movw	r2, r26
    102c:	44 24       	eor	r4, r4
    102e:	55 24       	eor	r5, r5
    1030:	c8 01       	movw	r24, r16
    1032:	b7 01       	movw	r22, r14
    1034:	a6 01       	movw	r20, r12
    1036:	95 01       	movw	r18, r10
    1038:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    103c:	69 96       	adiw	r28, 0x19	; 25
    103e:	6c af       	std	Y+60, r22	; 0x3c
    1040:	7d af       	std	Y+61, r23	; 0x3d
    1042:	8e af       	std	Y+62, r24	; 0x3e
    1044:	9f af       	std	Y+63, r25	; 0x3f
    1046:	69 97       	sbiw	r28, 0x19	; 25
    1048:	c8 01       	movw	r24, r16
    104a:	b7 01       	movw	r22, r14
    104c:	a2 01       	movw	r20, r4
    104e:	91 01       	movw	r18, r2
    1050:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    1054:	3b 01       	movw	r6, r22
    1056:	4c 01       	movw	r8, r24
    1058:	6d 96       	adiw	r28, 0x1d	; 29
    105a:	6c ad       	ldd	r22, Y+60	; 0x3c
    105c:	7d ad       	ldd	r23, Y+61	; 0x3d
    105e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1060:	9f ad       	ldd	r25, Y+63	; 0x3f
    1062:	6d 97       	sbiw	r28, 0x1d	; 29
    1064:	a6 01       	movw	r20, r12
    1066:	95 01       	movw	r18, r10
    1068:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    106c:	7b 01       	movw	r14, r22
    106e:	8c 01       	movw	r16, r24
    1070:	6d 96       	adiw	r28, 0x1d	; 29
    1072:	6c ad       	ldd	r22, Y+60	; 0x3c
    1074:	7d ad       	ldd	r23, Y+61	; 0x3d
    1076:	8e ad       	ldd	r24, Y+62	; 0x3e
    1078:	9f ad       	ldd	r25, Y+63	; 0x3f
    107a:	6d 97       	sbiw	r28, 0x1d	; 29
    107c:	a2 01       	movw	r20, r4
    107e:	91 01       	movw	r18, r2
    1080:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    1084:	5b 01       	movw	r10, r22
    1086:	6c 01       	movw	r12, r24
    1088:	a8 01       	movw	r20, r16
    108a:	97 01       	movw	r18, r14
    108c:	26 0d       	add	r18, r6
    108e:	37 1d       	adc	r19, r7
    1090:	48 1d       	adc	r20, r8
    1092:	59 1d       	adc	r21, r9
    1094:	69 96       	adiw	r28, 0x19	; 25
    1096:	6c ac       	ldd	r6, Y+60	; 0x3c
    1098:	7d ac       	ldd	r7, Y+61	; 0x3d
    109a:	8e ac       	ldd	r8, Y+62	; 0x3e
    109c:	9f ac       	ldd	r9, Y+63	; 0x3f
    109e:	69 97       	sbiw	r28, 0x19	; 25
    10a0:	c4 01       	movw	r24, r8
    10a2:	aa 27       	eor	r26, r26
    10a4:	bb 27       	eor	r27, r27
    10a6:	28 0f       	add	r18, r24
    10a8:	39 1f       	adc	r19, r25
    10aa:	4a 1f       	adc	r20, r26
    10ac:	5b 1f       	adc	r21, r27
    10ae:	2e 15       	cp	r18, r14
    10b0:	3f 05       	cpc	r19, r15
    10b2:	40 07       	cpc	r20, r16
    10b4:	51 07       	cpc	r21, r17
    10b6:	48 f4       	brcc	.+18     	; 0x10ca <__stack+0x86b>
    10b8:	e1 2c       	mov	r14, r1
    10ba:	f1 2c       	mov	r15, r1
    10bc:	61 e0       	ldi	r22, 0x01	; 1
    10be:	06 2f       	mov	r16, r22
    10c0:	11 2d       	mov	r17, r1
    10c2:	ae 0c       	add	r10, r14
    10c4:	bf 1c       	adc	r11, r15
    10c6:	c0 1e       	adc	r12, r16
    10c8:	d1 1e       	adc	r13, r17
    10ca:	ca 01       	movw	r24, r20
    10cc:	aa 27       	eor	r26, r26
    10ce:	bb 27       	eor	r27, r27
    10d0:	bc 01       	movw	r22, r24
    10d2:	cd 01       	movw	r24, r26
    10d4:	6a 0d       	add	r22, r10
    10d6:	7b 1d       	adc	r23, r11
    10d8:	8c 1d       	adc	r24, r12
    10da:	9d 1d       	adc	r25, r13
    10dc:	69 8c       	ldd	r6, Y+25	; 0x19
    10de:	7a 8c       	ldd	r7, Y+26	; 0x1a
    10e0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    10e2:	9c 8c       	ldd	r9, Y+28	; 0x1c
    10e4:	66 16       	cp	r6, r22
    10e6:	77 06       	cpc	r7, r23
    10e8:	88 06       	cpc	r8, r24
    10ea:	99 06       	cpc	r9, r25
    10ec:	40 f1       	brcs	.+80     	; 0x113e <__stack+0x8df>
    10ee:	66 15       	cp	r22, r6
    10f0:	77 05       	cpc	r23, r7
    10f2:	88 05       	cpc	r24, r8
    10f4:	99 05       	cpc	r25, r9
    10f6:	09 f0       	breq	.+2      	; 0x10fa <__stack+0x89b>
    10f8:	43 c0       	rjmp	.+134    	; 0x1180 <__stack+0x921>
    10fa:	d9 01       	movw	r26, r18
    10fc:	99 27       	eor	r25, r25
    10fe:	88 27       	eor	r24, r24
    1100:	69 96       	adiw	r28, 0x19	; 25
    1102:	2c ad       	ldd	r18, Y+60	; 0x3c
    1104:	3d ad       	ldd	r19, Y+61	; 0x3d
    1106:	4e ad       	ldd	r20, Y+62	; 0x3e
    1108:	5f ad       	ldd	r21, Y+63	; 0x3f
    110a:	69 97       	sbiw	r28, 0x19	; 25
    110c:	40 70       	andi	r20, 0x00	; 0
    110e:	50 70       	andi	r21, 0x00	; 0
    1110:	82 0f       	add	r24, r18
    1112:	93 1f       	adc	r25, r19
    1114:	a4 1f       	adc	r26, r20
    1116:	b5 1f       	adc	r27, r21
    1118:	2d a5       	ldd	r18, Y+45	; 0x2d
    111a:	3e a5       	ldd	r19, Y+46	; 0x2e
    111c:	4f a5       	ldd	r20, Y+47	; 0x2f
    111e:	58 a9       	ldd	r21, Y+48	; 0x30
    1120:	6e 96       	adiw	r28, 0x1e	; 30
    1122:	0f ac       	ldd	r0, Y+63	; 0x3f
    1124:	6e 97       	sbiw	r28, 0x1e	; 30
    1126:	04 c0       	rjmp	.+8      	; 0x1130 <__stack+0x8d1>
    1128:	22 0f       	add	r18, r18
    112a:	33 1f       	adc	r19, r19
    112c:	44 1f       	adc	r20, r20
    112e:	55 1f       	adc	r21, r21
    1130:	0a 94       	dec	r0
    1132:	d2 f7       	brpl	.-12     	; 0x1128 <__stack+0x8c9>
    1134:	28 17       	cp	r18, r24
    1136:	39 07       	cpc	r19, r25
    1138:	4a 07       	cpc	r20, r26
    113a:	5b 07       	cpc	r21, r27
    113c:	08 f5       	brcc	.+66     	; 0x1180 <__stack+0x921>
    113e:	09 a9       	ldd	r16, Y+49	; 0x31
    1140:	1a a9       	ldd	r17, Y+50	; 0x32
    1142:	2b a9       	ldd	r18, Y+51	; 0x33
    1144:	3c a9       	ldd	r19, Y+52	; 0x34
    1146:	01 50       	subi	r16, 0x01	; 1
    1148:	10 40       	sbci	r17, 0x00	; 0
    114a:	20 40       	sbci	r18, 0x00	; 0
    114c:	30 40       	sbci	r19, 0x00	; 0
    114e:	09 ab       	std	Y+49, r16	; 0x31
    1150:	1a ab       	std	Y+50, r17	; 0x32
    1152:	2b ab       	std	Y+51, r18	; 0x33
    1154:	3c ab       	std	Y+52, r19	; 0x34
    1156:	14 c0       	rjmp	.+40     	; 0x1180 <__stack+0x921>
    1158:	66 24       	eor	r6, r6
    115a:	77 24       	eor	r7, r7
    115c:	43 01       	movw	r8, r6
    115e:	21 e0       	ldi	r18, 0x01	; 1
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e0       	ldi	r20, 0x00	; 0
    1164:	50 e0       	ldi	r21, 0x00	; 0
    1166:	29 ab       	std	Y+49, r18	; 0x31
    1168:	3a ab       	std	Y+50, r19	; 0x32
    116a:	4b ab       	std	Y+51, r20	; 0x33
    116c:	5c ab       	std	Y+52, r21	; 0x34
    116e:	0b c0       	rjmp	.+22     	; 0x1186 <__stack+0x927>
    1170:	66 24       	eor	r6, r6
    1172:	77 24       	eor	r7, r7
    1174:	43 01       	movw	r8, r6
    1176:	19 aa       	std	Y+49, r1	; 0x31
    1178:	1a aa       	std	Y+50, r1	; 0x32
    117a:	1b aa       	std	Y+51, r1	; 0x33
    117c:	1c aa       	std	Y+52, r1	; 0x34
    117e:	03 c0       	rjmp	.+6      	; 0x1186 <__stack+0x927>
    1180:	66 24       	eor	r6, r6
    1182:	77 24       	eor	r7, r7
    1184:	43 01       	movw	r8, r6
    1186:	fe 01       	movw	r30, r28
    1188:	71 96       	adiw	r30, 0x11	; 17
    118a:	88 e0       	ldi	r24, 0x08	; 8
    118c:	df 01       	movw	r26, r30
    118e:	1d 92       	st	X+, r1
    1190:	8a 95       	dec	r24
    1192:	e9 f7       	brne	.-6      	; 0x118e <__stack+0x92f>
    1194:	a9 a8       	ldd	r10, Y+49	; 0x31
    1196:	ba a8       	ldd	r11, Y+50	; 0x32
    1198:	cb a8       	ldd	r12, Y+51	; 0x33
    119a:	dc a8       	ldd	r13, Y+52	; 0x34
    119c:	a9 8a       	std	Y+17, r10	; 0x11
    119e:	ba 8a       	std	Y+18, r11	; 0x12
    11a0:	cb 8a       	std	Y+19, r12	; 0x13
    11a2:	dc 8a       	std	Y+20, r13	; 0x14
    11a4:	6d 8a       	std	Y+21, r6	; 0x15
    11a6:	7e 8a       	std	Y+22, r7	; 0x16
    11a8:	8f 8a       	std	Y+23, r8	; 0x17
    11aa:	98 8e       	std	Y+24, r9	; 0x18
    11ac:	29 a9       	ldd	r18, Y+49	; 0x31
    11ae:	3a 89       	ldd	r19, Y+18	; 0x12
    11b0:	4b 89       	ldd	r20, Y+19	; 0x13
    11b2:	5c 89       	ldd	r21, Y+20	; 0x14
    11b4:	66 2d       	mov	r22, r6
    11b6:	7e 89       	ldd	r23, Y+22	; 0x16
    11b8:	8f 89       	ldd	r24, Y+23	; 0x17
    11ba:	98 8d       	ldd	r25, Y+24	; 0x18
    11bc:	c2 5a       	subi	r28, 0xA2	; 162
    11be:	df 4f       	sbci	r29, 0xFF	; 255
    11c0:	e2 e1       	ldi	r30, 0x12	; 18
    11c2:	0c 94 5a 38 	jmp	0x70b4	; 0x70b4 <__epilogue_restores__>

000011c6 <__umoddi3>:
    11c6:	ab e5       	ldi	r26, 0x5B	; 91
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e9 ee       	ldi	r30, 0xE9	; 233
    11cc:	f8 e0       	ldi	r31, 0x08	; 8
    11ce:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__prologue_saves__>
    11d2:	a8 e0       	ldi	r26, 0x08	; 8
    11d4:	4e 01       	movw	r8, r28
    11d6:	08 94       	sec
    11d8:	81 1c       	adc	r8, r1
    11da:	91 1c       	adc	r9, r1
    11dc:	f4 01       	movw	r30, r8
    11de:	6a 2e       	mov	r6, r26
    11e0:	11 92       	st	Z+, r1
    11e2:	6a 94       	dec	r6
    11e4:	e9 f7       	brne	.-6      	; 0x11e0 <__umoddi3+0x1a>
    11e6:	29 83       	std	Y+1, r18	; 0x01
    11e8:	3a 83       	std	Y+2, r19	; 0x02
    11ea:	4b 83       	std	Y+3, r20	; 0x03
    11ec:	5c 83       	std	Y+4, r21	; 0x04
    11ee:	6d 83       	std	Y+5, r22	; 0x05
    11f0:	7e 83       	std	Y+6, r23	; 0x06
    11f2:	8f 83       	std	Y+7, r24	; 0x07
    11f4:	98 87       	std	Y+8, r25	; 0x08
    11f6:	ce 01       	movw	r24, r28
    11f8:	09 96       	adiw	r24, 0x09	; 9
    11fa:	fc 01       	movw	r30, r24
    11fc:	11 92       	st	Z+, r1
    11fe:	aa 95       	dec	r26
    1200:	e9 f7       	brne	.-6      	; 0x11fc <__umoddi3+0x36>
    1202:	a9 86       	std	Y+9, r10	; 0x09
    1204:	ba 86       	std	Y+10, r11	; 0x0a
    1206:	cb 86       	std	Y+11, r12	; 0x0b
    1208:	dc 86       	std	Y+12, r13	; 0x0c
    120a:	ed 86       	std	Y+13, r14	; 0x0d
    120c:	fe 86       	std	Y+14, r15	; 0x0e
    120e:	0f 87       	std	Y+15, r16	; 0x0f
    1210:	18 8b       	std	Y+16, r17	; 0x10
    1212:	29 84       	ldd	r2, Y+9	; 0x09
    1214:	3a 84       	ldd	r3, Y+10	; 0x0a
    1216:	4b 84       	ldd	r4, Y+11	; 0x0b
    1218:	5c 84       	ldd	r5, Y+12	; 0x0c
    121a:	ad 84       	ldd	r10, Y+13	; 0x0d
    121c:	be 84       	ldd	r11, Y+14	; 0x0e
    121e:	cf 84       	ldd	r12, Y+15	; 0x0f
    1220:	d8 88       	ldd	r13, Y+16	; 0x10
    1222:	29 81       	ldd	r18, Y+1	; 0x01
    1224:	3a 81       	ldd	r19, Y+2	; 0x02
    1226:	4b 81       	ldd	r20, Y+3	; 0x03
    1228:	5c 81       	ldd	r21, Y+4	; 0x04
    122a:	69 96       	adiw	r28, 0x19	; 25
    122c:	2f af       	std	Y+63, r18	; 0x3f
    122e:	69 97       	sbiw	r28, 0x19	; 25
    1230:	6a 96       	adiw	r28, 0x1a	; 26
    1232:	3f af       	std	Y+63, r19	; 0x3f
    1234:	6a 97       	sbiw	r28, 0x1a	; 26
    1236:	6b 96       	adiw	r28, 0x1b	; 27
    1238:	4f af       	std	Y+63, r20	; 0x3f
    123a:	6b 97       	sbiw	r28, 0x1b	; 27
    123c:	6c 96       	adiw	r28, 0x1c	; 28
    123e:	5f af       	std	Y+63, r21	; 0x3f
    1240:	6c 97       	sbiw	r28, 0x1c	; 28
    1242:	6c 96       	adiw	r28, 0x1c	; 28
    1244:	6c ac       	ldd	r6, Y+60	; 0x3c
    1246:	7d ac       	ldd	r7, Y+61	; 0x3d
    1248:	8e ac       	ldd	r8, Y+62	; 0x3e
    124a:	9f ac       	ldd	r9, Y+63	; 0x3f
    124c:	6c 97       	sbiw	r28, 0x1c	; 28
    124e:	69 aa       	std	Y+49, r6	; 0x31
    1250:	7a aa       	std	Y+50, r7	; 0x32
    1252:	8b aa       	std	Y+51, r8	; 0x33
    1254:	9c aa       	std	Y+52, r9	; 0x34
    1256:	6d 81       	ldd	r22, Y+5	; 0x05
    1258:	7e 81       	ldd	r23, Y+6	; 0x06
    125a:	8f 81       	ldd	r24, Y+7	; 0x07
    125c:	98 85       	ldd	r25, Y+8	; 0x08
    125e:	3b 01       	movw	r6, r22
    1260:	4c 01       	movw	r8, r24
    1262:	6d aa       	std	Y+53, r6	; 0x35
    1264:	7e aa       	std	Y+54, r7	; 0x36
    1266:	8f aa       	std	Y+55, r8	; 0x37
    1268:	98 ae       	std	Y+56, r9	; 0x38
    126a:	a1 14       	cp	r10, r1
    126c:	b1 04       	cpc	r11, r1
    126e:	c1 04       	cpc	r12, r1
    1270:	d1 04       	cpc	r13, r1
    1272:	09 f0       	breq	.+2      	; 0x1276 <__umoddi3+0xb0>
    1274:	04 c3       	rjmp	.+1544   	; 0x187e <__umoddi3+0x6b8>
    1276:	62 14       	cp	r6, r2
    1278:	73 04       	cpc	r7, r3
    127a:	84 04       	cpc	r8, r4
    127c:	95 04       	cpc	r9, r5
    127e:	08 f0       	brcs	.+2      	; 0x1282 <__umoddi3+0xbc>
    1280:	00 c1       	rjmp	.+512    	; 0x1482 <__umoddi3+0x2bc>
    1282:	00 e0       	ldi	r16, 0x00	; 0
    1284:	20 16       	cp	r2, r16
    1286:	00 e0       	ldi	r16, 0x00	; 0
    1288:	30 06       	cpc	r3, r16
    128a:	01 e0       	ldi	r16, 0x01	; 1
    128c:	40 06       	cpc	r4, r16
    128e:	00 e0       	ldi	r16, 0x00	; 0
    1290:	50 06       	cpc	r5, r16
    1292:	88 f4       	brcc	.+34     	; 0x12b6 <__umoddi3+0xf0>
    1294:	1f ef       	ldi	r17, 0xFF	; 255
    1296:	21 16       	cp	r2, r17
    1298:	31 04       	cpc	r3, r1
    129a:	41 04       	cpc	r4, r1
    129c:	51 04       	cpc	r5, r1
    129e:	39 f0       	breq	.+14     	; 0x12ae <__umoddi3+0xe8>
    12a0:	30 f0       	brcs	.+12     	; 0x12ae <__umoddi3+0xe8>
    12a2:	88 e0       	ldi	r24, 0x08	; 8
    12a4:	e8 2e       	mov	r14, r24
    12a6:	f1 2c       	mov	r15, r1
    12a8:	01 2d       	mov	r16, r1
    12aa:	11 2d       	mov	r17, r1
    12ac:	18 c0       	rjmp	.+48     	; 0x12de <__umoddi3+0x118>
    12ae:	ee 24       	eor	r14, r14
    12b0:	ff 24       	eor	r15, r15
    12b2:	87 01       	movw	r16, r14
    12b4:	14 c0       	rjmp	.+40     	; 0x12de <__umoddi3+0x118>
    12b6:	40 e0       	ldi	r20, 0x00	; 0
    12b8:	24 16       	cp	r2, r20
    12ba:	40 e0       	ldi	r20, 0x00	; 0
    12bc:	34 06       	cpc	r3, r20
    12be:	40 e0       	ldi	r20, 0x00	; 0
    12c0:	44 06       	cpc	r4, r20
    12c2:	41 e0       	ldi	r20, 0x01	; 1
    12c4:	54 06       	cpc	r5, r20
    12c6:	30 f0       	brcs	.+12     	; 0x12d4 <__umoddi3+0x10e>
    12c8:	b8 e1       	ldi	r27, 0x18	; 24
    12ca:	eb 2e       	mov	r14, r27
    12cc:	f1 2c       	mov	r15, r1
    12ce:	01 2d       	mov	r16, r1
    12d0:	11 2d       	mov	r17, r1
    12d2:	05 c0       	rjmp	.+10     	; 0x12de <__umoddi3+0x118>
    12d4:	a0 e1       	ldi	r26, 0x10	; 16
    12d6:	ea 2e       	mov	r14, r26
    12d8:	f1 2c       	mov	r15, r1
    12da:	01 2d       	mov	r16, r1
    12dc:	11 2d       	mov	r17, r1
    12de:	d2 01       	movw	r26, r4
    12e0:	c1 01       	movw	r24, r2
    12e2:	0e 2c       	mov	r0, r14
    12e4:	04 c0       	rjmp	.+8      	; 0x12ee <__umoddi3+0x128>
    12e6:	b6 95       	lsr	r27
    12e8:	a7 95       	ror	r26
    12ea:	97 95       	ror	r25
    12ec:	87 95       	ror	r24
    12ee:	0a 94       	dec	r0
    12f0:	d2 f7       	brpl	.-12     	; 0x12e6 <__umoddi3+0x120>
    12f2:	8f 52       	subi	r24, 0x2F	; 47
    12f4:	9f 4f       	sbci	r25, 0xFF	; 255
    12f6:	dc 01       	movw	r26, r24
    12f8:	2c 91       	ld	r18, X
    12fa:	80 e2       	ldi	r24, 0x20	; 32
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	a0 e0       	ldi	r26, 0x00	; 0
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	8e 19       	sub	r24, r14
    1304:	9f 09       	sbc	r25, r15
    1306:	a0 0b       	sbc	r26, r16
    1308:	b1 0b       	sbc	r27, r17
    130a:	5c 01       	movw	r10, r24
    130c:	6d 01       	movw	r12, r26
    130e:	a2 1a       	sub	r10, r18
    1310:	b1 08       	sbc	r11, r1
    1312:	c1 08       	sbc	r12, r1
    1314:	d1 08       	sbc	r13, r1
    1316:	a9 ae       	std	Y+57, r10	; 0x39
    1318:	ba ae       	std	Y+58, r11	; 0x3a
    131a:	cb ae       	std	Y+59, r12	; 0x3b
    131c:	dc ae       	std	Y+60, r13	; 0x3c
    131e:	a1 14       	cp	r10, r1
    1320:	b1 04       	cpc	r11, r1
    1322:	c1 04       	cpc	r12, r1
    1324:	d1 04       	cpc	r13, r1
    1326:	09 f4       	brne	.+2      	; 0x132a <__umoddi3+0x164>
    1328:	3f c0       	rjmp	.+126    	; 0x13a8 <__umoddi3+0x1e2>
    132a:	69 ad       	ldd	r22, Y+57	; 0x39
    132c:	06 2e       	mov	r0, r22
    132e:	04 c0       	rjmp	.+8      	; 0x1338 <__umoddi3+0x172>
    1330:	22 0c       	add	r2, r2
    1332:	33 1c       	adc	r3, r3
    1334:	44 1c       	adc	r4, r4
    1336:	55 1c       	adc	r5, r5
    1338:	0a 94       	dec	r0
    133a:	d2 f7       	brpl	.-12     	; 0x1330 <__umoddi3+0x16a>
    133c:	a4 01       	movw	r20, r8
    133e:	93 01       	movw	r18, r6
    1340:	06 2e       	mov	r0, r22
    1342:	04 c0       	rjmp	.+8      	; 0x134c <__umoddi3+0x186>
    1344:	22 0f       	add	r18, r18
    1346:	33 1f       	adc	r19, r19
    1348:	44 1f       	adc	r20, r20
    134a:	55 1f       	adc	r21, r21
    134c:	0a 94       	dec	r0
    134e:	d2 f7       	brpl	.-12     	; 0x1344 <__umoddi3+0x17e>
    1350:	80 e2       	ldi	r24, 0x20	; 32
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	8a 19       	sub	r24, r10
    1356:	9b 09       	sbc	r25, r11
    1358:	6c 96       	adiw	r28, 0x1c	; 28
    135a:	cc ac       	ldd	r12, Y+60	; 0x3c
    135c:	dd ac       	ldd	r13, Y+61	; 0x3d
    135e:	ee ac       	ldd	r14, Y+62	; 0x3e
    1360:	ff ac       	ldd	r15, Y+63	; 0x3f
    1362:	6c 97       	sbiw	r28, 0x1c	; 28
    1364:	04 c0       	rjmp	.+8      	; 0x136e <__umoddi3+0x1a8>
    1366:	f6 94       	lsr	r15
    1368:	e7 94       	ror	r14
    136a:	d7 94       	ror	r13
    136c:	c7 94       	ror	r12
    136e:	8a 95       	dec	r24
    1370:	d2 f7       	brpl	.-12     	; 0x1366 <__umoddi3+0x1a0>
    1372:	87 01       	movw	r16, r14
    1374:	76 01       	movw	r14, r12
    1376:	e2 2a       	or	r14, r18
    1378:	f3 2a       	or	r15, r19
    137a:	04 2b       	or	r16, r20
    137c:	15 2b       	or	r17, r21
    137e:	ed aa       	std	Y+53, r14	; 0x35
    1380:	fe aa       	std	Y+54, r15	; 0x36
    1382:	0f ab       	std	Y+55, r16	; 0x37
    1384:	18 af       	std	Y+56, r17	; 0x38
    1386:	6c 96       	adiw	r28, 0x1c	; 28
    1388:	8c ad       	ldd	r24, Y+60	; 0x3c
    138a:	9d ad       	ldd	r25, Y+61	; 0x3d
    138c:	ae ad       	ldd	r26, Y+62	; 0x3e
    138e:	bf ad       	ldd	r27, Y+63	; 0x3f
    1390:	6c 97       	sbiw	r28, 0x1c	; 28
    1392:	04 c0       	rjmp	.+8      	; 0x139c <__umoddi3+0x1d6>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	aa 1f       	adc	r26, r26
    139a:	bb 1f       	adc	r27, r27
    139c:	6a 95       	dec	r22
    139e:	d2 f7       	brpl	.-12     	; 0x1394 <__umoddi3+0x1ce>
    13a0:	89 ab       	std	Y+49, r24	; 0x31
    13a2:	9a ab       	std	Y+50, r25	; 0x32
    13a4:	ab ab       	std	Y+51, r26	; 0x33
    13a6:	bc ab       	std	Y+52, r27	; 0x34
    13a8:	32 01       	movw	r6, r4
    13aa:	88 24       	eor	r8, r8
    13ac:	99 24       	eor	r9, r9
    13ae:	b2 01       	movw	r22, r4
    13b0:	a1 01       	movw	r20, r2
    13b2:	60 70       	andi	r22, 0x00	; 0
    13b4:	70 70       	andi	r23, 0x00	; 0
    13b6:	21 96       	adiw	r28, 0x01	; 1
    13b8:	4c af       	std	Y+60, r20	; 0x3c
    13ba:	5d af       	std	Y+61, r21	; 0x3d
    13bc:	6e af       	std	Y+62, r22	; 0x3e
    13be:	7f af       	std	Y+63, r23	; 0x3f
    13c0:	21 97       	sbiw	r28, 0x01	; 1
    13c2:	6d a9       	ldd	r22, Y+53	; 0x35
    13c4:	7e a9       	ldd	r23, Y+54	; 0x36
    13c6:	8f a9       	ldd	r24, Y+55	; 0x37
    13c8:	98 ad       	ldd	r25, Y+56	; 0x38
    13ca:	a4 01       	movw	r20, r8
    13cc:	93 01       	movw	r18, r6
    13ce:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    13d2:	7b 01       	movw	r14, r22
    13d4:	8c 01       	movw	r16, r24
    13d6:	6d a9       	ldd	r22, Y+53	; 0x35
    13d8:	7e a9       	ldd	r23, Y+54	; 0x36
    13da:	8f a9       	ldd	r24, Y+55	; 0x37
    13dc:	98 ad       	ldd	r25, Y+56	; 0x38
    13de:	a4 01       	movw	r20, r8
    13e0:	93 01       	movw	r18, r6
    13e2:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    13e6:	ca 01       	movw	r24, r20
    13e8:	b9 01       	movw	r22, r18
    13ea:	21 96       	adiw	r28, 0x01	; 1
    13ec:	2c ad       	ldd	r18, Y+60	; 0x3c
    13ee:	3d ad       	ldd	r19, Y+61	; 0x3d
    13f0:	4e ad       	ldd	r20, Y+62	; 0x3e
    13f2:	5f ad       	ldd	r21, Y+63	; 0x3f
    13f4:	21 97       	sbiw	r28, 0x01	; 1
    13f6:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    13fa:	9b 01       	movw	r18, r22
    13fc:	ac 01       	movw	r20, r24
    13fe:	87 01       	movw	r16, r14
    1400:	ff 24       	eor	r15, r15
    1402:	ee 24       	eor	r14, r14
    1404:	a9 a8       	ldd	r10, Y+49	; 0x31
    1406:	ba a8       	ldd	r11, Y+50	; 0x32
    1408:	cb a8       	ldd	r12, Y+51	; 0x33
    140a:	dc a8       	ldd	r13, Y+52	; 0x34
    140c:	c6 01       	movw	r24, r12
    140e:	aa 27       	eor	r26, r26
    1410:	bb 27       	eor	r27, r27
    1412:	57 01       	movw	r10, r14
    1414:	68 01       	movw	r12, r16
    1416:	a8 2a       	or	r10, r24
    1418:	b9 2a       	or	r11, r25
    141a:	ca 2a       	or	r12, r26
    141c:	db 2a       	or	r13, r27
    141e:	a2 16       	cp	r10, r18
    1420:	b3 06       	cpc	r11, r19
    1422:	c4 06       	cpc	r12, r20
    1424:	d5 06       	cpc	r13, r21
    1426:	90 f4       	brcc	.+36     	; 0x144c <__umoddi3+0x286>
    1428:	a2 0c       	add	r10, r2
    142a:	b3 1c       	adc	r11, r3
    142c:	c4 1c       	adc	r12, r4
    142e:	d5 1c       	adc	r13, r5
    1430:	a2 14       	cp	r10, r2
    1432:	b3 04       	cpc	r11, r3
    1434:	c4 04       	cpc	r12, r4
    1436:	d5 04       	cpc	r13, r5
    1438:	48 f0       	brcs	.+18     	; 0x144c <__umoddi3+0x286>
    143a:	a2 16       	cp	r10, r18
    143c:	b3 06       	cpc	r11, r19
    143e:	c4 06       	cpc	r12, r20
    1440:	d5 06       	cpc	r13, r21
    1442:	20 f4       	brcc	.+8      	; 0x144c <__umoddi3+0x286>
    1444:	a2 0c       	add	r10, r2
    1446:	b3 1c       	adc	r11, r3
    1448:	c4 1c       	adc	r12, r4
    144a:	d5 1c       	adc	r13, r5
    144c:	a2 1a       	sub	r10, r18
    144e:	b3 0a       	sbc	r11, r19
    1450:	c4 0a       	sbc	r12, r20
    1452:	d5 0a       	sbc	r13, r21
    1454:	c6 01       	movw	r24, r12
    1456:	b5 01       	movw	r22, r10
    1458:	a4 01       	movw	r20, r8
    145a:	93 01       	movw	r18, r6
    145c:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    1460:	7b 01       	movw	r14, r22
    1462:	8c 01       	movw	r16, r24
    1464:	c6 01       	movw	r24, r12
    1466:	b5 01       	movw	r22, r10
    1468:	a4 01       	movw	r20, r8
    146a:	93 01       	movw	r18, r6
    146c:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    1470:	ca 01       	movw	r24, r20
    1472:	b9 01       	movw	r22, r18
    1474:	21 96       	adiw	r28, 0x01	; 1
    1476:	2c ad       	ldd	r18, Y+60	; 0x3c
    1478:	3d ad       	ldd	r19, Y+61	; 0x3d
    147a:	4e ad       	ldd	r20, Y+62	; 0x3e
    147c:	5f ad       	ldd	r21, Y+63	; 0x3f
    147e:	21 97       	sbiw	r28, 0x01	; 1
    1480:	ba c1       	rjmp	.+884    	; 0x17f6 <__umoddi3+0x630>
    1482:	21 14       	cp	r2, r1
    1484:	31 04       	cpc	r3, r1
    1486:	41 04       	cpc	r4, r1
    1488:	51 04       	cpc	r5, r1
    148a:	71 f4       	brne	.+28     	; 0x14a8 <__umoddi3+0x2e2>
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	50 e0       	ldi	r21, 0x00	; 0
    149c:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    14a0:	c9 01       	movw	r24, r18
    14a2:	da 01       	movw	r26, r20
    14a4:	1c 01       	movw	r2, r24
    14a6:	2d 01       	movw	r4, r26
    14a8:	00 e0       	ldi	r16, 0x00	; 0
    14aa:	20 16       	cp	r2, r16
    14ac:	00 e0       	ldi	r16, 0x00	; 0
    14ae:	30 06       	cpc	r3, r16
    14b0:	01 e0       	ldi	r16, 0x01	; 1
    14b2:	40 06       	cpc	r4, r16
    14b4:	00 e0       	ldi	r16, 0x00	; 0
    14b6:	50 06       	cpc	r5, r16
    14b8:	88 f4       	brcc	.+34     	; 0x14dc <__umoddi3+0x316>
    14ba:	1f ef       	ldi	r17, 0xFF	; 255
    14bc:	21 16       	cp	r2, r17
    14be:	31 04       	cpc	r3, r1
    14c0:	41 04       	cpc	r4, r1
    14c2:	51 04       	cpc	r5, r1
    14c4:	39 f0       	breq	.+14     	; 0x14d4 <__umoddi3+0x30e>
    14c6:	30 f0       	brcs	.+12     	; 0x14d4 <__umoddi3+0x30e>
    14c8:	68 e0       	ldi	r22, 0x08	; 8
    14ca:	e6 2e       	mov	r14, r22
    14cc:	f1 2c       	mov	r15, r1
    14ce:	01 2d       	mov	r16, r1
    14d0:	11 2d       	mov	r17, r1
    14d2:	18 c0       	rjmp	.+48     	; 0x1504 <__umoddi3+0x33e>
    14d4:	ee 24       	eor	r14, r14
    14d6:	ff 24       	eor	r15, r15
    14d8:	87 01       	movw	r16, r14
    14da:	14 c0       	rjmp	.+40     	; 0x1504 <__umoddi3+0x33e>
    14dc:	40 e0       	ldi	r20, 0x00	; 0
    14de:	24 16       	cp	r2, r20
    14e0:	40 e0       	ldi	r20, 0x00	; 0
    14e2:	34 06       	cpc	r3, r20
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	44 06       	cpc	r4, r20
    14e8:	41 e0       	ldi	r20, 0x01	; 1
    14ea:	54 06       	cpc	r5, r20
    14ec:	30 f0       	brcs	.+12     	; 0x14fa <__umoddi3+0x334>
    14ee:	58 e1       	ldi	r21, 0x18	; 24
    14f0:	e5 2e       	mov	r14, r21
    14f2:	f1 2c       	mov	r15, r1
    14f4:	01 2d       	mov	r16, r1
    14f6:	11 2d       	mov	r17, r1
    14f8:	05 c0       	rjmp	.+10     	; 0x1504 <__umoddi3+0x33e>
    14fa:	40 e1       	ldi	r20, 0x10	; 16
    14fc:	e4 2e       	mov	r14, r20
    14fe:	f1 2c       	mov	r15, r1
    1500:	01 2d       	mov	r16, r1
    1502:	11 2d       	mov	r17, r1
    1504:	d2 01       	movw	r26, r4
    1506:	c1 01       	movw	r24, r2
    1508:	0e 2c       	mov	r0, r14
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <__umoddi3+0x34e>
    150c:	b6 95       	lsr	r27
    150e:	a7 95       	ror	r26
    1510:	97 95       	ror	r25
    1512:	87 95       	ror	r24
    1514:	0a 94       	dec	r0
    1516:	d2 f7       	brpl	.-12     	; 0x150c <__umoddi3+0x346>
    1518:	8f 52       	subi	r24, 0x2F	; 47
    151a:	9f 4f       	sbci	r25, 0xFF	; 255
    151c:	dc 01       	movw	r26, r24
    151e:	2c 91       	ld	r18, X
    1520:	30 e2       	ldi	r19, 0x20	; 32
    1522:	a3 2e       	mov	r10, r19
    1524:	b1 2c       	mov	r11, r1
    1526:	c1 2c       	mov	r12, r1
    1528:	d1 2c       	mov	r13, r1
    152a:	d6 01       	movw	r26, r12
    152c:	c5 01       	movw	r24, r10
    152e:	8e 19       	sub	r24, r14
    1530:	9f 09       	sbc	r25, r15
    1532:	a0 0b       	sbc	r26, r16
    1534:	b1 0b       	sbc	r27, r17
    1536:	7c 01       	movw	r14, r24
    1538:	8d 01       	movw	r16, r26
    153a:	e2 1a       	sub	r14, r18
    153c:	f1 08       	sbc	r15, r1
    153e:	01 09       	sbc	r16, r1
    1540:	11 09       	sbc	r17, r1
    1542:	e9 ae       	std	Y+57, r14	; 0x39
    1544:	fa ae       	std	Y+58, r15	; 0x3a
    1546:	0b af       	std	Y+59, r16	; 0x3b
    1548:	1c af       	std	Y+60, r17	; 0x3c
    154a:	e1 14       	cp	r14, r1
    154c:	f1 04       	cpc	r15, r1
    154e:	01 05       	cpc	r16, r1
    1550:	11 05       	cpc	r17, r1
    1552:	39 f4       	brne	.+14     	; 0x1562 <__umoddi3+0x39c>
    1554:	64 01       	movw	r12, r8
    1556:	53 01       	movw	r10, r6
    1558:	a2 18       	sub	r10, r2
    155a:	b3 08       	sbc	r11, r3
    155c:	c4 08       	sbc	r12, r4
    155e:	d5 08       	sbc	r13, r5
    1560:	e2 c0       	rjmp	.+452    	; 0x1726 <__umoddi3+0x560>
    1562:	f9 ac       	ldd	r15, Y+57	; 0x39
    1564:	68 96       	adiw	r28, 0x18	; 24
    1566:	ff ae       	std	Y+63, r15	; 0x3f
    1568:	68 97       	sbiw	r28, 0x18	; 24
    156a:	0f 2c       	mov	r0, r15
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <__umoddi3+0x3b0>
    156e:	22 0c       	add	r2, r2
    1570:	33 1c       	adc	r3, r3
    1572:	44 1c       	adc	r4, r4
    1574:	55 1c       	adc	r5, r5
    1576:	0a 94       	dec	r0
    1578:	d2 f7       	brpl	.-12     	; 0x156e <__umoddi3+0x3a8>
    157a:	8a 2d       	mov	r24, r10
    157c:	8f 19       	sub	r24, r15
    157e:	64 01       	movw	r12, r8
    1580:	53 01       	movw	r10, r6
    1582:	08 2e       	mov	r0, r24
    1584:	04 c0       	rjmp	.+8      	; 0x158e <__umoddi3+0x3c8>
    1586:	d6 94       	lsr	r13
    1588:	c7 94       	ror	r12
    158a:	b7 94       	ror	r11
    158c:	a7 94       	ror	r10
    158e:	0a 94       	dec	r0
    1590:	d2 f7       	brpl	.-12     	; 0x1586 <__umoddi3+0x3c0>
    1592:	a4 01       	movw	r20, r8
    1594:	93 01       	movw	r18, r6
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <__umoddi3+0x3da>
    1598:	22 0f       	add	r18, r18
    159a:	33 1f       	adc	r19, r19
    159c:	44 1f       	adc	r20, r20
    159e:	55 1f       	adc	r21, r21
    15a0:	fa 94       	dec	r15
    15a2:	d2 f7       	brpl	.-12     	; 0x1598 <__umoddi3+0x3d2>
    15a4:	6c 96       	adiw	r28, 0x1c	; 28
    15a6:	6c ac       	ldd	r6, Y+60	; 0x3c
    15a8:	7d ac       	ldd	r7, Y+61	; 0x3d
    15aa:	8e ac       	ldd	r8, Y+62	; 0x3e
    15ac:	9f ac       	ldd	r9, Y+63	; 0x3f
    15ae:	6c 97       	sbiw	r28, 0x1c	; 28
    15b0:	04 c0       	rjmp	.+8      	; 0x15ba <__umoddi3+0x3f4>
    15b2:	96 94       	lsr	r9
    15b4:	87 94       	ror	r8
    15b6:	77 94       	ror	r7
    15b8:	67 94       	ror	r6
    15ba:	8a 95       	dec	r24
    15bc:	d2 f7       	brpl	.-12     	; 0x15b2 <__umoddi3+0x3ec>
    15be:	84 01       	movw	r16, r8
    15c0:	73 01       	movw	r14, r6
    15c2:	e2 2a       	or	r14, r18
    15c4:	f3 2a       	or	r15, r19
    15c6:	04 2b       	or	r16, r20
    15c8:	15 2b       	or	r17, r21
    15ca:	ed a6       	std	Y+45, r14	; 0x2d
    15cc:	fe a6       	std	Y+46, r15	; 0x2e
    15ce:	0f a7       	std	Y+47, r16	; 0x2f
    15d0:	18 ab       	std	Y+48, r17	; 0x30
    15d2:	32 01       	movw	r6, r4
    15d4:	88 24       	eor	r8, r8
    15d6:	99 24       	eor	r9, r9
    15d8:	b2 01       	movw	r22, r4
    15da:	a1 01       	movw	r20, r2
    15dc:	60 70       	andi	r22, 0x00	; 0
    15de:	70 70       	andi	r23, 0x00	; 0
    15e0:	25 96       	adiw	r28, 0x05	; 5
    15e2:	4c af       	std	Y+60, r20	; 0x3c
    15e4:	5d af       	std	Y+61, r21	; 0x3d
    15e6:	6e af       	std	Y+62, r22	; 0x3e
    15e8:	7f af       	std	Y+63, r23	; 0x3f
    15ea:	25 97       	sbiw	r28, 0x05	; 5
    15ec:	c6 01       	movw	r24, r12
    15ee:	b5 01       	movw	r22, r10
    15f0:	a4 01       	movw	r20, r8
    15f2:	93 01       	movw	r18, r6
    15f4:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    15f8:	7b 01       	movw	r14, r22
    15fa:	8c 01       	movw	r16, r24
    15fc:	c6 01       	movw	r24, r12
    15fe:	b5 01       	movw	r22, r10
    1600:	a4 01       	movw	r20, r8
    1602:	93 01       	movw	r18, r6
    1604:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    1608:	ca 01       	movw	r24, r20
    160a:	b9 01       	movw	r22, r18
    160c:	25 96       	adiw	r28, 0x05	; 5
    160e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1610:	3d ad       	ldd	r19, Y+61	; 0x3d
    1612:	4e ad       	ldd	r20, Y+62	; 0x3e
    1614:	5f ad       	ldd	r21, Y+63	; 0x3f
    1616:	25 97       	sbiw	r28, 0x05	; 5
    1618:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    161c:	9b 01       	movw	r18, r22
    161e:	ac 01       	movw	r20, r24
    1620:	87 01       	movw	r16, r14
    1622:	ff 24       	eor	r15, r15
    1624:	ee 24       	eor	r14, r14
    1626:	ad a4       	ldd	r10, Y+45	; 0x2d
    1628:	be a4       	ldd	r11, Y+46	; 0x2e
    162a:	cf a4       	ldd	r12, Y+47	; 0x2f
    162c:	d8 a8       	ldd	r13, Y+48	; 0x30
    162e:	c6 01       	movw	r24, r12
    1630:	aa 27       	eor	r26, r26
    1632:	bb 27       	eor	r27, r27
    1634:	5c 01       	movw	r10, r24
    1636:	6d 01       	movw	r12, r26
    1638:	ae 28       	or	r10, r14
    163a:	bf 28       	or	r11, r15
    163c:	c0 2a       	or	r12, r16
    163e:	d1 2a       	or	r13, r17
    1640:	a2 16       	cp	r10, r18
    1642:	b3 06       	cpc	r11, r19
    1644:	c4 06       	cpc	r12, r20
    1646:	d5 06       	cpc	r13, r21
    1648:	90 f4       	brcc	.+36     	; 0x166e <__umoddi3+0x4a8>
    164a:	a2 0c       	add	r10, r2
    164c:	b3 1c       	adc	r11, r3
    164e:	c4 1c       	adc	r12, r4
    1650:	d5 1c       	adc	r13, r5
    1652:	a2 14       	cp	r10, r2
    1654:	b3 04       	cpc	r11, r3
    1656:	c4 04       	cpc	r12, r4
    1658:	d5 04       	cpc	r13, r5
    165a:	48 f0       	brcs	.+18     	; 0x166e <__umoddi3+0x4a8>
    165c:	a2 16       	cp	r10, r18
    165e:	b3 06       	cpc	r11, r19
    1660:	c4 06       	cpc	r12, r20
    1662:	d5 06       	cpc	r13, r21
    1664:	20 f4       	brcc	.+8      	; 0x166e <__umoddi3+0x4a8>
    1666:	a2 0c       	add	r10, r2
    1668:	b3 1c       	adc	r11, r3
    166a:	c4 1c       	adc	r12, r4
    166c:	d5 1c       	adc	r13, r5
    166e:	a2 1a       	sub	r10, r18
    1670:	b3 0a       	sbc	r11, r19
    1672:	c4 0a       	sbc	r12, r20
    1674:	d5 0a       	sbc	r13, r21
    1676:	c6 01       	movw	r24, r12
    1678:	b5 01       	movw	r22, r10
    167a:	a4 01       	movw	r20, r8
    167c:	93 01       	movw	r18, r6
    167e:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    1682:	7b 01       	movw	r14, r22
    1684:	8c 01       	movw	r16, r24
    1686:	c6 01       	movw	r24, r12
    1688:	b5 01       	movw	r22, r10
    168a:	a4 01       	movw	r20, r8
    168c:	93 01       	movw	r18, r6
    168e:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    1692:	ca 01       	movw	r24, r20
    1694:	b9 01       	movw	r22, r18
    1696:	25 96       	adiw	r28, 0x05	; 5
    1698:	2c ad       	ldd	r18, Y+60	; 0x3c
    169a:	3d ad       	ldd	r19, Y+61	; 0x3d
    169c:	4e ad       	ldd	r20, Y+62	; 0x3e
    169e:	5f ad       	ldd	r21, Y+63	; 0x3f
    16a0:	25 97       	sbiw	r28, 0x05	; 5
    16a2:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    16a6:	9b 01       	movw	r18, r22
    16a8:	ac 01       	movw	r20, r24
    16aa:	87 01       	movw	r16, r14
    16ac:	ff 24       	eor	r15, r15
    16ae:	ee 24       	eor	r14, r14
    16b0:	8d a5       	ldd	r24, Y+45	; 0x2d
    16b2:	9e a5       	ldd	r25, Y+46	; 0x2e
    16b4:	af a5       	ldd	r26, Y+47	; 0x2f
    16b6:	b8 a9       	ldd	r27, Y+48	; 0x30
    16b8:	a0 70       	andi	r26, 0x00	; 0
    16ba:	b0 70       	andi	r27, 0x00	; 0
    16bc:	57 01       	movw	r10, r14
    16be:	68 01       	movw	r12, r16
    16c0:	a8 2a       	or	r10, r24
    16c2:	b9 2a       	or	r11, r25
    16c4:	ca 2a       	or	r12, r26
    16c6:	db 2a       	or	r13, r27
    16c8:	a2 16       	cp	r10, r18
    16ca:	b3 06       	cpc	r11, r19
    16cc:	c4 06       	cpc	r12, r20
    16ce:	d5 06       	cpc	r13, r21
    16d0:	90 f4       	brcc	.+36     	; 0x16f6 <__umoddi3+0x530>
    16d2:	a2 0c       	add	r10, r2
    16d4:	b3 1c       	adc	r11, r3
    16d6:	c4 1c       	adc	r12, r4
    16d8:	d5 1c       	adc	r13, r5
    16da:	a2 14       	cp	r10, r2
    16dc:	b3 04       	cpc	r11, r3
    16de:	c4 04       	cpc	r12, r4
    16e0:	d5 04       	cpc	r13, r5
    16e2:	48 f0       	brcs	.+18     	; 0x16f6 <__umoddi3+0x530>
    16e4:	a2 16       	cp	r10, r18
    16e6:	b3 06       	cpc	r11, r19
    16e8:	c4 06       	cpc	r12, r20
    16ea:	d5 06       	cpc	r13, r21
    16ec:	20 f4       	brcc	.+8      	; 0x16f6 <__umoddi3+0x530>
    16ee:	a2 0c       	add	r10, r2
    16f0:	b3 1c       	adc	r11, r3
    16f2:	c4 1c       	adc	r12, r4
    16f4:	d5 1c       	adc	r13, r5
    16f6:	6c 96       	adiw	r28, 0x1c	; 28
    16f8:	ec ac       	ldd	r14, Y+60	; 0x3c
    16fa:	fd ac       	ldd	r15, Y+61	; 0x3d
    16fc:	0e ad       	ldd	r16, Y+62	; 0x3e
    16fe:	1f ad       	ldd	r17, Y+63	; 0x3f
    1700:	6c 97       	sbiw	r28, 0x1c	; 28
    1702:	68 96       	adiw	r28, 0x18	; 24
    1704:	0f ac       	ldd	r0, Y+63	; 0x3f
    1706:	68 97       	sbiw	r28, 0x18	; 24
    1708:	04 c0       	rjmp	.+8      	; 0x1712 <__umoddi3+0x54c>
    170a:	ee 0c       	add	r14, r14
    170c:	ff 1c       	adc	r15, r15
    170e:	00 1f       	adc	r16, r16
    1710:	11 1f       	adc	r17, r17
    1712:	0a 94       	dec	r0
    1714:	d2 f7       	brpl	.-12     	; 0x170a <__umoddi3+0x544>
    1716:	e9 aa       	std	Y+49, r14	; 0x31
    1718:	fa aa       	std	Y+50, r15	; 0x32
    171a:	0b ab       	std	Y+51, r16	; 0x33
    171c:	1c ab       	std	Y+52, r17	; 0x34
    171e:	a2 1a       	sub	r10, r18
    1720:	b3 0a       	sbc	r11, r19
    1722:	c4 0a       	sbc	r12, r20
    1724:	d5 0a       	sbc	r13, r21
    1726:	32 01       	movw	r6, r4
    1728:	88 24       	eor	r8, r8
    172a:	99 24       	eor	r9, r9
    172c:	b2 01       	movw	r22, r4
    172e:	a1 01       	movw	r20, r2
    1730:	60 70       	andi	r22, 0x00	; 0
    1732:	70 70       	andi	r23, 0x00	; 0
    1734:	29 96       	adiw	r28, 0x09	; 9
    1736:	4c af       	std	Y+60, r20	; 0x3c
    1738:	5d af       	std	Y+61, r21	; 0x3d
    173a:	6e af       	std	Y+62, r22	; 0x3e
    173c:	7f af       	std	Y+63, r23	; 0x3f
    173e:	29 97       	sbiw	r28, 0x09	; 9
    1740:	c6 01       	movw	r24, r12
    1742:	b5 01       	movw	r22, r10
    1744:	a4 01       	movw	r20, r8
    1746:	93 01       	movw	r18, r6
    1748:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    174c:	7b 01       	movw	r14, r22
    174e:	8c 01       	movw	r16, r24
    1750:	c6 01       	movw	r24, r12
    1752:	b5 01       	movw	r22, r10
    1754:	a4 01       	movw	r20, r8
    1756:	93 01       	movw	r18, r6
    1758:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    175c:	ca 01       	movw	r24, r20
    175e:	b9 01       	movw	r22, r18
    1760:	29 96       	adiw	r28, 0x09	; 9
    1762:	2c ad       	ldd	r18, Y+60	; 0x3c
    1764:	3d ad       	ldd	r19, Y+61	; 0x3d
    1766:	4e ad       	ldd	r20, Y+62	; 0x3e
    1768:	5f ad       	ldd	r21, Y+63	; 0x3f
    176a:	29 97       	sbiw	r28, 0x09	; 9
    176c:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    1770:	9b 01       	movw	r18, r22
    1772:	ac 01       	movw	r20, r24
    1774:	87 01       	movw	r16, r14
    1776:	ff 24       	eor	r15, r15
    1778:	ee 24       	eor	r14, r14
    177a:	a9 a8       	ldd	r10, Y+49	; 0x31
    177c:	ba a8       	ldd	r11, Y+50	; 0x32
    177e:	cb a8       	ldd	r12, Y+51	; 0x33
    1780:	dc a8       	ldd	r13, Y+52	; 0x34
    1782:	c6 01       	movw	r24, r12
    1784:	aa 27       	eor	r26, r26
    1786:	bb 27       	eor	r27, r27
    1788:	57 01       	movw	r10, r14
    178a:	68 01       	movw	r12, r16
    178c:	a8 2a       	or	r10, r24
    178e:	b9 2a       	or	r11, r25
    1790:	ca 2a       	or	r12, r26
    1792:	db 2a       	or	r13, r27
    1794:	a2 16       	cp	r10, r18
    1796:	b3 06       	cpc	r11, r19
    1798:	c4 06       	cpc	r12, r20
    179a:	d5 06       	cpc	r13, r21
    179c:	90 f4       	brcc	.+36     	; 0x17c2 <__umoddi3+0x5fc>
    179e:	a2 0c       	add	r10, r2
    17a0:	b3 1c       	adc	r11, r3
    17a2:	c4 1c       	adc	r12, r4
    17a4:	d5 1c       	adc	r13, r5
    17a6:	a2 14       	cp	r10, r2
    17a8:	b3 04       	cpc	r11, r3
    17aa:	c4 04       	cpc	r12, r4
    17ac:	d5 04       	cpc	r13, r5
    17ae:	48 f0       	brcs	.+18     	; 0x17c2 <__umoddi3+0x5fc>
    17b0:	a2 16       	cp	r10, r18
    17b2:	b3 06       	cpc	r11, r19
    17b4:	c4 06       	cpc	r12, r20
    17b6:	d5 06       	cpc	r13, r21
    17b8:	20 f4       	brcc	.+8      	; 0x17c2 <__umoddi3+0x5fc>
    17ba:	a2 0c       	add	r10, r2
    17bc:	b3 1c       	adc	r11, r3
    17be:	c4 1c       	adc	r12, r4
    17c0:	d5 1c       	adc	r13, r5
    17c2:	a2 1a       	sub	r10, r18
    17c4:	b3 0a       	sbc	r11, r19
    17c6:	c4 0a       	sbc	r12, r20
    17c8:	d5 0a       	sbc	r13, r21
    17ca:	c6 01       	movw	r24, r12
    17cc:	b5 01       	movw	r22, r10
    17ce:	a4 01       	movw	r20, r8
    17d0:	93 01       	movw	r18, r6
    17d2:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    17d6:	7b 01       	movw	r14, r22
    17d8:	8c 01       	movw	r16, r24
    17da:	c6 01       	movw	r24, r12
    17dc:	b5 01       	movw	r22, r10
    17de:	a4 01       	movw	r20, r8
    17e0:	93 01       	movw	r18, r6
    17e2:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    17e6:	ca 01       	movw	r24, r20
    17e8:	b9 01       	movw	r22, r18
    17ea:	29 96       	adiw	r28, 0x09	; 9
    17ec:	2c ad       	ldd	r18, Y+60	; 0x3c
    17ee:	3d ad       	ldd	r19, Y+61	; 0x3d
    17f0:	4e ad       	ldd	r20, Y+62	; 0x3e
    17f2:	5f ad       	ldd	r21, Y+63	; 0x3f
    17f4:	29 97       	sbiw	r28, 0x09	; 9
    17f6:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    17fa:	9b 01       	movw	r18, r22
    17fc:	ac 01       	movw	r20, r24
    17fe:	87 01       	movw	r16, r14
    1800:	ff 24       	eor	r15, r15
    1802:	ee 24       	eor	r14, r14
    1804:	89 a9       	ldd	r24, Y+49	; 0x31
    1806:	9a a9       	ldd	r25, Y+50	; 0x32
    1808:	ab a9       	ldd	r26, Y+51	; 0x33
    180a:	bc a9       	ldd	r27, Y+52	; 0x34
    180c:	a0 70       	andi	r26, 0x00	; 0
    180e:	b0 70       	andi	r27, 0x00	; 0
    1810:	e8 2a       	or	r14, r24
    1812:	f9 2a       	or	r15, r25
    1814:	0a 2b       	or	r16, r26
    1816:	1b 2b       	or	r17, r27
    1818:	e2 16       	cp	r14, r18
    181a:	f3 06       	cpc	r15, r19
    181c:	04 07       	cpc	r16, r20
    181e:	15 07       	cpc	r17, r21
    1820:	90 f4       	brcc	.+36     	; 0x1846 <__umoddi3+0x680>
    1822:	e2 0c       	add	r14, r2
    1824:	f3 1c       	adc	r15, r3
    1826:	04 1d       	adc	r16, r4
    1828:	15 1d       	adc	r17, r5
    182a:	e2 14       	cp	r14, r2
    182c:	f3 04       	cpc	r15, r3
    182e:	04 05       	cpc	r16, r4
    1830:	15 05       	cpc	r17, r5
    1832:	48 f0       	brcs	.+18     	; 0x1846 <__umoddi3+0x680>
    1834:	e2 16       	cp	r14, r18
    1836:	f3 06       	cpc	r15, r19
    1838:	04 07       	cpc	r16, r20
    183a:	15 07       	cpc	r17, r21
    183c:	20 f4       	brcc	.+8      	; 0x1846 <__umoddi3+0x680>
    183e:	e2 0c       	add	r14, r2
    1840:	f3 1c       	adc	r15, r3
    1842:	04 1d       	adc	r16, r4
    1844:	15 1d       	adc	r17, r5
    1846:	e2 1a       	sub	r14, r18
    1848:	f3 0a       	sbc	r15, r19
    184a:	04 0b       	sbc	r16, r20
    184c:	15 0b       	sbc	r17, r21
    184e:	d8 01       	movw	r26, r16
    1850:	c7 01       	movw	r24, r14
    1852:	09 ac       	ldd	r0, Y+57	; 0x39
    1854:	04 c0       	rjmp	.+8      	; 0x185e <__umoddi3+0x698>
    1856:	b6 95       	lsr	r27
    1858:	a7 95       	ror	r26
    185a:	97 95       	ror	r25
    185c:	87 95       	ror	r24
    185e:	0a 94       	dec	r0
    1860:	d2 f7       	brpl	.-12     	; 0x1856 <__umoddi3+0x690>
    1862:	89 8b       	std	Y+17, r24	; 0x11
    1864:	9a 8b       	std	Y+18, r25	; 0x12
    1866:	ab 8b       	std	Y+19, r26	; 0x13
    1868:	bc 8b       	std	Y+20, r27	; 0x14
    186a:	1d 8a       	std	Y+21, r1	; 0x15
    186c:	1e 8a       	std	Y+22, r1	; 0x16
    186e:	1f 8a       	std	Y+23, r1	; 0x17
    1870:	18 8e       	std	Y+24, r1	; 0x18
    1872:	28 2f       	mov	r18, r24
    1874:	3a 89       	ldd	r19, Y+18	; 0x12
    1876:	4b 89       	ldd	r20, Y+19	; 0x13
    1878:	5c 89       	ldd	r21, Y+20	; 0x14
    187a:	6d 89       	ldd	r22, Y+21	; 0x15
    187c:	0c c3       	rjmp	.+1560   	; 0x1e96 <__umoddi3+0xcd0>
    187e:	6a 14       	cp	r6, r10
    1880:	7b 04       	cpc	r7, r11
    1882:	8c 04       	cpc	r8, r12
    1884:	9d 04       	cpc	r9, r13
    1886:	08 f4       	brcc	.+2      	; 0x188a <__umoddi3+0x6c4>
    1888:	09 c3       	rjmp	.+1554   	; 0x1e9c <__umoddi3+0xcd6>
    188a:	00 e0       	ldi	r16, 0x00	; 0
    188c:	a0 16       	cp	r10, r16
    188e:	00 e0       	ldi	r16, 0x00	; 0
    1890:	b0 06       	cpc	r11, r16
    1892:	01 e0       	ldi	r16, 0x01	; 1
    1894:	c0 06       	cpc	r12, r16
    1896:	00 e0       	ldi	r16, 0x00	; 0
    1898:	d0 06       	cpc	r13, r16
    189a:	88 f4       	brcc	.+34     	; 0x18be <__umoddi3+0x6f8>
    189c:	1f ef       	ldi	r17, 0xFF	; 255
    189e:	a1 16       	cp	r10, r17
    18a0:	b1 04       	cpc	r11, r1
    18a2:	c1 04       	cpc	r12, r1
    18a4:	d1 04       	cpc	r13, r1
    18a6:	39 f0       	breq	.+14     	; 0x18b6 <__umoddi3+0x6f0>
    18a8:	30 f0       	brcs	.+12     	; 0x18b6 <__umoddi3+0x6f0>
    18aa:	28 e0       	ldi	r18, 0x08	; 8
    18ac:	e2 2e       	mov	r14, r18
    18ae:	f1 2c       	mov	r15, r1
    18b0:	01 2d       	mov	r16, r1
    18b2:	11 2d       	mov	r17, r1
    18b4:	18 c0       	rjmp	.+48     	; 0x18e6 <__umoddi3+0x720>
    18b6:	ee 24       	eor	r14, r14
    18b8:	ff 24       	eor	r15, r15
    18ba:	87 01       	movw	r16, r14
    18bc:	14 c0       	rjmp	.+40     	; 0x18e6 <__umoddi3+0x720>
    18be:	40 e0       	ldi	r20, 0x00	; 0
    18c0:	a4 16       	cp	r10, r20
    18c2:	40 e0       	ldi	r20, 0x00	; 0
    18c4:	b4 06       	cpc	r11, r20
    18c6:	40 e0       	ldi	r20, 0x00	; 0
    18c8:	c4 06       	cpc	r12, r20
    18ca:	41 e0       	ldi	r20, 0x01	; 1
    18cc:	d4 06       	cpc	r13, r20
    18ce:	30 f0       	brcs	.+12     	; 0x18dc <__umoddi3+0x716>
    18d0:	98 e1       	ldi	r25, 0x18	; 24
    18d2:	e9 2e       	mov	r14, r25
    18d4:	f1 2c       	mov	r15, r1
    18d6:	01 2d       	mov	r16, r1
    18d8:	11 2d       	mov	r17, r1
    18da:	05 c0       	rjmp	.+10     	; 0x18e6 <__umoddi3+0x720>
    18dc:	80 e1       	ldi	r24, 0x10	; 16
    18de:	e8 2e       	mov	r14, r24
    18e0:	f1 2c       	mov	r15, r1
    18e2:	01 2d       	mov	r16, r1
    18e4:	11 2d       	mov	r17, r1
    18e6:	d6 01       	movw	r26, r12
    18e8:	c5 01       	movw	r24, r10
    18ea:	0e 2c       	mov	r0, r14
    18ec:	04 c0       	rjmp	.+8      	; 0x18f6 <__umoddi3+0x730>
    18ee:	b6 95       	lsr	r27
    18f0:	a7 95       	ror	r26
    18f2:	97 95       	ror	r25
    18f4:	87 95       	ror	r24
    18f6:	0a 94       	dec	r0
    18f8:	d2 f7       	brpl	.-12     	; 0x18ee <__umoddi3+0x728>
    18fa:	8f 52       	subi	r24, 0x2F	; 47
    18fc:	9f 4f       	sbci	r25, 0xFF	; 255
    18fe:	dc 01       	movw	r26, r24
    1900:	2c 91       	ld	r18, X
    1902:	80 e2       	ldi	r24, 0x20	; 32
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	a0 e0       	ldi	r26, 0x00	; 0
    1908:	b0 e0       	ldi	r27, 0x00	; 0
    190a:	8e 19       	sub	r24, r14
    190c:	9f 09       	sbc	r25, r15
    190e:	a0 0b       	sbc	r26, r16
    1910:	b1 0b       	sbc	r27, r17
    1912:	82 1b       	sub	r24, r18
    1914:	91 09       	sbc	r25, r1
    1916:	a1 09       	sbc	r26, r1
    1918:	b1 09       	sbc	r27, r1
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	a1 05       	cpc	r26, r1
    191e:	b1 05       	cpc	r27, r1
    1920:	09 f0       	breq	.+2      	; 0x1924 <__umoddi3+0x75e>
    1922:	4f c0       	rjmp	.+158    	; 0x19c2 <__umoddi3+0x7fc>
    1924:	a6 14       	cp	r10, r6
    1926:	b7 04       	cpc	r11, r7
    1928:	c8 04       	cpc	r12, r8
    192a:	d9 04       	cpc	r13, r9
    192c:	58 f0       	brcs	.+22     	; 0x1944 <__umoddi3+0x77e>
    192e:	6c 96       	adiw	r28, 0x1c	; 28
    1930:	ec ac       	ldd	r14, Y+60	; 0x3c
    1932:	fd ac       	ldd	r15, Y+61	; 0x3d
    1934:	0e ad       	ldd	r16, Y+62	; 0x3e
    1936:	1f ad       	ldd	r17, Y+63	; 0x3f
    1938:	6c 97       	sbiw	r28, 0x1c	; 28
    193a:	e2 14       	cp	r14, r2
    193c:	f3 04       	cpc	r15, r3
    193e:	04 05       	cpc	r16, r4
    1940:	15 05       	cpc	r17, r5
    1942:	68 f1       	brcs	.+90     	; 0x199e <__umoddi3+0x7d8>
    1944:	6c 96       	adiw	r28, 0x1c	; 28
    1946:	ec ac       	ldd	r14, Y+60	; 0x3c
    1948:	fd ac       	ldd	r15, Y+61	; 0x3d
    194a:	0e ad       	ldd	r16, Y+62	; 0x3e
    194c:	1f ad       	ldd	r17, Y+63	; 0x3f
    194e:	6c 97       	sbiw	r28, 0x1c	; 28
    1950:	e2 18       	sub	r14, r2
    1952:	f3 08       	sbc	r15, r3
    1954:	04 09       	sbc	r16, r4
    1956:	15 09       	sbc	r17, r5
    1958:	a4 01       	movw	r20, r8
    195a:	93 01       	movw	r18, r6
    195c:	2a 19       	sub	r18, r10
    195e:	3b 09       	sbc	r19, r11
    1960:	4c 09       	sbc	r20, r12
    1962:	5d 09       	sbc	r21, r13
    1964:	aa 24       	eor	r10, r10
    1966:	bb 24       	eor	r11, r11
    1968:	65 01       	movw	r12, r10
    196a:	6c 96       	adiw	r28, 0x1c	; 28
    196c:	6c ad       	ldd	r22, Y+60	; 0x3c
    196e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1970:	8e ad       	ldd	r24, Y+62	; 0x3e
    1972:	9f ad       	ldd	r25, Y+63	; 0x3f
    1974:	6c 97       	sbiw	r28, 0x1c	; 28
    1976:	6e 15       	cp	r22, r14
    1978:	7f 05       	cpc	r23, r15
    197a:	80 07       	cpc	r24, r16
    197c:	91 07       	cpc	r25, r17
    197e:	28 f4       	brcc	.+10     	; 0x198a <__umoddi3+0x7c4>
    1980:	b1 e0       	ldi	r27, 0x01	; 1
    1982:	ab 2e       	mov	r10, r27
    1984:	b1 2c       	mov	r11, r1
    1986:	c1 2c       	mov	r12, r1
    1988:	d1 2c       	mov	r13, r1
    198a:	da 01       	movw	r26, r20
    198c:	c9 01       	movw	r24, r18
    198e:	8a 19       	sub	r24, r10
    1990:	9b 09       	sbc	r25, r11
    1992:	ac 09       	sbc	r26, r12
    1994:	bd 09       	sbc	r27, r13
    1996:	8d ab       	std	Y+53, r24	; 0x35
    1998:	9e ab       	std	Y+54, r25	; 0x36
    199a:	af ab       	std	Y+55, r26	; 0x37
    199c:	b8 af       	std	Y+56, r27	; 0x38
    199e:	e9 8a       	std	Y+17, r14	; 0x11
    19a0:	fa 8a       	std	Y+18, r15	; 0x12
    19a2:	0b 8b       	std	Y+19, r16	; 0x13
    19a4:	1c 8b       	std	Y+20, r17	; 0x14
    19a6:	6d a8       	ldd	r6, Y+53	; 0x35
    19a8:	7e a8       	ldd	r7, Y+54	; 0x36
    19aa:	8f a8       	ldd	r8, Y+55	; 0x37
    19ac:	98 ac       	ldd	r9, Y+56	; 0x38
    19ae:	6d 8a       	std	Y+21, r6	; 0x15
    19b0:	7e 8a       	std	Y+22, r7	; 0x16
    19b2:	8f 8a       	std	Y+23, r8	; 0x17
    19b4:	98 8e       	std	Y+24, r9	; 0x18
    19b6:	2e 2d       	mov	r18, r14
    19b8:	3a 89       	ldd	r19, Y+18	; 0x12
    19ba:	4b 89       	ldd	r20, Y+19	; 0x13
    19bc:	5c 89       	ldd	r21, Y+20	; 0x14
    19be:	6d a9       	ldd	r22, Y+53	; 0x35
    19c0:	6a c2       	rjmp	.+1236   	; 0x1e96 <__umoddi3+0xcd0>
    19c2:	67 96       	adiw	r28, 0x17	; 23
    19c4:	8f af       	std	Y+63, r24	; 0x3f
    19c6:	67 97       	sbiw	r28, 0x17	; 23
    19c8:	a6 01       	movw	r20, r12
    19ca:	95 01       	movw	r18, r10
    19cc:	08 2e       	mov	r0, r24
    19ce:	04 c0       	rjmp	.+8      	; 0x19d8 <__umoddi3+0x812>
    19d0:	22 0f       	add	r18, r18
    19d2:	33 1f       	adc	r19, r19
    19d4:	44 1f       	adc	r20, r20
    19d6:	55 1f       	adc	r21, r21
    19d8:	0a 94       	dec	r0
    19da:	d2 f7       	brpl	.-12     	; 0x19d0 <__umoddi3+0x80a>
    19dc:	a0 e2       	ldi	r26, 0x20	; 32
    19de:	aa 2e       	mov	r10, r26
    19e0:	a8 1a       	sub	r10, r24
    19e2:	66 96       	adiw	r28, 0x16	; 22
    19e4:	af ae       	std	Y+63, r10	; 0x3f
    19e6:	66 97       	sbiw	r28, 0x16	; 22
    19e8:	d2 01       	movw	r26, r4
    19ea:	c1 01       	movw	r24, r2
    19ec:	04 c0       	rjmp	.+8      	; 0x19f6 <__umoddi3+0x830>
    19ee:	b6 95       	lsr	r27
    19f0:	a7 95       	ror	r26
    19f2:	97 95       	ror	r25
    19f4:	87 95       	ror	r24
    19f6:	aa 94       	dec	r10
    19f8:	d2 f7       	brpl	.-12     	; 0x19ee <__umoddi3+0x828>
    19fa:	6c 01       	movw	r12, r24
    19fc:	7d 01       	movw	r14, r26
    19fe:	c2 2a       	or	r12, r18
    1a00:	d3 2a       	or	r13, r19
    1a02:	e4 2a       	or	r14, r20
    1a04:	f5 2a       	or	r15, r21
    1a06:	c9 a6       	std	Y+41, r12	; 0x29
    1a08:	da a6       	std	Y+42, r13	; 0x2a
    1a0a:	eb a6       	std	Y+43, r14	; 0x2b
    1a0c:	fc a6       	std	Y+44, r15	; 0x2c
    1a0e:	82 01       	movw	r16, r4
    1a10:	71 01       	movw	r14, r2
    1a12:	67 96       	adiw	r28, 0x17	; 23
    1a14:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a16:	67 97       	sbiw	r28, 0x17	; 23
    1a18:	04 c0       	rjmp	.+8      	; 0x1a22 <__umoddi3+0x85c>
    1a1a:	ee 0c       	add	r14, r14
    1a1c:	ff 1c       	adc	r15, r15
    1a1e:	00 1f       	adc	r16, r16
    1a20:	11 1f       	adc	r17, r17
    1a22:	0a 94       	dec	r0
    1a24:	d2 f7       	brpl	.-12     	; 0x1a1a <__umoddi3+0x854>
    1a26:	ed a2       	std	Y+37, r14	; 0x25
    1a28:	fe a2       	std	Y+38, r15	; 0x26
    1a2a:	0f a3       	std	Y+39, r16	; 0x27
    1a2c:	18 a7       	std	Y+40, r17	; 0x28
    1a2e:	64 01       	movw	r12, r8
    1a30:	53 01       	movw	r10, r6
    1a32:	66 96       	adiw	r28, 0x16	; 22
    1a34:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a36:	66 97       	sbiw	r28, 0x16	; 22
    1a38:	04 c0       	rjmp	.+8      	; 0x1a42 <__umoddi3+0x87c>
    1a3a:	d6 94       	lsr	r13
    1a3c:	c7 94       	ror	r12
    1a3e:	b7 94       	ror	r11
    1a40:	a7 94       	ror	r10
    1a42:	0a 94       	dec	r0
    1a44:	d2 f7       	brpl	.-12     	; 0x1a3a <__umoddi3+0x874>
    1a46:	a4 01       	movw	r20, r8
    1a48:	93 01       	movw	r18, r6
    1a4a:	67 96       	adiw	r28, 0x17	; 23
    1a4c:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a4e:	67 97       	sbiw	r28, 0x17	; 23
    1a50:	04 c0       	rjmp	.+8      	; 0x1a5a <__umoddi3+0x894>
    1a52:	22 0f       	add	r18, r18
    1a54:	33 1f       	adc	r19, r19
    1a56:	44 1f       	adc	r20, r20
    1a58:	55 1f       	adc	r21, r21
    1a5a:	0a 94       	dec	r0
    1a5c:	d2 f7       	brpl	.-12     	; 0x1a52 <__umoddi3+0x88c>
    1a5e:	6c 96       	adiw	r28, 0x1c	; 28
    1a60:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a62:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a64:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a66:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a68:	6c 97       	sbiw	r28, 0x1c	; 28
    1a6a:	66 96       	adiw	r28, 0x16	; 22
    1a6c:	0f ac       	ldd	r0, Y+63	; 0x3f
    1a6e:	66 97       	sbiw	r28, 0x16	; 22
    1a70:	04 c0       	rjmp	.+8      	; 0x1a7a <__umoddi3+0x8b4>
    1a72:	b6 95       	lsr	r27
    1a74:	a7 95       	ror	r26
    1a76:	97 95       	ror	r25
    1a78:	87 95       	ror	r24
    1a7a:	0a 94       	dec	r0
    1a7c:	d2 f7       	brpl	.-12     	; 0x1a72 <__umoddi3+0x8ac>
    1a7e:	3c 01       	movw	r6, r24
    1a80:	4d 01       	movw	r8, r26
    1a82:	62 2a       	or	r6, r18
    1a84:	73 2a       	or	r7, r19
    1a86:	84 2a       	or	r8, r20
    1a88:	95 2a       	or	r9, r21
    1a8a:	69 a2       	std	Y+33, r6	; 0x21
    1a8c:	7a a2       	std	Y+34, r7	; 0x22
    1a8e:	8b a2       	std	Y+35, r8	; 0x23
    1a90:	9c a2       	std	Y+36, r9	; 0x24
    1a92:	6c 96       	adiw	r28, 0x1c	; 28
    1a94:	ec ac       	ldd	r14, Y+60	; 0x3c
    1a96:	fd ac       	ldd	r15, Y+61	; 0x3d
    1a98:	0e ad       	ldd	r16, Y+62	; 0x3e
    1a9a:	1f ad       	ldd	r17, Y+63	; 0x3f
    1a9c:	6c 97       	sbiw	r28, 0x1c	; 28
    1a9e:	67 96       	adiw	r28, 0x17	; 23
    1aa0:	0f ac       	ldd	r0, Y+63	; 0x3f
    1aa2:	67 97       	sbiw	r28, 0x17	; 23
    1aa4:	04 c0       	rjmp	.+8      	; 0x1aae <__umoddi3+0x8e8>
    1aa6:	ee 0c       	add	r14, r14
    1aa8:	ff 1c       	adc	r15, r15
    1aaa:	00 1f       	adc	r16, r16
    1aac:	11 1f       	adc	r17, r17
    1aae:	0a 94       	dec	r0
    1ab0:	d2 f7       	brpl	.-12     	; 0x1aa6 <__umoddi3+0x8e0>
    1ab2:	ed 8e       	std	Y+29, r14	; 0x1d
    1ab4:	fe 8e       	std	Y+30, r15	; 0x1e
    1ab6:	0f 8f       	std	Y+31, r16	; 0x1f
    1ab8:	18 a3       	std	Y+32, r17	; 0x20
    1aba:	49 a5       	ldd	r20, Y+41	; 0x29
    1abc:	5a a5       	ldd	r21, Y+42	; 0x2a
    1abe:	6b a5       	ldd	r22, Y+43	; 0x2b
    1ac0:	7c a5       	ldd	r23, Y+44	; 0x2c
    1ac2:	3b 01       	movw	r6, r22
    1ac4:	88 24       	eor	r8, r8
    1ac6:	99 24       	eor	r9, r9
    1ac8:	60 70       	andi	r22, 0x00	; 0
    1aca:	70 70       	andi	r23, 0x00	; 0
    1acc:	2d 96       	adiw	r28, 0x0d	; 13
    1ace:	4c af       	std	Y+60, r20	; 0x3c
    1ad0:	5d af       	std	Y+61, r21	; 0x3d
    1ad2:	6e af       	std	Y+62, r22	; 0x3e
    1ad4:	7f af       	std	Y+63, r23	; 0x3f
    1ad6:	2d 97       	sbiw	r28, 0x0d	; 13
    1ad8:	c6 01       	movw	r24, r12
    1ada:	b5 01       	movw	r22, r10
    1adc:	a4 01       	movw	r20, r8
    1ade:	93 01       	movw	r18, r6
    1ae0:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    1ae4:	7b 01       	movw	r14, r22
    1ae6:	8c 01       	movw	r16, r24
    1ae8:	c6 01       	movw	r24, r12
    1aea:	b5 01       	movw	r22, r10
    1aec:	a4 01       	movw	r20, r8
    1aee:	93 01       	movw	r18, r6
    1af0:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    1af4:	c9 01       	movw	r24, r18
    1af6:	da 01       	movw	r26, r20
    1af8:	1c 01       	movw	r2, r24
    1afa:	2d 01       	movw	r4, r26
    1afc:	c2 01       	movw	r24, r4
    1afe:	b1 01       	movw	r22, r2
    1b00:	2d 96       	adiw	r28, 0x0d	; 13
    1b02:	2c ad       	ldd	r18, Y+60	; 0x3c
    1b04:	3d ad       	ldd	r19, Y+61	; 0x3d
    1b06:	4e ad       	ldd	r20, Y+62	; 0x3e
    1b08:	5f ad       	ldd	r21, Y+63	; 0x3f
    1b0a:	2d 97       	sbiw	r28, 0x0d	; 13
    1b0c:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    1b10:	9b 01       	movw	r18, r22
    1b12:	ac 01       	movw	r20, r24
    1b14:	87 01       	movw	r16, r14
    1b16:	ff 24       	eor	r15, r15
    1b18:	ee 24       	eor	r14, r14
    1b1a:	a9 a0       	ldd	r10, Y+33	; 0x21
    1b1c:	ba a0       	ldd	r11, Y+34	; 0x22
    1b1e:	cb a0       	ldd	r12, Y+35	; 0x23
    1b20:	dc a0       	ldd	r13, Y+36	; 0x24
    1b22:	c6 01       	movw	r24, r12
    1b24:	aa 27       	eor	r26, r26
    1b26:	bb 27       	eor	r27, r27
    1b28:	57 01       	movw	r10, r14
    1b2a:	68 01       	movw	r12, r16
    1b2c:	a8 2a       	or	r10, r24
    1b2e:	b9 2a       	or	r11, r25
    1b30:	ca 2a       	or	r12, r26
    1b32:	db 2a       	or	r13, r27
    1b34:	a2 16       	cp	r10, r18
    1b36:	b3 06       	cpc	r11, r19
    1b38:	c4 06       	cpc	r12, r20
    1b3a:	d5 06       	cpc	r13, r21
    1b3c:	00 f5       	brcc	.+64     	; 0x1b7e <__umoddi3+0x9b8>
    1b3e:	08 94       	sec
    1b40:	21 08       	sbc	r2, r1
    1b42:	31 08       	sbc	r3, r1
    1b44:	41 08       	sbc	r4, r1
    1b46:	51 08       	sbc	r5, r1
    1b48:	e9 a4       	ldd	r14, Y+41	; 0x29
    1b4a:	fa a4       	ldd	r15, Y+42	; 0x2a
    1b4c:	0b a5       	ldd	r16, Y+43	; 0x2b
    1b4e:	1c a5       	ldd	r17, Y+44	; 0x2c
    1b50:	ae 0c       	add	r10, r14
    1b52:	bf 1c       	adc	r11, r15
    1b54:	c0 1e       	adc	r12, r16
    1b56:	d1 1e       	adc	r13, r17
    1b58:	ae 14       	cp	r10, r14
    1b5a:	bf 04       	cpc	r11, r15
    1b5c:	c0 06       	cpc	r12, r16
    1b5e:	d1 06       	cpc	r13, r17
    1b60:	70 f0       	brcs	.+28     	; 0x1b7e <__umoddi3+0x9b8>
    1b62:	a2 16       	cp	r10, r18
    1b64:	b3 06       	cpc	r11, r19
    1b66:	c4 06       	cpc	r12, r20
    1b68:	d5 06       	cpc	r13, r21
    1b6a:	48 f4       	brcc	.+18     	; 0x1b7e <__umoddi3+0x9b8>
    1b6c:	08 94       	sec
    1b6e:	21 08       	sbc	r2, r1
    1b70:	31 08       	sbc	r3, r1
    1b72:	41 08       	sbc	r4, r1
    1b74:	51 08       	sbc	r5, r1
    1b76:	ae 0c       	add	r10, r14
    1b78:	bf 1c       	adc	r11, r15
    1b7a:	c0 1e       	adc	r12, r16
    1b7c:	d1 1e       	adc	r13, r17
    1b7e:	a2 1a       	sub	r10, r18
    1b80:	b3 0a       	sbc	r11, r19
    1b82:	c4 0a       	sbc	r12, r20
    1b84:	d5 0a       	sbc	r13, r21
    1b86:	c6 01       	movw	r24, r12
    1b88:	b5 01       	movw	r22, r10
    1b8a:	a4 01       	movw	r20, r8
    1b8c:	93 01       	movw	r18, r6
    1b8e:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    1b92:	7b 01       	movw	r14, r22
    1b94:	8c 01       	movw	r16, r24
    1b96:	c6 01       	movw	r24, r12
    1b98:	b5 01       	movw	r22, r10
    1b9a:	a4 01       	movw	r20, r8
    1b9c:	93 01       	movw	r18, r6
    1b9e:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    1ba2:	c9 01       	movw	r24, r18
    1ba4:	da 01       	movw	r26, r20
    1ba6:	3c 01       	movw	r6, r24
    1ba8:	4d 01       	movw	r8, r26
    1baa:	c4 01       	movw	r24, r8
    1bac:	b3 01       	movw	r22, r6
    1bae:	2d 96       	adiw	r28, 0x0d	; 13
    1bb0:	2c ad       	ldd	r18, Y+60	; 0x3c
    1bb2:	3d ad       	ldd	r19, Y+61	; 0x3d
    1bb4:	4e ad       	ldd	r20, Y+62	; 0x3e
    1bb6:	5f ad       	ldd	r21, Y+63	; 0x3f
    1bb8:	2d 97       	sbiw	r28, 0x0d	; 13
    1bba:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    1bbe:	9b 01       	movw	r18, r22
    1bc0:	ac 01       	movw	r20, r24
    1bc2:	87 01       	movw	r16, r14
    1bc4:	ff 24       	eor	r15, r15
    1bc6:	ee 24       	eor	r14, r14
    1bc8:	89 a1       	ldd	r24, Y+33	; 0x21
    1bca:	9a a1       	ldd	r25, Y+34	; 0x22
    1bcc:	ab a1       	ldd	r26, Y+35	; 0x23
    1bce:	bc a1       	ldd	r27, Y+36	; 0x24
    1bd0:	a0 70       	andi	r26, 0x00	; 0
    1bd2:	b0 70       	andi	r27, 0x00	; 0
    1bd4:	57 01       	movw	r10, r14
    1bd6:	68 01       	movw	r12, r16
    1bd8:	a8 2a       	or	r10, r24
    1bda:	b9 2a       	or	r11, r25
    1bdc:	ca 2a       	or	r12, r26
    1bde:	db 2a       	or	r13, r27
    1be0:	a2 16       	cp	r10, r18
    1be2:	b3 06       	cpc	r11, r19
    1be4:	c4 06       	cpc	r12, r20
    1be6:	d5 06       	cpc	r13, r21
    1be8:	00 f5       	brcc	.+64     	; 0x1c2a <__umoddi3+0xa64>
    1bea:	08 94       	sec
    1bec:	61 08       	sbc	r6, r1
    1bee:	71 08       	sbc	r7, r1
    1bf0:	81 08       	sbc	r8, r1
    1bf2:	91 08       	sbc	r9, r1
    1bf4:	69 a5       	ldd	r22, Y+41	; 0x29
    1bf6:	7a a5       	ldd	r23, Y+42	; 0x2a
    1bf8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bfa:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bfc:	a6 0e       	add	r10, r22
    1bfe:	b7 1e       	adc	r11, r23
    1c00:	c8 1e       	adc	r12, r24
    1c02:	d9 1e       	adc	r13, r25
    1c04:	a6 16       	cp	r10, r22
    1c06:	b7 06       	cpc	r11, r23
    1c08:	c8 06       	cpc	r12, r24
    1c0a:	d9 06       	cpc	r13, r25
    1c0c:	70 f0       	brcs	.+28     	; 0x1c2a <__umoddi3+0xa64>
    1c0e:	a2 16       	cp	r10, r18
    1c10:	b3 06       	cpc	r11, r19
    1c12:	c4 06       	cpc	r12, r20
    1c14:	d5 06       	cpc	r13, r21
    1c16:	48 f4       	brcc	.+18     	; 0x1c2a <__umoddi3+0xa64>
    1c18:	08 94       	sec
    1c1a:	61 08       	sbc	r6, r1
    1c1c:	71 08       	sbc	r7, r1
    1c1e:	81 08       	sbc	r8, r1
    1c20:	91 08       	sbc	r9, r1
    1c22:	a6 0e       	add	r10, r22
    1c24:	b7 1e       	adc	r11, r23
    1c26:	c8 1e       	adc	r12, r24
    1c28:	d9 1e       	adc	r13, r25
    1c2a:	d6 01       	movw	r26, r12
    1c2c:	c5 01       	movw	r24, r10
    1c2e:	82 1b       	sub	r24, r18
    1c30:	93 0b       	sbc	r25, r19
    1c32:	a4 0b       	sbc	r26, r20
    1c34:	b5 0b       	sbc	r27, r21
    1c36:	89 8f       	std	Y+25, r24	; 0x19
    1c38:	9a 8f       	std	Y+26, r25	; 0x1a
    1c3a:	ab 8f       	std	Y+27, r26	; 0x1b
    1c3c:	bc 8f       	std	Y+28, r27	; 0x1c
    1c3e:	d1 01       	movw	r26, r2
    1c40:	99 27       	eor	r25, r25
    1c42:	88 27       	eor	r24, r24
    1c44:	84 01       	movw	r16, r8
    1c46:	73 01       	movw	r14, r6
    1c48:	e8 2a       	or	r14, r24
    1c4a:	f9 2a       	or	r15, r25
    1c4c:	0a 2b       	or	r16, r26
    1c4e:	1b 2b       	or	r17, r27
    1c50:	4f ef       	ldi	r20, 0xFF	; 255
    1c52:	a4 2e       	mov	r10, r20
    1c54:	4f ef       	ldi	r20, 0xFF	; 255
    1c56:	b4 2e       	mov	r11, r20
    1c58:	c1 2c       	mov	r12, r1
    1c5a:	d1 2c       	mov	r13, r1
    1c5c:	ae 20       	and	r10, r14
    1c5e:	bf 20       	and	r11, r15
    1c60:	c0 22       	and	r12, r16
    1c62:	d1 22       	and	r13, r17
    1c64:	78 01       	movw	r14, r16
    1c66:	00 27       	eor	r16, r16
    1c68:	11 27       	eor	r17, r17
    1c6a:	6d a0       	ldd	r6, Y+37	; 0x25
    1c6c:	7e a0       	ldd	r7, Y+38	; 0x26
    1c6e:	8f a0       	ldd	r8, Y+39	; 0x27
    1c70:	98 a4       	ldd	r9, Y+40	; 0x28
    1c72:	4f ef       	ldi	r20, 0xFF	; 255
    1c74:	5f ef       	ldi	r21, 0xFF	; 255
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	70 e0       	ldi	r23, 0x00	; 0
    1c7a:	64 22       	and	r6, r20
    1c7c:	75 22       	and	r7, r21
    1c7e:	86 22       	and	r8, r22
    1c80:	97 22       	and	r9, r23
    1c82:	8d a1       	ldd	r24, Y+37	; 0x25
    1c84:	9e a1       	ldd	r25, Y+38	; 0x26
    1c86:	af a1       	ldd	r26, Y+39	; 0x27
    1c88:	b8 a5       	ldd	r27, Y+40	; 0x28
    1c8a:	bd 01       	movw	r22, r26
    1c8c:	88 27       	eor	r24, r24
    1c8e:	99 27       	eor	r25, r25
    1c90:	65 96       	adiw	r28, 0x15	; 21
    1c92:	6c af       	std	Y+60, r22	; 0x3c
    1c94:	7d af       	std	Y+61, r23	; 0x3d
    1c96:	8e af       	std	Y+62, r24	; 0x3e
    1c98:	9f af       	std	Y+63, r25	; 0x3f
    1c9a:	65 97       	sbiw	r28, 0x15	; 21
    1c9c:	c6 01       	movw	r24, r12
    1c9e:	b5 01       	movw	r22, r10
    1ca0:	a4 01       	movw	r20, r8
    1ca2:	93 01       	movw	r18, r6
    1ca4:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    1ca8:	61 96       	adiw	r28, 0x11	; 17
    1caa:	6c af       	std	Y+60, r22	; 0x3c
    1cac:	7d af       	std	Y+61, r23	; 0x3d
    1cae:	8e af       	std	Y+62, r24	; 0x3e
    1cb0:	9f af       	std	Y+63, r25	; 0x3f
    1cb2:	61 97       	sbiw	r28, 0x11	; 17
    1cb4:	c6 01       	movw	r24, r12
    1cb6:	b5 01       	movw	r22, r10
    1cb8:	65 96       	adiw	r28, 0x15	; 21
    1cba:	2c ad       	ldd	r18, Y+60	; 0x3c
    1cbc:	3d ad       	ldd	r19, Y+61	; 0x3d
    1cbe:	4e ad       	ldd	r20, Y+62	; 0x3e
    1cc0:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cc2:	65 97       	sbiw	r28, 0x15	; 21
    1cc4:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    1cc8:	1b 01       	movw	r2, r22
    1cca:	2c 01       	movw	r4, r24
    1ccc:	c8 01       	movw	r24, r16
    1cce:	b7 01       	movw	r22, r14
    1cd0:	a4 01       	movw	r20, r8
    1cd2:	93 01       	movw	r18, r6
    1cd4:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    1cd8:	5b 01       	movw	r10, r22
    1cda:	6c 01       	movw	r12, r24
    1cdc:	c8 01       	movw	r24, r16
    1cde:	b7 01       	movw	r22, r14
    1ce0:	65 96       	adiw	r28, 0x15	; 21
    1ce2:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ce4:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ce6:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ce8:	5f ad       	ldd	r21, Y+63	; 0x3f
    1cea:	65 97       	sbiw	r28, 0x15	; 21
    1cec:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    1cf0:	7b 01       	movw	r14, r22
    1cf2:	8c 01       	movw	r16, r24
    1cf4:	a6 01       	movw	r20, r12
    1cf6:	95 01       	movw	r18, r10
    1cf8:	22 0d       	add	r18, r2
    1cfa:	33 1d       	adc	r19, r3
    1cfc:	44 1d       	adc	r20, r4
    1cfe:	55 1d       	adc	r21, r5
    1d00:	61 96       	adiw	r28, 0x11	; 17
    1d02:	6c ac       	ldd	r6, Y+60	; 0x3c
    1d04:	7d ac       	ldd	r7, Y+61	; 0x3d
    1d06:	8e ac       	ldd	r8, Y+62	; 0x3e
    1d08:	9f ac       	ldd	r9, Y+63	; 0x3f
    1d0a:	61 97       	sbiw	r28, 0x11	; 17
    1d0c:	c4 01       	movw	r24, r8
    1d0e:	aa 27       	eor	r26, r26
    1d10:	bb 27       	eor	r27, r27
    1d12:	28 0f       	add	r18, r24
    1d14:	39 1f       	adc	r19, r25
    1d16:	4a 1f       	adc	r20, r26
    1d18:	5b 1f       	adc	r21, r27
    1d1a:	2a 15       	cp	r18, r10
    1d1c:	3b 05       	cpc	r19, r11
    1d1e:	4c 05       	cpc	r20, r12
    1d20:	5d 05       	cpc	r21, r13
    1d22:	48 f4       	brcc	.+18     	; 0x1d36 <__umoddi3+0xb70>
    1d24:	81 2c       	mov	r8, r1
    1d26:	91 2c       	mov	r9, r1
    1d28:	e1 e0       	ldi	r30, 0x01	; 1
    1d2a:	ae 2e       	mov	r10, r30
    1d2c:	b1 2c       	mov	r11, r1
    1d2e:	e8 0c       	add	r14, r8
    1d30:	f9 1c       	adc	r15, r9
    1d32:	0a 1d       	adc	r16, r10
    1d34:	1b 1d       	adc	r17, r11
    1d36:	ca 01       	movw	r24, r20
    1d38:	aa 27       	eor	r26, r26
    1d3a:	bb 27       	eor	r27, r27
    1d3c:	57 01       	movw	r10, r14
    1d3e:	68 01       	movw	r12, r16
    1d40:	a8 0e       	add	r10, r24
    1d42:	b9 1e       	adc	r11, r25
    1d44:	ca 1e       	adc	r12, r26
    1d46:	db 1e       	adc	r13, r27
    1d48:	a9 01       	movw	r20, r18
    1d4a:	33 27       	eor	r19, r19
    1d4c:	22 27       	eor	r18, r18
    1d4e:	61 96       	adiw	r28, 0x11	; 17
    1d50:	8c ad       	ldd	r24, Y+60	; 0x3c
    1d52:	9d ad       	ldd	r25, Y+61	; 0x3d
    1d54:	ae ad       	ldd	r26, Y+62	; 0x3e
    1d56:	bf ad       	ldd	r27, Y+63	; 0x3f
    1d58:	61 97       	sbiw	r28, 0x11	; 17
    1d5a:	a0 70       	andi	r26, 0x00	; 0
    1d5c:	b0 70       	andi	r27, 0x00	; 0
    1d5e:	28 0f       	add	r18, r24
    1d60:	39 1f       	adc	r19, r25
    1d62:	4a 1f       	adc	r20, r26
    1d64:	5b 1f       	adc	r21, r27
    1d66:	e9 8c       	ldd	r14, Y+25	; 0x19
    1d68:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1d6a:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1d6c:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1d6e:	ea 14       	cp	r14, r10
    1d70:	fb 04       	cpc	r15, r11
    1d72:	0c 05       	cpc	r16, r12
    1d74:	1d 05       	cpc	r17, r13
    1d76:	70 f0       	brcs	.+28     	; 0x1d94 <__umoddi3+0xbce>
    1d78:	ae 14       	cp	r10, r14
    1d7a:	bf 04       	cpc	r11, r15
    1d7c:	c0 06       	cpc	r12, r16
    1d7e:	d1 06       	cpc	r13, r17
    1d80:	69 f5       	brne	.+90     	; 0x1ddc <__umoddi3+0xc16>
    1d82:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1d84:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1d86:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d88:	98 a1       	ldd	r25, Y+32	; 0x20
    1d8a:	62 17       	cp	r22, r18
    1d8c:	73 07       	cpc	r23, r19
    1d8e:	84 07       	cpc	r24, r20
    1d90:	95 07       	cpc	r25, r21
    1d92:	20 f5       	brcc	.+72     	; 0x1ddc <__umoddi3+0xc16>
    1d94:	da 01       	movw	r26, r20
    1d96:	c9 01       	movw	r24, r18
    1d98:	6d a0       	ldd	r6, Y+37	; 0x25
    1d9a:	7e a0       	ldd	r7, Y+38	; 0x26
    1d9c:	8f a0       	ldd	r8, Y+39	; 0x27
    1d9e:	98 a4       	ldd	r9, Y+40	; 0x28
    1da0:	86 19       	sub	r24, r6
    1da2:	97 09       	sbc	r25, r7
    1da4:	a8 09       	sbc	r26, r8
    1da6:	b9 09       	sbc	r27, r9
    1da8:	e9 a4       	ldd	r14, Y+41	; 0x29
    1daa:	fa a4       	ldd	r15, Y+42	; 0x2a
    1dac:	0b a5       	ldd	r16, Y+43	; 0x2b
    1dae:	1c a5       	ldd	r17, Y+44	; 0x2c
    1db0:	ae 18       	sub	r10, r14
    1db2:	bf 08       	sbc	r11, r15
    1db4:	c0 0a       	sbc	r12, r16
    1db6:	d1 0a       	sbc	r13, r17
    1db8:	ee 24       	eor	r14, r14
    1dba:	ff 24       	eor	r15, r15
    1dbc:	87 01       	movw	r16, r14
    1dbe:	28 17       	cp	r18, r24
    1dc0:	39 07       	cpc	r19, r25
    1dc2:	4a 07       	cpc	r20, r26
    1dc4:	5b 07       	cpc	r21, r27
    1dc6:	28 f4       	brcc	.+10     	; 0x1dd2 <__umoddi3+0xc0c>
    1dc8:	21 e0       	ldi	r18, 0x01	; 1
    1dca:	e2 2e       	mov	r14, r18
    1dcc:	f1 2c       	mov	r15, r1
    1dce:	01 2d       	mov	r16, r1
    1dd0:	11 2d       	mov	r17, r1
    1dd2:	ae 18       	sub	r10, r14
    1dd4:	bf 08       	sbc	r11, r15
    1dd6:	c0 0a       	sbc	r12, r16
    1dd8:	d1 0a       	sbc	r13, r17
    1dda:	02 c0       	rjmp	.+4      	; 0x1de0 <__umoddi3+0xc1a>
    1ddc:	da 01       	movw	r26, r20
    1dde:	c9 01       	movw	r24, r18
    1de0:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1de2:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1de4:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1de6:	98 a0       	ldd	r9, Y+32	; 0x20
    1de8:	68 1a       	sub	r6, r24
    1dea:	79 0a       	sbc	r7, r25
    1dec:	8a 0a       	sbc	r8, r26
    1dee:	9b 0a       	sbc	r9, r27
    1df0:	49 8d       	ldd	r20, Y+25	; 0x19
    1df2:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1df4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1df6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1df8:	4a 19       	sub	r20, r10
    1dfa:	5b 09       	sbc	r21, r11
    1dfc:	6c 09       	sbc	r22, r12
    1dfe:	7d 09       	sbc	r23, r13
    1e00:	5a 01       	movw	r10, r20
    1e02:	6b 01       	movw	r12, r22
    1e04:	22 24       	eor	r2, r2
    1e06:	33 24       	eor	r3, r3
    1e08:	21 01       	movw	r4, r2
    1e0a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1e0c:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1e0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e10:	98 a1       	ldd	r25, Y+32	; 0x20
    1e12:	66 15       	cp	r22, r6
    1e14:	77 05       	cpc	r23, r7
    1e16:	88 05       	cpc	r24, r8
    1e18:	99 05       	cpc	r25, r9
    1e1a:	28 f4       	brcc	.+10     	; 0x1e26 <__umoddi3+0xc60>
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	28 2e       	mov	r2, r24
    1e20:	31 2c       	mov	r3, r1
    1e22:	41 2c       	mov	r4, r1
    1e24:	51 2c       	mov	r5, r1
    1e26:	86 01       	movw	r16, r12
    1e28:	75 01       	movw	r14, r10
    1e2a:	e2 18       	sub	r14, r2
    1e2c:	f3 08       	sbc	r15, r3
    1e2e:	04 09       	sbc	r16, r4
    1e30:	15 09       	sbc	r17, r5
    1e32:	a8 01       	movw	r20, r16
    1e34:	97 01       	movw	r18, r14
    1e36:	66 96       	adiw	r28, 0x16	; 22
    1e38:	0f ac       	ldd	r0, Y+63	; 0x3f
    1e3a:	66 97       	sbiw	r28, 0x16	; 22
    1e3c:	04 c0       	rjmp	.+8      	; 0x1e46 <__umoddi3+0xc80>
    1e3e:	22 0f       	add	r18, r18
    1e40:	33 1f       	adc	r19, r19
    1e42:	44 1f       	adc	r20, r20
    1e44:	55 1f       	adc	r21, r21
    1e46:	0a 94       	dec	r0
    1e48:	d2 f7       	brpl	.-12     	; 0x1e3e <__umoddi3+0xc78>
    1e4a:	d4 01       	movw	r26, r8
    1e4c:	c3 01       	movw	r24, r6
    1e4e:	67 96       	adiw	r28, 0x17	; 23
    1e50:	0f ac       	ldd	r0, Y+63	; 0x3f
    1e52:	67 97       	sbiw	r28, 0x17	; 23
    1e54:	04 c0       	rjmp	.+8      	; 0x1e5e <__umoddi3+0xc98>
    1e56:	b6 95       	lsr	r27
    1e58:	a7 95       	ror	r26
    1e5a:	97 95       	ror	r25
    1e5c:	87 95       	ror	r24
    1e5e:	0a 94       	dec	r0
    1e60:	d2 f7       	brpl	.-12     	; 0x1e56 <__umoddi3+0xc90>
    1e62:	28 2b       	or	r18, r24
    1e64:	39 2b       	or	r19, r25
    1e66:	4a 2b       	or	r20, r26
    1e68:	5b 2b       	or	r21, r27
    1e6a:	29 8b       	std	Y+17, r18	; 0x11
    1e6c:	3a 8b       	std	Y+18, r19	; 0x12
    1e6e:	4b 8b       	std	Y+19, r20	; 0x13
    1e70:	5c 8b       	std	Y+20, r21	; 0x14
    1e72:	67 96       	adiw	r28, 0x17	; 23
    1e74:	0f ac       	ldd	r0, Y+63	; 0x3f
    1e76:	67 97       	sbiw	r28, 0x17	; 23
    1e78:	04 c0       	rjmp	.+8      	; 0x1e82 <__umoddi3+0xcbc>
    1e7a:	16 95       	lsr	r17
    1e7c:	07 95       	ror	r16
    1e7e:	f7 94       	ror	r15
    1e80:	e7 94       	ror	r14
    1e82:	0a 94       	dec	r0
    1e84:	d2 f7       	brpl	.-12     	; 0x1e7a <__umoddi3+0xcb4>
    1e86:	ed 8a       	std	Y+21, r14	; 0x15
    1e88:	fe 8a       	std	Y+22, r15	; 0x16
    1e8a:	0f 8b       	std	Y+23, r16	; 0x17
    1e8c:	18 8f       	std	Y+24, r17	; 0x18
    1e8e:	3a 89       	ldd	r19, Y+18	; 0x12
    1e90:	4b 89       	ldd	r20, Y+19	; 0x13
    1e92:	5c 89       	ldd	r21, Y+20	; 0x14
    1e94:	6e 2d       	mov	r22, r14
    1e96:	7e 89       	ldd	r23, Y+22	; 0x16
    1e98:	8f 89       	ldd	r24, Y+23	; 0x17
    1e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1e9c:	c5 5a       	subi	r28, 0xA5	; 165
    1e9e:	df 4f       	sbci	r29, 0xFF	; 255
    1ea0:	e2 e1       	ldi	r30, 0x12	; 18
    1ea2:	0c 94 5a 38 	jmp	0x70b4	; 0x70b4 <__epilogue_restores__>

00001ea6 <_fpadd_parts>:
    1ea6:	a0 e0       	ldi	r26, 0x00	; 0
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e9 e5       	ldi	r30, 0x59	; 89
    1eac:	ff e0       	ldi	r31, 0x0F	; 15
    1eae:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__prologue_saves__>
    1eb2:	dc 01       	movw	r26, r24
    1eb4:	2b 01       	movw	r4, r22
    1eb6:	fa 01       	movw	r30, r20
    1eb8:	9c 91       	ld	r25, X
    1eba:	92 30       	cpi	r25, 0x02	; 2
    1ebc:	08 f4       	brcc	.+2      	; 0x1ec0 <_fpadd_parts+0x1a>
    1ebe:	39 c1       	rjmp	.+626    	; 0x2132 <_fpadd_parts+0x28c>
    1ec0:	eb 01       	movw	r28, r22
    1ec2:	88 81       	ld	r24, Y
    1ec4:	82 30       	cpi	r24, 0x02	; 2
    1ec6:	08 f4       	brcc	.+2      	; 0x1eca <_fpadd_parts+0x24>
    1ec8:	33 c1       	rjmp	.+614    	; 0x2130 <_fpadd_parts+0x28a>
    1eca:	94 30       	cpi	r25, 0x04	; 4
    1ecc:	69 f4       	brne	.+26     	; 0x1ee8 <_fpadd_parts+0x42>
    1ece:	84 30       	cpi	r24, 0x04	; 4
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <_fpadd_parts+0x2e>
    1ed2:	2f c1       	rjmp	.+606    	; 0x2132 <_fpadd_parts+0x28c>
    1ed4:	11 96       	adiw	r26, 0x01	; 1
    1ed6:	9c 91       	ld	r25, X
    1ed8:	11 97       	sbiw	r26, 0x01	; 1
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	98 17       	cp	r25, r24
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <_fpadd_parts+0x3c>
    1ee0:	28 c1       	rjmp	.+592    	; 0x2132 <_fpadd_parts+0x28c>
    1ee2:	a9 ec       	ldi	r26, 0xC9	; 201
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	25 c1       	rjmp	.+586    	; 0x2132 <_fpadd_parts+0x28c>
    1ee8:	84 30       	cpi	r24, 0x04	; 4
    1eea:	09 f4       	brne	.+2      	; 0x1eee <_fpadd_parts+0x48>
    1eec:	21 c1       	rjmp	.+578    	; 0x2130 <_fpadd_parts+0x28a>
    1eee:	82 30       	cpi	r24, 0x02	; 2
    1ef0:	a9 f4       	brne	.+42     	; 0x1f1c <_fpadd_parts+0x76>
    1ef2:	92 30       	cpi	r25, 0x02	; 2
    1ef4:	09 f0       	breq	.+2      	; 0x1ef8 <_fpadd_parts+0x52>
    1ef6:	1d c1       	rjmp	.+570    	; 0x2132 <_fpadd_parts+0x28c>
    1ef8:	9a 01       	movw	r18, r20
    1efa:	ad 01       	movw	r20, r26
    1efc:	88 e0       	ldi	r24, 0x08	; 8
    1efe:	ea 01       	movw	r28, r20
    1f00:	09 90       	ld	r0, Y+
    1f02:	ae 01       	movw	r20, r28
    1f04:	e9 01       	movw	r28, r18
    1f06:	09 92       	st	Y+, r0
    1f08:	9e 01       	movw	r18, r28
    1f0a:	81 50       	subi	r24, 0x01	; 1
    1f0c:	c1 f7       	brne	.-16     	; 0x1efe <_fpadd_parts+0x58>
    1f0e:	e2 01       	movw	r28, r4
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	11 96       	adiw	r26, 0x01	; 1
    1f14:	9c 91       	ld	r25, X
    1f16:	89 23       	and	r24, r25
    1f18:	81 83       	std	Z+1, r24	; 0x01
    1f1a:	08 c1       	rjmp	.+528    	; 0x212c <_fpadd_parts+0x286>
    1f1c:	92 30       	cpi	r25, 0x02	; 2
    1f1e:	09 f4       	brne	.+2      	; 0x1f22 <_fpadd_parts+0x7c>
    1f20:	07 c1       	rjmp	.+526    	; 0x2130 <_fpadd_parts+0x28a>
    1f22:	12 96       	adiw	r26, 0x02	; 2
    1f24:	2d 90       	ld	r2, X+
    1f26:	3c 90       	ld	r3, X
    1f28:	13 97       	sbiw	r26, 0x03	; 3
    1f2a:	eb 01       	movw	r28, r22
    1f2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f30:	14 96       	adiw	r26, 0x04	; 4
    1f32:	ad 90       	ld	r10, X+
    1f34:	bd 90       	ld	r11, X+
    1f36:	cd 90       	ld	r12, X+
    1f38:	dc 90       	ld	r13, X
    1f3a:	17 97       	sbiw	r26, 0x07	; 7
    1f3c:	ec 80       	ldd	r14, Y+4	; 0x04
    1f3e:	fd 80       	ldd	r15, Y+5	; 0x05
    1f40:	0e 81       	ldd	r16, Y+6	; 0x06
    1f42:	1f 81       	ldd	r17, Y+7	; 0x07
    1f44:	91 01       	movw	r18, r2
    1f46:	28 1b       	sub	r18, r24
    1f48:	39 0b       	sbc	r19, r25
    1f4a:	b9 01       	movw	r22, r18
    1f4c:	37 ff       	sbrs	r19, 7
    1f4e:	04 c0       	rjmp	.+8      	; 0x1f58 <_fpadd_parts+0xb2>
    1f50:	66 27       	eor	r22, r22
    1f52:	77 27       	eor	r23, r23
    1f54:	62 1b       	sub	r22, r18
    1f56:	73 0b       	sbc	r23, r19
    1f58:	60 32       	cpi	r22, 0x20	; 32
    1f5a:	71 05       	cpc	r23, r1
    1f5c:	0c f0       	brlt	.+2      	; 0x1f60 <_fpadd_parts+0xba>
    1f5e:	61 c0       	rjmp	.+194    	; 0x2022 <_fpadd_parts+0x17c>
    1f60:	12 16       	cp	r1, r18
    1f62:	13 06       	cpc	r1, r19
    1f64:	6c f5       	brge	.+90     	; 0x1fc0 <_fpadd_parts+0x11a>
    1f66:	37 01       	movw	r6, r14
    1f68:	48 01       	movw	r8, r16
    1f6a:	06 2e       	mov	r0, r22
    1f6c:	04 c0       	rjmp	.+8      	; 0x1f76 <_fpadd_parts+0xd0>
    1f6e:	96 94       	lsr	r9
    1f70:	87 94       	ror	r8
    1f72:	77 94       	ror	r7
    1f74:	67 94       	ror	r6
    1f76:	0a 94       	dec	r0
    1f78:	d2 f7       	brpl	.-12     	; 0x1f6e <_fpadd_parts+0xc8>
    1f7a:	21 e0       	ldi	r18, 0x01	; 1
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	40 e0       	ldi	r20, 0x00	; 0
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	04 c0       	rjmp	.+8      	; 0x1f8c <_fpadd_parts+0xe6>
    1f84:	22 0f       	add	r18, r18
    1f86:	33 1f       	adc	r19, r19
    1f88:	44 1f       	adc	r20, r20
    1f8a:	55 1f       	adc	r21, r21
    1f8c:	6a 95       	dec	r22
    1f8e:	d2 f7       	brpl	.-12     	; 0x1f84 <_fpadd_parts+0xde>
    1f90:	21 50       	subi	r18, 0x01	; 1
    1f92:	30 40       	sbci	r19, 0x00	; 0
    1f94:	40 40       	sbci	r20, 0x00	; 0
    1f96:	50 40       	sbci	r21, 0x00	; 0
    1f98:	2e 21       	and	r18, r14
    1f9a:	3f 21       	and	r19, r15
    1f9c:	40 23       	and	r20, r16
    1f9e:	51 23       	and	r21, r17
    1fa0:	21 15       	cp	r18, r1
    1fa2:	31 05       	cpc	r19, r1
    1fa4:	41 05       	cpc	r20, r1
    1fa6:	51 05       	cpc	r21, r1
    1fa8:	21 f0       	breq	.+8      	; 0x1fb2 <_fpadd_parts+0x10c>
    1faa:	21 e0       	ldi	r18, 0x01	; 1
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	50 e0       	ldi	r21, 0x00	; 0
    1fb2:	79 01       	movw	r14, r18
    1fb4:	8a 01       	movw	r16, r20
    1fb6:	e6 28       	or	r14, r6
    1fb8:	f7 28       	or	r15, r7
    1fba:	08 29       	or	r16, r8
    1fbc:	19 29       	or	r17, r9
    1fbe:	3c c0       	rjmp	.+120    	; 0x2038 <_fpadd_parts+0x192>
    1fc0:	23 2b       	or	r18, r19
    1fc2:	d1 f1       	breq	.+116    	; 0x2038 <_fpadd_parts+0x192>
    1fc4:	26 0e       	add	r2, r22
    1fc6:	37 1e       	adc	r3, r23
    1fc8:	35 01       	movw	r6, r10
    1fca:	46 01       	movw	r8, r12
    1fcc:	06 2e       	mov	r0, r22
    1fce:	04 c0       	rjmp	.+8      	; 0x1fd8 <_fpadd_parts+0x132>
    1fd0:	96 94       	lsr	r9
    1fd2:	87 94       	ror	r8
    1fd4:	77 94       	ror	r7
    1fd6:	67 94       	ror	r6
    1fd8:	0a 94       	dec	r0
    1fda:	d2 f7       	brpl	.-12     	; 0x1fd0 <_fpadd_parts+0x12a>
    1fdc:	21 e0       	ldi	r18, 0x01	; 1
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e0       	ldi	r20, 0x00	; 0
    1fe2:	50 e0       	ldi	r21, 0x00	; 0
    1fe4:	04 c0       	rjmp	.+8      	; 0x1fee <_fpadd_parts+0x148>
    1fe6:	22 0f       	add	r18, r18
    1fe8:	33 1f       	adc	r19, r19
    1fea:	44 1f       	adc	r20, r20
    1fec:	55 1f       	adc	r21, r21
    1fee:	6a 95       	dec	r22
    1ff0:	d2 f7       	brpl	.-12     	; 0x1fe6 <_fpadd_parts+0x140>
    1ff2:	21 50       	subi	r18, 0x01	; 1
    1ff4:	30 40       	sbci	r19, 0x00	; 0
    1ff6:	40 40       	sbci	r20, 0x00	; 0
    1ff8:	50 40       	sbci	r21, 0x00	; 0
    1ffa:	2a 21       	and	r18, r10
    1ffc:	3b 21       	and	r19, r11
    1ffe:	4c 21       	and	r20, r12
    2000:	5d 21       	and	r21, r13
    2002:	21 15       	cp	r18, r1
    2004:	31 05       	cpc	r19, r1
    2006:	41 05       	cpc	r20, r1
    2008:	51 05       	cpc	r21, r1
    200a:	21 f0       	breq	.+8      	; 0x2014 <_fpadd_parts+0x16e>
    200c:	21 e0       	ldi	r18, 0x01	; 1
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e0       	ldi	r20, 0x00	; 0
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	59 01       	movw	r10, r18
    2016:	6a 01       	movw	r12, r20
    2018:	a6 28       	or	r10, r6
    201a:	b7 28       	or	r11, r7
    201c:	c8 28       	or	r12, r8
    201e:	d9 28       	or	r13, r9
    2020:	0b c0       	rjmp	.+22     	; 0x2038 <_fpadd_parts+0x192>
    2022:	82 15       	cp	r24, r2
    2024:	93 05       	cpc	r25, r3
    2026:	2c f0       	brlt	.+10     	; 0x2032 <_fpadd_parts+0x18c>
    2028:	1c 01       	movw	r2, r24
    202a:	aa 24       	eor	r10, r10
    202c:	bb 24       	eor	r11, r11
    202e:	65 01       	movw	r12, r10
    2030:	03 c0       	rjmp	.+6      	; 0x2038 <_fpadd_parts+0x192>
    2032:	ee 24       	eor	r14, r14
    2034:	ff 24       	eor	r15, r15
    2036:	87 01       	movw	r16, r14
    2038:	11 96       	adiw	r26, 0x01	; 1
    203a:	9c 91       	ld	r25, X
    203c:	d2 01       	movw	r26, r4
    203e:	11 96       	adiw	r26, 0x01	; 1
    2040:	8c 91       	ld	r24, X
    2042:	98 17       	cp	r25, r24
    2044:	09 f4       	brne	.+2      	; 0x2048 <_fpadd_parts+0x1a2>
    2046:	45 c0       	rjmp	.+138    	; 0x20d2 <_fpadd_parts+0x22c>
    2048:	99 23       	and	r25, r25
    204a:	39 f0       	breq	.+14     	; 0x205a <_fpadd_parts+0x1b4>
    204c:	a8 01       	movw	r20, r16
    204e:	97 01       	movw	r18, r14
    2050:	2a 19       	sub	r18, r10
    2052:	3b 09       	sbc	r19, r11
    2054:	4c 09       	sbc	r20, r12
    2056:	5d 09       	sbc	r21, r13
    2058:	06 c0       	rjmp	.+12     	; 0x2066 <_fpadd_parts+0x1c0>
    205a:	a6 01       	movw	r20, r12
    205c:	95 01       	movw	r18, r10
    205e:	2e 19       	sub	r18, r14
    2060:	3f 09       	sbc	r19, r15
    2062:	40 0b       	sbc	r20, r16
    2064:	51 0b       	sbc	r21, r17
    2066:	57 fd       	sbrc	r21, 7
    2068:	08 c0       	rjmp	.+16     	; 0x207a <_fpadd_parts+0x1d4>
    206a:	11 82       	std	Z+1, r1	; 0x01
    206c:	33 82       	std	Z+3, r3	; 0x03
    206e:	22 82       	std	Z+2, r2	; 0x02
    2070:	24 83       	std	Z+4, r18	; 0x04
    2072:	35 83       	std	Z+5, r19	; 0x05
    2074:	46 83       	std	Z+6, r20	; 0x06
    2076:	57 83       	std	Z+7, r21	; 0x07
    2078:	1d c0       	rjmp	.+58     	; 0x20b4 <_fpadd_parts+0x20e>
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	81 83       	std	Z+1, r24	; 0x01
    207e:	33 82       	std	Z+3, r3	; 0x03
    2080:	22 82       	std	Z+2, r2	; 0x02
    2082:	88 27       	eor	r24, r24
    2084:	99 27       	eor	r25, r25
    2086:	dc 01       	movw	r26, r24
    2088:	82 1b       	sub	r24, r18
    208a:	93 0b       	sbc	r25, r19
    208c:	a4 0b       	sbc	r26, r20
    208e:	b5 0b       	sbc	r27, r21
    2090:	84 83       	std	Z+4, r24	; 0x04
    2092:	95 83       	std	Z+5, r25	; 0x05
    2094:	a6 83       	std	Z+6, r26	; 0x06
    2096:	b7 83       	std	Z+7, r27	; 0x07
    2098:	0d c0       	rjmp	.+26     	; 0x20b4 <_fpadd_parts+0x20e>
    209a:	22 0f       	add	r18, r18
    209c:	33 1f       	adc	r19, r19
    209e:	44 1f       	adc	r20, r20
    20a0:	55 1f       	adc	r21, r21
    20a2:	24 83       	std	Z+4, r18	; 0x04
    20a4:	35 83       	std	Z+5, r19	; 0x05
    20a6:	46 83       	std	Z+6, r20	; 0x06
    20a8:	57 83       	std	Z+7, r21	; 0x07
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	93 83       	std	Z+3, r25	; 0x03
    20b2:	82 83       	std	Z+2, r24	; 0x02
    20b4:	24 81       	ldd	r18, Z+4	; 0x04
    20b6:	35 81       	ldd	r19, Z+5	; 0x05
    20b8:	46 81       	ldd	r20, Z+6	; 0x06
    20ba:	57 81       	ldd	r21, Z+7	; 0x07
    20bc:	da 01       	movw	r26, r20
    20be:	c9 01       	movw	r24, r18
    20c0:	01 97       	sbiw	r24, 0x01	; 1
    20c2:	a1 09       	sbc	r26, r1
    20c4:	b1 09       	sbc	r27, r1
    20c6:	8f 5f       	subi	r24, 0xFF	; 255
    20c8:	9f 4f       	sbci	r25, 0xFF	; 255
    20ca:	af 4f       	sbci	r26, 0xFF	; 255
    20cc:	bf 43       	sbci	r27, 0x3F	; 63
    20ce:	28 f3       	brcs	.-54     	; 0x209a <_fpadd_parts+0x1f4>
    20d0:	0b c0       	rjmp	.+22     	; 0x20e8 <_fpadd_parts+0x242>
    20d2:	91 83       	std	Z+1, r25	; 0x01
    20d4:	33 82       	std	Z+3, r3	; 0x03
    20d6:	22 82       	std	Z+2, r2	; 0x02
    20d8:	ea 0c       	add	r14, r10
    20da:	fb 1c       	adc	r15, r11
    20dc:	0c 1d       	adc	r16, r12
    20de:	1d 1d       	adc	r17, r13
    20e0:	e4 82       	std	Z+4, r14	; 0x04
    20e2:	f5 82       	std	Z+5, r15	; 0x05
    20e4:	06 83       	std	Z+6, r16	; 0x06
    20e6:	17 83       	std	Z+7, r17	; 0x07
    20e8:	83 e0       	ldi	r24, 0x03	; 3
    20ea:	80 83       	st	Z, r24
    20ec:	24 81       	ldd	r18, Z+4	; 0x04
    20ee:	35 81       	ldd	r19, Z+5	; 0x05
    20f0:	46 81       	ldd	r20, Z+6	; 0x06
    20f2:	57 81       	ldd	r21, Z+7	; 0x07
    20f4:	57 ff       	sbrs	r21, 7
    20f6:	1a c0       	rjmp	.+52     	; 0x212c <_fpadd_parts+0x286>
    20f8:	c9 01       	movw	r24, r18
    20fa:	aa 27       	eor	r26, r26
    20fc:	97 fd       	sbrc	r25, 7
    20fe:	a0 95       	com	r26
    2100:	ba 2f       	mov	r27, r26
    2102:	81 70       	andi	r24, 0x01	; 1
    2104:	90 70       	andi	r25, 0x00	; 0
    2106:	a0 70       	andi	r26, 0x00	; 0
    2108:	b0 70       	andi	r27, 0x00	; 0
    210a:	56 95       	lsr	r21
    210c:	47 95       	ror	r20
    210e:	37 95       	ror	r19
    2110:	27 95       	ror	r18
    2112:	82 2b       	or	r24, r18
    2114:	93 2b       	or	r25, r19
    2116:	a4 2b       	or	r26, r20
    2118:	b5 2b       	or	r27, r21
    211a:	84 83       	std	Z+4, r24	; 0x04
    211c:	95 83       	std	Z+5, r25	; 0x05
    211e:	a6 83       	std	Z+6, r26	; 0x06
    2120:	b7 83       	std	Z+7, r27	; 0x07
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	01 96       	adiw	r24, 0x01	; 1
    2128:	93 83       	std	Z+3, r25	; 0x03
    212a:	82 83       	std	Z+2, r24	; 0x02
    212c:	df 01       	movw	r26, r30
    212e:	01 c0       	rjmp	.+2      	; 0x2132 <_fpadd_parts+0x28c>
    2130:	d2 01       	movw	r26, r4
    2132:	cd 01       	movw	r24, r26
    2134:	cd b7       	in	r28, 0x3d	; 61
    2136:	de b7       	in	r29, 0x3e	; 62
    2138:	e2 e1       	ldi	r30, 0x12	; 18
    213a:	0c 94 5a 38 	jmp	0x70b4	; 0x70b4 <__epilogue_restores__>

0000213e <__subsf3>:
    213e:	a0 e2       	ldi	r26, 0x20	; 32
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e5 ea       	ldi	r30, 0xA5	; 165
    2144:	f0 e1       	ldi	r31, 0x10	; 16
    2146:	0c 94 4a 38 	jmp	0x7094	; 0x7094 <__prologue_saves__+0x18>
    214a:	69 83       	std	Y+1, r22	; 0x01
    214c:	7a 83       	std	Y+2, r23	; 0x02
    214e:	8b 83       	std	Y+3, r24	; 0x03
    2150:	9c 83       	std	Y+4, r25	; 0x04
    2152:	2d 83       	std	Y+5, r18	; 0x05
    2154:	3e 83       	std	Y+6, r19	; 0x06
    2156:	4f 83       	std	Y+7, r20	; 0x07
    2158:	58 87       	std	Y+8, r21	; 0x08
    215a:	e9 e0       	ldi	r30, 0x09	; 9
    215c:	ee 2e       	mov	r14, r30
    215e:	f1 2c       	mov	r15, r1
    2160:	ec 0e       	add	r14, r28
    2162:	fd 1e       	adc	r15, r29
    2164:	ce 01       	movw	r24, r28
    2166:	01 96       	adiw	r24, 0x01	; 1
    2168:	b7 01       	movw	r22, r14
    216a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    216e:	8e 01       	movw	r16, r28
    2170:	0f 5e       	subi	r16, 0xEF	; 239
    2172:	1f 4f       	sbci	r17, 0xFF	; 255
    2174:	ce 01       	movw	r24, r28
    2176:	05 96       	adiw	r24, 0x05	; 5
    2178:	b8 01       	movw	r22, r16
    217a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    217e:	8a 89       	ldd	r24, Y+18	; 0x12
    2180:	91 e0       	ldi	r25, 0x01	; 1
    2182:	89 27       	eor	r24, r25
    2184:	8a 8b       	std	Y+18, r24	; 0x12
    2186:	c7 01       	movw	r24, r14
    2188:	b8 01       	movw	r22, r16
    218a:	ae 01       	movw	r20, r28
    218c:	47 5e       	subi	r20, 0xE7	; 231
    218e:	5f 4f       	sbci	r21, 0xFF	; 255
    2190:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_fpadd_parts>
    2194:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__pack_f>
    2198:	a0 96       	adiw	r28, 0x20	; 32
    219a:	e6 e0       	ldi	r30, 0x06	; 6
    219c:	0c 94 66 38 	jmp	0x70cc	; 0x70cc <__epilogue_restores__+0x18>

000021a0 <__addsf3>:
    21a0:	a0 e2       	ldi	r26, 0x20	; 32
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e6 ed       	ldi	r30, 0xD6	; 214
    21a6:	f0 e1       	ldi	r31, 0x10	; 16
    21a8:	0c 94 4a 38 	jmp	0x7094	; 0x7094 <__prologue_saves__+0x18>
    21ac:	69 83       	std	Y+1, r22	; 0x01
    21ae:	7a 83       	std	Y+2, r23	; 0x02
    21b0:	8b 83       	std	Y+3, r24	; 0x03
    21b2:	9c 83       	std	Y+4, r25	; 0x04
    21b4:	2d 83       	std	Y+5, r18	; 0x05
    21b6:	3e 83       	std	Y+6, r19	; 0x06
    21b8:	4f 83       	std	Y+7, r20	; 0x07
    21ba:	58 87       	std	Y+8, r21	; 0x08
    21bc:	f9 e0       	ldi	r31, 0x09	; 9
    21be:	ef 2e       	mov	r14, r31
    21c0:	f1 2c       	mov	r15, r1
    21c2:	ec 0e       	add	r14, r28
    21c4:	fd 1e       	adc	r15, r29
    21c6:	ce 01       	movw	r24, r28
    21c8:	01 96       	adiw	r24, 0x01	; 1
    21ca:	b7 01       	movw	r22, r14
    21cc:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    21d0:	8e 01       	movw	r16, r28
    21d2:	0f 5e       	subi	r16, 0xEF	; 239
    21d4:	1f 4f       	sbci	r17, 0xFF	; 255
    21d6:	ce 01       	movw	r24, r28
    21d8:	05 96       	adiw	r24, 0x05	; 5
    21da:	b8 01       	movw	r22, r16
    21dc:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    21e0:	c7 01       	movw	r24, r14
    21e2:	b8 01       	movw	r22, r16
    21e4:	ae 01       	movw	r20, r28
    21e6:	47 5e       	subi	r20, 0xE7	; 231
    21e8:	5f 4f       	sbci	r21, 0xFF	; 255
    21ea:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <_fpadd_parts>
    21ee:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__pack_f>
    21f2:	a0 96       	adiw	r28, 0x20	; 32
    21f4:	e6 e0       	ldi	r30, 0x06	; 6
    21f6:	0c 94 66 38 	jmp	0x70cc	; 0x70cc <__epilogue_restores__+0x18>

000021fa <__mulsf3>:
    21fa:	a0 e2       	ldi	r26, 0x20	; 32
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	e3 e0       	ldi	r30, 0x03	; 3
    2200:	f1 e1       	ldi	r31, 0x11	; 17
    2202:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__prologue_saves__>
    2206:	69 83       	std	Y+1, r22	; 0x01
    2208:	7a 83       	std	Y+2, r23	; 0x02
    220a:	8b 83       	std	Y+3, r24	; 0x03
    220c:	9c 83       	std	Y+4, r25	; 0x04
    220e:	2d 83       	std	Y+5, r18	; 0x05
    2210:	3e 83       	std	Y+6, r19	; 0x06
    2212:	4f 83       	std	Y+7, r20	; 0x07
    2214:	58 87       	std	Y+8, r21	; 0x08
    2216:	ce 01       	movw	r24, r28
    2218:	01 96       	adiw	r24, 0x01	; 1
    221a:	be 01       	movw	r22, r28
    221c:	67 5f       	subi	r22, 0xF7	; 247
    221e:	7f 4f       	sbci	r23, 0xFF	; 255
    2220:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    2224:	ce 01       	movw	r24, r28
    2226:	05 96       	adiw	r24, 0x05	; 5
    2228:	be 01       	movw	r22, r28
    222a:	6f 5e       	subi	r22, 0xEF	; 239
    222c:	7f 4f       	sbci	r23, 0xFF	; 255
    222e:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    2232:	99 85       	ldd	r25, Y+9	; 0x09
    2234:	92 30       	cpi	r25, 0x02	; 2
    2236:	88 f0       	brcs	.+34     	; 0x225a <__mulsf3+0x60>
    2238:	89 89       	ldd	r24, Y+17	; 0x11
    223a:	82 30       	cpi	r24, 0x02	; 2
    223c:	c8 f0       	brcs	.+50     	; 0x2270 <__mulsf3+0x76>
    223e:	94 30       	cpi	r25, 0x04	; 4
    2240:	19 f4       	brne	.+6      	; 0x2248 <__mulsf3+0x4e>
    2242:	82 30       	cpi	r24, 0x02	; 2
    2244:	51 f4       	brne	.+20     	; 0x225a <__mulsf3+0x60>
    2246:	04 c0       	rjmp	.+8      	; 0x2250 <__mulsf3+0x56>
    2248:	84 30       	cpi	r24, 0x04	; 4
    224a:	29 f4       	brne	.+10     	; 0x2256 <__mulsf3+0x5c>
    224c:	92 30       	cpi	r25, 0x02	; 2
    224e:	81 f4       	brne	.+32     	; 0x2270 <__mulsf3+0x76>
    2250:	89 ec       	ldi	r24, 0xC9	; 201
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	c6 c0       	rjmp	.+396    	; 0x23e2 <__mulsf3+0x1e8>
    2256:	92 30       	cpi	r25, 0x02	; 2
    2258:	49 f4       	brne	.+18     	; 0x226c <__mulsf3+0x72>
    225a:	20 e0       	ldi	r18, 0x00	; 0
    225c:	9a 85       	ldd	r25, Y+10	; 0x0a
    225e:	8a 89       	ldd	r24, Y+18	; 0x12
    2260:	98 13       	cpse	r25, r24
    2262:	21 e0       	ldi	r18, 0x01	; 1
    2264:	2a 87       	std	Y+10, r18	; 0x0a
    2266:	ce 01       	movw	r24, r28
    2268:	09 96       	adiw	r24, 0x09	; 9
    226a:	bb c0       	rjmp	.+374    	; 0x23e2 <__mulsf3+0x1e8>
    226c:	82 30       	cpi	r24, 0x02	; 2
    226e:	49 f4       	brne	.+18     	; 0x2282 <__mulsf3+0x88>
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	9a 85       	ldd	r25, Y+10	; 0x0a
    2274:	8a 89       	ldd	r24, Y+18	; 0x12
    2276:	98 13       	cpse	r25, r24
    2278:	21 e0       	ldi	r18, 0x01	; 1
    227a:	2a 8b       	std	Y+18, r18	; 0x12
    227c:	ce 01       	movw	r24, r28
    227e:	41 96       	adiw	r24, 0x11	; 17
    2280:	b0 c0       	rjmp	.+352    	; 0x23e2 <__mulsf3+0x1e8>
    2282:	2d 84       	ldd	r2, Y+13	; 0x0d
    2284:	3e 84       	ldd	r3, Y+14	; 0x0e
    2286:	4f 84       	ldd	r4, Y+15	; 0x0f
    2288:	58 88       	ldd	r5, Y+16	; 0x10
    228a:	6d 88       	ldd	r6, Y+21	; 0x15
    228c:	7e 88       	ldd	r7, Y+22	; 0x16
    228e:	8f 88       	ldd	r8, Y+23	; 0x17
    2290:	98 8c       	ldd	r9, Y+24	; 0x18
    2292:	ee 24       	eor	r14, r14
    2294:	ff 24       	eor	r15, r15
    2296:	87 01       	movw	r16, r14
    2298:	aa 24       	eor	r10, r10
    229a:	bb 24       	eor	r11, r11
    229c:	65 01       	movw	r12, r10
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	50 e0       	ldi	r21, 0x00	; 0
    22a2:	60 e0       	ldi	r22, 0x00	; 0
    22a4:	70 e0       	ldi	r23, 0x00	; 0
    22a6:	e0 e0       	ldi	r30, 0x00	; 0
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	c1 01       	movw	r24, r2
    22ac:	81 70       	andi	r24, 0x01	; 1
    22ae:	90 70       	andi	r25, 0x00	; 0
    22b0:	89 2b       	or	r24, r25
    22b2:	e9 f0       	breq	.+58     	; 0x22ee <__mulsf3+0xf4>
    22b4:	e6 0c       	add	r14, r6
    22b6:	f7 1c       	adc	r15, r7
    22b8:	08 1d       	adc	r16, r8
    22ba:	19 1d       	adc	r17, r9
    22bc:	9a 01       	movw	r18, r20
    22be:	ab 01       	movw	r20, r22
    22c0:	2a 0d       	add	r18, r10
    22c2:	3b 1d       	adc	r19, r11
    22c4:	4c 1d       	adc	r20, r12
    22c6:	5d 1d       	adc	r21, r13
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	a0 e0       	ldi	r26, 0x00	; 0
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e6 14       	cp	r14, r6
    22d2:	f7 04       	cpc	r15, r7
    22d4:	08 05       	cpc	r16, r8
    22d6:	19 05       	cpc	r17, r9
    22d8:	20 f4       	brcc	.+8      	; 0x22e2 <__mulsf3+0xe8>
    22da:	81 e0       	ldi	r24, 0x01	; 1
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	a0 e0       	ldi	r26, 0x00	; 0
    22e0:	b0 e0       	ldi	r27, 0x00	; 0
    22e2:	ba 01       	movw	r22, r20
    22e4:	a9 01       	movw	r20, r18
    22e6:	48 0f       	add	r20, r24
    22e8:	59 1f       	adc	r21, r25
    22ea:	6a 1f       	adc	r22, r26
    22ec:	7b 1f       	adc	r23, r27
    22ee:	aa 0c       	add	r10, r10
    22f0:	bb 1c       	adc	r11, r11
    22f2:	cc 1c       	adc	r12, r12
    22f4:	dd 1c       	adc	r13, r13
    22f6:	97 fe       	sbrs	r9, 7
    22f8:	08 c0       	rjmp	.+16     	; 0x230a <__mulsf3+0x110>
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	a0 e0       	ldi	r26, 0x00	; 0
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	a8 2a       	or	r10, r24
    2304:	b9 2a       	or	r11, r25
    2306:	ca 2a       	or	r12, r26
    2308:	db 2a       	or	r13, r27
    230a:	31 96       	adiw	r30, 0x01	; 1
    230c:	e0 32       	cpi	r30, 0x20	; 32
    230e:	f1 05       	cpc	r31, r1
    2310:	49 f0       	breq	.+18     	; 0x2324 <__mulsf3+0x12a>
    2312:	66 0c       	add	r6, r6
    2314:	77 1c       	adc	r7, r7
    2316:	88 1c       	adc	r8, r8
    2318:	99 1c       	adc	r9, r9
    231a:	56 94       	lsr	r5
    231c:	47 94       	ror	r4
    231e:	37 94       	ror	r3
    2320:	27 94       	ror	r2
    2322:	c3 cf       	rjmp	.-122    	; 0x22aa <__mulsf3+0xb0>
    2324:	fa 85       	ldd	r31, Y+10	; 0x0a
    2326:	ea 89       	ldd	r30, Y+18	; 0x12
    2328:	2b 89       	ldd	r18, Y+19	; 0x13
    232a:	3c 89       	ldd	r19, Y+20	; 0x14
    232c:	8b 85       	ldd	r24, Y+11	; 0x0b
    232e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2330:	28 0f       	add	r18, r24
    2332:	39 1f       	adc	r19, r25
    2334:	2e 5f       	subi	r18, 0xFE	; 254
    2336:	3f 4f       	sbci	r19, 0xFF	; 255
    2338:	17 c0       	rjmp	.+46     	; 0x2368 <__mulsf3+0x16e>
    233a:	ca 01       	movw	r24, r20
    233c:	81 70       	andi	r24, 0x01	; 1
    233e:	90 70       	andi	r25, 0x00	; 0
    2340:	89 2b       	or	r24, r25
    2342:	61 f0       	breq	.+24     	; 0x235c <__mulsf3+0x162>
    2344:	16 95       	lsr	r17
    2346:	07 95       	ror	r16
    2348:	f7 94       	ror	r15
    234a:	e7 94       	ror	r14
    234c:	80 e0       	ldi	r24, 0x00	; 0
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a0 e0       	ldi	r26, 0x00	; 0
    2352:	b0 e8       	ldi	r27, 0x80	; 128
    2354:	e8 2a       	or	r14, r24
    2356:	f9 2a       	or	r15, r25
    2358:	0a 2b       	or	r16, r26
    235a:	1b 2b       	or	r17, r27
    235c:	76 95       	lsr	r23
    235e:	67 95       	ror	r22
    2360:	57 95       	ror	r21
    2362:	47 95       	ror	r20
    2364:	2f 5f       	subi	r18, 0xFF	; 255
    2366:	3f 4f       	sbci	r19, 0xFF	; 255
    2368:	77 fd       	sbrc	r23, 7
    236a:	e7 cf       	rjmp	.-50     	; 0x233a <__mulsf3+0x140>
    236c:	0c c0       	rjmp	.+24     	; 0x2386 <__mulsf3+0x18c>
    236e:	44 0f       	add	r20, r20
    2370:	55 1f       	adc	r21, r21
    2372:	66 1f       	adc	r22, r22
    2374:	77 1f       	adc	r23, r23
    2376:	17 fd       	sbrc	r17, 7
    2378:	41 60       	ori	r20, 0x01	; 1
    237a:	ee 0c       	add	r14, r14
    237c:	ff 1c       	adc	r15, r15
    237e:	00 1f       	adc	r16, r16
    2380:	11 1f       	adc	r17, r17
    2382:	21 50       	subi	r18, 0x01	; 1
    2384:	30 40       	sbci	r19, 0x00	; 0
    2386:	40 30       	cpi	r20, 0x00	; 0
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	59 07       	cpc	r21, r25
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	69 07       	cpc	r22, r25
    2390:	90 e4       	ldi	r25, 0x40	; 64
    2392:	79 07       	cpc	r23, r25
    2394:	60 f3       	brcs	.-40     	; 0x236e <__mulsf3+0x174>
    2396:	2b 8f       	std	Y+27, r18	; 0x1b
    2398:	3c 8f       	std	Y+28, r19	; 0x1c
    239a:	db 01       	movw	r26, r22
    239c:	ca 01       	movw	r24, r20
    239e:	8f 77       	andi	r24, 0x7F	; 127
    23a0:	90 70       	andi	r25, 0x00	; 0
    23a2:	a0 70       	andi	r26, 0x00	; 0
    23a4:	b0 70       	andi	r27, 0x00	; 0
    23a6:	80 34       	cpi	r24, 0x40	; 64
    23a8:	91 05       	cpc	r25, r1
    23aa:	a1 05       	cpc	r26, r1
    23ac:	b1 05       	cpc	r27, r1
    23ae:	61 f4       	brne	.+24     	; 0x23c8 <__mulsf3+0x1ce>
    23b0:	47 fd       	sbrc	r20, 7
    23b2:	0a c0       	rjmp	.+20     	; 0x23c8 <__mulsf3+0x1ce>
    23b4:	e1 14       	cp	r14, r1
    23b6:	f1 04       	cpc	r15, r1
    23b8:	01 05       	cpc	r16, r1
    23ba:	11 05       	cpc	r17, r1
    23bc:	29 f0       	breq	.+10     	; 0x23c8 <__mulsf3+0x1ce>
    23be:	40 5c       	subi	r20, 0xC0	; 192
    23c0:	5f 4f       	sbci	r21, 0xFF	; 255
    23c2:	6f 4f       	sbci	r22, 0xFF	; 255
    23c4:	7f 4f       	sbci	r23, 0xFF	; 255
    23c6:	40 78       	andi	r20, 0x80	; 128
    23c8:	1a 8e       	std	Y+26, r1	; 0x1a
    23ca:	fe 17       	cp	r31, r30
    23cc:	11 f0       	breq	.+4      	; 0x23d2 <__mulsf3+0x1d8>
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	8a 8f       	std	Y+26, r24	; 0x1a
    23d2:	4d 8f       	std	Y+29, r20	; 0x1d
    23d4:	5e 8f       	std	Y+30, r21	; 0x1e
    23d6:	6f 8f       	std	Y+31, r22	; 0x1f
    23d8:	78 a3       	std	Y+32, r23	; 0x20
    23da:	83 e0       	ldi	r24, 0x03	; 3
    23dc:	89 8f       	std	Y+25, r24	; 0x19
    23de:	ce 01       	movw	r24, r28
    23e0:	49 96       	adiw	r24, 0x19	; 25
    23e2:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__pack_f>
    23e6:	a0 96       	adiw	r28, 0x20	; 32
    23e8:	e2 e1       	ldi	r30, 0x12	; 18
    23ea:	0c 94 5a 38 	jmp	0x70b4	; 0x70b4 <__epilogue_restores__>

000023ee <__divsf3>:
    23ee:	a8 e1       	ldi	r26, 0x18	; 24
    23f0:	b0 e0       	ldi	r27, 0x00	; 0
    23f2:	ed ef       	ldi	r30, 0xFD	; 253
    23f4:	f1 e1       	ldi	r31, 0x11	; 17
    23f6:	0c 94 46 38 	jmp	0x708c	; 0x708c <__prologue_saves__+0x10>
    23fa:	69 83       	std	Y+1, r22	; 0x01
    23fc:	7a 83       	std	Y+2, r23	; 0x02
    23fe:	8b 83       	std	Y+3, r24	; 0x03
    2400:	9c 83       	std	Y+4, r25	; 0x04
    2402:	2d 83       	std	Y+5, r18	; 0x05
    2404:	3e 83       	std	Y+6, r19	; 0x06
    2406:	4f 83       	std	Y+7, r20	; 0x07
    2408:	58 87       	std	Y+8, r21	; 0x08
    240a:	b9 e0       	ldi	r27, 0x09	; 9
    240c:	eb 2e       	mov	r14, r27
    240e:	f1 2c       	mov	r15, r1
    2410:	ec 0e       	add	r14, r28
    2412:	fd 1e       	adc	r15, r29
    2414:	ce 01       	movw	r24, r28
    2416:	01 96       	adiw	r24, 0x01	; 1
    2418:	b7 01       	movw	r22, r14
    241a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    241e:	8e 01       	movw	r16, r28
    2420:	0f 5e       	subi	r16, 0xEF	; 239
    2422:	1f 4f       	sbci	r17, 0xFF	; 255
    2424:	ce 01       	movw	r24, r28
    2426:	05 96       	adiw	r24, 0x05	; 5
    2428:	b8 01       	movw	r22, r16
    242a:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    242e:	29 85       	ldd	r18, Y+9	; 0x09
    2430:	22 30       	cpi	r18, 0x02	; 2
    2432:	08 f4       	brcc	.+2      	; 0x2436 <__divsf3+0x48>
    2434:	7e c0       	rjmp	.+252    	; 0x2532 <__divsf3+0x144>
    2436:	39 89       	ldd	r19, Y+17	; 0x11
    2438:	32 30       	cpi	r19, 0x02	; 2
    243a:	10 f4       	brcc	.+4      	; 0x2440 <__divsf3+0x52>
    243c:	b8 01       	movw	r22, r16
    243e:	7c c0       	rjmp	.+248    	; 0x2538 <__divsf3+0x14a>
    2440:	8a 85       	ldd	r24, Y+10	; 0x0a
    2442:	9a 89       	ldd	r25, Y+18	; 0x12
    2444:	89 27       	eor	r24, r25
    2446:	8a 87       	std	Y+10, r24	; 0x0a
    2448:	24 30       	cpi	r18, 0x04	; 4
    244a:	11 f0       	breq	.+4      	; 0x2450 <__divsf3+0x62>
    244c:	22 30       	cpi	r18, 0x02	; 2
    244e:	31 f4       	brne	.+12     	; 0x245c <__divsf3+0x6e>
    2450:	23 17       	cp	r18, r19
    2452:	09 f0       	breq	.+2      	; 0x2456 <__divsf3+0x68>
    2454:	6e c0       	rjmp	.+220    	; 0x2532 <__divsf3+0x144>
    2456:	69 ec       	ldi	r22, 0xC9	; 201
    2458:	70 e0       	ldi	r23, 0x00	; 0
    245a:	6e c0       	rjmp	.+220    	; 0x2538 <__divsf3+0x14a>
    245c:	34 30       	cpi	r19, 0x04	; 4
    245e:	39 f4       	brne	.+14     	; 0x246e <__divsf3+0x80>
    2460:	1d 86       	std	Y+13, r1	; 0x0d
    2462:	1e 86       	std	Y+14, r1	; 0x0e
    2464:	1f 86       	std	Y+15, r1	; 0x0f
    2466:	18 8a       	std	Y+16, r1	; 0x10
    2468:	1c 86       	std	Y+12, r1	; 0x0c
    246a:	1b 86       	std	Y+11, r1	; 0x0b
    246c:	04 c0       	rjmp	.+8      	; 0x2476 <__divsf3+0x88>
    246e:	32 30       	cpi	r19, 0x02	; 2
    2470:	21 f4       	brne	.+8      	; 0x247a <__divsf3+0x8c>
    2472:	84 e0       	ldi	r24, 0x04	; 4
    2474:	89 87       	std	Y+9, r24	; 0x09
    2476:	b7 01       	movw	r22, r14
    2478:	5f c0       	rjmp	.+190    	; 0x2538 <__divsf3+0x14a>
    247a:	2b 85       	ldd	r18, Y+11	; 0x0b
    247c:	3c 85       	ldd	r19, Y+12	; 0x0c
    247e:	8b 89       	ldd	r24, Y+19	; 0x13
    2480:	9c 89       	ldd	r25, Y+20	; 0x14
    2482:	28 1b       	sub	r18, r24
    2484:	39 0b       	sbc	r19, r25
    2486:	3c 87       	std	Y+12, r19	; 0x0c
    2488:	2b 87       	std	Y+11, r18	; 0x0b
    248a:	ed 84       	ldd	r14, Y+13	; 0x0d
    248c:	fe 84       	ldd	r15, Y+14	; 0x0e
    248e:	0f 85       	ldd	r16, Y+15	; 0x0f
    2490:	18 89       	ldd	r17, Y+16	; 0x10
    2492:	ad 88       	ldd	r10, Y+21	; 0x15
    2494:	be 88       	ldd	r11, Y+22	; 0x16
    2496:	cf 88       	ldd	r12, Y+23	; 0x17
    2498:	d8 8c       	ldd	r13, Y+24	; 0x18
    249a:	ea 14       	cp	r14, r10
    249c:	fb 04       	cpc	r15, r11
    249e:	0c 05       	cpc	r16, r12
    24a0:	1d 05       	cpc	r17, r13
    24a2:	40 f4       	brcc	.+16     	; 0x24b4 <__divsf3+0xc6>
    24a4:	ee 0c       	add	r14, r14
    24a6:	ff 1c       	adc	r15, r15
    24a8:	00 1f       	adc	r16, r16
    24aa:	11 1f       	adc	r17, r17
    24ac:	21 50       	subi	r18, 0x01	; 1
    24ae:	30 40       	sbci	r19, 0x00	; 0
    24b0:	3c 87       	std	Y+12, r19	; 0x0c
    24b2:	2b 87       	std	Y+11, r18	; 0x0b
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	50 e0       	ldi	r21, 0x00	; 0
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	a0 e0       	ldi	r26, 0x00	; 0
    24c2:	b0 e4       	ldi	r27, 0x40	; 64
    24c4:	60 e0       	ldi	r22, 0x00	; 0
    24c6:	70 e0       	ldi	r23, 0x00	; 0
    24c8:	ea 14       	cp	r14, r10
    24ca:	fb 04       	cpc	r15, r11
    24cc:	0c 05       	cpc	r16, r12
    24ce:	1d 05       	cpc	r17, r13
    24d0:	40 f0       	brcs	.+16     	; 0x24e2 <__divsf3+0xf4>
    24d2:	28 2b       	or	r18, r24
    24d4:	39 2b       	or	r19, r25
    24d6:	4a 2b       	or	r20, r26
    24d8:	5b 2b       	or	r21, r27
    24da:	ea 18       	sub	r14, r10
    24dc:	fb 08       	sbc	r15, r11
    24de:	0c 09       	sbc	r16, r12
    24e0:	1d 09       	sbc	r17, r13
    24e2:	b6 95       	lsr	r27
    24e4:	a7 95       	ror	r26
    24e6:	97 95       	ror	r25
    24e8:	87 95       	ror	r24
    24ea:	ee 0c       	add	r14, r14
    24ec:	ff 1c       	adc	r15, r15
    24ee:	00 1f       	adc	r16, r16
    24f0:	11 1f       	adc	r17, r17
    24f2:	6f 5f       	subi	r22, 0xFF	; 255
    24f4:	7f 4f       	sbci	r23, 0xFF	; 255
    24f6:	6f 31       	cpi	r22, 0x1F	; 31
    24f8:	71 05       	cpc	r23, r1
    24fa:	31 f7       	brne	.-52     	; 0x24c8 <__divsf3+0xda>
    24fc:	da 01       	movw	r26, r20
    24fe:	c9 01       	movw	r24, r18
    2500:	8f 77       	andi	r24, 0x7F	; 127
    2502:	90 70       	andi	r25, 0x00	; 0
    2504:	a0 70       	andi	r26, 0x00	; 0
    2506:	b0 70       	andi	r27, 0x00	; 0
    2508:	80 34       	cpi	r24, 0x40	; 64
    250a:	91 05       	cpc	r25, r1
    250c:	a1 05       	cpc	r26, r1
    250e:	b1 05       	cpc	r27, r1
    2510:	61 f4       	brne	.+24     	; 0x252a <__divsf3+0x13c>
    2512:	27 fd       	sbrc	r18, 7
    2514:	0a c0       	rjmp	.+20     	; 0x252a <__divsf3+0x13c>
    2516:	e1 14       	cp	r14, r1
    2518:	f1 04       	cpc	r15, r1
    251a:	01 05       	cpc	r16, r1
    251c:	11 05       	cpc	r17, r1
    251e:	29 f0       	breq	.+10     	; 0x252a <__divsf3+0x13c>
    2520:	20 5c       	subi	r18, 0xC0	; 192
    2522:	3f 4f       	sbci	r19, 0xFF	; 255
    2524:	4f 4f       	sbci	r20, 0xFF	; 255
    2526:	5f 4f       	sbci	r21, 0xFF	; 255
    2528:	20 78       	andi	r18, 0x80	; 128
    252a:	2d 87       	std	Y+13, r18	; 0x0d
    252c:	3e 87       	std	Y+14, r19	; 0x0e
    252e:	4f 87       	std	Y+15, r20	; 0x0f
    2530:	58 8b       	std	Y+16, r21	; 0x10
    2532:	be 01       	movw	r22, r28
    2534:	67 5f       	subi	r22, 0xF7	; 247
    2536:	7f 4f       	sbci	r23, 0xFF	; 255
    2538:	cb 01       	movw	r24, r22
    253a:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__pack_f>
    253e:	68 96       	adiw	r28, 0x18	; 24
    2540:	ea e0       	ldi	r30, 0x0A	; 10
    2542:	0c 94 62 38 	jmp	0x70c4	; 0x70c4 <__epilogue_restores__+0x10>

00002546 <__eqsf2>:
    2546:	a8 e1       	ldi	r26, 0x18	; 24
    2548:	b0 e0       	ldi	r27, 0x00	; 0
    254a:	e9 ea       	ldi	r30, 0xA9	; 169
    254c:	f2 e1       	ldi	r31, 0x12	; 18
    254e:	0c 94 4a 38 	jmp	0x7094	; 0x7094 <__prologue_saves__+0x18>
    2552:	69 83       	std	Y+1, r22	; 0x01
    2554:	7a 83       	std	Y+2, r23	; 0x02
    2556:	8b 83       	std	Y+3, r24	; 0x03
    2558:	9c 83       	std	Y+4, r25	; 0x04
    255a:	2d 83       	std	Y+5, r18	; 0x05
    255c:	3e 83       	std	Y+6, r19	; 0x06
    255e:	4f 83       	std	Y+7, r20	; 0x07
    2560:	58 87       	std	Y+8, r21	; 0x08
    2562:	89 e0       	ldi	r24, 0x09	; 9
    2564:	e8 2e       	mov	r14, r24
    2566:	f1 2c       	mov	r15, r1
    2568:	ec 0e       	add	r14, r28
    256a:	fd 1e       	adc	r15, r29
    256c:	ce 01       	movw	r24, r28
    256e:	01 96       	adiw	r24, 0x01	; 1
    2570:	b7 01       	movw	r22, r14
    2572:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    2576:	8e 01       	movw	r16, r28
    2578:	0f 5e       	subi	r16, 0xEF	; 239
    257a:	1f 4f       	sbci	r17, 0xFF	; 255
    257c:	ce 01       	movw	r24, r28
    257e:	05 96       	adiw	r24, 0x05	; 5
    2580:	b8 01       	movw	r22, r16
    2582:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    2586:	89 85       	ldd	r24, Y+9	; 0x09
    2588:	82 30       	cpi	r24, 0x02	; 2
    258a:	40 f0       	brcs	.+16     	; 0x259c <__eqsf2+0x56>
    258c:	89 89       	ldd	r24, Y+17	; 0x11
    258e:	82 30       	cpi	r24, 0x02	; 2
    2590:	28 f0       	brcs	.+10     	; 0x259c <__eqsf2+0x56>
    2592:	c7 01       	movw	r24, r14
    2594:	b8 01       	movw	r22, r16
    2596:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__fpcmp_parts_f>
    259a:	01 c0       	rjmp	.+2      	; 0x259e <__eqsf2+0x58>
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	68 96       	adiw	r28, 0x18	; 24
    25a0:	e6 e0       	ldi	r30, 0x06	; 6
    25a2:	0c 94 66 38 	jmp	0x70cc	; 0x70cc <__epilogue_restores__+0x18>

000025a6 <__gtsf2>:
    25a6:	a8 e1       	ldi	r26, 0x18	; 24
    25a8:	b0 e0       	ldi	r27, 0x00	; 0
    25aa:	e9 ed       	ldi	r30, 0xD9	; 217
    25ac:	f2 e1       	ldi	r31, 0x12	; 18
    25ae:	0c 94 4a 38 	jmp	0x7094	; 0x7094 <__prologue_saves__+0x18>
    25b2:	69 83       	std	Y+1, r22	; 0x01
    25b4:	7a 83       	std	Y+2, r23	; 0x02
    25b6:	8b 83       	std	Y+3, r24	; 0x03
    25b8:	9c 83       	std	Y+4, r25	; 0x04
    25ba:	2d 83       	std	Y+5, r18	; 0x05
    25bc:	3e 83       	std	Y+6, r19	; 0x06
    25be:	4f 83       	std	Y+7, r20	; 0x07
    25c0:	58 87       	std	Y+8, r21	; 0x08
    25c2:	89 e0       	ldi	r24, 0x09	; 9
    25c4:	e8 2e       	mov	r14, r24
    25c6:	f1 2c       	mov	r15, r1
    25c8:	ec 0e       	add	r14, r28
    25ca:	fd 1e       	adc	r15, r29
    25cc:	ce 01       	movw	r24, r28
    25ce:	01 96       	adiw	r24, 0x01	; 1
    25d0:	b7 01       	movw	r22, r14
    25d2:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    25d6:	8e 01       	movw	r16, r28
    25d8:	0f 5e       	subi	r16, 0xEF	; 239
    25da:	1f 4f       	sbci	r17, 0xFF	; 255
    25dc:	ce 01       	movw	r24, r28
    25de:	05 96       	adiw	r24, 0x05	; 5
    25e0:	b8 01       	movw	r22, r16
    25e2:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    25e6:	89 85       	ldd	r24, Y+9	; 0x09
    25e8:	82 30       	cpi	r24, 0x02	; 2
    25ea:	40 f0       	brcs	.+16     	; 0x25fc <__gtsf2+0x56>
    25ec:	89 89       	ldd	r24, Y+17	; 0x11
    25ee:	82 30       	cpi	r24, 0x02	; 2
    25f0:	28 f0       	brcs	.+10     	; 0x25fc <__gtsf2+0x56>
    25f2:	c7 01       	movw	r24, r14
    25f4:	b8 01       	movw	r22, r16
    25f6:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__fpcmp_parts_f>
    25fa:	01 c0       	rjmp	.+2      	; 0x25fe <__gtsf2+0x58>
    25fc:	8f ef       	ldi	r24, 0xFF	; 255
    25fe:	68 96       	adiw	r28, 0x18	; 24
    2600:	e6 e0       	ldi	r30, 0x06	; 6
    2602:	0c 94 66 38 	jmp	0x70cc	; 0x70cc <__epilogue_restores__+0x18>

00002606 <__gesf2>:
    2606:	a8 e1       	ldi	r26, 0x18	; 24
    2608:	b0 e0       	ldi	r27, 0x00	; 0
    260a:	e9 e0       	ldi	r30, 0x09	; 9
    260c:	f3 e1       	ldi	r31, 0x13	; 19
    260e:	0c 94 4a 38 	jmp	0x7094	; 0x7094 <__prologue_saves__+0x18>
    2612:	69 83       	std	Y+1, r22	; 0x01
    2614:	7a 83       	std	Y+2, r23	; 0x02
    2616:	8b 83       	std	Y+3, r24	; 0x03
    2618:	9c 83       	std	Y+4, r25	; 0x04
    261a:	2d 83       	std	Y+5, r18	; 0x05
    261c:	3e 83       	std	Y+6, r19	; 0x06
    261e:	4f 83       	std	Y+7, r20	; 0x07
    2620:	58 87       	std	Y+8, r21	; 0x08
    2622:	89 e0       	ldi	r24, 0x09	; 9
    2624:	e8 2e       	mov	r14, r24
    2626:	f1 2c       	mov	r15, r1
    2628:	ec 0e       	add	r14, r28
    262a:	fd 1e       	adc	r15, r29
    262c:	ce 01       	movw	r24, r28
    262e:	01 96       	adiw	r24, 0x01	; 1
    2630:	b7 01       	movw	r22, r14
    2632:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    2636:	8e 01       	movw	r16, r28
    2638:	0f 5e       	subi	r16, 0xEF	; 239
    263a:	1f 4f       	sbci	r17, 0xFF	; 255
    263c:	ce 01       	movw	r24, r28
    263e:	05 96       	adiw	r24, 0x05	; 5
    2640:	b8 01       	movw	r22, r16
    2642:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    2646:	89 85       	ldd	r24, Y+9	; 0x09
    2648:	82 30       	cpi	r24, 0x02	; 2
    264a:	40 f0       	brcs	.+16     	; 0x265c <__gesf2+0x56>
    264c:	89 89       	ldd	r24, Y+17	; 0x11
    264e:	82 30       	cpi	r24, 0x02	; 2
    2650:	28 f0       	brcs	.+10     	; 0x265c <__gesf2+0x56>
    2652:	c7 01       	movw	r24, r14
    2654:	b8 01       	movw	r22, r16
    2656:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__fpcmp_parts_f>
    265a:	01 c0       	rjmp	.+2      	; 0x265e <__gesf2+0x58>
    265c:	8f ef       	ldi	r24, 0xFF	; 255
    265e:	68 96       	adiw	r28, 0x18	; 24
    2660:	e6 e0       	ldi	r30, 0x06	; 6
    2662:	0c 94 66 38 	jmp	0x70cc	; 0x70cc <__epilogue_restores__+0x18>

00002666 <__ltsf2>:
    2666:	a8 e1       	ldi	r26, 0x18	; 24
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e9 e3       	ldi	r30, 0x39	; 57
    266c:	f3 e1       	ldi	r31, 0x13	; 19
    266e:	0c 94 4a 38 	jmp	0x7094	; 0x7094 <__prologue_saves__+0x18>
    2672:	69 83       	std	Y+1, r22	; 0x01
    2674:	7a 83       	std	Y+2, r23	; 0x02
    2676:	8b 83       	std	Y+3, r24	; 0x03
    2678:	9c 83       	std	Y+4, r25	; 0x04
    267a:	2d 83       	std	Y+5, r18	; 0x05
    267c:	3e 83       	std	Y+6, r19	; 0x06
    267e:	4f 83       	std	Y+7, r20	; 0x07
    2680:	58 87       	std	Y+8, r21	; 0x08
    2682:	89 e0       	ldi	r24, 0x09	; 9
    2684:	e8 2e       	mov	r14, r24
    2686:	f1 2c       	mov	r15, r1
    2688:	ec 0e       	add	r14, r28
    268a:	fd 1e       	adc	r15, r29
    268c:	ce 01       	movw	r24, r28
    268e:	01 96       	adiw	r24, 0x01	; 1
    2690:	b7 01       	movw	r22, r14
    2692:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    2696:	8e 01       	movw	r16, r28
    2698:	0f 5e       	subi	r16, 0xEF	; 239
    269a:	1f 4f       	sbci	r17, 0xFF	; 255
    269c:	ce 01       	movw	r24, r28
    269e:	05 96       	adiw	r24, 0x05	; 5
    26a0:	b8 01       	movw	r22, r16
    26a2:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    26a6:	89 85       	ldd	r24, Y+9	; 0x09
    26a8:	82 30       	cpi	r24, 0x02	; 2
    26aa:	40 f0       	brcs	.+16     	; 0x26bc <__ltsf2+0x56>
    26ac:	89 89       	ldd	r24, Y+17	; 0x11
    26ae:	82 30       	cpi	r24, 0x02	; 2
    26b0:	28 f0       	brcs	.+10     	; 0x26bc <__ltsf2+0x56>
    26b2:	c7 01       	movw	r24, r14
    26b4:	b8 01       	movw	r22, r16
    26b6:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <__fpcmp_parts_f>
    26ba:	01 c0       	rjmp	.+2      	; 0x26be <__ltsf2+0x58>
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	68 96       	adiw	r28, 0x18	; 24
    26c0:	e6 e0       	ldi	r30, 0x06	; 6
    26c2:	0c 94 66 38 	jmp	0x70cc	; 0x70cc <__epilogue_restores__+0x18>

000026c6 <__fixsfsi>:
    26c6:	ac e0       	ldi	r26, 0x0C	; 12
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e9 e6       	ldi	r30, 0x69	; 105
    26cc:	f3 e1       	ldi	r31, 0x13	; 19
    26ce:	0c 94 4e 38 	jmp	0x709c	; 0x709c <__prologue_saves__+0x20>
    26d2:	69 83       	std	Y+1, r22	; 0x01
    26d4:	7a 83       	std	Y+2, r23	; 0x02
    26d6:	8b 83       	std	Y+3, r24	; 0x03
    26d8:	9c 83       	std	Y+4, r25	; 0x04
    26da:	ce 01       	movw	r24, r28
    26dc:	01 96       	adiw	r24, 0x01	; 1
    26de:	be 01       	movw	r22, r28
    26e0:	6b 5f       	subi	r22, 0xFB	; 251
    26e2:	7f 4f       	sbci	r23, 0xFF	; 255
    26e4:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <__unpack_f>
    26e8:	8d 81       	ldd	r24, Y+5	; 0x05
    26ea:	82 30       	cpi	r24, 0x02	; 2
    26ec:	61 f1       	breq	.+88     	; 0x2746 <__fixsfsi+0x80>
    26ee:	82 30       	cpi	r24, 0x02	; 2
    26f0:	50 f1       	brcs	.+84     	; 0x2746 <__fixsfsi+0x80>
    26f2:	84 30       	cpi	r24, 0x04	; 4
    26f4:	21 f4       	brne	.+8      	; 0x26fe <__fixsfsi+0x38>
    26f6:	8e 81       	ldd	r24, Y+6	; 0x06
    26f8:	88 23       	and	r24, r24
    26fa:	51 f1       	breq	.+84     	; 0x2750 <__fixsfsi+0x8a>
    26fc:	2e c0       	rjmp	.+92     	; 0x275a <__fixsfsi+0x94>
    26fe:	2f 81       	ldd	r18, Y+7	; 0x07
    2700:	38 85       	ldd	r19, Y+8	; 0x08
    2702:	37 fd       	sbrc	r19, 7
    2704:	20 c0       	rjmp	.+64     	; 0x2746 <__fixsfsi+0x80>
    2706:	6e 81       	ldd	r22, Y+6	; 0x06
    2708:	2f 31       	cpi	r18, 0x1F	; 31
    270a:	31 05       	cpc	r19, r1
    270c:	1c f0       	brlt	.+6      	; 0x2714 <__fixsfsi+0x4e>
    270e:	66 23       	and	r22, r22
    2710:	f9 f0       	breq	.+62     	; 0x2750 <__fixsfsi+0x8a>
    2712:	23 c0       	rjmp	.+70     	; 0x275a <__fixsfsi+0x94>
    2714:	8e e1       	ldi	r24, 0x1E	; 30
    2716:	90 e0       	ldi	r25, 0x00	; 0
    2718:	82 1b       	sub	r24, r18
    271a:	93 0b       	sbc	r25, r19
    271c:	29 85       	ldd	r18, Y+9	; 0x09
    271e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2720:	4b 85       	ldd	r20, Y+11	; 0x0b
    2722:	5c 85       	ldd	r21, Y+12	; 0x0c
    2724:	04 c0       	rjmp	.+8      	; 0x272e <__fixsfsi+0x68>
    2726:	56 95       	lsr	r21
    2728:	47 95       	ror	r20
    272a:	37 95       	ror	r19
    272c:	27 95       	ror	r18
    272e:	8a 95       	dec	r24
    2730:	d2 f7       	brpl	.-12     	; 0x2726 <__fixsfsi+0x60>
    2732:	66 23       	and	r22, r22
    2734:	b1 f0       	breq	.+44     	; 0x2762 <__fixsfsi+0x9c>
    2736:	50 95       	com	r21
    2738:	40 95       	com	r20
    273a:	30 95       	com	r19
    273c:	21 95       	neg	r18
    273e:	3f 4f       	sbci	r19, 0xFF	; 255
    2740:	4f 4f       	sbci	r20, 0xFF	; 255
    2742:	5f 4f       	sbci	r21, 0xFF	; 255
    2744:	0e c0       	rjmp	.+28     	; 0x2762 <__fixsfsi+0x9c>
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	50 e0       	ldi	r21, 0x00	; 0
    274e:	09 c0       	rjmp	.+18     	; 0x2762 <__fixsfsi+0x9c>
    2750:	2f ef       	ldi	r18, 0xFF	; 255
    2752:	3f ef       	ldi	r19, 0xFF	; 255
    2754:	4f ef       	ldi	r20, 0xFF	; 255
    2756:	5f e7       	ldi	r21, 0x7F	; 127
    2758:	04 c0       	rjmp	.+8      	; 0x2762 <__fixsfsi+0x9c>
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	50 e8       	ldi	r21, 0x80	; 128
    2762:	b9 01       	movw	r22, r18
    2764:	ca 01       	movw	r24, r20
    2766:	2c 96       	adiw	r28, 0x0c	; 12
    2768:	e2 e0       	ldi	r30, 0x02	; 2
    276a:	0c 94 6a 38 	jmp	0x70d4	; 0x70d4 <__epilogue_restores__+0x20>

0000276e <__floatunsisf>:
    276e:	a8 e0       	ldi	r26, 0x08	; 8
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	ed eb       	ldi	r30, 0xBD	; 189
    2774:	f3 e1       	ldi	r31, 0x13	; 19
    2776:	0c 94 46 38 	jmp	0x708c	; 0x708c <__prologue_saves__+0x10>
    277a:	7b 01       	movw	r14, r22
    277c:	8c 01       	movw	r16, r24
    277e:	61 15       	cp	r22, r1
    2780:	71 05       	cpc	r23, r1
    2782:	81 05       	cpc	r24, r1
    2784:	91 05       	cpc	r25, r1
    2786:	19 f4       	brne	.+6      	; 0x278e <__floatunsisf+0x20>
    2788:	82 e0       	ldi	r24, 0x02	; 2
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	60 c0       	rjmp	.+192    	; 0x284e <__floatunsisf+0xe0>
    278e:	83 e0       	ldi	r24, 0x03	; 3
    2790:	89 83       	std	Y+1, r24	; 0x01
    2792:	8e e1       	ldi	r24, 0x1E	; 30
    2794:	c8 2e       	mov	r12, r24
    2796:	d1 2c       	mov	r13, r1
    2798:	dc 82       	std	Y+4, r13	; 0x04
    279a:	cb 82       	std	Y+3, r12	; 0x03
    279c:	ed 82       	std	Y+5, r14	; 0x05
    279e:	fe 82       	std	Y+6, r15	; 0x06
    27a0:	0f 83       	std	Y+7, r16	; 0x07
    27a2:	18 87       	std	Y+8, r17	; 0x08
    27a4:	c8 01       	movw	r24, r16
    27a6:	b7 01       	movw	r22, r14
    27a8:	0e 94 30 14 	call	0x2860	; 0x2860 <__clzsi2>
    27ac:	fc 01       	movw	r30, r24
    27ae:	31 97       	sbiw	r30, 0x01	; 1
    27b0:	f7 ff       	sbrs	r31, 7
    27b2:	3b c0       	rjmp	.+118    	; 0x282a <__floatunsisf+0xbc>
    27b4:	22 27       	eor	r18, r18
    27b6:	33 27       	eor	r19, r19
    27b8:	2e 1b       	sub	r18, r30
    27ba:	3f 0b       	sbc	r19, r31
    27bc:	57 01       	movw	r10, r14
    27be:	68 01       	movw	r12, r16
    27c0:	02 2e       	mov	r0, r18
    27c2:	04 c0       	rjmp	.+8      	; 0x27cc <__floatunsisf+0x5e>
    27c4:	d6 94       	lsr	r13
    27c6:	c7 94       	ror	r12
    27c8:	b7 94       	ror	r11
    27ca:	a7 94       	ror	r10
    27cc:	0a 94       	dec	r0
    27ce:	d2 f7       	brpl	.-12     	; 0x27c4 <__floatunsisf+0x56>
    27d0:	40 e0       	ldi	r20, 0x00	; 0
    27d2:	50 e0       	ldi	r21, 0x00	; 0
    27d4:	60 e0       	ldi	r22, 0x00	; 0
    27d6:	70 e0       	ldi	r23, 0x00	; 0
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	90 e0       	ldi	r25, 0x00	; 0
    27dc:	a0 e0       	ldi	r26, 0x00	; 0
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	04 c0       	rjmp	.+8      	; 0x27ea <__floatunsisf+0x7c>
    27e2:	88 0f       	add	r24, r24
    27e4:	99 1f       	adc	r25, r25
    27e6:	aa 1f       	adc	r26, r26
    27e8:	bb 1f       	adc	r27, r27
    27ea:	2a 95       	dec	r18
    27ec:	d2 f7       	brpl	.-12     	; 0x27e2 <__floatunsisf+0x74>
    27ee:	01 97       	sbiw	r24, 0x01	; 1
    27f0:	a1 09       	sbc	r26, r1
    27f2:	b1 09       	sbc	r27, r1
    27f4:	8e 21       	and	r24, r14
    27f6:	9f 21       	and	r25, r15
    27f8:	a0 23       	and	r26, r16
    27fa:	b1 23       	and	r27, r17
    27fc:	00 97       	sbiw	r24, 0x00	; 0
    27fe:	a1 05       	cpc	r26, r1
    2800:	b1 05       	cpc	r27, r1
    2802:	21 f0       	breq	.+8      	; 0x280c <__floatunsisf+0x9e>
    2804:	41 e0       	ldi	r20, 0x01	; 1
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	70 e0       	ldi	r23, 0x00	; 0
    280c:	4a 29       	or	r20, r10
    280e:	5b 29       	or	r21, r11
    2810:	6c 29       	or	r22, r12
    2812:	7d 29       	or	r23, r13
    2814:	4d 83       	std	Y+5, r20	; 0x05
    2816:	5e 83       	std	Y+6, r21	; 0x06
    2818:	6f 83       	std	Y+7, r22	; 0x07
    281a:	78 87       	std	Y+8, r23	; 0x08
    281c:	8e e1       	ldi	r24, 0x1E	; 30
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	8e 1b       	sub	r24, r30
    2822:	9f 0b       	sbc	r25, r31
    2824:	9c 83       	std	Y+4, r25	; 0x04
    2826:	8b 83       	std	Y+3, r24	; 0x03
    2828:	12 c0       	rjmp	.+36     	; 0x284e <__floatunsisf+0xe0>
    282a:	30 97       	sbiw	r30, 0x00	; 0
    282c:	81 f0       	breq	.+32     	; 0x284e <__floatunsisf+0xe0>
    282e:	0e 2e       	mov	r0, r30
    2830:	04 c0       	rjmp	.+8      	; 0x283a <__floatunsisf+0xcc>
    2832:	ee 0c       	add	r14, r14
    2834:	ff 1c       	adc	r15, r15
    2836:	00 1f       	adc	r16, r16
    2838:	11 1f       	adc	r17, r17
    283a:	0a 94       	dec	r0
    283c:	d2 f7       	brpl	.-12     	; 0x2832 <__floatunsisf+0xc4>
    283e:	ed 82       	std	Y+5, r14	; 0x05
    2840:	fe 82       	std	Y+6, r15	; 0x06
    2842:	0f 83       	std	Y+7, r16	; 0x07
    2844:	18 87       	std	Y+8, r17	; 0x08
    2846:	ce 1a       	sub	r12, r30
    2848:	df 0a       	sbc	r13, r31
    284a:	dc 82       	std	Y+4, r13	; 0x04
    284c:	cb 82       	std	Y+3, r12	; 0x03
    284e:	1a 82       	std	Y+2, r1	; 0x02
    2850:	ce 01       	movw	r24, r28
    2852:	01 96       	adiw	r24, 0x01	; 1
    2854:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__pack_f>
    2858:	28 96       	adiw	r28, 0x08	; 8
    285a:	ea e0       	ldi	r30, 0x0A	; 10
    285c:	0c 94 62 38 	jmp	0x70c4	; 0x70c4 <__epilogue_restores__+0x10>

00002860 <__clzsi2>:
    2860:	ef 92       	push	r14
    2862:	ff 92       	push	r15
    2864:	0f 93       	push	r16
    2866:	1f 93       	push	r17
    2868:	7b 01       	movw	r14, r22
    286a:	8c 01       	movw	r16, r24
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	e8 16       	cp	r14, r24
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	f8 06       	cpc	r15, r24
    2874:	81 e0       	ldi	r24, 0x01	; 1
    2876:	08 07       	cpc	r16, r24
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	18 07       	cpc	r17, r24
    287c:	88 f4       	brcc	.+34     	; 0x28a0 <__clzsi2+0x40>
    287e:	8f ef       	ldi	r24, 0xFF	; 255
    2880:	e8 16       	cp	r14, r24
    2882:	f1 04       	cpc	r15, r1
    2884:	01 05       	cpc	r16, r1
    2886:	11 05       	cpc	r17, r1
    2888:	31 f0       	breq	.+12     	; 0x2896 <__clzsi2+0x36>
    288a:	28 f0       	brcs	.+10     	; 0x2896 <__clzsi2+0x36>
    288c:	88 e0       	ldi	r24, 0x08	; 8
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	a0 e0       	ldi	r26, 0x00	; 0
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	17 c0       	rjmp	.+46     	; 0x28c4 <__clzsi2+0x64>
    2896:	80 e0       	ldi	r24, 0x00	; 0
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	a0 e0       	ldi	r26, 0x00	; 0
    289c:	b0 e0       	ldi	r27, 0x00	; 0
    289e:	12 c0       	rjmp	.+36     	; 0x28c4 <__clzsi2+0x64>
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	e8 16       	cp	r14, r24
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	f8 06       	cpc	r15, r24
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	08 07       	cpc	r16, r24
    28ac:	81 e0       	ldi	r24, 0x01	; 1
    28ae:	18 07       	cpc	r17, r24
    28b0:	28 f0       	brcs	.+10     	; 0x28bc <__clzsi2+0x5c>
    28b2:	88 e1       	ldi	r24, 0x18	; 24
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a0 e0       	ldi	r26, 0x00	; 0
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	04 c0       	rjmp	.+8      	; 0x28c4 <__clzsi2+0x64>
    28bc:	80 e1       	ldi	r24, 0x10	; 16
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	a0 e0       	ldi	r26, 0x00	; 0
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	20 e2       	ldi	r18, 0x20	; 32
    28c6:	30 e0       	ldi	r19, 0x00	; 0
    28c8:	40 e0       	ldi	r20, 0x00	; 0
    28ca:	50 e0       	ldi	r21, 0x00	; 0
    28cc:	28 1b       	sub	r18, r24
    28ce:	39 0b       	sbc	r19, r25
    28d0:	4a 0b       	sbc	r20, r26
    28d2:	5b 0b       	sbc	r21, r27
    28d4:	04 c0       	rjmp	.+8      	; 0x28de <__clzsi2+0x7e>
    28d6:	16 95       	lsr	r17
    28d8:	07 95       	ror	r16
    28da:	f7 94       	ror	r15
    28dc:	e7 94       	ror	r14
    28de:	8a 95       	dec	r24
    28e0:	d2 f7       	brpl	.-12     	; 0x28d6 <__clzsi2+0x76>
    28e2:	f7 01       	movw	r30, r14
    28e4:	ef 52       	subi	r30, 0x2F	; 47
    28e6:	ff 4f       	sbci	r31, 0xFF	; 255
    28e8:	80 81       	ld	r24, Z
    28ea:	28 1b       	sub	r18, r24
    28ec:	31 09       	sbc	r19, r1
    28ee:	41 09       	sbc	r20, r1
    28f0:	51 09       	sbc	r21, r1
    28f2:	c9 01       	movw	r24, r18
    28f4:	1f 91       	pop	r17
    28f6:	0f 91       	pop	r16
    28f8:	ff 90       	pop	r15
    28fa:	ef 90       	pop	r14
    28fc:	08 95       	ret

000028fe <__pack_f>:
    28fe:	df 92       	push	r13
    2900:	ef 92       	push	r14
    2902:	ff 92       	push	r15
    2904:	0f 93       	push	r16
    2906:	1f 93       	push	r17
    2908:	fc 01       	movw	r30, r24
    290a:	e4 80       	ldd	r14, Z+4	; 0x04
    290c:	f5 80       	ldd	r15, Z+5	; 0x05
    290e:	06 81       	ldd	r16, Z+6	; 0x06
    2910:	17 81       	ldd	r17, Z+7	; 0x07
    2912:	d1 80       	ldd	r13, Z+1	; 0x01
    2914:	80 81       	ld	r24, Z
    2916:	82 30       	cpi	r24, 0x02	; 2
    2918:	48 f4       	brcc	.+18     	; 0x292c <__pack_f+0x2e>
    291a:	80 e0       	ldi	r24, 0x00	; 0
    291c:	90 e0       	ldi	r25, 0x00	; 0
    291e:	a0 e1       	ldi	r26, 0x10	; 16
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	e8 2a       	or	r14, r24
    2924:	f9 2a       	or	r15, r25
    2926:	0a 2b       	or	r16, r26
    2928:	1b 2b       	or	r17, r27
    292a:	a5 c0       	rjmp	.+330    	; 0x2a76 <__pack_f+0x178>
    292c:	84 30       	cpi	r24, 0x04	; 4
    292e:	09 f4       	brne	.+2      	; 0x2932 <__pack_f+0x34>
    2930:	9f c0       	rjmp	.+318    	; 0x2a70 <__pack_f+0x172>
    2932:	82 30       	cpi	r24, 0x02	; 2
    2934:	21 f4       	brne	.+8      	; 0x293e <__pack_f+0x40>
    2936:	ee 24       	eor	r14, r14
    2938:	ff 24       	eor	r15, r15
    293a:	87 01       	movw	r16, r14
    293c:	05 c0       	rjmp	.+10     	; 0x2948 <__pack_f+0x4a>
    293e:	e1 14       	cp	r14, r1
    2940:	f1 04       	cpc	r15, r1
    2942:	01 05       	cpc	r16, r1
    2944:	11 05       	cpc	r17, r1
    2946:	19 f4       	brne	.+6      	; 0x294e <__pack_f+0x50>
    2948:	e0 e0       	ldi	r30, 0x00	; 0
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	96 c0       	rjmp	.+300    	; 0x2a7a <__pack_f+0x17c>
    294e:	62 81       	ldd	r22, Z+2	; 0x02
    2950:	73 81       	ldd	r23, Z+3	; 0x03
    2952:	9f ef       	ldi	r25, 0xFF	; 255
    2954:	62 38       	cpi	r22, 0x82	; 130
    2956:	79 07       	cpc	r23, r25
    2958:	0c f0       	brlt	.+2      	; 0x295c <__pack_f+0x5e>
    295a:	5b c0       	rjmp	.+182    	; 0x2a12 <__pack_f+0x114>
    295c:	22 e8       	ldi	r18, 0x82	; 130
    295e:	3f ef       	ldi	r19, 0xFF	; 255
    2960:	26 1b       	sub	r18, r22
    2962:	37 0b       	sbc	r19, r23
    2964:	2a 31       	cpi	r18, 0x1A	; 26
    2966:	31 05       	cpc	r19, r1
    2968:	2c f0       	brlt	.+10     	; 0x2974 <__pack_f+0x76>
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e0       	ldi	r20, 0x00	; 0
    2970:	50 e0       	ldi	r21, 0x00	; 0
    2972:	2a c0       	rjmp	.+84     	; 0x29c8 <__pack_f+0xca>
    2974:	b8 01       	movw	r22, r16
    2976:	a7 01       	movw	r20, r14
    2978:	02 2e       	mov	r0, r18
    297a:	04 c0       	rjmp	.+8      	; 0x2984 <__pack_f+0x86>
    297c:	76 95       	lsr	r23
    297e:	67 95       	ror	r22
    2980:	57 95       	ror	r21
    2982:	47 95       	ror	r20
    2984:	0a 94       	dec	r0
    2986:	d2 f7       	brpl	.-12     	; 0x297c <__pack_f+0x7e>
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	a0 e0       	ldi	r26, 0x00	; 0
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	04 c0       	rjmp	.+8      	; 0x299a <__pack_f+0x9c>
    2992:	88 0f       	add	r24, r24
    2994:	99 1f       	adc	r25, r25
    2996:	aa 1f       	adc	r26, r26
    2998:	bb 1f       	adc	r27, r27
    299a:	2a 95       	dec	r18
    299c:	d2 f7       	brpl	.-12     	; 0x2992 <__pack_f+0x94>
    299e:	01 97       	sbiw	r24, 0x01	; 1
    29a0:	a1 09       	sbc	r26, r1
    29a2:	b1 09       	sbc	r27, r1
    29a4:	8e 21       	and	r24, r14
    29a6:	9f 21       	and	r25, r15
    29a8:	a0 23       	and	r26, r16
    29aa:	b1 23       	and	r27, r17
    29ac:	00 97       	sbiw	r24, 0x00	; 0
    29ae:	a1 05       	cpc	r26, r1
    29b0:	b1 05       	cpc	r27, r1
    29b2:	21 f0       	breq	.+8      	; 0x29bc <__pack_f+0xbe>
    29b4:	81 e0       	ldi	r24, 0x01	; 1
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	a0 e0       	ldi	r26, 0x00	; 0
    29ba:	b0 e0       	ldi	r27, 0x00	; 0
    29bc:	9a 01       	movw	r18, r20
    29be:	ab 01       	movw	r20, r22
    29c0:	28 2b       	or	r18, r24
    29c2:	39 2b       	or	r19, r25
    29c4:	4a 2b       	or	r20, r26
    29c6:	5b 2b       	or	r21, r27
    29c8:	da 01       	movw	r26, r20
    29ca:	c9 01       	movw	r24, r18
    29cc:	8f 77       	andi	r24, 0x7F	; 127
    29ce:	90 70       	andi	r25, 0x00	; 0
    29d0:	a0 70       	andi	r26, 0x00	; 0
    29d2:	b0 70       	andi	r27, 0x00	; 0
    29d4:	80 34       	cpi	r24, 0x40	; 64
    29d6:	91 05       	cpc	r25, r1
    29d8:	a1 05       	cpc	r26, r1
    29da:	b1 05       	cpc	r27, r1
    29dc:	39 f4       	brne	.+14     	; 0x29ec <__pack_f+0xee>
    29de:	27 ff       	sbrs	r18, 7
    29e0:	09 c0       	rjmp	.+18     	; 0x29f4 <__pack_f+0xf6>
    29e2:	20 5c       	subi	r18, 0xC0	; 192
    29e4:	3f 4f       	sbci	r19, 0xFF	; 255
    29e6:	4f 4f       	sbci	r20, 0xFF	; 255
    29e8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ea:	04 c0       	rjmp	.+8      	; 0x29f4 <__pack_f+0xf6>
    29ec:	21 5c       	subi	r18, 0xC1	; 193
    29ee:	3f 4f       	sbci	r19, 0xFF	; 255
    29f0:	4f 4f       	sbci	r20, 0xFF	; 255
    29f2:	5f 4f       	sbci	r21, 0xFF	; 255
    29f4:	e0 e0       	ldi	r30, 0x00	; 0
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	20 30       	cpi	r18, 0x00	; 0
    29fa:	a0 e0       	ldi	r26, 0x00	; 0
    29fc:	3a 07       	cpc	r19, r26
    29fe:	a0 e0       	ldi	r26, 0x00	; 0
    2a00:	4a 07       	cpc	r20, r26
    2a02:	a0 e4       	ldi	r26, 0x40	; 64
    2a04:	5a 07       	cpc	r21, r26
    2a06:	10 f0       	brcs	.+4      	; 0x2a0c <__pack_f+0x10e>
    2a08:	e1 e0       	ldi	r30, 0x01	; 1
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	79 01       	movw	r14, r18
    2a0e:	8a 01       	movw	r16, r20
    2a10:	27 c0       	rjmp	.+78     	; 0x2a60 <__pack_f+0x162>
    2a12:	60 38       	cpi	r22, 0x80	; 128
    2a14:	71 05       	cpc	r23, r1
    2a16:	64 f5       	brge	.+88     	; 0x2a70 <__pack_f+0x172>
    2a18:	fb 01       	movw	r30, r22
    2a1a:	e1 58       	subi	r30, 0x81	; 129
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	d8 01       	movw	r26, r16
    2a20:	c7 01       	movw	r24, r14
    2a22:	8f 77       	andi	r24, 0x7F	; 127
    2a24:	90 70       	andi	r25, 0x00	; 0
    2a26:	a0 70       	andi	r26, 0x00	; 0
    2a28:	b0 70       	andi	r27, 0x00	; 0
    2a2a:	80 34       	cpi	r24, 0x40	; 64
    2a2c:	91 05       	cpc	r25, r1
    2a2e:	a1 05       	cpc	r26, r1
    2a30:	b1 05       	cpc	r27, r1
    2a32:	39 f4       	brne	.+14     	; 0x2a42 <__pack_f+0x144>
    2a34:	e7 fe       	sbrs	r14, 7
    2a36:	0d c0       	rjmp	.+26     	; 0x2a52 <__pack_f+0x154>
    2a38:	80 e4       	ldi	r24, 0x40	; 64
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	a0 e0       	ldi	r26, 0x00	; 0
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	04 c0       	rjmp	.+8      	; 0x2a4a <__pack_f+0x14c>
    2a42:	8f e3       	ldi	r24, 0x3F	; 63
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	a0 e0       	ldi	r26, 0x00	; 0
    2a48:	b0 e0       	ldi	r27, 0x00	; 0
    2a4a:	e8 0e       	add	r14, r24
    2a4c:	f9 1e       	adc	r15, r25
    2a4e:	0a 1f       	adc	r16, r26
    2a50:	1b 1f       	adc	r17, r27
    2a52:	17 ff       	sbrs	r17, 7
    2a54:	05 c0       	rjmp	.+10     	; 0x2a60 <__pack_f+0x162>
    2a56:	16 95       	lsr	r17
    2a58:	07 95       	ror	r16
    2a5a:	f7 94       	ror	r15
    2a5c:	e7 94       	ror	r14
    2a5e:	31 96       	adiw	r30, 0x01	; 1
    2a60:	87 e0       	ldi	r24, 0x07	; 7
    2a62:	16 95       	lsr	r17
    2a64:	07 95       	ror	r16
    2a66:	f7 94       	ror	r15
    2a68:	e7 94       	ror	r14
    2a6a:	8a 95       	dec	r24
    2a6c:	d1 f7       	brne	.-12     	; 0x2a62 <__pack_f+0x164>
    2a6e:	05 c0       	rjmp	.+10     	; 0x2a7a <__pack_f+0x17c>
    2a70:	ee 24       	eor	r14, r14
    2a72:	ff 24       	eor	r15, r15
    2a74:	87 01       	movw	r16, r14
    2a76:	ef ef       	ldi	r30, 0xFF	; 255
    2a78:	f0 e0       	ldi	r31, 0x00	; 0
    2a7a:	6e 2f       	mov	r22, r30
    2a7c:	67 95       	ror	r22
    2a7e:	66 27       	eor	r22, r22
    2a80:	67 95       	ror	r22
    2a82:	90 2f       	mov	r25, r16
    2a84:	9f 77       	andi	r25, 0x7F	; 127
    2a86:	d7 94       	ror	r13
    2a88:	dd 24       	eor	r13, r13
    2a8a:	d7 94       	ror	r13
    2a8c:	8e 2f       	mov	r24, r30
    2a8e:	86 95       	lsr	r24
    2a90:	49 2f       	mov	r20, r25
    2a92:	46 2b       	or	r20, r22
    2a94:	58 2f       	mov	r21, r24
    2a96:	5d 29       	or	r21, r13
    2a98:	b7 01       	movw	r22, r14
    2a9a:	ca 01       	movw	r24, r20
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	ff 90       	pop	r15
    2aa2:	ef 90       	pop	r14
    2aa4:	df 90       	pop	r13
    2aa6:	08 95       	ret

00002aa8 <__unpack_f>:
    2aa8:	fc 01       	movw	r30, r24
    2aaa:	db 01       	movw	r26, r22
    2aac:	40 81       	ld	r20, Z
    2aae:	51 81       	ldd	r21, Z+1	; 0x01
    2ab0:	22 81       	ldd	r18, Z+2	; 0x02
    2ab2:	62 2f       	mov	r22, r18
    2ab4:	6f 77       	andi	r22, 0x7F	; 127
    2ab6:	70 e0       	ldi	r23, 0x00	; 0
    2ab8:	22 1f       	adc	r18, r18
    2aba:	22 27       	eor	r18, r18
    2abc:	22 1f       	adc	r18, r18
    2abe:	93 81       	ldd	r25, Z+3	; 0x03
    2ac0:	89 2f       	mov	r24, r25
    2ac2:	88 0f       	add	r24, r24
    2ac4:	82 2b       	or	r24, r18
    2ac6:	28 2f       	mov	r18, r24
    2ac8:	30 e0       	ldi	r19, 0x00	; 0
    2aca:	99 1f       	adc	r25, r25
    2acc:	99 27       	eor	r25, r25
    2ace:	99 1f       	adc	r25, r25
    2ad0:	11 96       	adiw	r26, 0x01	; 1
    2ad2:	9c 93       	st	X, r25
    2ad4:	11 97       	sbiw	r26, 0x01	; 1
    2ad6:	21 15       	cp	r18, r1
    2ad8:	31 05       	cpc	r19, r1
    2ada:	a9 f5       	brne	.+106    	; 0x2b46 <__unpack_f+0x9e>
    2adc:	41 15       	cp	r20, r1
    2ade:	51 05       	cpc	r21, r1
    2ae0:	61 05       	cpc	r22, r1
    2ae2:	71 05       	cpc	r23, r1
    2ae4:	11 f4       	brne	.+4      	; 0x2aea <__unpack_f+0x42>
    2ae6:	82 e0       	ldi	r24, 0x02	; 2
    2ae8:	37 c0       	rjmp	.+110    	; 0x2b58 <__unpack_f+0xb0>
    2aea:	82 e8       	ldi	r24, 0x82	; 130
    2aec:	9f ef       	ldi	r25, 0xFF	; 255
    2aee:	13 96       	adiw	r26, 0x03	; 3
    2af0:	9c 93       	st	X, r25
    2af2:	8e 93       	st	-X, r24
    2af4:	12 97       	sbiw	r26, 0x02	; 2
    2af6:	9a 01       	movw	r18, r20
    2af8:	ab 01       	movw	r20, r22
    2afa:	67 e0       	ldi	r22, 0x07	; 7
    2afc:	22 0f       	add	r18, r18
    2afe:	33 1f       	adc	r19, r19
    2b00:	44 1f       	adc	r20, r20
    2b02:	55 1f       	adc	r21, r21
    2b04:	6a 95       	dec	r22
    2b06:	d1 f7       	brne	.-12     	; 0x2afc <__unpack_f+0x54>
    2b08:	83 e0       	ldi	r24, 0x03	; 3
    2b0a:	8c 93       	st	X, r24
    2b0c:	0d c0       	rjmp	.+26     	; 0x2b28 <__unpack_f+0x80>
    2b0e:	22 0f       	add	r18, r18
    2b10:	33 1f       	adc	r19, r19
    2b12:	44 1f       	adc	r20, r20
    2b14:	55 1f       	adc	r21, r21
    2b16:	12 96       	adiw	r26, 0x02	; 2
    2b18:	8d 91       	ld	r24, X+
    2b1a:	9c 91       	ld	r25, X
    2b1c:	13 97       	sbiw	r26, 0x03	; 3
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	13 96       	adiw	r26, 0x03	; 3
    2b22:	9c 93       	st	X, r25
    2b24:	8e 93       	st	-X, r24
    2b26:	12 97       	sbiw	r26, 0x02	; 2
    2b28:	20 30       	cpi	r18, 0x00	; 0
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	38 07       	cpc	r19, r24
    2b2e:	80 e0       	ldi	r24, 0x00	; 0
    2b30:	48 07       	cpc	r20, r24
    2b32:	80 e4       	ldi	r24, 0x40	; 64
    2b34:	58 07       	cpc	r21, r24
    2b36:	58 f3       	brcs	.-42     	; 0x2b0e <__unpack_f+0x66>
    2b38:	14 96       	adiw	r26, 0x04	; 4
    2b3a:	2d 93       	st	X+, r18
    2b3c:	3d 93       	st	X+, r19
    2b3e:	4d 93       	st	X+, r20
    2b40:	5c 93       	st	X, r21
    2b42:	17 97       	sbiw	r26, 0x07	; 7
    2b44:	08 95       	ret
    2b46:	2f 3f       	cpi	r18, 0xFF	; 255
    2b48:	31 05       	cpc	r19, r1
    2b4a:	79 f4       	brne	.+30     	; 0x2b6a <__unpack_f+0xc2>
    2b4c:	41 15       	cp	r20, r1
    2b4e:	51 05       	cpc	r21, r1
    2b50:	61 05       	cpc	r22, r1
    2b52:	71 05       	cpc	r23, r1
    2b54:	19 f4       	brne	.+6      	; 0x2b5c <__unpack_f+0xb4>
    2b56:	84 e0       	ldi	r24, 0x04	; 4
    2b58:	8c 93       	st	X, r24
    2b5a:	08 95       	ret
    2b5c:	64 ff       	sbrs	r22, 4
    2b5e:	03 c0       	rjmp	.+6      	; 0x2b66 <__unpack_f+0xbe>
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	8c 93       	st	X, r24
    2b64:	12 c0       	rjmp	.+36     	; 0x2b8a <__unpack_f+0xe2>
    2b66:	1c 92       	st	X, r1
    2b68:	10 c0       	rjmp	.+32     	; 0x2b8a <__unpack_f+0xe2>
    2b6a:	2f 57       	subi	r18, 0x7F	; 127
    2b6c:	30 40       	sbci	r19, 0x00	; 0
    2b6e:	13 96       	adiw	r26, 0x03	; 3
    2b70:	3c 93       	st	X, r19
    2b72:	2e 93       	st	-X, r18
    2b74:	12 97       	sbiw	r26, 0x02	; 2
    2b76:	83 e0       	ldi	r24, 0x03	; 3
    2b78:	8c 93       	st	X, r24
    2b7a:	87 e0       	ldi	r24, 0x07	; 7
    2b7c:	44 0f       	add	r20, r20
    2b7e:	55 1f       	adc	r21, r21
    2b80:	66 1f       	adc	r22, r22
    2b82:	77 1f       	adc	r23, r23
    2b84:	8a 95       	dec	r24
    2b86:	d1 f7       	brne	.-12     	; 0x2b7c <__unpack_f+0xd4>
    2b88:	70 64       	ori	r23, 0x40	; 64
    2b8a:	14 96       	adiw	r26, 0x04	; 4
    2b8c:	4d 93       	st	X+, r20
    2b8e:	5d 93       	st	X+, r21
    2b90:	6d 93       	st	X+, r22
    2b92:	7c 93       	st	X, r23
    2b94:	17 97       	sbiw	r26, 0x07	; 7
    2b96:	08 95       	ret

00002b98 <__fpcmp_parts_f>:
    2b98:	1f 93       	push	r17
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	fb 01       	movw	r30, r22
    2b9e:	9c 91       	ld	r25, X
    2ba0:	92 30       	cpi	r25, 0x02	; 2
    2ba2:	08 f4       	brcc	.+2      	; 0x2ba6 <__fpcmp_parts_f+0xe>
    2ba4:	47 c0       	rjmp	.+142    	; 0x2c34 <__fpcmp_parts_f+0x9c>
    2ba6:	80 81       	ld	r24, Z
    2ba8:	82 30       	cpi	r24, 0x02	; 2
    2baa:	08 f4       	brcc	.+2      	; 0x2bae <__fpcmp_parts_f+0x16>
    2bac:	43 c0       	rjmp	.+134    	; 0x2c34 <__fpcmp_parts_f+0x9c>
    2bae:	94 30       	cpi	r25, 0x04	; 4
    2bb0:	51 f4       	brne	.+20     	; 0x2bc6 <__fpcmp_parts_f+0x2e>
    2bb2:	11 96       	adiw	r26, 0x01	; 1
    2bb4:	1c 91       	ld	r17, X
    2bb6:	84 30       	cpi	r24, 0x04	; 4
    2bb8:	99 f5       	brne	.+102    	; 0x2c20 <__fpcmp_parts_f+0x88>
    2bba:	81 81       	ldd	r24, Z+1	; 0x01
    2bbc:	68 2f       	mov	r22, r24
    2bbe:	70 e0       	ldi	r23, 0x00	; 0
    2bc0:	61 1b       	sub	r22, r17
    2bc2:	71 09       	sbc	r23, r1
    2bc4:	3f c0       	rjmp	.+126    	; 0x2c44 <__fpcmp_parts_f+0xac>
    2bc6:	84 30       	cpi	r24, 0x04	; 4
    2bc8:	21 f0       	breq	.+8      	; 0x2bd2 <__fpcmp_parts_f+0x3a>
    2bca:	92 30       	cpi	r25, 0x02	; 2
    2bcc:	31 f4       	brne	.+12     	; 0x2bda <__fpcmp_parts_f+0x42>
    2bce:	82 30       	cpi	r24, 0x02	; 2
    2bd0:	b9 f1       	breq	.+110    	; 0x2c40 <__fpcmp_parts_f+0xa8>
    2bd2:	81 81       	ldd	r24, Z+1	; 0x01
    2bd4:	88 23       	and	r24, r24
    2bd6:	89 f1       	breq	.+98     	; 0x2c3a <__fpcmp_parts_f+0xa2>
    2bd8:	2d c0       	rjmp	.+90     	; 0x2c34 <__fpcmp_parts_f+0x9c>
    2bda:	11 96       	adiw	r26, 0x01	; 1
    2bdc:	1c 91       	ld	r17, X
    2bde:	11 97       	sbiw	r26, 0x01	; 1
    2be0:	82 30       	cpi	r24, 0x02	; 2
    2be2:	f1 f0       	breq	.+60     	; 0x2c20 <__fpcmp_parts_f+0x88>
    2be4:	81 81       	ldd	r24, Z+1	; 0x01
    2be6:	18 17       	cp	r17, r24
    2be8:	d9 f4       	brne	.+54     	; 0x2c20 <__fpcmp_parts_f+0x88>
    2bea:	12 96       	adiw	r26, 0x02	; 2
    2bec:	2d 91       	ld	r18, X+
    2bee:	3c 91       	ld	r19, X
    2bf0:	13 97       	sbiw	r26, 0x03	; 3
    2bf2:	82 81       	ldd	r24, Z+2	; 0x02
    2bf4:	93 81       	ldd	r25, Z+3	; 0x03
    2bf6:	82 17       	cp	r24, r18
    2bf8:	93 07       	cpc	r25, r19
    2bfa:	94 f0       	brlt	.+36     	; 0x2c20 <__fpcmp_parts_f+0x88>
    2bfc:	28 17       	cp	r18, r24
    2bfe:	39 07       	cpc	r19, r25
    2c00:	bc f0       	brlt	.+46     	; 0x2c30 <__fpcmp_parts_f+0x98>
    2c02:	14 96       	adiw	r26, 0x04	; 4
    2c04:	8d 91       	ld	r24, X+
    2c06:	9d 91       	ld	r25, X+
    2c08:	0d 90       	ld	r0, X+
    2c0a:	bc 91       	ld	r27, X
    2c0c:	a0 2d       	mov	r26, r0
    2c0e:	24 81       	ldd	r18, Z+4	; 0x04
    2c10:	35 81       	ldd	r19, Z+5	; 0x05
    2c12:	46 81       	ldd	r20, Z+6	; 0x06
    2c14:	57 81       	ldd	r21, Z+7	; 0x07
    2c16:	28 17       	cp	r18, r24
    2c18:	39 07       	cpc	r19, r25
    2c1a:	4a 07       	cpc	r20, r26
    2c1c:	5b 07       	cpc	r21, r27
    2c1e:	18 f4       	brcc	.+6      	; 0x2c26 <__fpcmp_parts_f+0x8e>
    2c20:	11 23       	and	r17, r17
    2c22:	41 f0       	breq	.+16     	; 0x2c34 <__fpcmp_parts_f+0x9c>
    2c24:	0a c0       	rjmp	.+20     	; 0x2c3a <__fpcmp_parts_f+0xa2>
    2c26:	82 17       	cp	r24, r18
    2c28:	93 07       	cpc	r25, r19
    2c2a:	a4 07       	cpc	r26, r20
    2c2c:	b5 07       	cpc	r27, r21
    2c2e:	40 f4       	brcc	.+16     	; 0x2c40 <__fpcmp_parts_f+0xa8>
    2c30:	11 23       	and	r17, r17
    2c32:	19 f0       	breq	.+6      	; 0x2c3a <__fpcmp_parts_f+0xa2>
    2c34:	61 e0       	ldi	r22, 0x01	; 1
    2c36:	70 e0       	ldi	r23, 0x00	; 0
    2c38:	05 c0       	rjmp	.+10     	; 0x2c44 <__fpcmp_parts_f+0xac>
    2c3a:	6f ef       	ldi	r22, 0xFF	; 255
    2c3c:	7f ef       	ldi	r23, 0xFF	; 255
    2c3e:	02 c0       	rjmp	.+4      	; 0x2c44 <__fpcmp_parts_f+0xac>
    2c40:	60 e0       	ldi	r22, 0x00	; 0
    2c42:	70 e0       	ldi	r23, 0x00	; 0
    2c44:	cb 01       	movw	r24, r22
    2c46:	1f 91       	pop	r17
    2c48:	08 95       	ret

00002c4a <M_UART_void_UARTAvalepale>:

u8 RX_Counter_UART = 0; //a total count of characters in the buffer
u8 RX_Buffer_Overflow_UART; // This flag is set on USART Receiver
// buffer overflow

u8 M_UART_void_UARTAvalepale() {
    2c4a:	df 93       	push	r29
    2c4c:	cf 93       	push	r28
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
	return RX_Counter_UART;
    2c52:	80 91 66 03 	lds	r24, 0x0366
}
    2c56:	cf 91       	pop	r28
    2c58:	df 91       	pop	r29
    2c5a:	08 95       	ret

00002c5c <M_UART_void_UARTInit>:

void M_UART_void_UARTInit(S_UART_config_t UART_config) {
    2c5c:	df 93       	push	r29
    2c5e:	cf 93       	push	r28
    2c60:	00 d0       	rcall	.+0      	; 0x2c62 <M_UART_void_UARTInit+0x6>
    2c62:	00 d0       	rcall	.+0      	; 0x2c64 <M_UART_void_UARTInit+0x8>
    2c64:	cd b7       	in	r28, 0x3d	; 61
    2c66:	de b7       	in	r29, 0x3e	; 62
    2c68:	69 83       	std	Y+1, r22	; 0x01
    2c6a:	7a 83       	std	Y+2, r23	; 0x02
    2c6c:	8b 83       	std	Y+3, r24	; 0x03
    2c6e:	9c 83       	std	Y+4, r25	; 0x04

	UCSRC_REG = 0b10000000;
    2c70:	e0 e4       	ldi	r30, 0x40	; 64
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 e8       	ldi	r24, 0x80	; 128
    2c76:	80 83       	st	Z, r24
	UCSRB_REG = 0b00000000;
    2c78:	ea e2       	ldi	r30, 0x2A	; 42
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	10 82       	st	Z, r1

	UCSRC_REG |= UART_config.UART_wordLength;   // set word length
    2c7e:	a0 e4       	ldi	r26, 0x40	; 64
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	e0 e4       	ldi	r30, 0x40	; 64
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	90 81       	ld	r25, Z
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	89 2b       	or	r24, r25
    2c8c:	8c 93       	st	X, r24

	UCSRC_REG |= UART_config.UART_stopBits;		//  set stop bits
    2c8e:	a0 e4       	ldi	r26, 0x40	; 64
    2c90:	b0 e0       	ldi	r27, 0x00	; 0
    2c92:	e0 e4       	ldi	r30, 0x40	; 64
    2c94:	f0 e0       	ldi	r31, 0x00	; 0
    2c96:	90 81       	ld	r25, Z
    2c98:	8c 81       	ldd	r24, Y+4	; 0x04
    2c9a:	89 2b       	or	r24, r25
    2c9c:	8c 93       	st	X, r24

	if (UART_config.UART_Parity == UART_Parity_even) {
    2c9e:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca0:	80 32       	cpi	r24, 0x20	; 32
    2ca2:	41 f4       	brne	.+16     	; 0x2cb4 <M_UART_void_UARTInit+0x58>

		SET_BIT(UCSRC_REG, UCSRC_UPM1);
    2ca4:	a0 e4       	ldi	r26, 0x40	; 64
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	e0 e4       	ldi	r30, 0x40	; 64
    2caa:	f0 e0       	ldi	r31, 0x00	; 0
    2cac:	80 81       	ld	r24, Z
    2cae:	80 62       	ori	r24, 0x20	; 32
    2cb0:	8c 93       	st	X, r24
    2cb2:	11 c0       	rjmp	.+34     	; 0x2cd6 <M_UART_void_UARTInit+0x7a>

	} else if (UART_config.UART_Parity == UART_Parity_odd) {
    2cb4:	8b 81       	ldd	r24, Y+3	; 0x03
    2cb6:	80 33       	cpi	r24, 0x30	; 48
    2cb8:	71 f4       	brne	.+28     	; 0x2cd6 <M_UART_void_UARTInit+0x7a>
		SET_BIT(UCSRC_REG, UCSRC_UPM0);
    2cba:	a0 e4       	ldi	r26, 0x40	; 64
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	e0 e4       	ldi	r30, 0x40	; 64
    2cc0:	f0 e0       	ldi	r31, 0x00	; 0
    2cc2:	80 81       	ld	r24, Z
    2cc4:	80 61       	ori	r24, 0x10	; 16
    2cc6:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UPM1);
    2cc8:	a0 e4       	ldi	r26, 0x40	; 64
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	e0 e4       	ldi	r30, 0x40	; 64
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	80 62       	ori	r24, 0x20	; 32
    2cd4:	8c 93       	st	X, r24
	}

	UBRRL_REG = UART_config.UART_BaudRate; //set baudRate
    2cd6:	e9 e2       	ldi	r30, 0x29	; 41
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	89 81       	ldd	r24, Y+1	; 0x01
    2cdc:	80 83       	st	Z, r24

	SET_BIT(UCSRB_REG, UCSRB_TXEN); // enable UART TX
    2cde:	aa e2       	ldi	r26, 0x2A	; 42
    2ce0:	b0 e0       	ldi	r27, 0x00	; 0
    2ce2:	ea e2       	ldi	r30, 0x2A	; 42
    2ce4:	f0 e0       	ldi	r31, 0x00	; 0
    2ce6:	80 81       	ld	r24, Z
    2ce8:	88 60       	ori	r24, 0x08	; 8
    2cea:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, UCSRB_RXEN); // enable UART RX
    2cec:	aa e2       	ldi	r26, 0x2A	; 42
    2cee:	b0 e0       	ldi	r27, 0x00	; 0
    2cf0:	ea e2       	ldi	r30, 0x2A	; 42
    2cf2:	f0 e0       	ldi	r31, 0x00	; 0
    2cf4:	80 81       	ld	r24, Z
    2cf6:	80 61       	ori	r24, 0x10	; 16
    2cf8:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, UCSRB_RXCIE);
    2cfa:	aa e2       	ldi	r26, 0x2A	; 42
    2cfc:	b0 e0       	ldi	r27, 0x00	; 0
    2cfe:	ea e2       	ldi	r30, 0x2A	; 42
    2d00:	f0 e0       	ldi	r31, 0x00	; 0
    2d02:	80 81       	ld	r24, Z
    2d04:	80 68       	ori	r24, 0x80	; 128
    2d06:	8c 93       	st	X, r24


}
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	0f 90       	pop	r0
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	08 95       	ret

00002d16 <__vector_13>:

ISR(USART_RXC_vect) {
    2d16:	1f 92       	push	r1
    2d18:	0f 92       	push	r0
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	0f 92       	push	r0
    2d1e:	11 24       	eor	r1, r1
    2d20:	8f 93       	push	r24
    2d22:	9f 93       	push	r25
    2d24:	ef 93       	push	r30
    2d26:	ff 93       	push	r31
    2d28:	df 93       	push	r29
    2d2a:	cf 93       	push	r28
    2d2c:	0f 92       	push	r0
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62

	u8 rx_byte;

	rx_byte = UDR_REG;
    2d32:	ec e2       	ldi	r30, 0x2C	; 44
    2d34:	f0 e0       	ldi	r31, 0x00	; 0
    2d36:	80 81       	ld	r24, Z
    2d38:	89 83       	std	Y+1, r24	; 0x01
	Rx_Buffer_UART[RX_Wr_Index_UART] = rx_byte;  //s put received char in buffer
    2d3a:	80 91 64 03 	lds	r24, 0x0364
    2d3e:	88 2f       	mov	r24, r24
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	fc 01       	movw	r30, r24
    2d44:	e3 58       	subi	r30, 0x83	; 131
    2d46:	fc 4f       	sbci	r31, 0xFC	; 252
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	80 83       	st	Z, r24
	if (++RX_Wr_Index_UART > UART_BUFFER_SIZE)
    2d4c:	80 91 64 03 	lds	r24, 0x0364
    2d50:	8f 5f       	subi	r24, 0xFF	; 255
    2d52:	80 93 64 03 	sts	0x0364, r24
    2d56:	80 91 64 03 	lds	r24, 0x0364
    2d5a:	85 36       	cpi	r24, 0x65	; 101
    2d5c:	10 f0       	brcs	.+4      	; 0x2d62 <__vector_13+0x4c>
		RX_Wr_Index_UART = 0;
    2d5e:	10 92 64 03 	sts	0x0364, r1
	if (++RX_Counter_UART > UART_BUFFER_SIZE) // keep a character count
    2d62:	80 91 66 03 	lds	r24, 0x0366
    2d66:	8f 5f       	subi	r24, 0xFF	; 255
    2d68:	80 93 66 03 	sts	0x0366, r24
    2d6c:	80 91 66 03 	lds	r24, 0x0366
    2d70:	85 36       	cpi	r24, 0x65	; 101
    2d72:	18 f0       	brcs	.+6      	; 0x2d7a <__vector_13+0x64>
	{
		RX_Counter_UART = UART_BUFFER_SIZE;  //;  if too many chars came
    2d74:	84 e6       	ldi	r24, 0x64	; 100
    2d76:	80 93 66 03 	sts	0x0366, r24

	}

}
    2d7a:	0f 90       	pop	r0
    2d7c:	cf 91       	pop	r28
    2d7e:	df 91       	pop	r29
    2d80:	ff 91       	pop	r31
    2d82:	ef 91       	pop	r30
    2d84:	9f 91       	pop	r25
    2d86:	8f 91       	pop	r24
    2d88:	0f 90       	pop	r0
    2d8a:	0f be       	out	0x3f, r0	; 63
    2d8c:	0f 90       	pop	r0
    2d8e:	1f 90       	pop	r1
    2d90:	18 95       	reti

00002d92 <M_UART_u8_receiveByteASynchNonBlocking>:

char M_UART_u8_receiveByteASynchNonBlocking(void) {
    2d92:	df 93       	push	r29
    2d94:	cf 93       	push	r28
    2d96:	0f 92       	push	r0
    2d98:	cd b7       	in	r28, 0x3d	; 61
    2d9a:	de b7       	in	r29, 0x3e	; 62

	char ch = Rx_Buffer_UART[RX_Rd_Index_UART];
    2d9c:	80 91 65 03 	lds	r24, 0x0365
    2da0:	88 2f       	mov	r24, r24
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	fc 01       	movw	r30, r24
    2da6:	e3 58       	subi	r30, 0x83	; 131
    2da8:	fc 4f       	sbci	r31, 0xFC	; 252
    2daa:	80 81       	ld	r24, Z
    2dac:	89 83       	std	Y+1, r24	; 0x01
	if (RX_Counter_UART) {
    2dae:	80 91 66 03 	lds	r24, 0x0366
    2db2:	88 23       	and	r24, r24
    2db4:	29 f0       	breq	.+10     	; 0x2dc0 <M_UART_u8_receiveByteASynchNonBlocking+0x2e>
		RX_Counter_UART--;
    2db6:	80 91 66 03 	lds	r24, 0x0366
    2dba:	81 50       	subi	r24, 0x01	; 1
    2dbc:	80 93 66 03 	sts	0x0366, r24
	}

	if (++RX_Rd_Index_UART > UART_BUFFER_SIZE)
    2dc0:	80 91 65 03 	lds	r24, 0x0365
    2dc4:	8f 5f       	subi	r24, 0xFF	; 255
    2dc6:	80 93 65 03 	sts	0x0365, r24
    2dca:	80 91 65 03 	lds	r24, 0x0365
    2dce:	85 36       	cpi	r24, 0x65	; 101
    2dd0:	10 f0       	brcs	.+4      	; 0x2dd6 <M_UART_u8_receiveByteASynchNonBlocking+0x44>
		RX_Rd_Index_UART = 0;
    2dd2:	10 92 65 03 	sts	0x0365, r1
	return ch;
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dd8:	0f 90       	pop	r0
    2dda:	cf 91       	pop	r28
    2ddc:	df 91       	pop	r29
    2dde:	08 95       	ret

00002de0 <M_UART_void_UARTSendByte>:

void M_UART_void_UARTSendByte(u8 Byte) {
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	0f 92       	push	r0
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    2dea:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA_REG , UCSRA_UDRE) == 0)
    2dec:	eb e2       	ldi	r30, 0x2B	; 43
    2dee:	f0 e0       	ldi	r31, 0x00	; 0
    2df0:	80 81       	ld	r24, Z
    2df2:	82 95       	swap	r24
    2df4:	86 95       	lsr	r24
    2df6:	87 70       	andi	r24, 0x07	; 7
    2df8:	88 2f       	mov	r24, r24
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	81 70       	andi	r24, 0x01	; 1
    2dfe:	90 70       	andi	r25, 0x00	; 0
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	a1 f3       	breq	.-24     	; 0x2dec <M_UART_void_UARTSendByte+0xc>
		;
	UDR_REG = Byte;
    2e04:	ec e2       	ldi	r30, 0x2C	; 44
    2e06:	f0 e0       	ldi	r31, 0x00	; 0
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	80 83       	st	Z, r24
}
    2e0c:	0f 90       	pop	r0
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <M_UART_void_UARTSendString>:
void M_UART_void_UARTSendString(char *strPtr) {
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <M_UART_void_UARTSendString+0x6>
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	9a 83       	std	Y+2, r25	; 0x02
    2e20:	89 83       	std	Y+1, r24	; 0x01
    2e22:	0a c0       	rjmp	.+20     	; 0x2e38 <M_UART_void_UARTSendString+0x24>

	while (*strPtr) {
		M_UART_void_UARTSendByte(*strPtr);
    2e24:	e9 81       	ldd	r30, Y+1	; 0x01
    2e26:	fa 81       	ldd	r31, Y+2	; 0x02
    2e28:	80 81       	ld	r24, Z
    2e2a:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <M_UART_void_UARTSendByte>
		strPtr++;
    2e2e:	89 81       	ldd	r24, Y+1	; 0x01
    2e30:	9a 81       	ldd	r25, Y+2	; 0x02
    2e32:	01 96       	adiw	r24, 0x01	; 1
    2e34:	9a 83       	std	Y+2, r25	; 0x02
    2e36:	89 83       	std	Y+1, r24	; 0x01
		;
	UDR_REG = Byte;
}
void M_UART_void_UARTSendString(char *strPtr) {

	while (*strPtr) {
    2e38:	e9 81       	ldd	r30, Y+1	; 0x01
    2e3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e3c:	80 81       	ld	r24, Z
    2e3e:	88 23       	and	r24, r24
    2e40:	89 f7       	brne	.-30     	; 0x2e24 <M_UART_void_UARTSendString+0x10>
		M_UART_void_UARTSendByte(*strPtr);
		strPtr++;
	}
}
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	cf 91       	pop	r28
    2e48:	df 91       	pop	r29
    2e4a:	08 95       	ret

00002e4c <M_UART_void_UARTSendBytes>:

void M_UART_void_UARTSendBytes(u8* byteArr , u8 Arrlength)
{
    2e4c:	df 93       	push	r29
    2e4e:	cf 93       	push	r28
    2e50:	00 d0       	rcall	.+0      	; 0x2e52 <M_UART_void_UARTSendBytes+0x6>
    2e52:	00 d0       	rcall	.+0      	; 0x2e54 <M_UART_void_UARTSendBytes+0x8>
    2e54:	0f 92       	push	r0
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	9c 83       	std	Y+4, r25	; 0x04
    2e5c:	8b 83       	std	Y+3, r24	; 0x03
    2e5e:	6d 83       	std	Y+5, r22	; 0x05
	for(int i = 0 ; i < Arrlength ; i++ )
    2e60:	1a 82       	std	Y+2, r1	; 0x02
    2e62:	19 82       	std	Y+1, r1	; 0x01
    2e64:	0f c0       	rjmp	.+30     	; 0x2e84 <M_UART_void_UARTSendBytes+0x38>
	{
		M_UART_void_UARTSendByte(byteArr[i]);
    2e66:	29 81       	ldd	r18, Y+1	; 0x01
    2e68:	3a 81       	ldd	r19, Y+2	; 0x02
    2e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e6e:	fc 01       	movw	r30, r24
    2e70:	e2 0f       	add	r30, r18
    2e72:	f3 1f       	adc	r31, r19
    2e74:	80 81       	ld	r24, Z
    2e76:	0e 94 f0 16 	call	0x2de0	; 0x2de0 <M_UART_void_UARTSendByte>
	}
}

void M_UART_void_UARTSendBytes(u8* byteArr , u8 Arrlength)
{
	for(int i = 0 ; i < Arrlength ; i++ )
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7e:	01 96       	adiw	r24, 0x01	; 1
    2e80:	9a 83       	std	Y+2, r25	; 0x02
    2e82:	89 83       	std	Y+1, r24	; 0x01
    2e84:	8d 81       	ldd	r24, Y+5	; 0x05
    2e86:	28 2f       	mov	r18, r24
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	89 81       	ldd	r24, Y+1	; 0x01
    2e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e8e:	82 17       	cp	r24, r18
    2e90:	93 07       	cpc	r25, r19
    2e92:	4c f3       	brlt	.-46     	; 0x2e66 <M_UART_void_UARTSendBytes+0x1a>
	{
		M_UART_void_UARTSendByte(byteArr[i]);
	}
}
    2e94:	0f 90       	pop	r0
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	0f 90       	pop	r0
    2e9c:	0f 90       	pop	r0
    2e9e:	cf 91       	pop	r28
    2ea0:	df 91       	pop	r29
    2ea2:	08 95       	ret

00002ea4 <M_UART_void_ReceiveString>:

void M_UART_void_ReceiveString(char *strPtr) {
    2ea4:	ef 92       	push	r14
    2ea6:	ff 92       	push	r15
    2ea8:	0f 93       	push	r16
    2eaa:	1f 93       	push	r17
    2eac:	df 93       	push	r29
    2eae:	cf 93       	push	r28
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	28 97       	sbiw	r28, 0x08	; 8
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
    2ec0:	98 87       	std	Y+8, r25	; 0x08
    2ec2:	8f 83       	std	Y+7, r24	; 0x07
	init_millis(16000000);
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	74 e2       	ldi	r23, 0x24	; 36
    2ec8:	84 ef       	ldi	r24, 0xF4	; 244
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	0e 94 05 37 	call	0x6e0a	; 0x6e0a <init_millis>
	int counter = 0;
    2ed0:	1e 82       	std	Y+6, r1	; 0x06
    2ed2:	1d 82       	std	Y+5, r1	; 0x05
	long int time = millis();
    2ed4:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <millis>
    2ed8:	aa 27       	eor	r26, r26
    2eda:	97 fd       	sbrc	r25, 7
    2edc:	a0 95       	com	r26
    2ede:	ba 2f       	mov	r27, r26
    2ee0:	89 83       	std	Y+1, r24	; 0x01
    2ee2:	9a 83       	std	Y+2, r25	; 0x02
    2ee4:	ab 83       	std	Y+3, r26	; 0x03
    2ee6:	bc 83       	std	Y+4, r27	; 0x04
	while (1) {
		if ((time + 2000) < millis())
    2ee8:	89 81       	ldd	r24, Y+1	; 0x01
    2eea:	9a 81       	ldd	r25, Y+2	; 0x02
    2eec:	ab 81       	ldd	r26, Y+3	; 0x03
    2eee:	bc 81       	ldd	r27, Y+4	; 0x04
    2ef0:	0f 2e       	mov	r0, r31
    2ef2:	f0 ed       	ldi	r31, 0xD0	; 208
    2ef4:	ef 2e       	mov	r14, r31
    2ef6:	f7 e0       	ldi	r31, 0x07	; 7
    2ef8:	ff 2e       	mov	r15, r31
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	0f 2f       	mov	r16, r31
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	1f 2f       	mov	r17, r31
    2f02:	f0 2d       	mov	r31, r0
    2f04:	e8 0e       	add	r14, r24
    2f06:	f9 1e       	adc	r15, r25
    2f08:	0a 1f       	adc	r16, r26
    2f0a:	1b 1f       	adc	r17, r27
    2f0c:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <millis>
    2f10:	aa 27       	eor	r26, r26
    2f12:	97 fd       	sbrc	r25, 7
    2f14:	a0 95       	com	r26
    2f16:	ba 2f       	mov	r27, r26
    2f18:	e8 16       	cp	r14, r24
    2f1a:	f9 06       	cpc	r15, r25
    2f1c:	0a 07       	cpc	r16, r26
    2f1e:	1b 07       	cpc	r17, r27
    2f20:	04 f1       	brlt	.+64     	; 0x2f62 <M_UART_void_ReceiveString+0xbe>
    2f22:	1a c0       	rjmp	.+52     	; 0x2f58 <M_UART_void_ReceiveString+0xb4>
			break;
		while (RX_Counter_UART) {
			*(strPtr + counter) = M_UART_u8_receiveByteASynchNonBlocking();
    2f24:	2d 81       	ldd	r18, Y+5	; 0x05
    2f26:	3e 81       	ldd	r19, Y+6	; 0x06
    2f28:	8f 81       	ldd	r24, Y+7	; 0x07
    2f2a:	98 85       	ldd	r25, Y+8	; 0x08
    2f2c:	8c 01       	movw	r16, r24
    2f2e:	02 0f       	add	r16, r18
    2f30:	13 1f       	adc	r17, r19
    2f32:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <M_UART_u8_receiveByteASynchNonBlocking>
    2f36:	f8 01       	movw	r30, r16
    2f38:	80 83       	st	Z, r24
			if (*(strPtr + counter))
    2f3a:	2d 81       	ldd	r18, Y+5	; 0x05
    2f3c:	3e 81       	ldd	r19, Y+6	; 0x06
    2f3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f40:	98 85       	ldd	r25, Y+8	; 0x08
    2f42:	fc 01       	movw	r30, r24
    2f44:	e2 0f       	add	r30, r18
    2f46:	f3 1f       	adc	r31, r19
    2f48:	80 81       	ld	r24, Z
    2f4a:	88 23       	and	r24, r24
    2f4c:	29 f0       	breq	.+10     	; 0x2f58 <M_UART_void_ReceiveString+0xb4>
				counter++;
    2f4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f50:	9e 81       	ldd	r25, Y+6	; 0x06
    2f52:	01 96       	adiw	r24, 0x01	; 1
    2f54:	9e 83       	std	Y+6, r25	; 0x06
    2f56:	8d 83       	std	Y+5, r24	; 0x05
	int counter = 0;
	long int time = millis();
	while (1) {
		if ((time + 2000) < millis())
			break;
		while (RX_Counter_UART) {
    2f58:	80 91 66 03 	lds	r24, 0x0366
    2f5c:	88 23       	and	r24, r24
    2f5e:	11 f7       	brne	.-60     	; 0x2f24 <M_UART_void_ReceiveString+0x80>
    2f60:	c3 cf       	rjmp	.-122    	; 0x2ee8 <M_UART_void_ReceiveString+0x44>
			if (*(strPtr + counter))
				counter++;
		}
	}

	*(strPtr + counter) = 0;
    2f62:	8d 81       	ldd	r24, Y+5	; 0x05
    2f64:	9e 81       	ldd	r25, Y+6	; 0x06
    2f66:	2f 81       	ldd	r18, Y+7	; 0x07
    2f68:	38 85       	ldd	r19, Y+8	; 0x08
    2f6a:	f9 01       	movw	r30, r18
    2f6c:	e8 0f       	add	r30, r24
    2f6e:	f9 1f       	adc	r31, r25
    2f70:	10 82       	st	Z, r1

}
    2f72:	28 96       	adiw	r28, 0x08	; 8
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	f8 94       	cli
    2f78:	de bf       	out	0x3e, r29	; 62
    2f7a:	0f be       	out	0x3f, r0	; 63
    2f7c:	cd bf       	out	0x3d, r28	; 61
    2f7e:	cf 91       	pop	r28
    2f80:	df 91       	pop	r29
    2f82:	1f 91       	pop	r17
    2f84:	0f 91       	pop	r16
    2f86:	ff 90       	pop	r15
    2f88:	ef 90       	pop	r14
    2f8a:	08 95       	ret

00002f8c <M_TIMER0_void_SetTimerMode>:
#include "TIM_private.h"
#include "Mcu_HW.h"
#include "BIT_MATH.h"


void M_TIMER0_void_SetTimerMode(TIMER0_mode_t mode){
    2f8c:	df 93       	push	r29
    2f8e:	cf 93       	push	r28
    2f90:	00 d0       	rcall	.+0      	; 0x2f92 <M_TIMER0_void_SetTimerMode+0x6>
    2f92:	0f 92       	push	r0
    2f94:	cd b7       	in	r28, 0x3d	; 61
    2f96:	de b7       	in	r29, 0x3e	; 62
    2f98:	89 83       	std	Y+1, r24	; 0x01

	switch (mode)
    2f9a:	89 81       	ldd	r24, Y+1	; 0x01
    2f9c:	28 2f       	mov	r18, r24
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	3b 83       	std	Y+3, r19	; 0x03
    2fa2:	2a 83       	std	Y+2, r18	; 0x02
    2fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa8:	81 30       	cpi	r24, 0x01	; 1
    2faa:	91 05       	cpc	r25, r1
    2fac:	99 f1       	breq	.+102    	; 0x3014 <M_TIMER0_void_SetTimerMode+0x88>
    2fae:	2a 81       	ldd	r18, Y+2	; 0x02
    2fb0:	3b 81       	ldd	r19, Y+3	; 0x03
    2fb2:	22 30       	cpi	r18, 0x02	; 2
    2fb4:	31 05       	cpc	r19, r1
    2fb6:	2c f4       	brge	.+10     	; 0x2fc2 <M_TIMER0_void_SetTimerMode+0x36>
    2fb8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fba:	9b 81       	ldd	r25, Y+3	; 0x03
    2fbc:	00 97       	sbiw	r24, 0x00	; 0
    2fbe:	61 f0       	breq	.+24     	; 0x2fd8 <M_TIMER0_void_SetTimerMode+0x4c>
    2fc0:	47 c0       	rjmp	.+142    	; 0x3050 <M_TIMER0_void_SetTimerMode+0xc4>
    2fc2:	2a 81       	ldd	r18, Y+2	; 0x02
    2fc4:	3b 81       	ldd	r19, Y+3	; 0x03
    2fc6:	22 30       	cpi	r18, 0x02	; 2
    2fc8:	31 05       	cpc	r19, r1
    2fca:	a9 f0       	breq	.+42     	; 0x2ff6 <M_TIMER0_void_SetTimerMode+0x6a>
    2fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2fce:	9b 81       	ldd	r25, Y+3	; 0x03
    2fd0:	83 30       	cpi	r24, 0x03	; 3
    2fd2:	91 05       	cpc	r25, r1
    2fd4:	71 f1       	breq	.+92     	; 0x3032 <M_TIMER0_void_SetTimerMode+0xa6>
    2fd6:	3c c0       	rjmp	.+120    	; 0x3050 <M_TIMER0_void_SetTimerMode+0xc4>
		{
		//TIMER RUNNING in normal mode
			case TIMER0_NORMAL_MODE:
				CLR_BIT(TCCR0_REG , TCCR0_WGM01_BIT);
    2fd8:	a3 e5       	ldi	r26, 0x53	; 83
    2fda:	b0 e0       	ldi	r27, 0x00	; 0
    2fdc:	e3 e5       	ldi	r30, 0x53	; 83
    2fde:	f0 e0       	ldi	r31, 0x00	; 0
    2fe0:	80 81       	ld	r24, Z
    2fe2:	87 7f       	andi	r24, 0xF7	; 247
    2fe4:	8c 93       	st	X, r24
				CLR_BIT(TCCR0_REG , TCCR0_WGM00_BIT);
    2fe6:	a3 e5       	ldi	r26, 0x53	; 83
    2fe8:	b0 e0       	ldi	r27, 0x00	; 0
    2fea:	e3 e5       	ldi	r30, 0x53	; 83
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	80 81       	ld	r24, Z
    2ff0:	8f 7b       	andi	r24, 0xBF	; 191
    2ff2:	8c 93       	st	X, r24
    2ff4:	3b c0       	rjmp	.+118    	; 0x306c <M_TIMER0_void_SetTimerMode+0xe0>
				break;
			//TIMER Running In CTC Mode :
			// so OC0 (on compare) mode need to be defined -> (toggle, set, clear, or disconnected and running as a normal port).
			case TIMER0_CTC_MODE:
				CLR_BIT(TCCR0_REG , TCCR0_WGM00_BIT);
    2ff6:	a3 e5       	ldi	r26, 0x53	; 83
    2ff8:	b0 e0       	ldi	r27, 0x00	; 0
    2ffa:	e3 e5       	ldi	r30, 0x53	; 83
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	80 81       	ld	r24, Z
    3000:	8f 7b       	andi	r24, 0xBF	; 191
    3002:	8c 93       	st	X, r24
				SET_BIT(TCCR0_REG , TCCR0_WGM01_BIT);
    3004:	a3 e5       	ldi	r26, 0x53	; 83
    3006:	b0 e0       	ldi	r27, 0x00	; 0
    3008:	e3 e5       	ldi	r30, 0x53	; 83
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	80 81       	ld	r24, Z
    300e:	88 60       	ori	r24, 0x08	; 8
    3010:	8c 93       	st	X, r24
    3012:	2c c0       	rjmp	.+88     	; 0x306c <M_TIMER0_void_SetTimerMode+0xe0>
				timer running in phase-correct PWM mode: so we need to define
				if it's inverting(CLEAR on match while down-counting and SET while up-counting)
				or non-inverting (SET on match while down-counting and CLEAR while up-counting) one.
				*/
			case TIMER0_PHASECORRECT_PWM_MODE:
				SET_BIT(TCCR0_REG ,TCCR0_WGM00_BIT);
    3014:	a3 e5       	ldi	r26, 0x53	; 83
    3016:	b0 e0       	ldi	r27, 0x00	; 0
    3018:	e3 e5       	ldi	r30, 0x53	; 83
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 81       	ld	r24, Z
    301e:	80 64       	ori	r24, 0x40	; 64
    3020:	8c 93       	st	X, r24
				CLR_BIT(TCCR0_REG , TCCR0_WGM01_BIT);
    3022:	a3 e5       	ldi	r26, 0x53	; 83
    3024:	b0 e0       	ldi	r27, 0x00	; 0
    3026:	e3 e5       	ldi	r30, 0x53	; 83
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	80 81       	ld	r24, Z
    302c:	87 7f       	andi	r24, 0xF7	; 247
    302e:	8c 93       	st	X, r24
    3030:	1d c0       	rjmp	.+58     	; 0x306c <M_TIMER0_void_SetTimerMode+0xe0>
			/*
			Timer running in fast PWM mode: so, we need to define if it's - inverting: SET on compare match and CLEAR at BOTTOM/TOP,
			- non-inverting : CLEAR on compare match and SET at BOTTOM/TOP
			*/
			case TIMER0_FAST_PWM_MODE:
				SET_BIT(TCCR0_REG , TCCR0_WGM00_BIT);
    3032:	a3 e5       	ldi	r26, 0x53	; 83
    3034:	b0 e0       	ldi	r27, 0x00	; 0
    3036:	e3 e5       	ldi	r30, 0x53	; 83
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	80 81       	ld	r24, Z
    303c:	80 64       	ori	r24, 0x40	; 64
    303e:	8c 93       	st	X, r24
				SET_BIT(TCCR0_REG , TCCR0_WGM01_BIT);
    3040:	a3 e5       	ldi	r26, 0x53	; 83
    3042:	b0 e0       	ldi	r27, 0x00	; 0
    3044:	e3 e5       	ldi	r30, 0x53	; 83
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	88 60       	ori	r24, 0x08	; 8
    304c:	8c 93       	st	X, r24
    304e:	0e c0       	rjmp	.+28     	; 0x306c <M_TIMER0_void_SetTimerMode+0xe0>
				break;

			default://NORMAL_MODE is my default timer mode
				CLR_BIT(TCCR0_REG , TCCR0_WGM01_BIT);
    3050:	a3 e5       	ldi	r26, 0x53	; 83
    3052:	b0 e0       	ldi	r27, 0x00	; 0
    3054:	e3 e5       	ldi	r30, 0x53	; 83
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
    305a:	87 7f       	andi	r24, 0xF7	; 247
    305c:	8c 93       	st	X, r24
				CLR_BIT(TCCR0_REG , TCCR0_WGM00_BIT);
    305e:	a3 e5       	ldi	r26, 0x53	; 83
    3060:	b0 e0       	ldi	r27, 0x00	; 0
    3062:	e3 e5       	ldi	r30, 0x53	; 83
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	80 81       	ld	r24, Z
    3068:	8f 7b       	andi	r24, 0xBF	; 191
    306a:	8c 93       	st	X, r24
		}//switch timer mode
}
    306c:	0f 90       	pop	r0
    306e:	0f 90       	pop	r0
    3070:	0f 90       	pop	r0
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <M_TIMER0_void_SetOutputCompareMode>:

void M_TIMER0_void_SetOutputCompareMode(TIMER_output_compare_mode_t oc_mode){
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	00 d0       	rcall	.+0      	; 0x307e <M_TIMER0_void_SetOutputCompareMode+0x6>
    307e:	0f 92       	push	r0
    3080:	cd b7       	in	r28, 0x3d	; 61
    3082:	de b7       	in	r29, 0x3e	; 62
    3084:	89 83       	std	Y+1, r24	; 0x01
	switch(oc_mode)
    3086:	89 81       	ldd	r24, Y+1	; 0x01
    3088:	28 2f       	mov	r18, r24
    308a:	30 e0       	ldi	r19, 0x00	; 0
    308c:	3b 83       	std	Y+3, r19	; 0x03
    308e:	2a 83       	std	Y+2, r18	; 0x02
    3090:	8a 81       	ldd	r24, Y+2	; 0x02
    3092:	9b 81       	ldd	r25, Y+3	; 0x03
    3094:	82 30       	cpi	r24, 0x02	; 2
    3096:	91 05       	cpc	r25, r1
    3098:	09 f4       	brne	.+2      	; 0x309c <M_TIMER0_void_SetOutputCompareMode+0x24>
    309a:	5d c0       	rjmp	.+186    	; 0x3156 <M_TIMER0_void_SetOutputCompareMode+0xde>
    309c:	2a 81       	ldd	r18, Y+2	; 0x02
    309e:	3b 81       	ldd	r19, Y+3	; 0x03
    30a0:	23 30       	cpi	r18, 0x03	; 3
    30a2:	31 05       	cpc	r19, r1
    30a4:	5c f4       	brge	.+22     	; 0x30bc <M_TIMER0_void_SetOutputCompareMode+0x44>
    30a6:	8a 81       	ldd	r24, Y+2	; 0x02
    30a8:	9b 81       	ldd	r25, Y+3	; 0x03
    30aa:	00 97       	sbiw	r24, 0x00	; 0
    30ac:	c1 f0       	breq	.+48     	; 0x30de <M_TIMER0_void_SetOutputCompareMode+0x66>
    30ae:	2a 81       	ldd	r18, Y+2	; 0x02
    30b0:	3b 81       	ldd	r19, Y+3	; 0x03
    30b2:	21 30       	cpi	r18, 0x01	; 1
    30b4:	31 05       	cpc	r19, r1
    30b6:	09 f4       	brne	.+2      	; 0x30ba <M_TIMER0_void_SetOutputCompareMode+0x42>
    30b8:	3f c0       	rjmp	.+126    	; 0x3138 <M_TIMER0_void_SetOutputCompareMode+0xc0>
    30ba:	6b c0       	rjmp	.+214    	; 0x3192 <M_TIMER0_void_SetOutputCompareMode+0x11a>
    30bc:	8a 81       	ldd	r24, Y+2	; 0x02
    30be:	9b 81       	ldd	r25, Y+3	; 0x03
    30c0:	84 30       	cpi	r24, 0x04	; 4
    30c2:	91 05       	cpc	r25, r1
    30c4:	51 f1       	breq	.+84     	; 0x311a <M_TIMER0_void_SetOutputCompareMode+0xa2>
    30c6:	2a 81       	ldd	r18, Y+2	; 0x02
    30c8:	3b 81       	ldd	r19, Y+3	; 0x03
    30ca:	24 30       	cpi	r18, 0x04	; 4
    30cc:	31 05       	cpc	r19, r1
    30ce:	0c f4       	brge	.+2      	; 0x30d2 <M_TIMER0_void_SetOutputCompareMode+0x5a>
    30d0:	51 c0       	rjmp	.+162    	; 0x3174 <M_TIMER0_void_SetOutputCompareMode+0xfc>
    30d2:	8a 81       	ldd	r24, Y+2	; 0x02
    30d4:	9b 81       	ldd	r25, Y+3	; 0x03
    30d6:	85 30       	cpi	r24, 0x05	; 5
    30d8:	91 05       	cpc	r25, r1
    30da:	81 f0       	breq	.+32     	; 0x30fc <M_TIMER0_void_SetOutputCompareMode+0x84>
    30dc:	5a c0       	rjmp	.+180    	; 0x3192 <M_TIMER0_void_SetOutputCompareMode+0x11a>
		{
				case DISCONNECTED:
					CLR_BIT(TCCR0_REG , TCCR0_COM00_BIT);
    30de:	a3 e5       	ldi	r26, 0x53	; 83
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	e3 e5       	ldi	r30, 0x53	; 83
    30e4:	f0 e0       	ldi	r31, 0x00	; 0
    30e6:	80 81       	ld	r24, Z
    30e8:	8f 7e       	andi	r24, 0xEF	; 239
    30ea:	8c 93       	st	X, r24
					CLR_BIT(TCCR0_REG , TCCR0_COM01_BIT);
    30ec:	a3 e5       	ldi	r26, 0x53	; 83
    30ee:	b0 e0       	ldi	r27, 0x00	; 0
    30f0:	e3 e5       	ldi	r30, 0x53	; 83
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	80 81       	ld	r24, Z
    30f6:	8f 7d       	andi	r24, 0xDF	; 223
    30f8:	8c 93       	st	X, r24
    30fa:	59 c0       	rjmp	.+178    	; 0x31ae <M_TIMER0_void_SetOutputCompareMode+0x136>
					break;
				case NON_INVERTING_PWM:
					CLR_BIT(TCCR0_REG , TCCR0_COM00_BIT);
    30fc:	a3 e5       	ldi	r26, 0x53	; 83
    30fe:	b0 e0       	ldi	r27, 0x00	; 0
    3100:	e3 e5       	ldi	r30, 0x53	; 83
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	80 81       	ld	r24, Z
    3106:	8f 7e       	andi	r24, 0xEF	; 239
    3108:	8c 93       	st	X, r24
					SET_BIT(TCCR0_REG, TCCR0_COM01_BIT);
    310a:	a3 e5       	ldi	r26, 0x53	; 83
    310c:	b0 e0       	ldi	r27, 0x00	; 0
    310e:	e3 e5       	ldi	r30, 0x53	; 83
    3110:	f0 e0       	ldi	r31, 0x00	; 0
    3112:	80 81       	ld	r24, Z
    3114:	80 62       	ori	r24, 0x20	; 32
    3116:	8c 93       	st	X, r24
    3118:	4a c0       	rjmp	.+148    	; 0x31ae <M_TIMER0_void_SetOutputCompareMode+0x136>
					break;
				case INVERTING_PWM:
					SET_BIT(TCCR0_REG , TCCR0_COM00_BIT);
    311a:	a3 e5       	ldi	r26, 0x53	; 83
    311c:	b0 e0       	ldi	r27, 0x00	; 0
    311e:	e3 e5       	ldi	r30, 0x53	; 83
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	80 61       	ori	r24, 0x10	; 16
    3126:	8c 93       	st	X, r24
					SET_BIT(TCCR0_REG , TCCR0_COM01_BIT);
    3128:	a3 e5       	ldi	r26, 0x53	; 83
    312a:	b0 e0       	ldi	r27, 0x00	; 0
    312c:	e3 e5       	ldi	r30, 0x53	; 83
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	80 81       	ld	r24, Z
    3132:	80 62       	ori	r24, 0x20	; 32
    3134:	8c 93       	st	X, r24
    3136:	3b c0       	rjmp	.+118    	; 0x31ae <M_TIMER0_void_SetOutputCompareMode+0x136>
					break;
				case TOGGLE_ON_COMPARE:
					SET_BIT(TCCR0_REG ,TCCR0_COM00_BIT);
    3138:	a3 e5       	ldi	r26, 0x53	; 83
    313a:	b0 e0       	ldi	r27, 0x00	; 0
    313c:	e3 e5       	ldi	r30, 0x53	; 83
    313e:	f0 e0       	ldi	r31, 0x00	; 0
    3140:	80 81       	ld	r24, Z
    3142:	80 61       	ori	r24, 0x10	; 16
    3144:	8c 93       	st	X, r24
					CLR_BIT(TCCR0_REG , TCCR0_COM01_BIT);
    3146:	a3 e5       	ldi	r26, 0x53	; 83
    3148:	b0 e0       	ldi	r27, 0x00	; 0
    314a:	e3 e5       	ldi	r30, 0x53	; 83
    314c:	f0 e0       	ldi	r31, 0x00	; 0
    314e:	80 81       	ld	r24, Z
    3150:	8f 7d       	andi	r24, 0xDF	; 223
    3152:	8c 93       	st	X, r24
    3154:	2c c0       	rjmp	.+88     	; 0x31ae <M_TIMER0_void_SetOutputCompareMode+0x136>
					break;
				case CLEAR_ON_COMPARE:
					CLR_BIT(TCCR0_REG ,TCCR0_COM00_BIT);
    3156:	a3 e5       	ldi	r26, 0x53	; 83
    3158:	b0 e0       	ldi	r27, 0x00	; 0
    315a:	e3 e5       	ldi	r30, 0x53	; 83
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	8f 7e       	andi	r24, 0xEF	; 239
    3162:	8c 93       	st	X, r24
					SET_BIT(TCCR0_REG , TCCR0_COM01_BIT);
    3164:	a3 e5       	ldi	r26, 0x53	; 83
    3166:	b0 e0       	ldi	r27, 0x00	; 0
    3168:	e3 e5       	ldi	r30, 0x53	; 83
    316a:	f0 e0       	ldi	r31, 0x00	; 0
    316c:	80 81       	ld	r24, Z
    316e:	80 62       	ori	r24, 0x20	; 32
    3170:	8c 93       	st	X, r24
    3172:	1d c0       	rjmp	.+58     	; 0x31ae <M_TIMER0_void_SetOutputCompareMode+0x136>
					break;
				case SET_ON_COMPARE:
					SET_BIT(TCCR0_REG ,TCCR0_COM00_BIT);
    3174:	a3 e5       	ldi	r26, 0x53	; 83
    3176:	b0 e0       	ldi	r27, 0x00	; 0
    3178:	e3 e5       	ldi	r30, 0x53	; 83
    317a:	f0 e0       	ldi	r31, 0x00	; 0
    317c:	80 81       	ld	r24, Z
    317e:	80 61       	ori	r24, 0x10	; 16
    3180:	8c 93       	st	X, r24
					SET_BIT(TCCR0_REG , TCCR0_COM01_BIT);
    3182:	a3 e5       	ldi	r26, 0x53	; 83
    3184:	b0 e0       	ldi	r27, 0x00	; 0
    3186:	e3 e5       	ldi	r30, 0x53	; 83
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	80 81       	ld	r24, Z
    318c:	80 62       	ori	r24, 0x20	; 32
    318e:	8c 93       	st	X, r24
    3190:	0e c0       	rjmp	.+28     	; 0x31ae <M_TIMER0_void_SetOutputCompareMode+0x136>
					break;
				default: //Disconnected is my default behavior
					CLR_BIT(TCCR0_REG ,TCCR0_COM00_BIT);
    3192:	a3 e5       	ldi	r26, 0x53	; 83
    3194:	b0 e0       	ldi	r27, 0x00	; 0
    3196:	e3 e5       	ldi	r30, 0x53	; 83
    3198:	f0 e0       	ldi	r31, 0x00	; 0
    319a:	80 81       	ld	r24, Z
    319c:	8f 7e       	andi	r24, 0xEF	; 239
    319e:	8c 93       	st	X, r24
					CLR_BIT(TCCR0_REG , TCCR0_COM01_BIT);
    31a0:	a3 e5       	ldi	r26, 0x53	; 83
    31a2:	b0 e0       	ldi	r27, 0x00	; 0
    31a4:	e3 e5       	ldi	r30, 0x53	; 83
    31a6:	f0 e0       	ldi	r31, 0x00	; 0
    31a8:	80 81       	ld	r24, Z
    31aa:	8f 7d       	andi	r24, 0xDF	; 223
    31ac:	8c 93       	st	X, r24
		}//switch compare mode

}
    31ae:	0f 90       	pop	r0
    31b0:	0f 90       	pop	r0
    31b2:	0f 90       	pop	r0
    31b4:	cf 91       	pop	r28
    31b6:	df 91       	pop	r29
    31b8:	08 95       	ret

000031ba <M_TIMER0_void_Init>:


//TIMER0
void M_TIMER0_void_Init(TIMER0_config_t timer){
    31ba:	df 93       	push	r29
    31bc:	cf 93       	push	r28
    31be:	00 d0       	rcall	.+0      	; 0x31c0 <M_TIMER0_void_Init+0x6>
    31c0:	00 d0       	rcall	.+0      	; 0x31c2 <M_TIMER0_void_Init+0x8>
    31c2:	0f 92       	push	r0
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	49 83       	std	Y+1, r20	; 0x01
    31ca:	5a 83       	std	Y+2, r21	; 0x02
    31cc:	6b 83       	std	Y+3, r22	; 0x03
    31ce:	7c 83       	std	Y+4, r23	; 0x04
    31d0:	8d 83       	std	Y+5, r24	; 0x05

	M_TIMER0_void_SetTimerMode(timer.timer_mode);
    31d2:	89 81       	ldd	r24, Y+1	; 0x01
    31d4:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <M_TIMER0_void_SetTimerMode>

	M_TIMER0_void_SetOutputCompareMode(timer.output_compare_mode);
    31d8:	8a 81       	ldd	r24, Y+2	; 0x02
    31da:	0e 94 3c 18 	call	0x3078	; 0x3078 <M_TIMER0_void_SetOutputCompareMode>


	//Overflow interrupt masking option
	switch(timer.overflow_int_mask){
    31de:	8c 81       	ldd	r24, Y+4	; 0x04
    31e0:	88 2f       	mov	r24, r24
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	81 30       	cpi	r24, 0x01	; 1
    31e6:	91 05       	cpc	r25, r1
    31e8:	41 f4       	brne	.+16     	; 0x31fa <M_TIMER0_void_Init+0x40>
	case TIMER_ENABLE_INTERRUPT:
		SET_BIT(TIMSK_REG , TIMSK_TOIE0_BIT);
    31ea:	a9 e5       	ldi	r26, 0x59	; 89
    31ec:	b0 e0       	ldi	r27, 0x00	; 0
    31ee:	e9 e5       	ldi	r30, 0x59	; 89
    31f0:	f0 e0       	ldi	r31, 0x00	; 0
    31f2:	80 81       	ld	r24, Z
    31f4:	81 60       	ori	r24, 0x01	; 1
    31f6:	8c 93       	st	X, r24
    31f8:	07 c0       	rjmp	.+14     	; 0x3208 <M_TIMER0_void_Init+0x4e>
		break;
	default:
	case TIMER_DISABLE_INTERRUPT:
		CLR_BIT(TIMSK_REG , TIMSK_TOIE0_BIT);
    31fa:	a9 e5       	ldi	r26, 0x59	; 89
    31fc:	b0 e0       	ldi	r27, 0x00	; 0
    31fe:	e9 e5       	ldi	r30, 0x59	; 89
    3200:	f0 e0       	ldi	r31, 0x00	; 0
    3202:	80 81       	ld	r24, Z
    3204:	8e 7f       	andi	r24, 0xFE	; 254
    3206:	8c 93       	st	X, r24
		break;
	}

	//On Compare Match interrupt masking option
	switch(timer.oc_int_mask){
    3208:	8d 81       	ldd	r24, Y+5	; 0x05
    320a:	88 2f       	mov	r24, r24
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	81 30       	cpi	r24, 0x01	; 1
    3210:	91 05       	cpc	r25, r1
    3212:	41 f4       	brne	.+16     	; 0x3224 <M_TIMER0_void_Init+0x6a>
	case TIMER_ENABLE_INTERRUPT:
		SET_BIT(TIMSK_REG , TIMSK_OCIE0_BIT);
    3214:	a9 e5       	ldi	r26, 0x59	; 89
    3216:	b0 e0       	ldi	r27, 0x00	; 0
    3218:	e9 e5       	ldi	r30, 0x59	; 89
    321a:	f0 e0       	ldi	r31, 0x00	; 0
    321c:	80 81       	ld	r24, Z
    321e:	82 60       	ori	r24, 0x02	; 2
    3220:	8c 93       	st	X, r24
    3222:	07 c0       	rjmp	.+14     	; 0x3232 <M_TIMER0_void_Init+0x78>
		break;
	default:
	case TIMER_DISABLE_INTERRUPT:
		CLR_BIT(TIMSK_REG , TIMSK_OCIE0_BIT);
    3224:	a9 e5       	ldi	r26, 0x59	; 89
    3226:	b0 e0       	ldi	r27, 0x00	; 0
    3228:	e9 e5       	ldi	r30, 0x59	; 89
    322a:	f0 e0       	ldi	r31, 0x00	; 0
    322c:	80 81       	ld	r24, Z
    322e:	8d 7f       	andi	r24, 0xFD	; 253
    3230:	8c 93       	st	X, r24
		break;
	}


}
    3232:	0f 90       	pop	r0
    3234:	0f 90       	pop	r0
    3236:	0f 90       	pop	r0
    3238:	0f 90       	pop	r0
    323a:	0f 90       	pop	r0
    323c:	cf 91       	pop	r28
    323e:	df 91       	pop	r29
    3240:	08 95       	ret

00003242 <M_TIMER0_void_Start>:


void M_TIMER0_void_Start(TIMER_clk_select_mode_t prescaler){
    3242:	df 93       	push	r29
    3244:	cf 93       	push	r28
    3246:	0f 92       	push	r0
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62
    324c:	89 83       	std	Y+1, r24	; 0x01
	TCCR0_REG &= 0xf8;                       //clearing first three bits from previous data
    324e:	a3 e5       	ldi	r26, 0x53	; 83
    3250:	b0 e0       	ldi	r27, 0x00	; 0
    3252:	e3 e5       	ldi	r30, 0x53	; 83
    3254:	f0 e0       	ldi	r31, 0x00	; 0
    3256:	80 81       	ld	r24, Z
    3258:	88 7f       	andi	r24, 0xF8	; 248
    325a:	8c 93       	st	X, r24
	TCCR0_REG |= prescaler;          	    //updating their values
    325c:	a3 e5       	ldi	r26, 0x53	; 83
    325e:	b0 e0       	ldi	r27, 0x00	; 0
    3260:	e3 e5       	ldi	r30, 0x53	; 83
    3262:	f0 e0       	ldi	r31, 0x00	; 0
    3264:	90 81       	ld	r25, Z
    3266:	89 81       	ldd	r24, Y+1	; 0x01
    3268:	89 2b       	or	r24, r25
    326a:	8c 93       	st	X, r24
}
    326c:	0f 90       	pop	r0
    326e:	cf 91       	pop	r28
    3270:	df 91       	pop	r29
    3272:	08 95       	ret

00003274 <M_TIMER0_void_stop>:

void M_TIMER0_void_stop(){
    3274:	df 93       	push	r29
    3276:	cf 93       	push	r28
    3278:	cd b7       	in	r28, 0x3d	; 61
    327a:	de b7       	in	r29, 0x3e	; 62

	TCCR0_REG &= 0xf8;                       //clearing first three bits from previous data
    327c:	a3 e5       	ldi	r26, 0x53	; 83
    327e:	b0 e0       	ldi	r27, 0x00	; 0
    3280:	e3 e5       	ldi	r30, 0x53	; 83
    3282:	f0 e0       	ldi	r31, 0x00	; 0
    3284:	80 81       	ld	r24, Z
    3286:	88 7f       	andi	r24, 0xF8	; 248
    3288:	8c 93       	st	X, r24

}
    328a:	cf 91       	pop	r28
    328c:	df 91       	pop	r29
    328e:	08 95       	ret

00003290 <M_TIMER0_void_NORMAL_GetCounts>:
u32 M_TIMER0_void_NORMAL_GetCounts(){
    3290:	df 93       	push	r29
    3292:	cf 93       	push	r28
    3294:	00 d0       	rcall	.+0      	; 0x3296 <M_TIMER0_void_NORMAL_GetCounts+0x6>
    3296:	00 d0       	rcall	.+0      	; 0x3298 <M_TIMER0_void_NORMAL_GetCounts+0x8>
    3298:	0f 92       	push	r0
    329a:	cd b7       	in	r28, 0x3d	; 61
    329c:	de b7       	in	r29, 0x3e	; 62
	u8 curr_timer_value = TCNT0_REG;
    329e:	e2 e5       	ldi	r30, 0x52	; 82
    32a0:	f0 e0       	ldi	r31, 0x00	; 0
    32a2:	80 81       	ld	r24, Z
    32a4:	8d 83       	std	Y+5, r24	; 0x05
	//timerResetsCount : is incremented inside the ISR
	u32 totalCounts = curr_timer_value + (u32)( 256 * timerResetsCount );
    32a6:	8d 81       	ldd	r24, Y+5	; 0x05
    32a8:	28 2f       	mov	r18, r24
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	40 e0       	ldi	r20, 0x00	; 0
    32ae:	50 e0       	ldi	r21, 0x00	; 0
    32b0:	80 91 67 03 	lds	r24, 0x0367
    32b4:	88 2f       	mov	r24, r24
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	98 2f       	mov	r25, r24
    32ba:	88 27       	eor	r24, r24
    32bc:	aa 27       	eor	r26, r26
    32be:	97 fd       	sbrc	r25, 7
    32c0:	a0 95       	com	r26
    32c2:	ba 2f       	mov	r27, r26
    32c4:	82 0f       	add	r24, r18
    32c6:	93 1f       	adc	r25, r19
    32c8:	a4 1f       	adc	r26, r20
    32ca:	b5 1f       	adc	r27, r21
    32cc:	89 83       	std	Y+1, r24	; 0x01
    32ce:	9a 83       	std	Y+2, r25	; 0x02
    32d0:	ab 83       	std	Y+3, r26	; 0x03
    32d2:	bc 83       	std	Y+4, r27	; 0x04
	return totalCounts;
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	9a 81       	ldd	r25, Y+2	; 0x02
    32d8:	ab 81       	ldd	r26, Y+3	; 0x03
    32da:	bc 81       	ldd	r27, Y+4	; 0x04
}
    32dc:	bc 01       	movw	r22, r24
    32de:	cd 01       	movw	r24, r26
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	08 95       	ret

000032f0 <M_TIMER0_void_StartFastPWM>:

void M_TIMER0_void_StartFastPWM(u32 freq, u8 duty){
    32f0:	df 93       	push	r29
    32f2:	cf 93       	push	r28
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
    32f8:	29 97       	sbiw	r28, 0x09	; 9
    32fa:	0f b6       	in	r0, 0x3f	; 63
    32fc:	f8 94       	cli
    32fe:	de bf       	out	0x3e, r29	; 62
    3300:	0f be       	out	0x3f, r0	; 63
    3302:	cd bf       	out	0x3d, r28	; 61
    3304:	6b 83       	std	Y+3, r22	; 0x03
    3306:	7c 83       	std	Y+4, r23	; 0x04
    3308:	8d 83       	std	Y+5, r24	; 0x05
    330a:	9e 83       	std	Y+6, r25	; 0x06
    330c:	4f 83       	std	Y+7, r20	; 0x07
	//Changing the mode of the timer to be FAST PWM
	SET_BIT(TCCR0_REG , TCCR0_WGM00_BIT);
    330e:	a3 e5       	ldi	r26, 0x53	; 83
    3310:	b0 e0       	ldi	r27, 0x00	; 0
    3312:	e3 e5       	ldi	r30, 0x53	; 83
    3314:	f0 e0       	ldi	r31, 0x00	; 0
    3316:	80 81       	ld	r24, Z
    3318:	80 64       	ori	r24, 0x40	; 64
    331a:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG , TCCR0_WGM01_BIT);
    331c:	a3 e5       	ldi	r26, 0x53	; 83
    331e:	b0 e0       	ldi	r27, 0x00	; 0
    3320:	e3 e5       	ldi	r30, 0x53	; 83
    3322:	f0 e0       	ldi	r31, 0x00	; 0
    3324:	80 81       	ld	r24, Z
    3326:	88 60       	ori	r24, 0x08	; 8
    3328:	8c 93       	st	X, r24

	CLR_BIT(TCCR0_REG , TCCR0_COM00_BIT);
    332a:	a3 e5       	ldi	r26, 0x53	; 83
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	e3 e5       	ldi	r30, 0x53	; 83
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	80 81       	ld	r24, Z
    3334:	8f 7e       	andi	r24, 0xEF	; 239
    3336:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG, TCCR0_COM01_BIT);
    3338:	a3 e5       	ldi	r26, 0x53	; 83
    333a:	b0 e0       	ldi	r27, 0x00	; 0
    333c:	e3 e5       	ldi	r30, 0x53	; 83
    333e:	f0 e0       	ldi	r31, 0x00	; 0
    3340:	80 81       	ld	r24, Z
    3342:	80 62       	ori	r24, 0x20	; 32
    3344:	8c 93       	st	X, r24

	//Changing the OCR0 value to fit the duty cycle ( non-inverting )
	OCR0_REG = (((u16)(duty*256))/100);
    3346:	ec e5       	ldi	r30, 0x5C	; 92
    3348:	f0 e0       	ldi	r31, 0x00	; 0
    334a:	8f 81       	ldd	r24, Y+7	; 0x07
    334c:	88 2f       	mov	r24, r24
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	98 2f       	mov	r25, r24
    3352:	88 27       	eor	r24, r24
    3354:	24 e6       	ldi	r18, 0x64	; 100
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	b9 01       	movw	r22, r18
    335a:	0e 94 ed 37 	call	0x6fda	; 0x6fda <__udivmodhi4>
    335e:	cb 01       	movw	r24, r22
    3360:	80 83       	st	Z, r24

	//Changing the OCR0 value to fit the duty cycle ( inverting )
	 //OCR0_REG = (256-(((u16)(duty*256))/100))-1;

	//Changing the prescaler value to fit the freq
	u16 prescaler = (MCU_FREQ)/((u32)(freq*256));
    3362:	8b 81       	ldd	r24, Y+3	; 0x03
    3364:	9c 81       	ldd	r25, Y+4	; 0x04
    3366:	ad 81       	ldd	r26, Y+5	; 0x05
    3368:	be 81       	ldd	r27, Y+6	; 0x06
    336a:	22 27       	eor	r18, r18
    336c:	38 2f       	mov	r19, r24
    336e:	49 2f       	mov	r20, r25
    3370:	5a 2f       	mov	r21, r26
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	94 e2       	ldi	r25, 0x24	; 36
    3376:	a4 ef       	ldi	r26, 0xF4	; 244
    3378:	b0 e0       	ldi	r27, 0x00	; 0
    337a:	bc 01       	movw	r22, r24
    337c:	cd 01       	movw	r24, r26
    337e:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    3382:	da 01       	movw	r26, r20
    3384:	c9 01       	movw	r24, r18
    3386:	9a 83       	std	Y+2, r25	; 0x02
    3388:	89 83       	std	Y+1, r24	; 0x01

	switch(prescaler){
    338a:	69 81       	ldd	r22, Y+1	; 0x01
    338c:	7a 81       	ldd	r23, Y+2	; 0x02
    338e:	79 87       	std	Y+9, r23	; 0x09
    3390:	68 87       	std	Y+8, r22	; 0x08
    3392:	88 85       	ldd	r24, Y+8	; 0x08
    3394:	99 85       	ldd	r25, Y+9	; 0x09
    3396:	80 34       	cpi	r24, 0x40	; 64
    3398:	91 05       	cpc	r25, r1
    339a:	39 f1       	breq	.+78     	; 0x33ea <M_TIMER0_void_StartFastPWM+0xfa>
    339c:	68 85       	ldd	r22, Y+8	; 0x08
    339e:	79 85       	ldd	r23, Y+9	; 0x09
    33a0:	61 34       	cpi	r22, 0x41	; 65
    33a2:	71 05       	cpc	r23, r1
    33a4:	58 f4       	brcc	.+22     	; 0x33bc <M_TIMER0_void_StartFastPWM+0xcc>
    33a6:	88 85       	ldd	r24, Y+8	; 0x08
    33a8:	99 85       	ldd	r25, Y+9	; 0x09
    33aa:	81 30       	cpi	r24, 0x01	; 1
    33ac:	91 05       	cpc	r25, r1
    33ae:	99 f0       	breq	.+38     	; 0x33d6 <M_TIMER0_void_StartFastPWM+0xe6>
    33b0:	68 85       	ldd	r22, Y+8	; 0x08
    33b2:	79 85       	ldd	r23, Y+9	; 0x09
    33b4:	68 30       	cpi	r22, 0x08	; 8
    33b6:	71 05       	cpc	r23, r1
    33b8:	99 f0       	breq	.+38     	; 0x33e0 <M_TIMER0_void_StartFastPWM+0xf0>
    33ba:	25 c0       	rjmp	.+74     	; 0x3406 <M_TIMER0_void_StartFastPWM+0x116>
    33bc:	88 85       	ldd	r24, Y+8	; 0x08
    33be:	99 85       	ldd	r25, Y+9	; 0x09
    33c0:	21 e0       	ldi	r18, 0x01	; 1
    33c2:	80 30       	cpi	r24, 0x00	; 0
    33c4:	92 07       	cpc	r25, r18
    33c6:	b1 f0       	breq	.+44     	; 0x33f4 <M_TIMER0_void_StartFastPWM+0x104>
    33c8:	68 85       	ldd	r22, Y+8	; 0x08
    33ca:	79 85       	ldd	r23, Y+9	; 0x09
    33cc:	84 e0       	ldi	r24, 0x04	; 4
    33ce:	60 30       	cpi	r22, 0x00	; 0
    33d0:	78 07       	cpc	r23, r24
    33d2:	a9 f0       	breq	.+42     	; 0x33fe <M_TIMER0_void_StartFastPWM+0x10e>
    33d4:	18 c0       	rjmp	.+48     	; 0x3406 <M_TIMER0_void_StartFastPWM+0x116>
	case 1 :
		prescaler = PRESCALER_1;
    33d6:	81 e0       	ldi	r24, 0x01	; 1
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	9a 83       	std	Y+2, r25	; 0x02
    33dc:	89 83       	std	Y+1, r24	; 0x01
    33de:	13 c0       	rjmp	.+38     	; 0x3406 <M_TIMER0_void_StartFastPWM+0x116>
		break;
	case 8 :
		prescaler = PRESCALER_8;
    33e0:	82 e0       	ldi	r24, 0x02	; 2
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	9a 83       	std	Y+2, r25	; 0x02
    33e6:	89 83       	std	Y+1, r24	; 0x01
    33e8:	0e c0       	rjmp	.+28     	; 0x3406 <M_TIMER0_void_StartFastPWM+0x116>
		break;
	case 64 :
		prescaler = PRESCALER_64;
    33ea:	83 e0       	ldi	r24, 0x03	; 3
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	9a 83       	std	Y+2, r25	; 0x02
    33f0:	89 83       	std	Y+1, r24	; 0x01
    33f2:	09 c0       	rjmp	.+18     	; 0x3406 <M_TIMER0_void_StartFastPWM+0x116>
		break;
	case 256 :
		prescaler = PRESCALER_256;
    33f4:	84 e0       	ldi	r24, 0x04	; 4
    33f6:	90 e0       	ldi	r25, 0x00	; 0
    33f8:	9a 83       	std	Y+2, r25	; 0x02
    33fa:	89 83       	std	Y+1, r24	; 0x01
    33fc:	04 c0       	rjmp	.+8      	; 0x3406 <M_TIMER0_void_StartFastPWM+0x116>
		break;
	case 1024 :
		prescaler = PRESCALER_1024;
    33fe:	85 e0       	ldi	r24, 0x05	; 5
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	9a 83       	std	Y+2, r25	; 0x02
    3404:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if(prescaler > 1 && prescaler < 8){
    3406:	89 81       	ldd	r24, Y+1	; 0x01
    3408:	9a 81       	ldd	r25, Y+2	; 0x02
    340a:	82 30       	cpi	r24, 0x02	; 2
    340c:	91 05       	cpc	r25, r1
    340e:	f8 f0       	brcs	.+62     	; 0x344e <M_TIMER0_void_StartFastPWM+0x15e>
    3410:	89 81       	ldd	r24, Y+1	; 0x01
    3412:	9a 81       	ldd	r25, Y+2	; 0x02
    3414:	88 30       	cpi	r24, 0x08	; 8
    3416:	91 05       	cpc	r25, r1
    3418:	d0 f4       	brcc	.+52     	; 0x344e <M_TIMER0_void_StartFastPWM+0x15e>
		if( (prescaler -1) <= (8-prescaler ) ){
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	9a 81       	ldd	r25, Y+2	; 0x02
    341e:	ac 01       	movw	r20, r24
    3420:	41 50       	subi	r20, 0x01	; 1
    3422:	50 40       	sbci	r21, 0x00	; 0
    3424:	28 e0       	ldi	r18, 0x08	; 8
    3426:	30 e0       	ldi	r19, 0x00	; 0
    3428:	89 81       	ldd	r24, Y+1	; 0x01
    342a:	9a 81       	ldd	r25, Y+2	; 0x02
    342c:	b9 01       	movw	r22, r18
    342e:	68 1b       	sub	r22, r24
    3430:	79 0b       	sbc	r23, r25
    3432:	cb 01       	movw	r24, r22
    3434:	84 17       	cp	r24, r20
    3436:	95 07       	cpc	r25, r21
    3438:	28 f0       	brcs	.+10     	; 0x3444 <M_TIMER0_void_StartFastPWM+0x154>
			prescaler = PRESCALER_1;
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	9a 83       	std	Y+2, r25	; 0x02
    3440:	89 83       	std	Y+1, r24	; 0x01
    3442:	73 c0       	rjmp	.+230    	; 0x352a <M_TIMER0_void_StartFastPWM+0x23a>
		}else{
			prescaler = PRESCALER_8;
    3444:	82 e0       	ldi	r24, 0x02	; 2
    3446:	90 e0       	ldi	r25, 0x00	; 0
    3448:	9a 83       	std	Y+2, r25	; 0x02
    344a:	89 83       	std	Y+1, r24	; 0x01
    344c:	6e c0       	rjmp	.+220    	; 0x352a <M_TIMER0_void_StartFastPWM+0x23a>
		}
	}else if(prescaler > 8 && prescaler < 64){
    344e:	89 81       	ldd	r24, Y+1	; 0x01
    3450:	9a 81       	ldd	r25, Y+2	; 0x02
    3452:	89 30       	cpi	r24, 0x09	; 9
    3454:	91 05       	cpc	r25, r1
    3456:	f8 f0       	brcs	.+62     	; 0x3496 <M_TIMER0_void_StartFastPWM+0x1a6>
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	9a 81       	ldd	r25, Y+2	; 0x02
    345c:	80 34       	cpi	r24, 0x40	; 64
    345e:	91 05       	cpc	r25, r1
    3460:	d0 f4       	brcc	.+52     	; 0x3496 <M_TIMER0_void_StartFastPWM+0x1a6>
		if( (prescaler - 8) <= (64-prescaler) ){
    3462:	89 81       	ldd	r24, Y+1	; 0x01
    3464:	9a 81       	ldd	r25, Y+2	; 0x02
    3466:	ac 01       	movw	r20, r24
    3468:	48 50       	subi	r20, 0x08	; 8
    346a:	50 40       	sbci	r21, 0x00	; 0
    346c:	20 e4       	ldi	r18, 0x40	; 64
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	89 81       	ldd	r24, Y+1	; 0x01
    3472:	9a 81       	ldd	r25, Y+2	; 0x02
    3474:	b9 01       	movw	r22, r18
    3476:	68 1b       	sub	r22, r24
    3478:	79 0b       	sbc	r23, r25
    347a:	cb 01       	movw	r24, r22
    347c:	84 17       	cp	r24, r20
    347e:	95 07       	cpc	r25, r21
    3480:	28 f0       	brcs	.+10     	; 0x348c <M_TIMER0_void_StartFastPWM+0x19c>
			prescaler = PRESCALER_8;
    3482:	82 e0       	ldi	r24, 0x02	; 2
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	9a 83       	std	Y+2, r25	; 0x02
    3488:	89 83       	std	Y+1, r24	; 0x01
    348a:	4f c0       	rjmp	.+158    	; 0x352a <M_TIMER0_void_StartFastPWM+0x23a>
		}else{
			prescaler = PRESCALER_64;
    348c:	83 e0       	ldi	r24, 0x03	; 3
    348e:	90 e0       	ldi	r25, 0x00	; 0
    3490:	9a 83       	std	Y+2, r25	; 0x02
    3492:	89 83       	std	Y+1, r24	; 0x01
    3494:	4a c0       	rjmp	.+148    	; 0x352a <M_TIMER0_void_StartFastPWM+0x23a>
		}
	}else if(prescaler > 64 && prescaler < 256){
    3496:	89 81       	ldd	r24, Y+1	; 0x01
    3498:	9a 81       	ldd	r25, Y+2	; 0x02
    349a:	81 34       	cpi	r24, 0x41	; 65
    349c:	91 05       	cpc	r25, r1
    349e:	00 f1       	brcs	.+64     	; 0x34e0 <M_TIMER0_void_StartFastPWM+0x1f0>
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	9a 81       	ldd	r25, Y+2	; 0x02
    34a4:	8f 3f       	cpi	r24, 0xFF	; 255
    34a6:	91 05       	cpc	r25, r1
    34a8:	09 f0       	breq	.+2      	; 0x34ac <M_TIMER0_void_StartFastPWM+0x1bc>
    34aa:	d0 f4       	brcc	.+52     	; 0x34e0 <M_TIMER0_void_StartFastPWM+0x1f0>
		if( (prescaler - 64) <= (256-prescaler) ){
    34ac:	89 81       	ldd	r24, Y+1	; 0x01
    34ae:	9a 81       	ldd	r25, Y+2	; 0x02
    34b0:	ac 01       	movw	r20, r24
    34b2:	40 54       	subi	r20, 0x40	; 64
    34b4:	50 40       	sbci	r21, 0x00	; 0
    34b6:	20 e0       	ldi	r18, 0x00	; 0
    34b8:	31 e0       	ldi	r19, 0x01	; 1
    34ba:	89 81       	ldd	r24, Y+1	; 0x01
    34bc:	9a 81       	ldd	r25, Y+2	; 0x02
    34be:	b9 01       	movw	r22, r18
    34c0:	68 1b       	sub	r22, r24
    34c2:	79 0b       	sbc	r23, r25
    34c4:	cb 01       	movw	r24, r22
    34c6:	84 17       	cp	r24, r20
    34c8:	95 07       	cpc	r25, r21
    34ca:	28 f0       	brcs	.+10     	; 0x34d6 <M_TIMER0_void_StartFastPWM+0x1e6>
			prescaler = PRESCALER_64;
    34cc:	83 e0       	ldi	r24, 0x03	; 3
    34ce:	90 e0       	ldi	r25, 0x00	; 0
    34d0:	9a 83       	std	Y+2, r25	; 0x02
    34d2:	89 83       	std	Y+1, r24	; 0x01
    34d4:	2a c0       	rjmp	.+84     	; 0x352a <M_TIMER0_void_StartFastPWM+0x23a>
		}else{
			prescaler = PRESCALER_256;
    34d6:	84 e0       	ldi	r24, 0x04	; 4
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	9a 83       	std	Y+2, r25	; 0x02
    34dc:	89 83       	std	Y+1, r24	; 0x01
    34de:	25 c0       	rjmp	.+74     	; 0x352a <M_TIMER0_void_StartFastPWM+0x23a>
		}
	}else if(prescaler > 256 && prescaler < 1024){
    34e0:	89 81       	ldd	r24, Y+1	; 0x01
    34e2:	9a 81       	ldd	r25, Y+2	; 0x02
    34e4:	71 e0       	ldi	r23, 0x01	; 1
    34e6:	81 30       	cpi	r24, 0x01	; 1
    34e8:	97 07       	cpc	r25, r23
    34ea:	f8 f0       	brcs	.+62     	; 0x352a <M_TIMER0_void_StartFastPWM+0x23a>
    34ec:	89 81       	ldd	r24, Y+1	; 0x01
    34ee:	9a 81       	ldd	r25, Y+2	; 0x02
    34f0:	24 e0       	ldi	r18, 0x04	; 4
    34f2:	80 30       	cpi	r24, 0x00	; 0
    34f4:	92 07       	cpc	r25, r18
    34f6:	c8 f4       	brcc	.+50     	; 0x352a <M_TIMER0_void_StartFastPWM+0x23a>
		if( (prescaler - 256) <= (1024-prescaler) ){
    34f8:	89 81       	ldd	r24, Y+1	; 0x01
    34fa:	9a 81       	ldd	r25, Y+2	; 0x02
    34fc:	ac 01       	movw	r20, r24
    34fe:	40 50       	subi	r20, 0x00	; 0
    3500:	51 40       	sbci	r21, 0x01	; 1
    3502:	20 e0       	ldi	r18, 0x00	; 0
    3504:	34 e0       	ldi	r19, 0x04	; 4
    3506:	89 81       	ldd	r24, Y+1	; 0x01
    3508:	9a 81       	ldd	r25, Y+2	; 0x02
    350a:	b9 01       	movw	r22, r18
    350c:	68 1b       	sub	r22, r24
    350e:	79 0b       	sbc	r23, r25
    3510:	cb 01       	movw	r24, r22
    3512:	84 17       	cp	r24, r20
    3514:	95 07       	cpc	r25, r21
    3516:	28 f0       	brcs	.+10     	; 0x3522 <M_TIMER0_void_StartFastPWM+0x232>
			prescaler = PRESCALER_256;
    3518:	84 e0       	ldi	r24, 0x04	; 4
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	9a 83       	std	Y+2, r25	; 0x02
    351e:	89 83       	std	Y+1, r24	; 0x01
    3520:	04 c0       	rjmp	.+8      	; 0x352a <M_TIMER0_void_StartFastPWM+0x23a>
		}else{
			prescaler = PRESCALER_1024;
    3522:	85 e0       	ldi	r24, 0x05	; 5
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	9a 83       	std	Y+2, r25	; 0x02
    3528:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	M_TIMER0_void_Start(prescaler);
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	0e 94 21 19 	call	0x3242	; 0x3242 <M_TIMER0_void_Start>

}
    3530:	29 96       	adiw	r28, 0x09	; 9
    3532:	0f b6       	in	r0, 0x3f	; 63
    3534:	f8 94       	cli
    3536:	de bf       	out	0x3e, r29	; 62
    3538:	0f be       	out	0x3f, r0	; 63
    353a:	cd bf       	out	0x3d, r28	; 61
    353c:	cf 91       	pop	r28
    353e:	df 91       	pop	r29
    3540:	08 95       	ret

00003542 <M_TIMER0_void_StartPhaseCorrectPWM>:

void M_TIMER0_void_StartPhaseCorrectPWM(u32 freq ,u8 duty){
    3542:	df 93       	push	r29
    3544:	cf 93       	push	r28
    3546:	cd b7       	in	r28, 0x3d	; 61
    3548:	de b7       	in	r29, 0x3e	; 62
    354a:	29 97       	sbiw	r28, 0x09	; 9
    354c:	0f b6       	in	r0, 0x3f	; 63
    354e:	f8 94       	cli
    3550:	de bf       	out	0x3e, r29	; 62
    3552:	0f be       	out	0x3f, r0	; 63
    3554:	cd bf       	out	0x3d, r28	; 61
    3556:	6b 83       	std	Y+3, r22	; 0x03
    3558:	7c 83       	std	Y+4, r23	; 0x04
    355a:	8d 83       	std	Y+5, r24	; 0x05
    355c:	9e 83       	std	Y+6, r25	; 0x06
    355e:	4f 83       	std	Y+7, r20	; 0x07
	//Changing the mode of the timer to be PHASE CORRECT PWM
	SET_BIT(TCCR0_REG ,TCCR0_WGM00_BIT);
    3560:	a3 e5       	ldi	r26, 0x53	; 83
    3562:	b0 e0       	ldi	r27, 0x00	; 0
    3564:	e3 e5       	ldi	r30, 0x53	; 83
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	80 81       	ld	r24, Z
    356a:	80 64       	ori	r24, 0x40	; 64
    356c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG , TCCR0_WGM01_BIT);
    356e:	a3 e5       	ldi	r26, 0x53	; 83
    3570:	b0 e0       	ldi	r27, 0x00	; 0
    3572:	e3 e5       	ldi	r30, 0x53	; 83
    3574:	f0 e0       	ldi	r31, 0x00	; 0
    3576:	80 81       	ld	r24, Z
    3578:	87 7f       	andi	r24, 0xF7	; 247
    357a:	8c 93       	st	X, r24

	//Make Sure that it's in the Inverting Mode (Set in up-counting / Clear in down-counting)
	SET_BIT(TCCR0_REG , TCCR0_COM00_BIT);
    357c:	a3 e5       	ldi	r26, 0x53	; 83
    357e:	b0 e0       	ldi	r27, 0x00	; 0
    3580:	e3 e5       	ldi	r30, 0x53	; 83
    3582:	f0 e0       	ldi	r31, 0x00	; 0
    3584:	80 81       	ld	r24, Z
    3586:	80 61       	ori	r24, 0x10	; 16
    3588:	8c 93       	st	X, r24
	SET_BIT(TCCR0_REG, TCCR0_COM01_BIT);
    358a:	a3 e5       	ldi	r26, 0x53	; 83
    358c:	b0 e0       	ldi	r27, 0x00	; 0
    358e:	e3 e5       	ldi	r30, 0x53	; 83
    3590:	f0 e0       	ldi	r31, 0x00	; 0
    3592:	80 81       	ld	r24, Z
    3594:	80 62       	ori	r24, 0x20	; 32
    3596:	8c 93       	st	X, r24

	//Changing the OCR0 value to fit the duty cycle ( inverting )
	//OCR0_REG = ((u16)duty*510)/(2*100);
	OCR0_REG = (((u16)100-duty)*510)/(2*100);
    3598:	ec e5       	ldi	r30, 0x5C	; 92
    359a:	f0 e0       	ldi	r31, 0x00	; 0
    359c:	8f 81       	ldd	r24, Y+7	; 0x07
    359e:	28 2f       	mov	r18, r24
    35a0:	30 e0       	ldi	r19, 0x00	; 0
    35a2:	84 e6       	ldi	r24, 0x64	; 100
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	ac 01       	movw	r20, r24
    35a8:	42 1b       	sub	r20, r18
    35aa:	53 0b       	sbc	r21, r19
    35ac:	9a 01       	movw	r18, r20
    35ae:	8e ef       	ldi	r24, 0xFE	; 254
    35b0:	91 e0       	ldi	r25, 0x01	; 1
    35b2:	bc 01       	movw	r22, r24
    35b4:	26 9f       	mul	r18, r22
    35b6:	c0 01       	movw	r24, r0
    35b8:	27 9f       	mul	r18, r23
    35ba:	90 0d       	add	r25, r0
    35bc:	36 9f       	mul	r19, r22
    35be:	90 0d       	add	r25, r0
    35c0:	11 24       	eor	r1, r1
    35c2:	28 ec       	ldi	r18, 0xC8	; 200
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	b9 01       	movw	r22, r18
    35c8:	0e 94 ed 37 	call	0x6fda	; 0x6fda <__udivmodhi4>
    35cc:	cb 01       	movw	r24, r22
    35ce:	80 83       	st	Z, r24


	u16 prescaler = (MCU_FREQ)/((u32)freq*510);
    35d0:	8b 81       	ldd	r24, Y+3	; 0x03
    35d2:	9c 81       	ldd	r25, Y+4	; 0x04
    35d4:	ad 81       	ldd	r26, Y+5	; 0x05
    35d6:	be 81       	ldd	r27, Y+6	; 0x06
    35d8:	2e ef       	ldi	r18, 0xFE	; 254
    35da:	31 e0       	ldi	r19, 0x01	; 1
    35dc:	40 e0       	ldi	r20, 0x00	; 0
    35de:	50 e0       	ldi	r21, 0x00	; 0
    35e0:	bc 01       	movw	r22, r24
    35e2:	cd 01       	movw	r24, r26
    35e4:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    35e8:	9b 01       	movw	r18, r22
    35ea:	ac 01       	movw	r20, r24
    35ec:	80 e0       	ldi	r24, 0x00	; 0
    35ee:	94 e2       	ldi	r25, 0x24	; 36
    35f0:	a4 ef       	ldi	r26, 0xF4	; 244
    35f2:	b0 e0       	ldi	r27, 0x00	; 0
    35f4:	bc 01       	movw	r22, r24
    35f6:	cd 01       	movw	r24, r26
    35f8:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    35fc:	da 01       	movw	r26, r20
    35fe:	c9 01       	movw	r24, r18
    3600:	9a 83       	std	Y+2, r25	; 0x02
    3602:	89 83       	std	Y+1, r24	; 0x01

	switch(prescaler){
    3604:	89 81       	ldd	r24, Y+1	; 0x01
    3606:	9a 81       	ldd	r25, Y+2	; 0x02
    3608:	99 87       	std	Y+9, r25	; 0x09
    360a:	88 87       	std	Y+8, r24	; 0x08
    360c:	48 85       	ldd	r20, Y+8	; 0x08
    360e:	59 85       	ldd	r21, Y+9	; 0x09
    3610:	40 34       	cpi	r20, 0x40	; 64
    3612:	51 05       	cpc	r21, r1
    3614:	39 f1       	breq	.+78     	; 0x3664 <M_TIMER0_void_StartPhaseCorrectPWM+0x122>
    3616:	68 85       	ldd	r22, Y+8	; 0x08
    3618:	79 85       	ldd	r23, Y+9	; 0x09
    361a:	61 34       	cpi	r22, 0x41	; 65
    361c:	71 05       	cpc	r23, r1
    361e:	58 f4       	brcc	.+22     	; 0x3636 <M_TIMER0_void_StartPhaseCorrectPWM+0xf4>
    3620:	88 85       	ldd	r24, Y+8	; 0x08
    3622:	99 85       	ldd	r25, Y+9	; 0x09
    3624:	81 30       	cpi	r24, 0x01	; 1
    3626:	91 05       	cpc	r25, r1
    3628:	99 f0       	breq	.+38     	; 0x3650 <M_TIMER0_void_StartPhaseCorrectPWM+0x10e>
    362a:	48 85       	ldd	r20, Y+8	; 0x08
    362c:	59 85       	ldd	r21, Y+9	; 0x09
    362e:	48 30       	cpi	r20, 0x08	; 8
    3630:	51 05       	cpc	r21, r1
    3632:	99 f0       	breq	.+38     	; 0x365a <M_TIMER0_void_StartPhaseCorrectPWM+0x118>
    3634:	25 c0       	rjmp	.+74     	; 0x3680 <M_TIMER0_void_StartPhaseCorrectPWM+0x13e>
    3636:	68 85       	ldd	r22, Y+8	; 0x08
    3638:	79 85       	ldd	r23, Y+9	; 0x09
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	60 30       	cpi	r22, 0x00	; 0
    363e:	78 07       	cpc	r23, r24
    3640:	b1 f0       	breq	.+44     	; 0x366e <M_TIMER0_void_StartPhaseCorrectPWM+0x12c>
    3642:	48 85       	ldd	r20, Y+8	; 0x08
    3644:	59 85       	ldd	r21, Y+9	; 0x09
    3646:	64 e0       	ldi	r22, 0x04	; 4
    3648:	40 30       	cpi	r20, 0x00	; 0
    364a:	56 07       	cpc	r21, r22
    364c:	a9 f0       	breq	.+42     	; 0x3678 <M_TIMER0_void_StartPhaseCorrectPWM+0x136>
    364e:	18 c0       	rjmp	.+48     	; 0x3680 <M_TIMER0_void_StartPhaseCorrectPWM+0x13e>
	case 1 :
		prescaler = PRESCALER_1;
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	90 e0       	ldi	r25, 0x00	; 0
    3654:	9a 83       	std	Y+2, r25	; 0x02
    3656:	89 83       	std	Y+1, r24	; 0x01
    3658:	13 c0       	rjmp	.+38     	; 0x3680 <M_TIMER0_void_StartPhaseCorrectPWM+0x13e>
		break;
	case 8 :
		prescaler = PRESCALER_8;
    365a:	82 e0       	ldi	r24, 0x02	; 2
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	9a 83       	std	Y+2, r25	; 0x02
    3660:	89 83       	std	Y+1, r24	; 0x01
    3662:	0e c0       	rjmp	.+28     	; 0x3680 <M_TIMER0_void_StartPhaseCorrectPWM+0x13e>
		break;
	case 64 :
		prescaler = PRESCALER_64;
    3664:	83 e0       	ldi	r24, 0x03	; 3
    3666:	90 e0       	ldi	r25, 0x00	; 0
    3668:	9a 83       	std	Y+2, r25	; 0x02
    366a:	89 83       	std	Y+1, r24	; 0x01
    366c:	09 c0       	rjmp	.+18     	; 0x3680 <M_TIMER0_void_StartPhaseCorrectPWM+0x13e>
		break;
	case 256 :
		prescaler = PRESCALER_256;
    366e:	84 e0       	ldi	r24, 0x04	; 4
    3670:	90 e0       	ldi	r25, 0x00	; 0
    3672:	9a 83       	std	Y+2, r25	; 0x02
    3674:	89 83       	std	Y+1, r24	; 0x01
    3676:	04 c0       	rjmp	.+8      	; 0x3680 <M_TIMER0_void_StartPhaseCorrectPWM+0x13e>
		break;
	case 1024 :
		prescaler = PRESCALER_1024;
    3678:	85 e0       	ldi	r24, 0x05	; 5
    367a:	90 e0       	ldi	r25, 0x00	; 0
    367c:	9a 83       	std	Y+2, r25	; 0x02
    367e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	if(prescaler > 1 && prescaler < 8){
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	9a 81       	ldd	r25, Y+2	; 0x02
    3684:	82 30       	cpi	r24, 0x02	; 2
    3686:	91 05       	cpc	r25, r1
    3688:	f8 f0       	brcs	.+62     	; 0x36c8 <M_TIMER0_void_StartPhaseCorrectPWM+0x186>
    368a:	89 81       	ldd	r24, Y+1	; 0x01
    368c:	9a 81       	ldd	r25, Y+2	; 0x02
    368e:	88 30       	cpi	r24, 0x08	; 8
    3690:	91 05       	cpc	r25, r1
    3692:	d0 f4       	brcc	.+52     	; 0x36c8 <M_TIMER0_void_StartPhaseCorrectPWM+0x186>
		if( (prescaler -1) <= (8-prescaler ) ){
    3694:	89 81       	ldd	r24, Y+1	; 0x01
    3696:	9a 81       	ldd	r25, Y+2	; 0x02
    3698:	ac 01       	movw	r20, r24
    369a:	41 50       	subi	r20, 0x01	; 1
    369c:	50 40       	sbci	r21, 0x00	; 0
    369e:	28 e0       	ldi	r18, 0x08	; 8
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	89 81       	ldd	r24, Y+1	; 0x01
    36a4:	9a 81       	ldd	r25, Y+2	; 0x02
    36a6:	b9 01       	movw	r22, r18
    36a8:	68 1b       	sub	r22, r24
    36aa:	79 0b       	sbc	r23, r25
    36ac:	cb 01       	movw	r24, r22
    36ae:	84 17       	cp	r24, r20
    36b0:	95 07       	cpc	r25, r21
    36b2:	28 f0       	brcs	.+10     	; 0x36be <M_TIMER0_void_StartPhaseCorrectPWM+0x17c>
			prescaler = PRESCALER_1;
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	9a 83       	std	Y+2, r25	; 0x02
    36ba:	89 83       	std	Y+1, r24	; 0x01
    36bc:	73 c0       	rjmp	.+230    	; 0x37a4 <M_TIMER0_void_StartPhaseCorrectPWM+0x262>
		}else{
			prescaler = PRESCALER_8;
    36be:	82 e0       	ldi	r24, 0x02	; 2
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	9a 83       	std	Y+2, r25	; 0x02
    36c4:	89 83       	std	Y+1, r24	; 0x01
    36c6:	6e c0       	rjmp	.+220    	; 0x37a4 <M_TIMER0_void_StartPhaseCorrectPWM+0x262>
		}
	}else if(prescaler > 8 && prescaler < 64){
    36c8:	89 81       	ldd	r24, Y+1	; 0x01
    36ca:	9a 81       	ldd	r25, Y+2	; 0x02
    36cc:	89 30       	cpi	r24, 0x09	; 9
    36ce:	91 05       	cpc	r25, r1
    36d0:	f8 f0       	brcs	.+62     	; 0x3710 <M_TIMER0_void_StartPhaseCorrectPWM+0x1ce>
    36d2:	89 81       	ldd	r24, Y+1	; 0x01
    36d4:	9a 81       	ldd	r25, Y+2	; 0x02
    36d6:	80 34       	cpi	r24, 0x40	; 64
    36d8:	91 05       	cpc	r25, r1
    36da:	d0 f4       	brcc	.+52     	; 0x3710 <M_TIMER0_void_StartPhaseCorrectPWM+0x1ce>
		if( (prescaler - 8) <= (64-prescaler) ){
    36dc:	89 81       	ldd	r24, Y+1	; 0x01
    36de:	9a 81       	ldd	r25, Y+2	; 0x02
    36e0:	ac 01       	movw	r20, r24
    36e2:	48 50       	subi	r20, 0x08	; 8
    36e4:	50 40       	sbci	r21, 0x00	; 0
    36e6:	20 e4       	ldi	r18, 0x40	; 64
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	89 81       	ldd	r24, Y+1	; 0x01
    36ec:	9a 81       	ldd	r25, Y+2	; 0x02
    36ee:	b9 01       	movw	r22, r18
    36f0:	68 1b       	sub	r22, r24
    36f2:	79 0b       	sbc	r23, r25
    36f4:	cb 01       	movw	r24, r22
    36f6:	84 17       	cp	r24, r20
    36f8:	95 07       	cpc	r25, r21
    36fa:	28 f0       	brcs	.+10     	; 0x3706 <M_TIMER0_void_StartPhaseCorrectPWM+0x1c4>
			prescaler = PRESCALER_8;
    36fc:	82 e0       	ldi	r24, 0x02	; 2
    36fe:	90 e0       	ldi	r25, 0x00	; 0
    3700:	9a 83       	std	Y+2, r25	; 0x02
    3702:	89 83       	std	Y+1, r24	; 0x01
    3704:	4f c0       	rjmp	.+158    	; 0x37a4 <M_TIMER0_void_StartPhaseCorrectPWM+0x262>
		}else{
			prescaler = PRESCALER_64;
    3706:	83 e0       	ldi	r24, 0x03	; 3
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	9a 83       	std	Y+2, r25	; 0x02
    370c:	89 83       	std	Y+1, r24	; 0x01
    370e:	4a c0       	rjmp	.+148    	; 0x37a4 <M_TIMER0_void_StartPhaseCorrectPWM+0x262>
		}
	}else if(prescaler > 64 && prescaler < 256){
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	9a 81       	ldd	r25, Y+2	; 0x02
    3714:	81 34       	cpi	r24, 0x41	; 65
    3716:	91 05       	cpc	r25, r1
    3718:	00 f1       	brcs	.+64     	; 0x375a <M_TIMER0_void_StartPhaseCorrectPWM+0x218>
    371a:	89 81       	ldd	r24, Y+1	; 0x01
    371c:	9a 81       	ldd	r25, Y+2	; 0x02
    371e:	8f 3f       	cpi	r24, 0xFF	; 255
    3720:	91 05       	cpc	r25, r1
    3722:	09 f0       	breq	.+2      	; 0x3726 <M_TIMER0_void_StartPhaseCorrectPWM+0x1e4>
    3724:	d0 f4       	brcc	.+52     	; 0x375a <M_TIMER0_void_StartPhaseCorrectPWM+0x218>
		if( (prescaler - 64) <= (256-prescaler) ){
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	9a 81       	ldd	r25, Y+2	; 0x02
    372a:	ac 01       	movw	r20, r24
    372c:	40 54       	subi	r20, 0x40	; 64
    372e:	50 40       	sbci	r21, 0x00	; 0
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	31 e0       	ldi	r19, 0x01	; 1
    3734:	89 81       	ldd	r24, Y+1	; 0x01
    3736:	9a 81       	ldd	r25, Y+2	; 0x02
    3738:	b9 01       	movw	r22, r18
    373a:	68 1b       	sub	r22, r24
    373c:	79 0b       	sbc	r23, r25
    373e:	cb 01       	movw	r24, r22
    3740:	84 17       	cp	r24, r20
    3742:	95 07       	cpc	r25, r21
    3744:	28 f0       	brcs	.+10     	; 0x3750 <M_TIMER0_void_StartPhaseCorrectPWM+0x20e>
			prescaler = PRESCALER_64;
    3746:	83 e0       	ldi	r24, 0x03	; 3
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	9a 83       	std	Y+2, r25	; 0x02
    374c:	89 83       	std	Y+1, r24	; 0x01
    374e:	2a c0       	rjmp	.+84     	; 0x37a4 <M_TIMER0_void_StartPhaseCorrectPWM+0x262>
		}else{
			prescaler = PRESCALER_256;
    3750:	84 e0       	ldi	r24, 0x04	; 4
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	9a 83       	std	Y+2, r25	; 0x02
    3756:	89 83       	std	Y+1, r24	; 0x01
    3758:	25 c0       	rjmp	.+74     	; 0x37a4 <M_TIMER0_void_StartPhaseCorrectPWM+0x262>
		}
	}else if(prescaler > 256 && prescaler < 1024){
    375a:	89 81       	ldd	r24, Y+1	; 0x01
    375c:	9a 81       	ldd	r25, Y+2	; 0x02
    375e:	71 e0       	ldi	r23, 0x01	; 1
    3760:	81 30       	cpi	r24, 0x01	; 1
    3762:	97 07       	cpc	r25, r23
    3764:	f8 f0       	brcs	.+62     	; 0x37a4 <M_TIMER0_void_StartPhaseCorrectPWM+0x262>
    3766:	89 81       	ldd	r24, Y+1	; 0x01
    3768:	9a 81       	ldd	r25, Y+2	; 0x02
    376a:	24 e0       	ldi	r18, 0x04	; 4
    376c:	80 30       	cpi	r24, 0x00	; 0
    376e:	92 07       	cpc	r25, r18
    3770:	c8 f4       	brcc	.+50     	; 0x37a4 <M_TIMER0_void_StartPhaseCorrectPWM+0x262>
		if( (prescaler - 256) <= (1024-prescaler) ){
    3772:	89 81       	ldd	r24, Y+1	; 0x01
    3774:	9a 81       	ldd	r25, Y+2	; 0x02
    3776:	ac 01       	movw	r20, r24
    3778:	40 50       	subi	r20, 0x00	; 0
    377a:	51 40       	sbci	r21, 0x01	; 1
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	34 e0       	ldi	r19, 0x04	; 4
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	9a 81       	ldd	r25, Y+2	; 0x02
    3784:	b9 01       	movw	r22, r18
    3786:	68 1b       	sub	r22, r24
    3788:	79 0b       	sbc	r23, r25
    378a:	cb 01       	movw	r24, r22
    378c:	84 17       	cp	r24, r20
    378e:	95 07       	cpc	r25, r21
    3790:	28 f0       	brcs	.+10     	; 0x379c <M_TIMER0_void_StartPhaseCorrectPWM+0x25a>
			prescaler = PRESCALER_256;
    3792:	84 e0       	ldi	r24, 0x04	; 4
    3794:	90 e0       	ldi	r25, 0x00	; 0
    3796:	9a 83       	std	Y+2, r25	; 0x02
    3798:	89 83       	std	Y+1, r24	; 0x01
    379a:	04 c0       	rjmp	.+8      	; 0x37a4 <M_TIMER0_void_StartPhaseCorrectPWM+0x262>
		}else{
			prescaler = PRESCALER_1024;
    379c:	85 e0       	ldi	r24, 0x05	; 5
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	9a 83       	std	Y+2, r25	; 0x02
    37a2:	89 83       	std	Y+1, r24	; 0x01
		}
	}

	M_TIMER0_void_Start(prescaler);
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	0e 94 21 19 	call	0x3242	; 0x3242 <M_TIMER0_void_Start>
}
    37aa:	29 96       	adiw	r28, 0x09	; 9
    37ac:	0f b6       	in	r0, 0x3f	; 63
    37ae:	f8 94       	cli
    37b0:	de bf       	out	0x3e, r29	; 62
    37b2:	0f be       	out	0x3f, r0	; 63
    37b4:	cd bf       	out	0x3d, r28	; 61
    37b6:	cf 91       	pop	r28
    37b8:	df 91       	pop	r29
    37ba:	08 95       	ret

000037bc <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL>:

#define FACTOR 100000    // To Avoid working with fractions as (Atmega32) doesn't have FPU
u32 M_TIMER0_void_SetDelayTimeMilliSec_NORMAL(u32 millisec, void (*FuncPTR)()){
    37bc:	2f 92       	push	r2
    37be:	3f 92       	push	r3
    37c0:	4f 92       	push	r4
    37c2:	5f 92       	push	r5
    37c4:	6f 92       	push	r6
    37c6:	7f 92       	push	r7
    37c8:	8f 92       	push	r8
    37ca:	9f 92       	push	r9
    37cc:	af 92       	push	r10
    37ce:	bf 92       	push	r11
    37d0:	cf 92       	push	r12
    37d2:	df 92       	push	r13
    37d4:	ef 92       	push	r14
    37d6:	ff 92       	push	r15
    37d8:	0f 93       	push	r16
    37da:	1f 93       	push	r17
    37dc:	df 93       	push	r29
    37de:	cf 93       	push	r28
    37e0:	cd b7       	in	r28, 0x3d	; 61
    37e2:	de b7       	in	r29, 0x3e	; 62
    37e4:	c2 55       	subi	r28, 0x52	; 82
    37e6:	d0 40       	sbci	r29, 0x00	; 0
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	f8 94       	cli
    37ec:	de bf       	out	0x3e, r29	; 62
    37ee:	0f be       	out	0x3f, r0	; 63
    37f0:	cd bf       	out	0x3d, r28	; 61
    37f2:	69 a3       	std	Y+33, r22	; 0x21
    37f4:	7a a3       	std	Y+34, r23	; 0x22
    37f6:	8b a3       	std	Y+35, r24	; 0x23
    37f8:	9c a3       	std	Y+36, r25	; 0x24
    37fa:	5e a3       	std	Y+38, r21	; 0x26
    37fc:	4d a3       	std	Y+37, r20	; 0x25

	//1024
	u64 total_overflows;    //the variable is to be returned
	u64 remainder_ticks;    //the value that TCNT0 will be initialized with
	//64 micro Seconds : is used to calculate {total_overflows} & {remainder_ticks}
	u64 tick_time_micro = (u32)(1024*1000000) / MCU_FREQ ;
    37fe:	80 e4       	ldi	r24, 0x40	; 64
    3800:	89 87       	std	Y+9, r24	; 0x09
    3802:	1a 86       	std	Y+10, r1	; 0x0a
    3804:	1b 86       	std	Y+11, r1	; 0x0b
    3806:	1c 86       	std	Y+12, r1	; 0x0c
    3808:	1d 86       	std	Y+13, r1	; 0x0d
    380a:	1e 86       	std	Y+14, r1	; 0x0e
    380c:	1f 86       	std	Y+15, r1	; 0x0f
    380e:	18 8a       	std	Y+16, r1	; 0x10



	u64 total_ticks = (millisec*1000) / tick_time_micro ;  //(millisec * 1000)-> as we're working with micro seconds
    3810:	89 a1       	ldd	r24, Y+33	; 0x21
    3812:	9a a1       	ldd	r25, Y+34	; 0x22
    3814:	ab a1       	ldd	r26, Y+35	; 0x23
    3816:	bc a1       	ldd	r27, Y+36	; 0x24
    3818:	28 ee       	ldi	r18, 0xE8	; 232
    381a:	33 e0       	ldi	r19, 0x03	; 3
    381c:	40 e0       	ldi	r20, 0x00	; 0
    381e:	50 e0       	ldi	r21, 0x00	; 0
    3820:	bc 01       	movw	r22, r24
    3822:	cd 01       	movw	r24, r26
    3824:	0e 94 c2 37 	call	0x6f84	; 0x6f84 <__mulsi3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	5c 01       	movw	r10, r24
    382e:	6d 01       	movw	r12, r26
    3830:	ee 24       	eor	r14, r14
    3832:	ff 24       	eor	r15, r15
    3834:	87 01       	movw	r16, r14
    3836:	2a 2d       	mov	r18, r10
    3838:	3b 2d       	mov	r19, r11
    383a:	4c 2d       	mov	r20, r12
    383c:	5d 2d       	mov	r21, r13
    383e:	6e 2d       	mov	r22, r14
    3840:	7f 2d       	mov	r23, r15
    3842:	80 2f       	mov	r24, r16
    3844:	91 2f       	mov	r25, r17
    3846:	a9 84       	ldd	r10, Y+9	; 0x09
    3848:	ba 84       	ldd	r11, Y+10	; 0x0a
    384a:	cb 84       	ldd	r12, Y+11	; 0x0b
    384c:	dc 84       	ldd	r13, Y+12	; 0x0c
    384e:	ed 84       	ldd	r14, Y+13	; 0x0d
    3850:	fe 84       	ldd	r15, Y+14	; 0x0e
    3852:	0f 85       	ldd	r16, Y+15	; 0x0f
    3854:	18 89       	ldd	r17, Y+16	; 0x10
    3856:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__udivdi3>
    385a:	a2 2e       	mov	r10, r18
    385c:	b3 2e       	mov	r11, r19
    385e:	c4 2e       	mov	r12, r20
    3860:	d5 2e       	mov	r13, r21
    3862:	e6 2e       	mov	r14, r22
    3864:	f7 2e       	mov	r15, r23
    3866:	08 2f       	mov	r16, r24
    3868:	19 2f       	mov	r17, r25
    386a:	a9 82       	std	Y+1, r10	; 0x01
    386c:	ba 82       	std	Y+2, r11	; 0x02
    386e:	cb 82       	std	Y+3, r12	; 0x03
    3870:	dc 82       	std	Y+4, r13	; 0x04
    3872:	ed 82       	std	Y+5, r14	; 0x05
    3874:	fe 82       	std	Y+6, r15	; 0x06
    3876:	0f 83       	std	Y+7, r16	; 0x07
    3878:	18 87       	std	Y+8, r17	; 0x08
	if(total_ticks < 256){
    387a:	88 85       	ldd	r24, Y+8	; 0x08
    387c:	88 23       	and	r24, r24
    387e:	59 f5       	brne	.+86     	; 0x38d6 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x11a>
    3880:	88 85       	ldd	r24, Y+8	; 0x08
    3882:	88 23       	and	r24, r24
    3884:	11 f5       	brne	.+68     	; 0x38ca <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x10e>
    3886:	8f 81       	ldd	r24, Y+7	; 0x07
    3888:	88 23       	and	r24, r24
    388a:	29 f5       	brne	.+74     	; 0x38d6 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x11a>
    388c:	8f 81       	ldd	r24, Y+7	; 0x07
    388e:	88 23       	and	r24, r24
    3890:	e1 f4       	brne	.+56     	; 0x38ca <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x10e>
    3892:	8e 81       	ldd	r24, Y+6	; 0x06
    3894:	88 23       	and	r24, r24
    3896:	f9 f4       	brne	.+62     	; 0x38d6 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x11a>
    3898:	8e 81       	ldd	r24, Y+6	; 0x06
    389a:	88 23       	and	r24, r24
    389c:	b1 f4       	brne	.+44     	; 0x38ca <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x10e>
    389e:	8d 81       	ldd	r24, Y+5	; 0x05
    38a0:	88 23       	and	r24, r24
    38a2:	c9 f4       	brne	.+50     	; 0x38d6 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x11a>
    38a4:	8d 81       	ldd	r24, Y+5	; 0x05
    38a6:	88 23       	and	r24, r24
    38a8:	81 f4       	brne	.+32     	; 0x38ca <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x10e>
    38aa:	8c 81       	ldd	r24, Y+4	; 0x04
    38ac:	88 23       	and	r24, r24
    38ae:	99 f4       	brne	.+38     	; 0x38d6 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x11a>
    38b0:	8c 81       	ldd	r24, Y+4	; 0x04
    38b2:	88 23       	and	r24, r24
    38b4:	51 f4       	brne	.+20     	; 0x38ca <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x10e>
    38b6:	8b 81       	ldd	r24, Y+3	; 0x03
    38b8:	88 23       	and	r24, r24
    38ba:	69 f4       	brne	.+26     	; 0x38d6 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x11a>
    38bc:	8b 81       	ldd	r24, Y+3	; 0x03
    38be:	88 23       	and	r24, r24
    38c0:	21 f4       	brne	.+8      	; 0x38ca <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x10e>
    38c2:	8a 81       	ldd	r24, Y+2	; 0x02
    38c4:	88 23       	and	r24, r24
    38c6:	39 f4       	brne	.+14     	; 0x38d6 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x11a>
    38c8:	8a 81       	ldd	r24, Y+2	; 0x02
		//Initializing my TCNT0 with the remainder ticks  - no overflows needed -
		TCNT0_REG = 256 - total_ticks;
    38ca:	e2 e5       	ldi	r30, 0x52	; 82
    38cc:	f0 e0       	ldi	r31, 0x00	; 0
    38ce:	89 81       	ldd	r24, Y+1	; 0x01
    38d0:	81 95       	neg	r24
    38d2:	80 83       	st	Z, r24
    38d4:	65 c2       	rjmp	.+1226   	; 0x3da0 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x5e4>
	}
	else{
	//This hustle is to avoid working with fractions in the data
	total_overflows = ((u64)total_ticks * FACTOR) / 256;
    38d6:	29 81       	ldd	r18, Y+1	; 0x01
    38d8:	3a 81       	ldd	r19, Y+2	; 0x02
    38da:	4b 81       	ldd	r20, Y+3	; 0x03
    38dc:	5c 81       	ldd	r21, Y+4	; 0x04
    38de:	6d 81       	ldd	r22, Y+5	; 0x05
    38e0:	7e 81       	ldd	r23, Y+6	; 0x06
    38e2:	8f 81       	ldd	r24, Y+7	; 0x07
    38e4:	98 85       	ldd	r25, Y+8	; 0x08
    38e6:	0f 2e       	mov	r0, r31
    38e8:	f0 ea       	ldi	r31, 0xA0	; 160
    38ea:	af 2e       	mov	r10, r31
    38ec:	f0 2d       	mov	r31, r0
    38ee:	0f 2e       	mov	r0, r31
    38f0:	f6 e8       	ldi	r31, 0x86	; 134
    38f2:	bf 2e       	mov	r11, r31
    38f4:	f0 2d       	mov	r31, r0
    38f6:	cc 24       	eor	r12, r12
    38f8:	c3 94       	inc	r12
    38fa:	dd 24       	eor	r13, r13
    38fc:	ee 24       	eor	r14, r14
    38fe:	ff 24       	eor	r15, r15
    3900:	00 e0       	ldi	r16, 0x00	; 0
    3902:	10 e0       	ldi	r17, 0x00	; 0
    3904:	0e 94 49 00 	call	0x92	; 0x92 <__muldi3>
    3908:	22 2e       	mov	r2, r18
    390a:	33 2e       	mov	r3, r19
    390c:	44 2e       	mov	r4, r20
    390e:	55 2e       	mov	r5, r21
    3910:	66 2e       	mov	r6, r22
    3912:	77 2e       	mov	r7, r23
    3914:	88 2e       	mov	r8, r24
    3916:	99 2e       	mov	r9, r25
    3918:	a2 2c       	mov	r10, r2
    391a:	b3 2c       	mov	r11, r3
    391c:	c4 2c       	mov	r12, r4
    391e:	d5 2c       	mov	r13, r5
    3920:	e6 2c       	mov	r14, r6
    3922:	f7 2c       	mov	r15, r7
    3924:	08 2d       	mov	r16, r8
    3926:	19 2d       	mov	r17, r9
    3928:	2a 2d       	mov	r18, r10
    392a:	3b 2d       	mov	r19, r11
    392c:	4c 2d       	mov	r20, r12
    392e:	5d 2d       	mov	r21, r13
    3930:	6e 2d       	mov	r22, r14
    3932:	7f 2d       	mov	r23, r15
    3934:	80 2f       	mov	r24, r16
    3936:	91 2f       	mov	r25, r17
    3938:	08 e0       	ldi	r16, 0x08	; 8
    393a:	0e 94 44 01 	call	0x288	; 0x288 <__lshrdi3>
    393e:	a2 2e       	mov	r10, r18
    3940:	b3 2e       	mov	r11, r19
    3942:	c4 2e       	mov	r12, r20
    3944:	d5 2e       	mov	r13, r21
    3946:	e6 2e       	mov	r14, r22
    3948:	f7 2e       	mov	r15, r23
    394a:	08 2f       	mov	r16, r24
    394c:	19 2f       	mov	r17, r25
    394e:	a9 8e       	std	Y+25, r10	; 0x19
    3950:	ba 8e       	std	Y+26, r11	; 0x1a
    3952:	cb 8e       	std	Y+27, r12	; 0x1b
    3954:	dc 8e       	std	Y+28, r13	; 0x1c
    3956:	ed 8e       	std	Y+29, r14	; 0x1d
    3958:	fe 8e       	std	Y+30, r15	; 0x1e
    395a:	0f 8f       	std	Y+31, r16	; 0x1f
    395c:	18 a3       	std	Y+32, r17	; 0x20
	remainder_ticks = (u64)total_overflows % FACTOR;
    395e:	a9 8c       	ldd	r10, Y+25	; 0x19
    3960:	ba 8c       	ldd	r11, Y+26	; 0x1a
    3962:	cb 8c       	ldd	r12, Y+27	; 0x1b
    3964:	dc 8c       	ldd	r13, Y+28	; 0x1c
    3966:	ed 8c       	ldd	r14, Y+29	; 0x1d
    3968:	fe 8c       	ldd	r15, Y+30	; 0x1e
    396a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    396c:	18 a1       	ldd	r17, Y+32	; 0x20
    396e:	2a 2d       	mov	r18, r10
    3970:	3b 2d       	mov	r19, r11
    3972:	4c 2d       	mov	r20, r12
    3974:	5d 2d       	mov	r21, r13
    3976:	6e 2d       	mov	r22, r14
    3978:	7f 2d       	mov	r23, r15
    397a:	80 2f       	mov	r24, r16
    397c:	91 2f       	mov	r25, r17
    397e:	0f 2e       	mov	r0, r31
    3980:	f0 ea       	ldi	r31, 0xA0	; 160
    3982:	af 2e       	mov	r10, r31
    3984:	f0 2d       	mov	r31, r0
    3986:	0f 2e       	mov	r0, r31
    3988:	f6 e8       	ldi	r31, 0x86	; 134
    398a:	bf 2e       	mov	r11, r31
    398c:	f0 2d       	mov	r31, r0
    398e:	cc 24       	eor	r12, r12
    3990:	c3 94       	inc	r12
    3992:	dd 24       	eor	r13, r13
    3994:	ee 24       	eor	r14, r14
    3996:	ff 24       	eor	r15, r15
    3998:	00 e0       	ldi	r16, 0x00	; 0
    399a:	10 e0       	ldi	r17, 0x00	; 0
    399c:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <__umoddi3>
    39a0:	a2 2e       	mov	r10, r18
    39a2:	b3 2e       	mov	r11, r19
    39a4:	c4 2e       	mov	r12, r20
    39a6:	d5 2e       	mov	r13, r21
    39a8:	e6 2e       	mov	r14, r22
    39aa:	f7 2e       	mov	r15, r23
    39ac:	08 2f       	mov	r16, r24
    39ae:	19 2f       	mov	r17, r25
    39b0:	a9 8a       	std	Y+17, r10	; 0x11
    39b2:	ba 8a       	std	Y+18, r11	; 0x12
    39b4:	cb 8a       	std	Y+19, r12	; 0x13
    39b6:	dc 8a       	std	Y+20, r13	; 0x14
    39b8:	ed 8a       	std	Y+21, r14	; 0x15
    39ba:	fe 8a       	std	Y+22, r15	; 0x16
    39bc:	0f 8b       	std	Y+23, r16	; 0x17
    39be:	18 8f       	std	Y+24, r17	; 0x18
	remainder_ticks = (u64)remainder_ticks * 256;
    39c0:	29 89       	ldd	r18, Y+17	; 0x11
    39c2:	3a 89       	ldd	r19, Y+18	; 0x12
    39c4:	4b 89       	ldd	r20, Y+19	; 0x13
    39c6:	5c 89       	ldd	r21, Y+20	; 0x14
    39c8:	6d 89       	ldd	r22, Y+21	; 0x15
    39ca:	7e 89       	ldd	r23, Y+22	; 0x16
    39cc:	8f 89       	ldd	r24, Y+23	; 0x17
    39ce:	98 8d       	ldd	r25, Y+24	; 0x18
    39d0:	08 e0       	ldi	r16, 0x08	; 8
    39d2:	0e 94 c3 01 	call	0x386	; 0x386 <__ashldi3>
    39d6:	a2 2e       	mov	r10, r18
    39d8:	b3 2e       	mov	r11, r19
    39da:	c4 2e       	mov	r12, r20
    39dc:	d5 2e       	mov	r13, r21
    39de:	e6 2e       	mov	r14, r22
    39e0:	f7 2e       	mov	r15, r23
    39e2:	08 2f       	mov	r16, r24
    39e4:	19 2f       	mov	r17, r25
    39e6:	a9 8a       	std	Y+17, r10	; 0x11
    39e8:	ba 8a       	std	Y+18, r11	; 0x12
    39ea:	cb 8a       	std	Y+19, r12	; 0x13
    39ec:	dc 8a       	std	Y+20, r13	; 0x14
    39ee:	ed 8a       	std	Y+21, r14	; 0x15
    39f0:	fe 8a       	std	Y+22, r15	; 0x16
    39f2:	0f 8b       	std	Y+23, r16	; 0x17
    39f4:	18 8f       	std	Y+24, r17	; 0x18
	remainder_ticks = (u64)remainder_ticks / FACTOR;
    39f6:	a9 88       	ldd	r10, Y+17	; 0x11
    39f8:	ba 88       	ldd	r11, Y+18	; 0x12
    39fa:	cb 88       	ldd	r12, Y+19	; 0x13
    39fc:	dc 88       	ldd	r13, Y+20	; 0x14
    39fe:	ed 88       	ldd	r14, Y+21	; 0x15
    3a00:	fe 88       	ldd	r15, Y+22	; 0x16
    3a02:	0f 89       	ldd	r16, Y+23	; 0x17
    3a04:	18 8d       	ldd	r17, Y+24	; 0x18
    3a06:	2a 2d       	mov	r18, r10
    3a08:	3b 2d       	mov	r19, r11
    3a0a:	4c 2d       	mov	r20, r12
    3a0c:	5d 2d       	mov	r21, r13
    3a0e:	6e 2d       	mov	r22, r14
    3a10:	7f 2d       	mov	r23, r15
    3a12:	80 2f       	mov	r24, r16
    3a14:	91 2f       	mov	r25, r17
    3a16:	0f 2e       	mov	r0, r31
    3a18:	f0 ea       	ldi	r31, 0xA0	; 160
    3a1a:	af 2e       	mov	r10, r31
    3a1c:	f0 2d       	mov	r31, r0
    3a1e:	0f 2e       	mov	r0, r31
    3a20:	f6 e8       	ldi	r31, 0x86	; 134
    3a22:	bf 2e       	mov	r11, r31
    3a24:	f0 2d       	mov	r31, r0
    3a26:	cc 24       	eor	r12, r12
    3a28:	c3 94       	inc	r12
    3a2a:	dd 24       	eor	r13, r13
    3a2c:	ee 24       	eor	r14, r14
    3a2e:	ff 24       	eor	r15, r15
    3a30:	00 e0       	ldi	r16, 0x00	; 0
    3a32:	10 e0       	ldi	r17, 0x00	; 0
    3a34:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__udivdi3>
    3a38:	a2 2e       	mov	r10, r18
    3a3a:	b3 2e       	mov	r11, r19
    3a3c:	c4 2e       	mov	r12, r20
    3a3e:	d5 2e       	mov	r13, r21
    3a40:	e6 2e       	mov	r14, r22
    3a42:	f7 2e       	mov	r15, r23
    3a44:	08 2f       	mov	r16, r24
    3a46:	19 2f       	mov	r17, r25
    3a48:	a9 8a       	std	Y+17, r10	; 0x11
    3a4a:	ba 8a       	std	Y+18, r11	; 0x12
    3a4c:	cb 8a       	std	Y+19, r12	; 0x13
    3a4e:	dc 8a       	std	Y+20, r13	; 0x14
    3a50:	ed 8a       	std	Y+21, r14	; 0x15
    3a52:	fe 8a       	std	Y+22, r15	; 0x16
    3a54:	0f 8b       	std	Y+23, r16	; 0x17
    3a56:	18 8f       	std	Y+24, r17	; 0x18
	total_overflows = (u64)total_overflows / FACTOR;
    3a58:	a9 8c       	ldd	r10, Y+25	; 0x19
    3a5a:	ba 8c       	ldd	r11, Y+26	; 0x1a
    3a5c:	cb 8c       	ldd	r12, Y+27	; 0x1b
    3a5e:	dc 8c       	ldd	r13, Y+28	; 0x1c
    3a60:	ed 8c       	ldd	r14, Y+29	; 0x1d
    3a62:	fe 8c       	ldd	r15, Y+30	; 0x1e
    3a64:	0f 8d       	ldd	r16, Y+31	; 0x1f
    3a66:	18 a1       	ldd	r17, Y+32	; 0x20
    3a68:	2a 2d       	mov	r18, r10
    3a6a:	3b 2d       	mov	r19, r11
    3a6c:	4c 2d       	mov	r20, r12
    3a6e:	5d 2d       	mov	r21, r13
    3a70:	6e 2d       	mov	r22, r14
    3a72:	7f 2d       	mov	r23, r15
    3a74:	80 2f       	mov	r24, r16
    3a76:	91 2f       	mov	r25, r17
    3a78:	0f 2e       	mov	r0, r31
    3a7a:	f0 ea       	ldi	r31, 0xA0	; 160
    3a7c:	af 2e       	mov	r10, r31
    3a7e:	f0 2d       	mov	r31, r0
    3a80:	0f 2e       	mov	r0, r31
    3a82:	f6 e8       	ldi	r31, 0x86	; 134
    3a84:	bf 2e       	mov	r11, r31
    3a86:	f0 2d       	mov	r31, r0
    3a88:	cc 24       	eor	r12, r12
    3a8a:	c3 94       	inc	r12
    3a8c:	dd 24       	eor	r13, r13
    3a8e:	ee 24       	eor	r14, r14
    3a90:	ff 24       	eor	r15, r15
    3a92:	00 e0       	ldi	r16, 0x00	; 0
    3a94:	10 e0       	ldi	r17, 0x00	; 0
    3a96:	0e 94 6e 02 	call	0x4dc	; 0x4dc <__udivdi3>
    3a9a:	a2 2e       	mov	r10, r18
    3a9c:	b3 2e       	mov	r11, r19
    3a9e:	c4 2e       	mov	r12, r20
    3aa0:	d5 2e       	mov	r13, r21
    3aa2:	e6 2e       	mov	r14, r22
    3aa4:	f7 2e       	mov	r15, r23
    3aa6:	08 2f       	mov	r16, r24
    3aa8:	19 2f       	mov	r17, r25
    3aaa:	a9 8e       	std	Y+25, r10	; 0x19
    3aac:	ba 8e       	std	Y+26, r11	; 0x1a
    3aae:	cb 8e       	std	Y+27, r12	; 0x1b
    3ab0:	dc 8e       	std	Y+28, r13	; 0x1c
    3ab2:	ed 8e       	std	Y+29, r14	; 0x1d
    3ab4:	fe 8e       	std	Y+30, r15	; 0x1e
    3ab6:	0f 8f       	std	Y+31, r16	; 0x1f
    3ab8:	18 a3       	std	Y+32, r17	; 0x20

	//Initializing my TCNT0 with the remainder ticks
	TCNT0_REG = 256 - remainder_ticks;
    3aba:	e2 e5       	ldi	r30, 0x52	; 82
    3abc:	f0 e0       	ldi	r31, 0x00	; 0
    3abe:	89 89       	ldd	r24, Y+17	; 0x11
    3ac0:	81 95       	neg	r24
    3ac2:	80 83       	st	Z, r24
	//increasing the overflows count by 1 - taking in counts the 1st ovf caused by the remainder ticks
	total_overflows++;
    3ac4:	99 8d       	ldd	r25, Y+25	; 0x19
    3ac6:	98 a7       	std	Y+40, r25	; 0x28
    3ac8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3aca:	89 a7       	std	Y+41, r24	; 0x29
    3acc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3ace:	9a a7       	std	Y+42, r25	; 0x2a
    3ad0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3ad2:	8b a7       	std	Y+43, r24	; 0x2b
    3ad4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3ad6:	9c a7       	std	Y+44, r25	; 0x2c
    3ad8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3ada:	8d a7       	std	Y+45, r24	; 0x2d
    3adc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    3ade:	9e a7       	std	Y+46, r25	; 0x2e
    3ae0:	88 a1       	ldd	r24, Y+32	; 0x20
    3ae2:	8f a7       	std	Y+47, r24	; 0x2f
    3ae4:	91 e0       	ldi	r25, 0x01	; 1
    3ae6:	98 ab       	std	Y+48, r25	; 0x30
    3ae8:	19 aa       	std	Y+49, r1	; 0x31
    3aea:	1a aa       	std	Y+50, r1	; 0x32
    3aec:	1b aa       	std	Y+51, r1	; 0x33
    3aee:	1c aa       	std	Y+52, r1	; 0x34
    3af0:	1d aa       	std	Y+53, r1	; 0x35
    3af2:	1e aa       	std	Y+54, r1	; 0x36
    3af4:	1f aa       	std	Y+55, r1	; 0x37
    3af6:	88 a5       	ldd	r24, Y+40	; 0x28
    3af8:	98 a9       	ldd	r25, Y+48	; 0x30
    3afa:	89 0f       	add	r24, r25
    3afc:	88 af       	std	Y+56, r24	; 0x38
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	21 96       	adiw	r28, 0x01	; 1
    3b02:	8f af       	std	Y+63, r24	; 0x3f
    3b04:	21 97       	sbiw	r28, 0x01	; 1
    3b06:	98 ad       	ldd	r25, Y+56	; 0x38
    3b08:	88 a5       	ldd	r24, Y+40	; 0x28
    3b0a:	98 17       	cp	r25, r24
    3b0c:	18 f0       	brcs	.+6      	; 0x3b14 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x358>
    3b0e:	21 96       	adiw	r28, 0x01	; 1
    3b10:	1f ae       	std	Y+63, r1	; 0x3f
    3b12:	21 97       	sbiw	r28, 0x01	; 1
    3b14:	99 a5       	ldd	r25, Y+41	; 0x29
    3b16:	89 a9       	ldd	r24, Y+49	; 0x31
    3b18:	98 0f       	add	r25, r24
    3b1a:	99 af       	std	Y+57, r25	; 0x39
    3b1c:	91 e0       	ldi	r25, 0x01	; 1
    3b1e:	22 96       	adiw	r28, 0x02	; 2
    3b20:	9f af       	std	Y+63, r25	; 0x3f
    3b22:	22 97       	sbiw	r28, 0x02	; 2
    3b24:	89 ad       	ldd	r24, Y+57	; 0x39
    3b26:	99 a5       	ldd	r25, Y+41	; 0x29
    3b28:	89 17       	cp	r24, r25
    3b2a:	18 f0       	brcs	.+6      	; 0x3b32 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x376>
    3b2c:	22 96       	adiw	r28, 0x02	; 2
    3b2e:	1f ae       	std	Y+63, r1	; 0x3f
    3b30:	22 97       	sbiw	r28, 0x02	; 2
    3b32:	21 96       	adiw	r28, 0x01	; 1
    3b34:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b36:	21 97       	sbiw	r28, 0x01	; 1
    3b38:	99 ad       	ldd	r25, Y+57	; 0x39
    3b3a:	89 0f       	add	r24, r25
    3b3c:	23 96       	adiw	r28, 0x03	; 3
    3b3e:	8f af       	std	Y+63, r24	; 0x3f
    3b40:	23 97       	sbiw	r28, 0x03	; 3
    3b42:	81 e0       	ldi	r24, 0x01	; 1
    3b44:	24 96       	adiw	r28, 0x04	; 4
    3b46:	8f af       	std	Y+63, r24	; 0x3f
    3b48:	24 97       	sbiw	r28, 0x04	; 4
    3b4a:	23 96       	adiw	r28, 0x03	; 3
    3b4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b4e:	23 97       	sbiw	r28, 0x03	; 3
    3b50:	89 ad       	ldd	r24, Y+57	; 0x39
    3b52:	98 17       	cp	r25, r24
    3b54:	18 f0       	brcs	.+6      	; 0x3b5c <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x3a0>
    3b56:	24 96       	adiw	r28, 0x04	; 4
    3b58:	1f ae       	std	Y+63, r1	; 0x3f
    3b5a:	24 97       	sbiw	r28, 0x04	; 4
    3b5c:	22 96       	adiw	r28, 0x02	; 2
    3b5e:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b60:	22 97       	sbiw	r28, 0x02	; 2
    3b62:	24 96       	adiw	r28, 0x04	; 4
    3b64:	8f ad       	ldd	r24, Y+63	; 0x3f
    3b66:	24 97       	sbiw	r28, 0x04	; 4
    3b68:	98 2b       	or	r25, r24
    3b6a:	22 96       	adiw	r28, 0x02	; 2
    3b6c:	9f af       	std	Y+63, r25	; 0x3f
    3b6e:	22 97       	sbiw	r28, 0x02	; 2
    3b70:	23 96       	adiw	r28, 0x03	; 3
    3b72:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b74:	23 97       	sbiw	r28, 0x03	; 3
    3b76:	99 af       	std	Y+57, r25	; 0x39
    3b78:	8a a5       	ldd	r24, Y+42	; 0x2a
    3b7a:	9a a9       	ldd	r25, Y+50	; 0x32
    3b7c:	89 0f       	add	r24, r25
    3b7e:	8a af       	std	Y+58, r24	; 0x3a
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	25 96       	adiw	r28, 0x05	; 5
    3b84:	8f af       	std	Y+63, r24	; 0x3f
    3b86:	25 97       	sbiw	r28, 0x05	; 5
    3b88:	9a ad       	ldd	r25, Y+58	; 0x3a
    3b8a:	8a a5       	ldd	r24, Y+42	; 0x2a
    3b8c:	98 17       	cp	r25, r24
    3b8e:	18 f0       	brcs	.+6      	; 0x3b96 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x3da>
    3b90:	25 96       	adiw	r28, 0x05	; 5
    3b92:	1f ae       	std	Y+63, r1	; 0x3f
    3b94:	25 97       	sbiw	r28, 0x05	; 5
    3b96:	22 96       	adiw	r28, 0x02	; 2
    3b98:	9f ad       	ldd	r25, Y+63	; 0x3f
    3b9a:	22 97       	sbiw	r28, 0x02	; 2
    3b9c:	8a ad       	ldd	r24, Y+58	; 0x3a
    3b9e:	98 0f       	add	r25, r24
    3ba0:	26 96       	adiw	r28, 0x06	; 6
    3ba2:	9f af       	std	Y+63, r25	; 0x3f
    3ba4:	26 97       	sbiw	r28, 0x06	; 6
    3ba6:	91 e0       	ldi	r25, 0x01	; 1
    3ba8:	27 96       	adiw	r28, 0x07	; 7
    3baa:	9f af       	std	Y+63, r25	; 0x3f
    3bac:	27 97       	sbiw	r28, 0x07	; 7
    3bae:	26 96       	adiw	r28, 0x06	; 6
    3bb0:	8f ad       	ldd	r24, Y+63	; 0x3f
    3bb2:	26 97       	sbiw	r28, 0x06	; 6
    3bb4:	9a ad       	ldd	r25, Y+58	; 0x3a
    3bb6:	89 17       	cp	r24, r25
    3bb8:	18 f0       	brcs	.+6      	; 0x3bc0 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x404>
    3bba:	27 96       	adiw	r28, 0x07	; 7
    3bbc:	1f ae       	std	Y+63, r1	; 0x3f
    3bbe:	27 97       	sbiw	r28, 0x07	; 7
    3bc0:	25 96       	adiw	r28, 0x05	; 5
    3bc2:	8f ad       	ldd	r24, Y+63	; 0x3f
    3bc4:	25 97       	sbiw	r28, 0x05	; 5
    3bc6:	27 96       	adiw	r28, 0x07	; 7
    3bc8:	9f ad       	ldd	r25, Y+63	; 0x3f
    3bca:	27 97       	sbiw	r28, 0x07	; 7
    3bcc:	89 2b       	or	r24, r25
    3bce:	25 96       	adiw	r28, 0x05	; 5
    3bd0:	8f af       	std	Y+63, r24	; 0x3f
    3bd2:	25 97       	sbiw	r28, 0x05	; 5
    3bd4:	26 96       	adiw	r28, 0x06	; 6
    3bd6:	8f ad       	ldd	r24, Y+63	; 0x3f
    3bd8:	26 97       	sbiw	r28, 0x06	; 6
    3bda:	8a af       	std	Y+58, r24	; 0x3a
    3bdc:	9b a5       	ldd	r25, Y+43	; 0x2b
    3bde:	8b a9       	ldd	r24, Y+51	; 0x33
    3be0:	98 0f       	add	r25, r24
    3be2:	9b af       	std	Y+59, r25	; 0x3b
    3be4:	91 e0       	ldi	r25, 0x01	; 1
    3be6:	28 96       	adiw	r28, 0x08	; 8
    3be8:	9f af       	std	Y+63, r25	; 0x3f
    3bea:	28 97       	sbiw	r28, 0x08	; 8
    3bec:	8b ad       	ldd	r24, Y+59	; 0x3b
    3bee:	9b a5       	ldd	r25, Y+43	; 0x2b
    3bf0:	89 17       	cp	r24, r25
    3bf2:	18 f0       	brcs	.+6      	; 0x3bfa <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x43e>
    3bf4:	28 96       	adiw	r28, 0x08	; 8
    3bf6:	1f ae       	std	Y+63, r1	; 0x3f
    3bf8:	28 97       	sbiw	r28, 0x08	; 8
    3bfa:	25 96       	adiw	r28, 0x05	; 5
    3bfc:	8f ad       	ldd	r24, Y+63	; 0x3f
    3bfe:	25 97       	sbiw	r28, 0x05	; 5
    3c00:	9b ad       	ldd	r25, Y+59	; 0x3b
    3c02:	89 0f       	add	r24, r25
    3c04:	29 96       	adiw	r28, 0x09	; 9
    3c06:	8f af       	std	Y+63, r24	; 0x3f
    3c08:	29 97       	sbiw	r28, 0x09	; 9
    3c0a:	81 e0       	ldi	r24, 0x01	; 1
    3c0c:	2a 96       	adiw	r28, 0x0a	; 10
    3c0e:	8f af       	std	Y+63, r24	; 0x3f
    3c10:	2a 97       	sbiw	r28, 0x0a	; 10
    3c12:	29 96       	adiw	r28, 0x09	; 9
    3c14:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c16:	29 97       	sbiw	r28, 0x09	; 9
    3c18:	8b ad       	ldd	r24, Y+59	; 0x3b
    3c1a:	98 17       	cp	r25, r24
    3c1c:	18 f0       	brcs	.+6      	; 0x3c24 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x468>
    3c1e:	2a 96       	adiw	r28, 0x0a	; 10
    3c20:	1f ae       	std	Y+63, r1	; 0x3f
    3c22:	2a 97       	sbiw	r28, 0x0a	; 10
    3c24:	28 96       	adiw	r28, 0x08	; 8
    3c26:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c28:	28 97       	sbiw	r28, 0x08	; 8
    3c2a:	2a 96       	adiw	r28, 0x0a	; 10
    3c2c:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c2e:	2a 97       	sbiw	r28, 0x0a	; 10
    3c30:	98 2b       	or	r25, r24
    3c32:	28 96       	adiw	r28, 0x08	; 8
    3c34:	9f af       	std	Y+63, r25	; 0x3f
    3c36:	28 97       	sbiw	r28, 0x08	; 8
    3c38:	29 96       	adiw	r28, 0x09	; 9
    3c3a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c3c:	29 97       	sbiw	r28, 0x09	; 9
    3c3e:	9b af       	std	Y+59, r25	; 0x3b
    3c40:	8c a5       	ldd	r24, Y+44	; 0x2c
    3c42:	9c a9       	ldd	r25, Y+52	; 0x34
    3c44:	89 0f       	add	r24, r25
    3c46:	8c af       	std	Y+60, r24	; 0x3c
    3c48:	81 e0       	ldi	r24, 0x01	; 1
    3c4a:	2b 96       	adiw	r28, 0x0b	; 11
    3c4c:	8f af       	std	Y+63, r24	; 0x3f
    3c4e:	2b 97       	sbiw	r28, 0x0b	; 11
    3c50:	9c ad       	ldd	r25, Y+60	; 0x3c
    3c52:	8c a5       	ldd	r24, Y+44	; 0x2c
    3c54:	98 17       	cp	r25, r24
    3c56:	18 f0       	brcs	.+6      	; 0x3c5e <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x4a2>
    3c58:	2b 96       	adiw	r28, 0x0b	; 11
    3c5a:	1f ae       	std	Y+63, r1	; 0x3f
    3c5c:	2b 97       	sbiw	r28, 0x0b	; 11
    3c5e:	28 96       	adiw	r28, 0x08	; 8
    3c60:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c62:	28 97       	sbiw	r28, 0x08	; 8
    3c64:	8c ad       	ldd	r24, Y+60	; 0x3c
    3c66:	98 0f       	add	r25, r24
    3c68:	2c 96       	adiw	r28, 0x0c	; 12
    3c6a:	9f af       	std	Y+63, r25	; 0x3f
    3c6c:	2c 97       	sbiw	r28, 0x0c	; 12
    3c6e:	91 e0       	ldi	r25, 0x01	; 1
    3c70:	2d 96       	adiw	r28, 0x0d	; 13
    3c72:	9f af       	std	Y+63, r25	; 0x3f
    3c74:	2d 97       	sbiw	r28, 0x0d	; 13
    3c76:	2c 96       	adiw	r28, 0x0c	; 12
    3c78:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c7a:	2c 97       	sbiw	r28, 0x0c	; 12
    3c7c:	9c ad       	ldd	r25, Y+60	; 0x3c
    3c7e:	89 17       	cp	r24, r25
    3c80:	18 f0       	brcs	.+6      	; 0x3c88 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x4cc>
    3c82:	2d 96       	adiw	r28, 0x0d	; 13
    3c84:	1f ae       	std	Y+63, r1	; 0x3f
    3c86:	2d 97       	sbiw	r28, 0x0d	; 13
    3c88:	2b 96       	adiw	r28, 0x0b	; 11
    3c8a:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c8c:	2b 97       	sbiw	r28, 0x0b	; 11
    3c8e:	2d 96       	adiw	r28, 0x0d	; 13
    3c90:	9f ad       	ldd	r25, Y+63	; 0x3f
    3c92:	2d 97       	sbiw	r28, 0x0d	; 13
    3c94:	89 2b       	or	r24, r25
    3c96:	2b 96       	adiw	r28, 0x0b	; 11
    3c98:	8f af       	std	Y+63, r24	; 0x3f
    3c9a:	2b 97       	sbiw	r28, 0x0b	; 11
    3c9c:	2c 96       	adiw	r28, 0x0c	; 12
    3c9e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3ca0:	2c 97       	sbiw	r28, 0x0c	; 12
    3ca2:	8c af       	std	Y+60, r24	; 0x3c
    3ca4:	9d a5       	ldd	r25, Y+45	; 0x2d
    3ca6:	8d a9       	ldd	r24, Y+53	; 0x35
    3ca8:	98 0f       	add	r25, r24
    3caa:	9d af       	std	Y+61, r25	; 0x3d
    3cac:	91 e0       	ldi	r25, 0x01	; 1
    3cae:	2e 96       	adiw	r28, 0x0e	; 14
    3cb0:	9f af       	std	Y+63, r25	; 0x3f
    3cb2:	2e 97       	sbiw	r28, 0x0e	; 14
    3cb4:	8d ad       	ldd	r24, Y+61	; 0x3d
    3cb6:	9d a5       	ldd	r25, Y+45	; 0x2d
    3cb8:	89 17       	cp	r24, r25
    3cba:	18 f0       	brcs	.+6      	; 0x3cc2 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x506>
    3cbc:	2e 96       	adiw	r28, 0x0e	; 14
    3cbe:	1f ae       	std	Y+63, r1	; 0x3f
    3cc0:	2e 97       	sbiw	r28, 0x0e	; 14
    3cc2:	2b 96       	adiw	r28, 0x0b	; 11
    3cc4:	8f ad       	ldd	r24, Y+63	; 0x3f
    3cc6:	2b 97       	sbiw	r28, 0x0b	; 11
    3cc8:	9d ad       	ldd	r25, Y+61	; 0x3d
    3cca:	89 0f       	add	r24, r25
    3ccc:	2f 96       	adiw	r28, 0x0f	; 15
    3cce:	8f af       	std	Y+63, r24	; 0x3f
    3cd0:	2f 97       	sbiw	r28, 0x0f	; 15
    3cd2:	81 e0       	ldi	r24, 0x01	; 1
    3cd4:	60 96       	adiw	r28, 0x10	; 16
    3cd6:	8f af       	std	Y+63, r24	; 0x3f
    3cd8:	60 97       	sbiw	r28, 0x10	; 16
    3cda:	2f 96       	adiw	r28, 0x0f	; 15
    3cdc:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cde:	2f 97       	sbiw	r28, 0x0f	; 15
    3ce0:	8d ad       	ldd	r24, Y+61	; 0x3d
    3ce2:	98 17       	cp	r25, r24
    3ce4:	18 f0       	brcs	.+6      	; 0x3cec <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x530>
    3ce6:	60 96       	adiw	r28, 0x10	; 16
    3ce8:	1f ae       	std	Y+63, r1	; 0x3f
    3cea:	60 97       	sbiw	r28, 0x10	; 16
    3cec:	2e 96       	adiw	r28, 0x0e	; 14
    3cee:	9f ad       	ldd	r25, Y+63	; 0x3f
    3cf0:	2e 97       	sbiw	r28, 0x0e	; 14
    3cf2:	60 96       	adiw	r28, 0x10	; 16
    3cf4:	8f ad       	ldd	r24, Y+63	; 0x3f
    3cf6:	60 97       	sbiw	r28, 0x10	; 16
    3cf8:	98 2b       	or	r25, r24
    3cfa:	2e 96       	adiw	r28, 0x0e	; 14
    3cfc:	9f af       	std	Y+63, r25	; 0x3f
    3cfe:	2e 97       	sbiw	r28, 0x0e	; 14
    3d00:	2f 96       	adiw	r28, 0x0f	; 15
    3d02:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d04:	2f 97       	sbiw	r28, 0x0f	; 15
    3d06:	9d af       	std	Y+61, r25	; 0x3d
    3d08:	8e a5       	ldd	r24, Y+46	; 0x2e
    3d0a:	9e a9       	ldd	r25, Y+54	; 0x36
    3d0c:	89 0f       	add	r24, r25
    3d0e:	8e af       	std	Y+62, r24	; 0x3e
    3d10:	81 e0       	ldi	r24, 0x01	; 1
    3d12:	61 96       	adiw	r28, 0x11	; 17
    3d14:	8f af       	std	Y+63, r24	; 0x3f
    3d16:	61 97       	sbiw	r28, 0x11	; 17
    3d18:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d1a:	8e a5       	ldd	r24, Y+46	; 0x2e
    3d1c:	98 17       	cp	r25, r24
    3d1e:	18 f0       	brcs	.+6      	; 0x3d26 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x56a>
    3d20:	61 96       	adiw	r28, 0x11	; 17
    3d22:	1f ae       	std	Y+63, r1	; 0x3f
    3d24:	61 97       	sbiw	r28, 0x11	; 17
    3d26:	2e 96       	adiw	r28, 0x0e	; 14
    3d28:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d2a:	2e 97       	sbiw	r28, 0x0e	; 14
    3d2c:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d2e:	98 0f       	add	r25, r24
    3d30:	62 96       	adiw	r28, 0x12	; 18
    3d32:	9f af       	std	Y+63, r25	; 0x3f
    3d34:	62 97       	sbiw	r28, 0x12	; 18
    3d36:	91 e0       	ldi	r25, 0x01	; 1
    3d38:	63 96       	adiw	r28, 0x13	; 19
    3d3a:	9f af       	std	Y+63, r25	; 0x3f
    3d3c:	63 97       	sbiw	r28, 0x13	; 19
    3d3e:	62 96       	adiw	r28, 0x12	; 18
    3d40:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d42:	62 97       	sbiw	r28, 0x12	; 18
    3d44:	9e ad       	ldd	r25, Y+62	; 0x3e
    3d46:	89 17       	cp	r24, r25
    3d48:	18 f0       	brcs	.+6      	; 0x3d50 <M_TIMER0_void_SetDelayTimeMilliSec_NORMAL+0x594>
    3d4a:	63 96       	adiw	r28, 0x13	; 19
    3d4c:	1f ae       	std	Y+63, r1	; 0x3f
    3d4e:	63 97       	sbiw	r28, 0x13	; 19
    3d50:	61 96       	adiw	r28, 0x11	; 17
    3d52:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d54:	61 97       	sbiw	r28, 0x11	; 17
    3d56:	63 96       	adiw	r28, 0x13	; 19
    3d58:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d5a:	63 97       	sbiw	r28, 0x13	; 19
    3d5c:	89 2b       	or	r24, r25
    3d5e:	61 96       	adiw	r28, 0x11	; 17
    3d60:	8f af       	std	Y+63, r24	; 0x3f
    3d62:	61 97       	sbiw	r28, 0x11	; 17
    3d64:	62 96       	adiw	r28, 0x12	; 18
    3d66:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d68:	62 97       	sbiw	r28, 0x12	; 18
    3d6a:	8e af       	std	Y+62, r24	; 0x3e
    3d6c:	9f a5       	ldd	r25, Y+47	; 0x2f
    3d6e:	8f a9       	ldd	r24, Y+55	; 0x37
    3d70:	98 0f       	add	r25, r24
    3d72:	9f af       	std	Y+63, r25	; 0x3f
    3d74:	61 96       	adiw	r28, 0x11	; 17
    3d76:	8f ad       	ldd	r24, Y+63	; 0x3f
    3d78:	61 97       	sbiw	r28, 0x11	; 17
    3d7a:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d7c:	89 0f       	add	r24, r25
    3d7e:	8f af       	std	Y+63, r24	; 0x3f
    3d80:	88 ad       	ldd	r24, Y+56	; 0x38
    3d82:	89 8f       	std	Y+25, r24	; 0x19
    3d84:	99 ad       	ldd	r25, Y+57	; 0x39
    3d86:	9a 8f       	std	Y+26, r25	; 0x1a
    3d88:	8a ad       	ldd	r24, Y+58	; 0x3a
    3d8a:	8b 8f       	std	Y+27, r24	; 0x1b
    3d8c:	9b ad       	ldd	r25, Y+59	; 0x3b
    3d8e:	9c 8f       	std	Y+28, r25	; 0x1c
    3d90:	8c ad       	ldd	r24, Y+60	; 0x3c
    3d92:	8d 8f       	std	Y+29, r24	; 0x1d
    3d94:	9d ad       	ldd	r25, Y+61	; 0x3d
    3d96:	9e 8f       	std	Y+30, r25	; 0x1e
    3d98:	8e ad       	ldd	r24, Y+62	; 0x3e
    3d9a:	8f 8f       	std	Y+31, r24	; 0x1f
    3d9c:	9f ad       	ldd	r25, Y+63	; 0x3f
    3d9e:	98 a3       	std	Y+32, r25	; 0x20

	}

	//Overflow ISR - Callback function : as it's necessary
	M_TIMER_void_CallBack(TIMER0_OVERFLOW, FuncPTR);
    3da0:	2d a1       	ldd	r18, Y+37	; 0x25
    3da2:	3e a1       	ldd	r19, Y+38	; 0x26
    3da4:	80 e0       	ldi	r24, 0x00	; 0
    3da6:	b9 01       	movw	r22, r18
    3da8:	0e 94 7f 1f 	call	0x3efe	; 0x3efe <M_TIMER_void_CallBack>

	//Making sure that the timer0 overflow interrupt is ENABLED : As it's neccessary
	M_TIMER_void_EnableINT(TIMER0_OVERFLOW);
    3dac:	80 e0       	ldi	r24, 0x00	; 0
    3dae:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <M_TIMER_void_EnableINT>

	//Making Sure we are in the timer (NORMAL) mode
	CLR_BIT(TCCR0_REG , TCCR0_WGM01_BIT);
    3db2:	a3 e5       	ldi	r26, 0x53	; 83
    3db4:	b0 e0       	ldi	r27, 0x00	; 0
    3db6:	e3 e5       	ldi	r30, 0x53	; 83
    3db8:	f0 e0       	ldi	r31, 0x00	; 0
    3dba:	80 81       	ld	r24, Z
    3dbc:	87 7f       	andi	r24, 0xF7	; 247
    3dbe:	8c 93       	st	X, r24
	CLR_BIT(TCCR0_REG , TCCR0_WGM00_BIT);
    3dc0:	a3 e5       	ldi	r26, 0x53	; 83
    3dc2:	b0 e0       	ldi	r27, 0x00	; 0
    3dc4:	e3 e5       	ldi	r30, 0x53	; 83
    3dc6:	f0 e0       	ldi	r31, 0x00	; 0
    3dc8:	80 81       	ld	r24, Z
    3dca:	8f 7b       	andi	r24, 0xBF	; 191
    3dcc:	8c 93       	st	X, r24

	//It's fixed prescaler to calculate (1) millie second
	M_TIMER0_void_Start(PRESCALER_1024);
    3dce:	85 e0       	ldi	r24, 0x05	; 5
    3dd0:	0e 94 21 19 	call	0x3242	; 0x3242 <M_TIMER0_void_Start>

	return total_overflows;
    3dd4:	89 8d       	ldd	r24, Y+25	; 0x19
    3dd6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3dd8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3dda:	bc 8d       	ldd	r27, Y+28	; 0x1c


}
    3ddc:	bc 01       	movw	r22, r24
    3dde:	cd 01       	movw	r24, r26
    3de0:	ce 5a       	subi	r28, 0xAE	; 174
    3de2:	df 4f       	sbci	r29, 0xFF	; 255
    3de4:	0f b6       	in	r0, 0x3f	; 63
    3de6:	f8 94       	cli
    3de8:	de bf       	out	0x3e, r29	; 62
    3dea:	0f be       	out	0x3f, r0	; 63
    3dec:	cd bf       	out	0x3d, r28	; 61
    3dee:	cf 91       	pop	r28
    3df0:	df 91       	pop	r29
    3df2:	1f 91       	pop	r17
    3df4:	0f 91       	pop	r16
    3df6:	ff 90       	pop	r15
    3df8:	ef 90       	pop	r14
    3dfa:	df 90       	pop	r13
    3dfc:	cf 90       	pop	r12
    3dfe:	bf 90       	pop	r11
    3e00:	af 90       	pop	r10
    3e02:	9f 90       	pop	r9
    3e04:	8f 90       	pop	r8
    3e06:	7f 90       	pop	r7
    3e08:	6f 90       	pop	r6
    3e0a:	5f 90       	pop	r5
    3e0c:	4f 90       	pop	r4
    3e0e:	3f 90       	pop	r3
    3e10:	2f 90       	pop	r2
    3e12:	08 95       	ret

00003e14 <M_TIMER1_void_ICU_init_Interrupt_OP>:

/* *********************************************
 *                    ICU                      *
 * ******************************************* */
//_________________________________TIMER1______________________________________________
void M_TIMER1_void_ICU_init_Interrupt_OP(u8 prescaler, TIMER1_ICU_trigger_edge_t edge){
    3e14:	df 93       	push	r29
    3e16:	cf 93       	push	r28
    3e18:	00 d0       	rcall	.+0      	; 0x3e1a <M_TIMER1_void_ICU_init_Interrupt_OP+0x6>
    3e1a:	cd b7       	in	r28, 0x3d	; 61
    3e1c:	de b7       	in	r29, 0x3e	; 62
    3e1e:	89 83       	std	Y+1, r24	; 0x01
    3e20:	6a 83       	std	Y+2, r22	; 0x02
	//enable ICU interrupt to ensure we read ICU -> ICR1L and ICR1H as early as possible
	M_TIMER_void_EnableINT(TIMER1_CAPT);
    3e22:	85 e0       	ldi	r24, 0x05	; 5
    3e24:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <M_TIMER_void_EnableINT>

	//enable timer1 ovf interrupt in order to be able to catch overflows
	M_TIMER_void_EnableINT(TIMER1_OVERFLOW);
    3e28:	82 e0       	ldi	r24, 0x02	; 2
    3e2a:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <M_TIMER_void_EnableINT>

	//select the initial triggering edge
	M_TIMER1_void_ICU_trigger_edge(edge);
    3e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3e30:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <M_TIMER1_void_ICU_trigger_edge>

	//starting the timer
	M_TIMER1_void_Start(prescaler);
    3e34:	89 81       	ldd	r24, Y+1	; 0x01
    3e36:	0e 94 22 1f 	call	0x3e44	; 0x3e44 <M_TIMER1_void_Start>

}
    3e3a:	0f 90       	pop	r0
    3e3c:	0f 90       	pop	r0
    3e3e:	cf 91       	pop	r28
    3e40:	df 91       	pop	r29
    3e42:	08 95       	ret

00003e44 <M_TIMER1_void_Start>:
void M_TIMER1_void_Start(u8 prescaler){
    3e44:	df 93       	push	r29
    3e46:	cf 93       	push	r28
    3e48:	0f 92       	push	r0
    3e4a:	cd b7       	in	r28, 0x3d	; 61
    3e4c:	de b7       	in	r29, 0x3e	; 62
    3e4e:	89 83       	std	Y+1, r24	; 0x01

	TCCR1B_REG &= 0xD8;                       //clearing first three bits from previous data
    3e50:	ae e4       	ldi	r26, 0x4E	; 78
    3e52:	b0 e0       	ldi	r27, 0x00	; 0
    3e54:	ee e4       	ldi	r30, 0x4E	; 78
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	80 81       	ld	r24, Z
    3e5a:	88 7d       	andi	r24, 0xD8	; 216
    3e5c:	8c 93       	st	X, r24
	TCCR1B_REG |= prescaler;          	    //updating their values
    3e5e:	ae e4       	ldi	r26, 0x4E	; 78
    3e60:	b0 e0       	ldi	r27, 0x00	; 0
    3e62:	ee e4       	ldi	r30, 0x4E	; 78
    3e64:	f0 e0       	ldi	r31, 0x00	; 0
    3e66:	90 81       	ld	r25, Z
    3e68:	89 81       	ldd	r24, Y+1	; 0x01
    3e6a:	89 2b       	or	r24, r25
    3e6c:	8c 93       	st	X, r24

}
    3e6e:	0f 90       	pop	r0
    3e70:	cf 91       	pop	r28
    3e72:	df 91       	pop	r29
    3e74:	08 95       	ret

00003e76 <M_TIMER1_void_Stop>:
void M_TIMER1_void_Stop(){
    3e76:	df 93       	push	r29
    3e78:	cf 93       	push	r28
    3e7a:	cd b7       	in	r28, 0x3d	; 61
    3e7c:	de b7       	in	r29, 0x3e	; 62
	TCCR1B_REG &= 0xD8;                       //clearing first three bits from previous data
    3e7e:	ae e4       	ldi	r26, 0x4E	; 78
    3e80:	b0 e0       	ldi	r27, 0x00	; 0
    3e82:	ee e4       	ldi	r30, 0x4E	; 78
    3e84:	f0 e0       	ldi	r31, 0x00	; 0
    3e86:	80 81       	ld	r24, Z
    3e88:	88 7d       	andi	r24, 0xD8	; 216
    3e8a:	8c 93       	st	X, r24
}
    3e8c:	cf 91       	pop	r28
    3e8e:	df 91       	pop	r29
    3e90:	08 95       	ret

00003e92 <M_TIMER1_void_ICU_trigger_edge>:
void M_TIMER1_void_ICU_trigger_edge(TIMER1_ICU_trigger_edge_t edge){
    3e92:	df 93       	push	r29
    3e94:	cf 93       	push	r28
    3e96:	00 d0       	rcall	.+0      	; 0x3e98 <M_TIMER1_void_ICU_trigger_edge+0x6>
    3e98:	0f 92       	push	r0
    3e9a:	cd b7       	in	r28, 0x3d	; 61
    3e9c:	de b7       	in	r29, 0x3e	; 62
    3e9e:	89 83       	std	Y+1, r24	; 0x01
	switch(edge){
    3ea0:	89 81       	ldd	r24, Y+1	; 0x01
    3ea2:	28 2f       	mov	r18, r24
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	3b 83       	std	Y+3, r19	; 0x03
    3ea8:	2a 83       	std	Y+2, r18	; 0x02
    3eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    3eac:	9b 81       	ldd	r25, Y+3	; 0x03
    3eae:	00 97       	sbiw	r24, 0x00	; 0
    3eb0:	31 f0       	breq	.+12     	; 0x3ebe <M_TIMER1_void_ICU_trigger_edge+0x2c>
    3eb2:	2a 81       	ldd	r18, Y+2	; 0x02
    3eb4:	3b 81       	ldd	r19, Y+3	; 0x03
    3eb6:	21 30       	cpi	r18, 0x01	; 1
    3eb8:	31 05       	cpc	r19, r1
    3eba:	49 f0       	breq	.+18     	; 0x3ece <M_TIMER1_void_ICU_trigger_edge+0x3c>
    3ebc:	0f c0       	rjmp	.+30     	; 0x3edc <M_TIMER1_void_ICU_trigger_edge+0x4a>
	case TIMER1_ICU_FALLING:
		CLR_BIT(TCCR1B_REG, TCCR1B_ICES1_BIT);
    3ebe:	ae e4       	ldi	r26, 0x4E	; 78
    3ec0:	b0 e0       	ldi	r27, 0x00	; 0
    3ec2:	ee e4       	ldi	r30, 0x4E	; 78
    3ec4:	f0 e0       	ldi	r31, 0x00	; 0
    3ec6:	80 81       	ld	r24, Z
    3ec8:	8f 7b       	andi	r24, 0xBF	; 191
    3eca:	8c 93       	st	X, r24
    3ecc:	07 c0       	rjmp	.+14     	; 0x3edc <M_TIMER1_void_ICU_trigger_edge+0x4a>
		break;
	case TIMER1_ICU_RISING:
		SET_BIT(TCCR1B_REG, TCCR1B_ICES1_BIT);
    3ece:	ae e4       	ldi	r26, 0x4E	; 78
    3ed0:	b0 e0       	ldi	r27, 0x00	; 0
    3ed2:	ee e4       	ldi	r30, 0x4E	; 78
    3ed4:	f0 e0       	ldi	r31, 0x00	; 0
    3ed6:	80 81       	ld	r24, Z
    3ed8:	80 64       	ori	r24, 0x40	; 64
    3eda:	8c 93       	st	X, r24
		break;
	}
}
    3edc:	0f 90       	pop	r0
    3ede:	0f 90       	pop	r0
    3ee0:	0f 90       	pop	r0
    3ee2:	cf 91       	pop	r28
    3ee4:	df 91       	pop	r29
    3ee6:	08 95       	ret

00003ee8 <M_TIMER1_void_ICU_takeReading>:

u16 M_TIMER1_void_ICU_takeReading(){
    3ee8:	df 93       	push	r29
    3eea:	cf 93       	push	r28
    3eec:	cd b7       	in	r28, 0x3d	; 61
    3eee:	de b7       	in	r29, 0x3e	; 62

	return ICR1_REG;
    3ef0:	e6 e4       	ldi	r30, 0x46	; 70
    3ef2:	f0 e0       	ldi	r31, 0x00	; 0
    3ef4:	80 81       	ld	r24, Z
    3ef6:	91 81       	ldd	r25, Z+1	; 0x01

}
    3ef8:	cf 91       	pop	r28
    3efa:	df 91       	pop	r29
    3efc:	08 95       	ret

00003efe <M_TIMER_void_CallBack>:


//APPLIES for TIMER0, TIMER1, and TIMER2
void M_TIMER_void_CallBack(TIMER_INT_SOURCE_t int_src, void (*localFuncPTR)(void)){
    3efe:	df 93       	push	r29
    3f00:	cf 93       	push	r28
    3f02:	00 d0       	rcall	.+0      	; 0x3f04 <M_TIMER_void_CallBack+0x6>
    3f04:	00 d0       	rcall	.+0      	; 0x3f06 <M_TIMER_void_CallBack+0x8>
    3f06:	0f 92       	push	r0
    3f08:	cd b7       	in	r28, 0x3d	; 61
    3f0a:	de b7       	in	r29, 0x3e	; 62
    3f0c:	89 83       	std	Y+1, r24	; 0x01
    3f0e:	7b 83       	std	Y+3, r23	; 0x03
    3f10:	6a 83       	std	Y+2, r22	; 0x02

	switch(int_src){
    3f12:	89 81       	ldd	r24, Y+1	; 0x01
    3f14:	28 2f       	mov	r18, r24
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	3d 83       	std	Y+5, r19	; 0x05
    3f1a:	2c 83       	std	Y+4, r18	; 0x04
    3f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    3f1e:	9d 81       	ldd	r25, Y+5	; 0x05
    3f20:	81 30       	cpi	r24, 0x01	; 1
    3f22:	91 05       	cpc	r25, r1
    3f24:	e1 f0       	breq	.+56     	; 0x3f5e <M_TIMER_void_CallBack+0x60>
    3f26:	2c 81       	ldd	r18, Y+4	; 0x04
    3f28:	3d 81       	ldd	r19, Y+5	; 0x05
    3f2a:	22 30       	cpi	r18, 0x02	; 2
    3f2c:	31 05       	cpc	r19, r1
    3f2e:	2c f4       	brge	.+10     	; 0x3f3a <M_TIMER_void_CallBack+0x3c>
    3f30:	8c 81       	ldd	r24, Y+4	; 0x04
    3f32:	9d 81       	ldd	r25, Y+5	; 0x05
    3f34:	00 97       	sbiw	r24, 0x00	; 0
    3f36:	61 f0       	breq	.+24     	; 0x3f50 <M_TIMER_void_CallBack+0x52>
    3f38:	26 c0       	rjmp	.+76     	; 0x3f86 <M_TIMER_void_CallBack+0x88>
    3f3a:	2c 81       	ldd	r18, Y+4	; 0x04
    3f3c:	3d 81       	ldd	r19, Y+5	; 0x05
    3f3e:	22 30       	cpi	r18, 0x02	; 2
    3f40:	31 05       	cpc	r19, r1
    3f42:	d9 f0       	breq	.+54     	; 0x3f7a <M_TIMER_void_CallBack+0x7c>
    3f44:	8c 81       	ldd	r24, Y+4	; 0x04
    3f46:	9d 81       	ldd	r25, Y+5	; 0x05
    3f48:	85 30       	cpi	r24, 0x05	; 5
    3f4a:	91 05       	cpc	r25, r1
    3f4c:	79 f0       	breq	.+30     	; 0x3f6c <M_TIMER_void_CallBack+0x6e>
    3f4e:	1b c0       	rjmp	.+54     	; 0x3f86 <M_TIMER_void_CallBack+0x88>
	case TIMER0_OVERFLOW:
		TIMER0_OVERFLOW_PTR = localFuncPTR;
    3f50:	8a 81       	ldd	r24, Y+2	; 0x02
    3f52:	9b 81       	ldd	r25, Y+3	; 0x03
    3f54:	90 93 6a 03 	sts	0x036A, r25
    3f58:	80 93 69 03 	sts	0x0369, r24
    3f5c:	14 c0       	rjmp	.+40     	; 0x3f86 <M_TIMER_void_CallBack+0x88>
		break;
	case TIMER0_ON_COMP:
		TIMER0_ON_COMP_PTR = localFuncPTR;
    3f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f60:	9b 81       	ldd	r25, Y+3	; 0x03
    3f62:	90 93 6c 03 	sts	0x036C, r25
    3f66:	80 93 6b 03 	sts	0x036B, r24
    3f6a:	0d c0       	rjmp	.+26     	; 0x3f86 <M_TIMER_void_CallBack+0x88>
		break;
	case TIMER1_CAPT:
		TIMER1_CAPT_PTR = localFuncPTR;
    3f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    3f70:	90 93 74 03 	sts	0x0374, r25
    3f74:	80 93 73 03 	sts	0x0373, r24
    3f78:	06 c0       	rjmp	.+12     	; 0x3f86 <M_TIMER_void_CallBack+0x88>
		break;
	case TIMER1_OVERFLOW:
		TIMER1_OVERFLOW_PTR = localFuncPTR;
    3f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3f7e:	90 93 6e 03 	sts	0x036E, r25
    3f82:	80 93 6d 03 	sts	0x036D, r24
		break;
	}

}
    3f86:	0f 90       	pop	r0
    3f88:	0f 90       	pop	r0
    3f8a:	0f 90       	pop	r0
    3f8c:	0f 90       	pop	r0
    3f8e:	0f 90       	pop	r0
    3f90:	cf 91       	pop	r28
    3f92:	df 91       	pop	r29
    3f94:	08 95       	ret

00003f96 <M_TIMER_void_EnableINT>:


void M_TIMER_void_EnableINT(TIMER_INT_SOURCE_t int_src){
    3f96:	df 93       	push	r29
    3f98:	cf 93       	push	r28
    3f9a:	00 d0       	rcall	.+0      	; 0x3f9c <M_TIMER_void_EnableINT+0x6>
    3f9c:	0f 92       	push	r0
    3f9e:	cd b7       	in	r28, 0x3d	; 61
    3fa0:	de b7       	in	r29, 0x3e	; 62
    3fa2:	89 83       	std	Y+1, r24	; 0x01
	switch(int_src){
    3fa4:	89 81       	ldd	r24, Y+1	; 0x01
    3fa6:	28 2f       	mov	r18, r24
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	3b 83       	std	Y+3, r19	; 0x03
    3fac:	2a 83       	std	Y+2, r18	; 0x02
    3fae:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb0:	9b 81       	ldd	r25, Y+3	; 0x03
    3fb2:	83 30       	cpi	r24, 0x03	; 3
    3fb4:	91 05       	cpc	r25, r1
    3fb6:	09 f4       	brne	.+2      	; 0x3fba <M_TIMER_void_EnableINT+0x24>
    3fb8:	41 c0       	rjmp	.+130    	; 0x403c <M_TIMER_void_EnableINT+0xa6>
    3fba:	2a 81       	ldd	r18, Y+2	; 0x02
    3fbc:	3b 81       	ldd	r19, Y+3	; 0x03
    3fbe:	24 30       	cpi	r18, 0x04	; 4
    3fc0:	31 05       	cpc	r19, r1
    3fc2:	7c f4       	brge	.+30     	; 0x3fe2 <M_TIMER_void_EnableINT+0x4c>
    3fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    3fc8:	81 30       	cpi	r24, 0x01	; 1
    3fca:	91 05       	cpc	r25, r1
    3fcc:	39 f1       	breq	.+78     	; 0x401c <M_TIMER_void_EnableINT+0x86>
    3fce:	2a 81       	ldd	r18, Y+2	; 0x02
    3fd0:	3b 81       	ldd	r19, Y+3	; 0x03
    3fd2:	22 30       	cpi	r18, 0x02	; 2
    3fd4:	31 05       	cpc	r19, r1
    3fd6:	54 f5       	brge	.+84     	; 0x402c <M_TIMER_void_EnableINT+0x96>
    3fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    3fda:	9b 81       	ldd	r25, Y+3	; 0x03
    3fdc:	00 97       	sbiw	r24, 0x00	; 0
    3fde:	b1 f0       	breq	.+44     	; 0x400c <M_TIMER_void_EnableINT+0x76>
    3fe0:	54 c0       	rjmp	.+168    	; 0x408a <M_TIMER_void_EnableINT+0xf4>
    3fe2:	2a 81       	ldd	r18, Y+2	; 0x02
    3fe4:	3b 81       	ldd	r19, Y+3	; 0x03
    3fe6:	25 30       	cpi	r18, 0x05	; 5
    3fe8:	31 05       	cpc	r19, r1
    3fea:	c1 f1       	breq	.+112    	; 0x405c <M_TIMER_void_EnableINT+0xc6>
    3fec:	8a 81       	ldd	r24, Y+2	; 0x02
    3fee:	9b 81       	ldd	r25, Y+3	; 0x03
    3ff0:	85 30       	cpi	r24, 0x05	; 5
    3ff2:	91 05       	cpc	r25, r1
    3ff4:	5c f1       	brlt	.+86     	; 0x404c <M_TIMER_void_EnableINT+0xb6>
    3ff6:	2a 81       	ldd	r18, Y+2	; 0x02
    3ff8:	3b 81       	ldd	r19, Y+3	; 0x03
    3ffa:	26 30       	cpi	r18, 0x06	; 6
    3ffc:	31 05       	cpc	r19, r1
    3ffe:	b1 f1       	breq	.+108    	; 0x406c <M_TIMER_void_EnableINT+0xd6>
    4000:	8a 81       	ldd	r24, Y+2	; 0x02
    4002:	9b 81       	ldd	r25, Y+3	; 0x03
    4004:	87 30       	cpi	r24, 0x07	; 7
    4006:	91 05       	cpc	r25, r1
    4008:	c9 f1       	breq	.+114    	; 0x407c <M_TIMER_void_EnableINT+0xe6>
    400a:	3f c0       	rjmp	.+126    	; 0x408a <M_TIMER_void_EnableINT+0xf4>
	case TIMER0_OVERFLOW:
		SET_BIT(TIMSK_REG,TIMSK_TOIE0_BIT);
    400c:	a9 e5       	ldi	r26, 0x59	; 89
    400e:	b0 e0       	ldi	r27, 0x00	; 0
    4010:	e9 e5       	ldi	r30, 0x59	; 89
    4012:	f0 e0       	ldi	r31, 0x00	; 0
    4014:	80 81       	ld	r24, Z
    4016:	81 60       	ori	r24, 0x01	; 1
    4018:	8c 93       	st	X, r24
    401a:	37 c0       	rjmp	.+110    	; 0x408a <M_TIMER_void_EnableINT+0xf4>
		break;
	case TIMER0_ON_COMP:
		SET_BIT(TIMSK_REG,TIMSK_OCIE0_BIT);
    401c:	a9 e5       	ldi	r26, 0x59	; 89
    401e:	b0 e0       	ldi	r27, 0x00	; 0
    4020:	e9 e5       	ldi	r30, 0x59	; 89
    4022:	f0 e0       	ldi	r31, 0x00	; 0
    4024:	80 81       	ld	r24, Z
    4026:	82 60       	ori	r24, 0x02	; 2
    4028:	8c 93       	st	X, r24
    402a:	2f c0       	rjmp	.+94     	; 0x408a <M_TIMER_void_EnableINT+0xf4>
		break;
	case TIMER1_OVERFLOW:
		SET_BIT(TIMSK_REG,TIMSK_TOIE1_BIT);
    402c:	a9 e5       	ldi	r26, 0x59	; 89
    402e:	b0 e0       	ldi	r27, 0x00	; 0
    4030:	e9 e5       	ldi	r30, 0x59	; 89
    4032:	f0 e0       	ldi	r31, 0x00	; 0
    4034:	80 81       	ld	r24, Z
    4036:	84 60       	ori	r24, 0x04	; 4
    4038:	8c 93       	st	X, r24
    403a:	27 c0       	rjmp	.+78     	; 0x408a <M_TIMER_void_EnableINT+0xf4>
		break;
	case TIMER1_ON_COMP_A:
		SET_BIT(TIMSK_REG,TIMSK_OCIE1A_BIT);
    403c:	a9 e5       	ldi	r26, 0x59	; 89
    403e:	b0 e0       	ldi	r27, 0x00	; 0
    4040:	e9 e5       	ldi	r30, 0x59	; 89
    4042:	f0 e0       	ldi	r31, 0x00	; 0
    4044:	80 81       	ld	r24, Z
    4046:	80 61       	ori	r24, 0x10	; 16
    4048:	8c 93       	st	X, r24
    404a:	1f c0       	rjmp	.+62     	; 0x408a <M_TIMER_void_EnableINT+0xf4>
		break;
	case TIMER1_ON_COMP_B:
		SET_BIT(TIMSK_REG,TIMSK_OCIE1B_BIT);
    404c:	a9 e5       	ldi	r26, 0x59	; 89
    404e:	b0 e0       	ldi	r27, 0x00	; 0
    4050:	e9 e5       	ldi	r30, 0x59	; 89
    4052:	f0 e0       	ldi	r31, 0x00	; 0
    4054:	80 81       	ld	r24, Z
    4056:	88 60       	ori	r24, 0x08	; 8
    4058:	8c 93       	st	X, r24
    405a:	17 c0       	rjmp	.+46     	; 0x408a <M_TIMER_void_EnableINT+0xf4>
		break;
	case TIMER1_CAPT:
		SET_BIT(TIMSK_REG,TIMSK_TICIE1_BIT);
    405c:	a9 e5       	ldi	r26, 0x59	; 89
    405e:	b0 e0       	ldi	r27, 0x00	; 0
    4060:	e9 e5       	ldi	r30, 0x59	; 89
    4062:	f0 e0       	ldi	r31, 0x00	; 0
    4064:	80 81       	ld	r24, Z
    4066:	80 62       	ori	r24, 0x20	; 32
    4068:	8c 93       	st	X, r24
    406a:	0f c0       	rjmp	.+30     	; 0x408a <M_TIMER_void_EnableINT+0xf4>
		break;
	case TIMER2_OVERFLOW:
		SET_BIT(TIMSK_REG,TIMSK_TOIE2_BIT);
    406c:	a9 e5       	ldi	r26, 0x59	; 89
    406e:	b0 e0       	ldi	r27, 0x00	; 0
    4070:	e9 e5       	ldi	r30, 0x59	; 89
    4072:	f0 e0       	ldi	r31, 0x00	; 0
    4074:	80 81       	ld	r24, Z
    4076:	80 64       	ori	r24, 0x40	; 64
    4078:	8c 93       	st	X, r24
    407a:	07 c0       	rjmp	.+14     	; 0x408a <M_TIMER_void_EnableINT+0xf4>
		break;
	case TIMER2_ON_COMP:
		SET_BIT(TIMSK_REG,TIMSK_OCIE2_BIT);
    407c:	a9 e5       	ldi	r26, 0x59	; 89
    407e:	b0 e0       	ldi	r27, 0x00	; 0
    4080:	e9 e5       	ldi	r30, 0x59	; 89
    4082:	f0 e0       	ldi	r31, 0x00	; 0
    4084:	80 81       	ld	r24, Z
    4086:	80 68       	ori	r24, 0x80	; 128
    4088:	8c 93       	st	X, r24
		break;
	}
}
    408a:	0f 90       	pop	r0
    408c:	0f 90       	pop	r0
    408e:	0f 90       	pop	r0
    4090:	cf 91       	pop	r28
    4092:	df 91       	pop	r29
    4094:	08 95       	ret

00004096 <M_TIMER_void_DisableINT>:

void M_TIMER_void_DisableINT(TIMER_INT_SOURCE_t int_src){
    4096:	df 93       	push	r29
    4098:	cf 93       	push	r28
    409a:	00 d0       	rcall	.+0      	; 0x409c <M_TIMER_void_DisableINT+0x6>
    409c:	0f 92       	push	r0
    409e:	cd b7       	in	r28, 0x3d	; 61
    40a0:	de b7       	in	r29, 0x3e	; 62
    40a2:	89 83       	std	Y+1, r24	; 0x01

	switch(int_src){
    40a4:	89 81       	ldd	r24, Y+1	; 0x01
    40a6:	28 2f       	mov	r18, r24
    40a8:	30 e0       	ldi	r19, 0x00	; 0
    40aa:	3b 83       	std	Y+3, r19	; 0x03
    40ac:	2a 83       	std	Y+2, r18	; 0x02
    40ae:	8a 81       	ldd	r24, Y+2	; 0x02
    40b0:	9b 81       	ldd	r25, Y+3	; 0x03
    40b2:	83 30       	cpi	r24, 0x03	; 3
    40b4:	91 05       	cpc	r25, r1
    40b6:	09 f4       	brne	.+2      	; 0x40ba <M_TIMER_void_DisableINT+0x24>
    40b8:	41 c0       	rjmp	.+130    	; 0x413c <M_TIMER_void_DisableINT+0xa6>
    40ba:	2a 81       	ldd	r18, Y+2	; 0x02
    40bc:	3b 81       	ldd	r19, Y+3	; 0x03
    40be:	24 30       	cpi	r18, 0x04	; 4
    40c0:	31 05       	cpc	r19, r1
    40c2:	7c f4       	brge	.+30     	; 0x40e2 <M_TIMER_void_DisableINT+0x4c>
    40c4:	8a 81       	ldd	r24, Y+2	; 0x02
    40c6:	9b 81       	ldd	r25, Y+3	; 0x03
    40c8:	81 30       	cpi	r24, 0x01	; 1
    40ca:	91 05       	cpc	r25, r1
    40cc:	39 f1       	breq	.+78     	; 0x411c <M_TIMER_void_DisableINT+0x86>
    40ce:	2a 81       	ldd	r18, Y+2	; 0x02
    40d0:	3b 81       	ldd	r19, Y+3	; 0x03
    40d2:	22 30       	cpi	r18, 0x02	; 2
    40d4:	31 05       	cpc	r19, r1
    40d6:	54 f5       	brge	.+84     	; 0x412c <M_TIMER_void_DisableINT+0x96>
    40d8:	8a 81       	ldd	r24, Y+2	; 0x02
    40da:	9b 81       	ldd	r25, Y+3	; 0x03
    40dc:	00 97       	sbiw	r24, 0x00	; 0
    40de:	b1 f0       	breq	.+44     	; 0x410c <M_TIMER_void_DisableINT+0x76>
    40e0:	54 c0       	rjmp	.+168    	; 0x418a <M_TIMER_void_DisableINT+0xf4>
    40e2:	2a 81       	ldd	r18, Y+2	; 0x02
    40e4:	3b 81       	ldd	r19, Y+3	; 0x03
    40e6:	25 30       	cpi	r18, 0x05	; 5
    40e8:	31 05       	cpc	r19, r1
    40ea:	c1 f1       	breq	.+112    	; 0x415c <M_TIMER_void_DisableINT+0xc6>
    40ec:	8a 81       	ldd	r24, Y+2	; 0x02
    40ee:	9b 81       	ldd	r25, Y+3	; 0x03
    40f0:	85 30       	cpi	r24, 0x05	; 5
    40f2:	91 05       	cpc	r25, r1
    40f4:	5c f1       	brlt	.+86     	; 0x414c <M_TIMER_void_DisableINT+0xb6>
    40f6:	2a 81       	ldd	r18, Y+2	; 0x02
    40f8:	3b 81       	ldd	r19, Y+3	; 0x03
    40fa:	26 30       	cpi	r18, 0x06	; 6
    40fc:	31 05       	cpc	r19, r1
    40fe:	b1 f1       	breq	.+108    	; 0x416c <M_TIMER_void_DisableINT+0xd6>
    4100:	8a 81       	ldd	r24, Y+2	; 0x02
    4102:	9b 81       	ldd	r25, Y+3	; 0x03
    4104:	87 30       	cpi	r24, 0x07	; 7
    4106:	91 05       	cpc	r25, r1
    4108:	c9 f1       	breq	.+114    	; 0x417c <M_TIMER_void_DisableINT+0xe6>
    410a:	3f c0       	rjmp	.+126    	; 0x418a <M_TIMER_void_DisableINT+0xf4>
		case TIMER0_OVERFLOW:
			CLR_BIT(TIMSK_REG,TIMSK_TOIE0_BIT);
    410c:	a9 e5       	ldi	r26, 0x59	; 89
    410e:	b0 e0       	ldi	r27, 0x00	; 0
    4110:	e9 e5       	ldi	r30, 0x59	; 89
    4112:	f0 e0       	ldi	r31, 0x00	; 0
    4114:	80 81       	ld	r24, Z
    4116:	8e 7f       	andi	r24, 0xFE	; 254
    4118:	8c 93       	st	X, r24
    411a:	37 c0       	rjmp	.+110    	; 0x418a <M_TIMER_void_DisableINT+0xf4>
			break;
		case TIMER0_ON_COMP:
			CLR_BIT(TIMSK_REG,TIMSK_OCIE0_BIT);
    411c:	a9 e5       	ldi	r26, 0x59	; 89
    411e:	b0 e0       	ldi	r27, 0x00	; 0
    4120:	e9 e5       	ldi	r30, 0x59	; 89
    4122:	f0 e0       	ldi	r31, 0x00	; 0
    4124:	80 81       	ld	r24, Z
    4126:	8d 7f       	andi	r24, 0xFD	; 253
    4128:	8c 93       	st	X, r24
    412a:	2f c0       	rjmp	.+94     	; 0x418a <M_TIMER_void_DisableINT+0xf4>
			break;
		case TIMER1_OVERFLOW:
			CLR_BIT(TIMSK_REG,TIMSK_TOIE1_BIT);
    412c:	a9 e5       	ldi	r26, 0x59	; 89
    412e:	b0 e0       	ldi	r27, 0x00	; 0
    4130:	e9 e5       	ldi	r30, 0x59	; 89
    4132:	f0 e0       	ldi	r31, 0x00	; 0
    4134:	80 81       	ld	r24, Z
    4136:	8b 7f       	andi	r24, 0xFB	; 251
    4138:	8c 93       	st	X, r24
    413a:	27 c0       	rjmp	.+78     	; 0x418a <M_TIMER_void_DisableINT+0xf4>
			break;
		case TIMER1_ON_COMP_A:
			CLR_BIT(TIMSK_REG,TIMSK_OCIE1A_BIT);
    413c:	a9 e5       	ldi	r26, 0x59	; 89
    413e:	b0 e0       	ldi	r27, 0x00	; 0
    4140:	e9 e5       	ldi	r30, 0x59	; 89
    4142:	f0 e0       	ldi	r31, 0x00	; 0
    4144:	80 81       	ld	r24, Z
    4146:	8f 7e       	andi	r24, 0xEF	; 239
    4148:	8c 93       	st	X, r24
    414a:	1f c0       	rjmp	.+62     	; 0x418a <M_TIMER_void_DisableINT+0xf4>
			break;
		case TIMER1_ON_COMP_B:
			CLR_BIT(TIMSK_REG,TIMSK_OCIE1B_BIT);
    414c:	a9 e5       	ldi	r26, 0x59	; 89
    414e:	b0 e0       	ldi	r27, 0x00	; 0
    4150:	e9 e5       	ldi	r30, 0x59	; 89
    4152:	f0 e0       	ldi	r31, 0x00	; 0
    4154:	80 81       	ld	r24, Z
    4156:	87 7f       	andi	r24, 0xF7	; 247
    4158:	8c 93       	st	X, r24
    415a:	17 c0       	rjmp	.+46     	; 0x418a <M_TIMER_void_DisableINT+0xf4>
			break;
		case TIMER1_CAPT:
			CLR_BIT(TIMSK_REG,TIMSK_TICIE1_BIT);
    415c:	a9 e5       	ldi	r26, 0x59	; 89
    415e:	b0 e0       	ldi	r27, 0x00	; 0
    4160:	e9 e5       	ldi	r30, 0x59	; 89
    4162:	f0 e0       	ldi	r31, 0x00	; 0
    4164:	80 81       	ld	r24, Z
    4166:	8f 7d       	andi	r24, 0xDF	; 223
    4168:	8c 93       	st	X, r24
    416a:	0f c0       	rjmp	.+30     	; 0x418a <M_TIMER_void_DisableINT+0xf4>
			break;
		case TIMER2_OVERFLOW:
			CLR_BIT(TIMSK_REG,TIMSK_TOIE2_BIT);
    416c:	a9 e5       	ldi	r26, 0x59	; 89
    416e:	b0 e0       	ldi	r27, 0x00	; 0
    4170:	e9 e5       	ldi	r30, 0x59	; 89
    4172:	f0 e0       	ldi	r31, 0x00	; 0
    4174:	80 81       	ld	r24, Z
    4176:	8f 7b       	andi	r24, 0xBF	; 191
    4178:	8c 93       	st	X, r24
    417a:	07 c0       	rjmp	.+14     	; 0x418a <M_TIMER_void_DisableINT+0xf4>
			break;
		case TIMER2_ON_COMP:
			CLR_BIT(TIMSK_REG,TIMSK_OCIE2_BIT);
    417c:	a9 e5       	ldi	r26, 0x59	; 89
    417e:	b0 e0       	ldi	r27, 0x00	; 0
    4180:	e9 e5       	ldi	r30, 0x59	; 89
    4182:	f0 e0       	ldi	r31, 0x00	; 0
    4184:	80 81       	ld	r24, Z
    4186:	8f 77       	andi	r24, 0x7F	; 127
    4188:	8c 93       	st	X, r24
			break;
		}
}
    418a:	0f 90       	pop	r0
    418c:	0f 90       	pop	r0
    418e:	0f 90       	pop	r0
    4190:	cf 91       	pop	r28
    4192:	df 91       	pop	r29
    4194:	08 95       	ret

00004196 <__vector_11>:


/* _________________________ISR____________________________ */


ISR(TIMER0_OVF_vect){
    4196:	1f 92       	push	r1
    4198:	0f 92       	push	r0
    419a:	0f b6       	in	r0, 0x3f	; 63
    419c:	0f 92       	push	r0
    419e:	11 24       	eor	r1, r1
    41a0:	2f 93       	push	r18
    41a2:	3f 93       	push	r19
    41a4:	4f 93       	push	r20
    41a6:	5f 93       	push	r21
    41a8:	6f 93       	push	r22
    41aa:	7f 93       	push	r23
    41ac:	8f 93       	push	r24
    41ae:	9f 93       	push	r25
    41b0:	af 93       	push	r26
    41b2:	bf 93       	push	r27
    41b4:	ef 93       	push	r30
    41b6:	ff 93       	push	r31
    41b8:	df 93       	push	r29
    41ba:	cf 93       	push	r28
    41bc:	cd b7       	in	r28, 0x3d	; 61
    41be:	de b7       	in	r29, 0x3e	; 62

	if(TIMER0_OVERFLOW_PTR != NULL){
    41c0:	80 91 69 03 	lds	r24, 0x0369
    41c4:	90 91 6a 03 	lds	r25, 0x036A
    41c8:	00 97       	sbiw	r24, 0x00	; 0
    41ca:	29 f0       	breq	.+10     	; 0x41d6 <__vector_11+0x40>
		TIMER0_OVERFLOW_PTR();
    41cc:	e0 91 69 03 	lds	r30, 0x0369
    41d0:	f0 91 6a 03 	lds	r31, 0x036A
    41d4:	09 95       	icall
	}

}
    41d6:	cf 91       	pop	r28
    41d8:	df 91       	pop	r29
    41da:	ff 91       	pop	r31
    41dc:	ef 91       	pop	r30
    41de:	bf 91       	pop	r27
    41e0:	af 91       	pop	r26
    41e2:	9f 91       	pop	r25
    41e4:	8f 91       	pop	r24
    41e6:	7f 91       	pop	r23
    41e8:	6f 91       	pop	r22
    41ea:	5f 91       	pop	r21
    41ec:	4f 91       	pop	r20
    41ee:	3f 91       	pop	r19
    41f0:	2f 91       	pop	r18
    41f2:	0f 90       	pop	r0
    41f4:	0f be       	out	0x3f, r0	; 63
    41f6:	0f 90       	pop	r0
    41f8:	1f 90       	pop	r1
    41fa:	18 95       	reti

000041fc <__vector_10>:


ISR(TIMER0_COMP_vect){
    41fc:	1f 92       	push	r1
    41fe:	0f 92       	push	r0
    4200:	0f b6       	in	r0, 0x3f	; 63
    4202:	0f 92       	push	r0
    4204:	11 24       	eor	r1, r1
    4206:	2f 93       	push	r18
    4208:	3f 93       	push	r19
    420a:	4f 93       	push	r20
    420c:	5f 93       	push	r21
    420e:	6f 93       	push	r22
    4210:	7f 93       	push	r23
    4212:	8f 93       	push	r24
    4214:	9f 93       	push	r25
    4216:	af 93       	push	r26
    4218:	bf 93       	push	r27
    421a:	ef 93       	push	r30
    421c:	ff 93       	push	r31
    421e:	df 93       	push	r29
    4220:	cf 93       	push	r28
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62

	if(TIMER0_ON_COMP_PTR != NULL){
    4226:	80 91 6b 03 	lds	r24, 0x036B
    422a:	90 91 6c 03 	lds	r25, 0x036C
    422e:	00 97       	sbiw	r24, 0x00	; 0
    4230:	29 f0       	breq	.+10     	; 0x423c <__vector_10+0x40>
		TIMER0_ON_COMP_PTR();
    4232:	e0 91 6b 03 	lds	r30, 0x036B
    4236:	f0 91 6c 03 	lds	r31, 0x036C
    423a:	09 95       	icall
	}

}
    423c:	cf 91       	pop	r28
    423e:	df 91       	pop	r29
    4240:	ff 91       	pop	r31
    4242:	ef 91       	pop	r30
    4244:	bf 91       	pop	r27
    4246:	af 91       	pop	r26
    4248:	9f 91       	pop	r25
    424a:	8f 91       	pop	r24
    424c:	7f 91       	pop	r23
    424e:	6f 91       	pop	r22
    4250:	5f 91       	pop	r21
    4252:	4f 91       	pop	r20
    4254:	3f 91       	pop	r19
    4256:	2f 91       	pop	r18
    4258:	0f 90       	pop	r0
    425a:	0f be       	out	0x3f, r0	; 63
    425c:	0f 90       	pop	r0
    425e:	1f 90       	pop	r1
    4260:	18 95       	reti

00004262 <__vector_6>:

ISR(TIMER1_CAPT_vect){
    4262:	1f 92       	push	r1
    4264:	0f 92       	push	r0
    4266:	0f b6       	in	r0, 0x3f	; 63
    4268:	0f 92       	push	r0
    426a:	11 24       	eor	r1, r1
    426c:	2f 93       	push	r18
    426e:	3f 93       	push	r19
    4270:	4f 93       	push	r20
    4272:	5f 93       	push	r21
    4274:	6f 93       	push	r22
    4276:	7f 93       	push	r23
    4278:	8f 93       	push	r24
    427a:	9f 93       	push	r25
    427c:	af 93       	push	r26
    427e:	bf 93       	push	r27
    4280:	ef 93       	push	r30
    4282:	ff 93       	push	r31
    4284:	df 93       	push	r29
    4286:	cf 93       	push	r28
    4288:	cd b7       	in	r28, 0x3d	; 61
    428a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER1_CAPT_PTR != NULL){
    428c:	80 91 73 03 	lds	r24, 0x0373
    4290:	90 91 74 03 	lds	r25, 0x0374
    4294:	00 97       	sbiw	r24, 0x00	; 0
    4296:	29 f0       	breq	.+10     	; 0x42a2 <__vector_6+0x40>
		TIMER1_CAPT_PTR();
    4298:	e0 91 73 03 	lds	r30, 0x0373
    429c:	f0 91 74 03 	lds	r31, 0x0374
    42a0:	09 95       	icall
	}

}
    42a2:	cf 91       	pop	r28
    42a4:	df 91       	pop	r29
    42a6:	ff 91       	pop	r31
    42a8:	ef 91       	pop	r30
    42aa:	bf 91       	pop	r27
    42ac:	af 91       	pop	r26
    42ae:	9f 91       	pop	r25
    42b0:	8f 91       	pop	r24
    42b2:	7f 91       	pop	r23
    42b4:	6f 91       	pop	r22
    42b6:	5f 91       	pop	r21
    42b8:	4f 91       	pop	r20
    42ba:	3f 91       	pop	r19
    42bc:	2f 91       	pop	r18
    42be:	0f 90       	pop	r0
    42c0:	0f be       	out	0x3f, r0	; 63
    42c2:	0f 90       	pop	r0
    42c4:	1f 90       	pop	r1
    42c6:	18 95       	reti

000042c8 <__vector_9>:

ISR(TIMER1_OVF_vect){
    42c8:	1f 92       	push	r1
    42ca:	0f 92       	push	r0
    42cc:	0f b6       	in	r0, 0x3f	; 63
    42ce:	0f 92       	push	r0
    42d0:	11 24       	eor	r1, r1
    42d2:	2f 93       	push	r18
    42d4:	3f 93       	push	r19
    42d6:	4f 93       	push	r20
    42d8:	5f 93       	push	r21
    42da:	6f 93       	push	r22
    42dc:	7f 93       	push	r23
    42de:	8f 93       	push	r24
    42e0:	9f 93       	push	r25
    42e2:	af 93       	push	r26
    42e4:	bf 93       	push	r27
    42e6:	ef 93       	push	r30
    42e8:	ff 93       	push	r31
    42ea:	df 93       	push	r29
    42ec:	cf 93       	push	r28
    42ee:	cd b7       	in	r28, 0x3d	; 61
    42f0:	de b7       	in	r29, 0x3e	; 62

	if(TIMER1_OVERFLOW_PTR != NULL){
    42f2:	80 91 6d 03 	lds	r24, 0x036D
    42f6:	90 91 6e 03 	lds	r25, 0x036E
    42fa:	00 97       	sbiw	r24, 0x00	; 0
    42fc:	29 f0       	breq	.+10     	; 0x4308 <__vector_9+0x40>
		TIMER1_OVERFLOW_PTR();
    42fe:	e0 91 6d 03 	lds	r30, 0x036D
    4302:	f0 91 6e 03 	lds	r31, 0x036E
    4306:	09 95       	icall
	}

}
    4308:	cf 91       	pop	r28
    430a:	df 91       	pop	r29
    430c:	ff 91       	pop	r31
    430e:	ef 91       	pop	r30
    4310:	bf 91       	pop	r27
    4312:	af 91       	pop	r26
    4314:	9f 91       	pop	r25
    4316:	8f 91       	pop	r24
    4318:	7f 91       	pop	r23
    431a:	6f 91       	pop	r22
    431c:	5f 91       	pop	r21
    431e:	4f 91       	pop	r20
    4320:	3f 91       	pop	r19
    4322:	2f 91       	pop	r18
    4324:	0f 90       	pop	r0
    4326:	0f be       	out	0x3f, r0	; 63
    4328:	0f 90       	pop	r0
    432a:	1f 90       	pop	r1
    432c:	18 95       	reti

0000432e <M_PORT_voidInit>:
#include "BIT_MATH.h"
#include "Port_int.h"
#include "Port_cfg.h"
#include "Mcu_HW.h"
void M_PORT_voidInit(const Port_Configtype * ConfigPtr)
{
    432e:	df 93       	push	r29
    4330:	cf 93       	push	r28
    4332:	cd b7       	in	r28, 0x3d	; 61
    4334:	de b7       	in	r29, 0x3e	; 62
    4336:	27 97       	sbiw	r28, 0x07	; 7
    4338:	0f b6       	in	r0, 0x3f	; 63
    433a:	f8 94       	cli
    433c:	de bf       	out	0x3e, r29	; 62
    433e:	0f be       	out	0x3f, r0	; 63
    4340:	cd bf       	out	0x3d, r28	; 61
    4342:	9d 83       	std	Y+5, r25	; 0x05
    4344:	8c 83       	std	Y+4, r24	; 0x04
	/* Check the pointer is not equal NULL */
	if(ConfigPtr != NULL )
    4346:	8c 81       	ldd	r24, Y+4	; 0x04
    4348:	9d 81       	ldd	r25, Y+5	; 0x05
    434a:	00 97       	sbiw	r24, 0x00	; 0
    434c:	09 f4       	brne	.+2      	; 0x4350 <M_PORT_voidInit+0x22>
    434e:	bd c3       	rjmp	.+1914   	; 0x4aca <M_PORT_voidInit+0x79c>
	{
		u8 Local_u8Pin;
		u8 Local_u8Port;
		u8 Local_u8Counter;
		for(Local_u8Counter = 0;Local_u8Counter<PORT_PINS_CONFIG_ARR_SIZE;Local_u8Counter++)
    4350:	19 82       	std	Y+1, r1	; 0x01
    4352:	b7 c3       	rjmp	.+1902   	; 0x4ac2 <M_PORT_voidInit+0x794>
		{
			Local_u8Pin  = ((ConfigPtr[Local_u8Counter].PinNumber)%10);
    4354:	89 81       	ldd	r24, Y+1	; 0x01
    4356:	88 2f       	mov	r24, r24
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	9c 01       	movw	r18, r24
    435c:	22 0f       	add	r18, r18
    435e:	33 1f       	adc	r19, r19
    4360:	22 0f       	add	r18, r18
    4362:	33 1f       	adc	r19, r19
    4364:	8c 81       	ldd	r24, Y+4	; 0x04
    4366:	9d 81       	ldd	r25, Y+5	; 0x05
    4368:	fc 01       	movw	r30, r24
    436a:	e2 0f       	add	r30, r18
    436c:	f3 1f       	adc	r31, r19
    436e:	80 81       	ld	r24, Z
    4370:	9a e0       	ldi	r25, 0x0A	; 10
    4372:	69 2f       	mov	r22, r25
    4374:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <__udivmodqi4>
    4378:	89 2f       	mov	r24, r25
    437a:	8b 83       	std	Y+3, r24	; 0x03
			Local_u8Port = ((ConfigPtr[Local_u8Counter].PinNumber)/10);
    437c:	89 81       	ldd	r24, Y+1	; 0x01
    437e:	88 2f       	mov	r24, r24
    4380:	90 e0       	ldi	r25, 0x00	; 0
    4382:	9c 01       	movw	r18, r24
    4384:	22 0f       	add	r18, r18
    4386:	33 1f       	adc	r19, r19
    4388:	22 0f       	add	r18, r18
    438a:	33 1f       	adc	r19, r19
    438c:	8c 81       	ldd	r24, Y+4	; 0x04
    438e:	9d 81       	ldd	r25, Y+5	; 0x05
    4390:	fc 01       	movw	r30, r24
    4392:	e2 0f       	add	r30, r18
    4394:	f3 1f       	adc	r31, r19
    4396:	80 81       	ld	r24, Z
    4398:	9a e0       	ldi	r25, 0x0A	; 10
    439a:	69 2f       	mov	r22, r25
    439c:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <__udivmodqi4>
    43a0:	8a 83       	std	Y+2, r24	; 0x02
			switch(Local_u8Port)
    43a2:	8a 81       	ldd	r24, Y+2	; 0x02
    43a4:	28 2f       	mov	r18, r24
    43a6:	30 e0       	ldi	r19, 0x00	; 0
    43a8:	3f 83       	std	Y+7, r19	; 0x07
    43aa:	2e 83       	std	Y+6, r18	; 0x06
    43ac:	8e 81       	ldd	r24, Y+6	; 0x06
    43ae:	9f 81       	ldd	r25, Y+7	; 0x07
    43b0:	82 30       	cpi	r24, 0x02	; 2
    43b2:	91 05       	cpc	r25, r1
    43b4:	09 f4       	brne	.+2      	; 0x43b8 <M_PORT_voidInit+0x8a>
    43b6:	f3 c0       	rjmp	.+486    	; 0x459e <M_PORT_voidInit+0x270>
    43b8:	2e 81       	ldd	r18, Y+6	; 0x06
    43ba:	3f 81       	ldd	r19, Y+7	; 0x07
    43bc:	23 30       	cpi	r18, 0x03	; 3
    43be:	31 05       	cpc	r19, r1
    43c0:	34 f4       	brge	.+12     	; 0x43ce <M_PORT_voidInit+0xa0>
    43c2:	8e 81       	ldd	r24, Y+6	; 0x06
    43c4:	9f 81       	ldd	r25, Y+7	; 0x07
    43c6:	81 30       	cpi	r24, 0x01	; 1
    43c8:	91 05       	cpc	r25, r1
    43ca:	71 f0       	breq	.+28     	; 0x43e8 <M_PORT_voidInit+0xba>
    43cc:	77 c3       	rjmp	.+1774   	; 0x4abc <M_PORT_voidInit+0x78e>
    43ce:	2e 81       	ldd	r18, Y+6	; 0x06
    43d0:	3f 81       	ldd	r19, Y+7	; 0x07
    43d2:	23 30       	cpi	r18, 0x03	; 3
    43d4:	31 05       	cpc	r19, r1
    43d6:	09 f4       	brne	.+2      	; 0x43da <M_PORT_voidInit+0xac>
    43d8:	bd c1       	rjmp	.+890    	; 0x4754 <M_PORT_voidInit+0x426>
    43da:	8e 81       	ldd	r24, Y+6	; 0x06
    43dc:	9f 81       	ldd	r25, Y+7	; 0x07
    43de:	84 30       	cpi	r24, 0x04	; 4
    43e0:	91 05       	cpc	r25, r1
    43e2:	09 f4       	brne	.+2      	; 0x43e6 <M_PORT_voidInit+0xb8>
    43e4:	92 c2       	rjmp	.+1316   	; 0x490a <M_PORT_voidInit+0x5dc>
    43e6:	6a c3       	rjmp	.+1748   	; 0x4abc <M_PORT_voidInit+0x78e>
			{
			case PORTA :
				/* Set the direction of pin */
				if(ConfigPtr[Local_u8Counter].PinDirection == PORT_OUTPUT)
    43e8:	89 81       	ldd	r24, Y+1	; 0x01
    43ea:	88 2f       	mov	r24, r24
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	9c 01       	movw	r18, r24
    43f0:	22 0f       	add	r18, r18
    43f2:	33 1f       	adc	r19, r19
    43f4:	22 0f       	add	r18, r18
    43f6:	33 1f       	adc	r19, r19
    43f8:	8c 81       	ldd	r24, Y+4	; 0x04
    43fa:	9d 81       	ldd	r25, Y+5	; 0x05
    43fc:	fc 01       	movw	r30, r24
    43fe:	e2 0f       	add	r30, r18
    4400:	f3 1f       	adc	r31, r19
    4402:	82 81       	ldd	r24, Z+2	; 0x02
    4404:	81 30       	cpi	r24, 0x01	; 1
    4406:	09 f0       	breq	.+2      	; 0x440a <M_PORT_voidInit+0xdc>
    4408:	5c c0       	rjmp	.+184    	; 0x44c2 <M_PORT_voidInit+0x194>
				{
					/* Set the output direction by set the bits in DDRA register */
					SET_BIT(DDRA_REG,Local_u8Pin);
    440a:	aa e3       	ldi	r26, 0x3A	; 58
    440c:	b0 e0       	ldi	r27, 0x00	; 0
    440e:	ea e3       	ldi	r30, 0x3A	; 58
    4410:	f0 e0       	ldi	r31, 0x00	; 0
    4412:	80 81       	ld	r24, Z
    4414:	48 2f       	mov	r20, r24
    4416:	8b 81       	ldd	r24, Y+3	; 0x03
    4418:	28 2f       	mov	r18, r24
    441a:	30 e0       	ldi	r19, 0x00	; 0
    441c:	81 e0       	ldi	r24, 0x01	; 1
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	02 c0       	rjmp	.+4      	; 0x4426 <M_PORT_voidInit+0xf8>
    4422:	88 0f       	add	r24, r24
    4424:	99 1f       	adc	r25, r25
    4426:	2a 95       	dec	r18
    4428:	e2 f7       	brpl	.-8      	; 0x4422 <M_PORT_voidInit+0xf4>
    442a:	84 2b       	or	r24, r20
    442c:	8c 93       	st	X, r24
					/* Set the Initial Value in PORTA register */
					if(ConfigPtr[Local_u8Counter].InitialValue == PORT_HIGH)
    442e:	89 81       	ldd	r24, Y+1	; 0x01
    4430:	88 2f       	mov	r24, r24
    4432:	90 e0       	ldi	r25, 0x00	; 0
    4434:	9c 01       	movw	r18, r24
    4436:	22 0f       	add	r18, r18
    4438:	33 1f       	adc	r19, r19
    443a:	22 0f       	add	r18, r18
    443c:	33 1f       	adc	r19, r19
    443e:	8c 81       	ldd	r24, Y+4	; 0x04
    4440:	9d 81       	ldd	r25, Y+5	; 0x05
    4442:	fc 01       	movw	r30, r24
    4444:	e2 0f       	add	r30, r18
    4446:	f3 1f       	adc	r31, r19
    4448:	81 81       	ldd	r24, Z+1	; 0x01
    444a:	81 30       	cpi	r24, 0x01	; 1
    444c:	a1 f4       	brne	.+40     	; 0x4476 <M_PORT_voidInit+0x148>
					{
						SET_BIT(PORTA_REG,Local_u8Pin);
    444e:	ab e3       	ldi	r26, 0x3B	; 59
    4450:	b0 e0       	ldi	r27, 0x00	; 0
    4452:	eb e3       	ldi	r30, 0x3B	; 59
    4454:	f0 e0       	ldi	r31, 0x00	; 0
    4456:	80 81       	ld	r24, Z
    4458:	48 2f       	mov	r20, r24
    445a:	8b 81       	ldd	r24, Y+3	; 0x03
    445c:	28 2f       	mov	r18, r24
    445e:	30 e0       	ldi	r19, 0x00	; 0
    4460:	81 e0       	ldi	r24, 0x01	; 1
    4462:	90 e0       	ldi	r25, 0x00	; 0
    4464:	02 2e       	mov	r0, r18
    4466:	02 c0       	rjmp	.+4      	; 0x446c <M_PORT_voidInit+0x13e>
    4468:	88 0f       	add	r24, r24
    446a:	99 1f       	adc	r25, r25
    446c:	0a 94       	dec	r0
    446e:	e2 f7       	brpl	.-8      	; 0x4468 <M_PORT_voidInit+0x13a>
    4470:	84 2b       	or	r24, r20
    4472:	8c 93       	st	X, r24
    4474:	23 c3       	rjmp	.+1606   	; 0x4abc <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InitialValue == PORT_LOW)
    4476:	89 81       	ldd	r24, Y+1	; 0x01
    4478:	88 2f       	mov	r24, r24
    447a:	90 e0       	ldi	r25, 0x00	; 0
    447c:	9c 01       	movw	r18, r24
    447e:	22 0f       	add	r18, r18
    4480:	33 1f       	adc	r19, r19
    4482:	22 0f       	add	r18, r18
    4484:	33 1f       	adc	r19, r19
    4486:	8c 81       	ldd	r24, Y+4	; 0x04
    4488:	9d 81       	ldd	r25, Y+5	; 0x05
    448a:	fc 01       	movw	r30, r24
    448c:	e2 0f       	add	r30, r18
    448e:	f3 1f       	adc	r31, r19
    4490:	81 81       	ldd	r24, Z+1	; 0x01
    4492:	88 23       	and	r24, r24
    4494:	09 f0       	breq	.+2      	; 0x4498 <M_PORT_voidInit+0x16a>
    4496:	12 c3       	rjmp	.+1572   	; 0x4abc <M_PORT_voidInit+0x78e>
					{
						CLR_BIT(PORTA_REG,Local_u8Pin);
    4498:	ab e3       	ldi	r26, 0x3B	; 59
    449a:	b0 e0       	ldi	r27, 0x00	; 0
    449c:	eb e3       	ldi	r30, 0x3B	; 59
    449e:	f0 e0       	ldi	r31, 0x00	; 0
    44a0:	80 81       	ld	r24, Z
    44a2:	48 2f       	mov	r20, r24
    44a4:	8b 81       	ldd	r24, Y+3	; 0x03
    44a6:	28 2f       	mov	r18, r24
    44a8:	30 e0       	ldi	r19, 0x00	; 0
    44aa:	81 e0       	ldi	r24, 0x01	; 1
    44ac:	90 e0       	ldi	r25, 0x00	; 0
    44ae:	02 2e       	mov	r0, r18
    44b0:	02 c0       	rjmp	.+4      	; 0x44b6 <M_PORT_voidInit+0x188>
    44b2:	88 0f       	add	r24, r24
    44b4:	99 1f       	adc	r25, r25
    44b6:	0a 94       	dec	r0
    44b8:	e2 f7       	brpl	.-8      	; 0x44b2 <M_PORT_voidInit+0x184>
    44ba:	80 95       	com	r24
    44bc:	84 23       	and	r24, r20
    44be:	8c 93       	st	X, r24
    44c0:	fd c2       	rjmp	.+1530   	; 0x4abc <M_PORT_voidInit+0x78e>
					else
					{
						/* Error */
					}
				}
				else if(ConfigPtr[Local_u8Counter].PinDirection == PORT_INPUT)
    44c2:	89 81       	ldd	r24, Y+1	; 0x01
    44c4:	88 2f       	mov	r24, r24
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	9c 01       	movw	r18, r24
    44ca:	22 0f       	add	r18, r18
    44cc:	33 1f       	adc	r19, r19
    44ce:	22 0f       	add	r18, r18
    44d0:	33 1f       	adc	r19, r19
    44d2:	8c 81       	ldd	r24, Y+4	; 0x04
    44d4:	9d 81       	ldd	r25, Y+5	; 0x05
    44d6:	fc 01       	movw	r30, r24
    44d8:	e2 0f       	add	r30, r18
    44da:	f3 1f       	adc	r31, r19
    44dc:	82 81       	ldd	r24, Z+2	; 0x02
    44de:	88 23       	and	r24, r24
    44e0:	09 f0       	breq	.+2      	; 0x44e4 <M_PORT_voidInit+0x1b6>
    44e2:	ec c2       	rjmp	.+1496   	; 0x4abc <M_PORT_voidInit+0x78e>
				{
					/* Set the input direction by clear the bits in DDRA register */
					CLR_BIT(DDRA_REG,Local_u8Pin);
    44e4:	aa e3       	ldi	r26, 0x3A	; 58
    44e6:	b0 e0       	ldi	r27, 0x00	; 0
    44e8:	ea e3       	ldi	r30, 0x3A	; 58
    44ea:	f0 e0       	ldi	r31, 0x00	; 0
    44ec:	80 81       	ld	r24, Z
    44ee:	48 2f       	mov	r20, r24
    44f0:	8b 81       	ldd	r24, Y+3	; 0x03
    44f2:	28 2f       	mov	r18, r24
    44f4:	30 e0       	ldi	r19, 0x00	; 0
    44f6:	81 e0       	ldi	r24, 0x01	; 1
    44f8:	90 e0       	ldi	r25, 0x00	; 0
    44fa:	02 c0       	rjmp	.+4      	; 0x4500 <M_PORT_voidInit+0x1d2>
    44fc:	88 0f       	add	r24, r24
    44fe:	99 1f       	adc	r25, r25
    4500:	2a 95       	dec	r18
    4502:	e2 f7       	brpl	.-8      	; 0x44fc <M_PORT_voidInit+0x1ce>
    4504:	80 95       	com	r24
    4506:	84 23       	and	r24, r20
    4508:	8c 93       	st	X, r24
					/* Set the internal attach in PORTA register */
					if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_FLOATING)
    450a:	89 81       	ldd	r24, Y+1	; 0x01
    450c:	88 2f       	mov	r24, r24
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	9c 01       	movw	r18, r24
    4512:	22 0f       	add	r18, r18
    4514:	33 1f       	adc	r19, r19
    4516:	22 0f       	add	r18, r18
    4518:	33 1f       	adc	r19, r19
    451a:	8c 81       	ldd	r24, Y+4	; 0x04
    451c:	9d 81       	ldd	r25, Y+5	; 0x05
    451e:	fc 01       	movw	r30, r24
    4520:	e2 0f       	add	r30, r18
    4522:	f3 1f       	adc	r31, r19
    4524:	83 81       	ldd	r24, Z+3	; 0x03
    4526:	88 23       	and	r24, r24
    4528:	a9 f4       	brne	.+42     	; 0x4554 <M_PORT_voidInit+0x226>
					{
						CLR_BIT(PORTA_REG,Local_u8Pin);
    452a:	ab e3       	ldi	r26, 0x3B	; 59
    452c:	b0 e0       	ldi	r27, 0x00	; 0
    452e:	eb e3       	ldi	r30, 0x3B	; 59
    4530:	f0 e0       	ldi	r31, 0x00	; 0
    4532:	80 81       	ld	r24, Z
    4534:	48 2f       	mov	r20, r24
    4536:	8b 81       	ldd	r24, Y+3	; 0x03
    4538:	28 2f       	mov	r18, r24
    453a:	30 e0       	ldi	r19, 0x00	; 0
    453c:	81 e0       	ldi	r24, 0x01	; 1
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	02 2e       	mov	r0, r18
    4542:	02 c0       	rjmp	.+4      	; 0x4548 <M_PORT_voidInit+0x21a>
    4544:	88 0f       	add	r24, r24
    4546:	99 1f       	adc	r25, r25
    4548:	0a 94       	dec	r0
    454a:	e2 f7       	brpl	.-8      	; 0x4544 <M_PORT_voidInit+0x216>
    454c:	80 95       	com	r24
    454e:	84 23       	and	r24, r20
    4550:	8c 93       	st	X, r24
    4552:	b4 c2       	rjmp	.+1384   	; 0x4abc <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_PULLUP)
    4554:	89 81       	ldd	r24, Y+1	; 0x01
    4556:	88 2f       	mov	r24, r24
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	9c 01       	movw	r18, r24
    455c:	22 0f       	add	r18, r18
    455e:	33 1f       	adc	r19, r19
    4560:	22 0f       	add	r18, r18
    4562:	33 1f       	adc	r19, r19
    4564:	8c 81       	ldd	r24, Y+4	; 0x04
    4566:	9d 81       	ldd	r25, Y+5	; 0x05
    4568:	fc 01       	movw	r30, r24
    456a:	e2 0f       	add	r30, r18
    456c:	f3 1f       	adc	r31, r19
    456e:	83 81       	ldd	r24, Z+3	; 0x03
    4570:	81 30       	cpi	r24, 0x01	; 1
    4572:	09 f0       	breq	.+2      	; 0x4576 <M_PORT_voidInit+0x248>
    4574:	a3 c2       	rjmp	.+1350   	; 0x4abc <M_PORT_voidInit+0x78e>
					{
						SET_BIT(PORTA_REG,Local_u8Pin);
    4576:	ab e3       	ldi	r26, 0x3B	; 59
    4578:	b0 e0       	ldi	r27, 0x00	; 0
    457a:	eb e3       	ldi	r30, 0x3B	; 59
    457c:	f0 e0       	ldi	r31, 0x00	; 0
    457e:	80 81       	ld	r24, Z
    4580:	48 2f       	mov	r20, r24
    4582:	8b 81       	ldd	r24, Y+3	; 0x03
    4584:	28 2f       	mov	r18, r24
    4586:	30 e0       	ldi	r19, 0x00	; 0
    4588:	81 e0       	ldi	r24, 0x01	; 1
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	02 2e       	mov	r0, r18
    458e:	02 c0       	rjmp	.+4      	; 0x4594 <M_PORT_voidInit+0x266>
    4590:	88 0f       	add	r24, r24
    4592:	99 1f       	adc	r25, r25
    4594:	0a 94       	dec	r0
    4596:	e2 f7       	brpl	.-8      	; 0x4590 <M_PORT_voidInit+0x262>
    4598:	84 2b       	or	r24, r20
    459a:	8c 93       	st	X, r24
    459c:	8f c2       	rjmp	.+1310   	; 0x4abc <M_PORT_voidInit+0x78e>
					/* Error */
				}
				break;
			case PORTB :
				/* Set the direction of the pin */
				if(ConfigPtr[Local_u8Counter].PinDirection == PORT_OUTPUT)
    459e:	89 81       	ldd	r24, Y+1	; 0x01
    45a0:	88 2f       	mov	r24, r24
    45a2:	90 e0       	ldi	r25, 0x00	; 0
    45a4:	9c 01       	movw	r18, r24
    45a6:	22 0f       	add	r18, r18
    45a8:	33 1f       	adc	r19, r19
    45aa:	22 0f       	add	r18, r18
    45ac:	33 1f       	adc	r19, r19
    45ae:	8c 81       	ldd	r24, Y+4	; 0x04
    45b0:	9d 81       	ldd	r25, Y+5	; 0x05
    45b2:	fc 01       	movw	r30, r24
    45b4:	e2 0f       	add	r30, r18
    45b6:	f3 1f       	adc	r31, r19
    45b8:	82 81       	ldd	r24, Z+2	; 0x02
    45ba:	81 30       	cpi	r24, 0x01	; 1
    45bc:	09 f0       	breq	.+2      	; 0x45c0 <M_PORT_voidInit+0x292>
    45be:	5c c0       	rjmp	.+184    	; 0x4678 <M_PORT_voidInit+0x34a>
				{
					/* Set the output direction by set the bits in DDRB register */
					SET_BIT(DDRB_REG,Local_u8Pin);
    45c0:	a7 e3       	ldi	r26, 0x37	; 55
    45c2:	b0 e0       	ldi	r27, 0x00	; 0
    45c4:	e7 e3       	ldi	r30, 0x37	; 55
    45c6:	f0 e0       	ldi	r31, 0x00	; 0
    45c8:	80 81       	ld	r24, Z
    45ca:	48 2f       	mov	r20, r24
    45cc:	8b 81       	ldd	r24, Y+3	; 0x03
    45ce:	28 2f       	mov	r18, r24
    45d0:	30 e0       	ldi	r19, 0x00	; 0
    45d2:	81 e0       	ldi	r24, 0x01	; 1
    45d4:	90 e0       	ldi	r25, 0x00	; 0
    45d6:	02 c0       	rjmp	.+4      	; 0x45dc <M_PORT_voidInit+0x2ae>
    45d8:	88 0f       	add	r24, r24
    45da:	99 1f       	adc	r25, r25
    45dc:	2a 95       	dec	r18
    45de:	e2 f7       	brpl	.-8      	; 0x45d8 <M_PORT_voidInit+0x2aa>
    45e0:	84 2b       	or	r24, r20
    45e2:	8c 93       	st	X, r24
					/* Set the Initial Value in PORTB register */
					if(ConfigPtr[Local_u8Counter].InitialValue == PORT_HIGH)
    45e4:	89 81       	ldd	r24, Y+1	; 0x01
    45e6:	88 2f       	mov	r24, r24
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	9c 01       	movw	r18, r24
    45ec:	22 0f       	add	r18, r18
    45ee:	33 1f       	adc	r19, r19
    45f0:	22 0f       	add	r18, r18
    45f2:	33 1f       	adc	r19, r19
    45f4:	8c 81       	ldd	r24, Y+4	; 0x04
    45f6:	9d 81       	ldd	r25, Y+5	; 0x05
    45f8:	fc 01       	movw	r30, r24
    45fa:	e2 0f       	add	r30, r18
    45fc:	f3 1f       	adc	r31, r19
    45fe:	81 81       	ldd	r24, Z+1	; 0x01
    4600:	81 30       	cpi	r24, 0x01	; 1
    4602:	a1 f4       	brne	.+40     	; 0x462c <M_PORT_voidInit+0x2fe>
					{
						SET_BIT(PORTB_REG,Local_u8Pin);
    4604:	a8 e3       	ldi	r26, 0x38	; 56
    4606:	b0 e0       	ldi	r27, 0x00	; 0
    4608:	e8 e3       	ldi	r30, 0x38	; 56
    460a:	f0 e0       	ldi	r31, 0x00	; 0
    460c:	80 81       	ld	r24, Z
    460e:	48 2f       	mov	r20, r24
    4610:	8b 81       	ldd	r24, Y+3	; 0x03
    4612:	28 2f       	mov	r18, r24
    4614:	30 e0       	ldi	r19, 0x00	; 0
    4616:	81 e0       	ldi	r24, 0x01	; 1
    4618:	90 e0       	ldi	r25, 0x00	; 0
    461a:	02 2e       	mov	r0, r18
    461c:	02 c0       	rjmp	.+4      	; 0x4622 <M_PORT_voidInit+0x2f4>
    461e:	88 0f       	add	r24, r24
    4620:	99 1f       	adc	r25, r25
    4622:	0a 94       	dec	r0
    4624:	e2 f7       	brpl	.-8      	; 0x461e <M_PORT_voidInit+0x2f0>
    4626:	84 2b       	or	r24, r20
    4628:	8c 93       	st	X, r24
    462a:	48 c2       	rjmp	.+1168   	; 0x4abc <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InitialValue == PORT_LOW)
    462c:	89 81       	ldd	r24, Y+1	; 0x01
    462e:	88 2f       	mov	r24, r24
    4630:	90 e0       	ldi	r25, 0x00	; 0
    4632:	9c 01       	movw	r18, r24
    4634:	22 0f       	add	r18, r18
    4636:	33 1f       	adc	r19, r19
    4638:	22 0f       	add	r18, r18
    463a:	33 1f       	adc	r19, r19
    463c:	8c 81       	ldd	r24, Y+4	; 0x04
    463e:	9d 81       	ldd	r25, Y+5	; 0x05
    4640:	fc 01       	movw	r30, r24
    4642:	e2 0f       	add	r30, r18
    4644:	f3 1f       	adc	r31, r19
    4646:	81 81       	ldd	r24, Z+1	; 0x01
    4648:	88 23       	and	r24, r24
    464a:	09 f0       	breq	.+2      	; 0x464e <M_PORT_voidInit+0x320>
    464c:	37 c2       	rjmp	.+1134   	; 0x4abc <M_PORT_voidInit+0x78e>
					{
						CLR_BIT(PORTB_REG,Local_u8Pin);
    464e:	a8 e3       	ldi	r26, 0x38	; 56
    4650:	b0 e0       	ldi	r27, 0x00	; 0
    4652:	e8 e3       	ldi	r30, 0x38	; 56
    4654:	f0 e0       	ldi	r31, 0x00	; 0
    4656:	80 81       	ld	r24, Z
    4658:	48 2f       	mov	r20, r24
    465a:	8b 81       	ldd	r24, Y+3	; 0x03
    465c:	28 2f       	mov	r18, r24
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	81 e0       	ldi	r24, 0x01	; 1
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	02 2e       	mov	r0, r18
    4666:	02 c0       	rjmp	.+4      	; 0x466c <M_PORT_voidInit+0x33e>
    4668:	88 0f       	add	r24, r24
    466a:	99 1f       	adc	r25, r25
    466c:	0a 94       	dec	r0
    466e:	e2 f7       	brpl	.-8      	; 0x4668 <M_PORT_voidInit+0x33a>
    4670:	80 95       	com	r24
    4672:	84 23       	and	r24, r20
    4674:	8c 93       	st	X, r24
    4676:	22 c2       	rjmp	.+1092   	; 0x4abc <M_PORT_voidInit+0x78e>
					else
					{
						/* Error */
					}
				}
				else if(ConfigPtr[Local_u8Counter].PinDirection == PORT_INPUT)
    4678:	89 81       	ldd	r24, Y+1	; 0x01
    467a:	88 2f       	mov	r24, r24
    467c:	90 e0       	ldi	r25, 0x00	; 0
    467e:	9c 01       	movw	r18, r24
    4680:	22 0f       	add	r18, r18
    4682:	33 1f       	adc	r19, r19
    4684:	22 0f       	add	r18, r18
    4686:	33 1f       	adc	r19, r19
    4688:	8c 81       	ldd	r24, Y+4	; 0x04
    468a:	9d 81       	ldd	r25, Y+5	; 0x05
    468c:	fc 01       	movw	r30, r24
    468e:	e2 0f       	add	r30, r18
    4690:	f3 1f       	adc	r31, r19
    4692:	82 81       	ldd	r24, Z+2	; 0x02
    4694:	88 23       	and	r24, r24
    4696:	09 f0       	breq	.+2      	; 0x469a <M_PORT_voidInit+0x36c>
    4698:	11 c2       	rjmp	.+1058   	; 0x4abc <M_PORT_voidInit+0x78e>
				{
					/* Set the input direction by clear the bits in DDRB register */
					CLR_BIT(DDRB_REG,Local_u8Pin);
    469a:	a7 e3       	ldi	r26, 0x37	; 55
    469c:	b0 e0       	ldi	r27, 0x00	; 0
    469e:	e7 e3       	ldi	r30, 0x37	; 55
    46a0:	f0 e0       	ldi	r31, 0x00	; 0
    46a2:	80 81       	ld	r24, Z
    46a4:	48 2f       	mov	r20, r24
    46a6:	8b 81       	ldd	r24, Y+3	; 0x03
    46a8:	28 2f       	mov	r18, r24
    46aa:	30 e0       	ldi	r19, 0x00	; 0
    46ac:	81 e0       	ldi	r24, 0x01	; 1
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	02 c0       	rjmp	.+4      	; 0x46b6 <M_PORT_voidInit+0x388>
    46b2:	88 0f       	add	r24, r24
    46b4:	99 1f       	adc	r25, r25
    46b6:	2a 95       	dec	r18
    46b8:	e2 f7       	brpl	.-8      	; 0x46b2 <M_PORT_voidInit+0x384>
    46ba:	80 95       	com	r24
    46bc:	84 23       	and	r24, r20
    46be:	8c 93       	st	X, r24
					/* Set the internal attach in PORTB register */
					if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_FLOATING)
    46c0:	89 81       	ldd	r24, Y+1	; 0x01
    46c2:	88 2f       	mov	r24, r24
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	9c 01       	movw	r18, r24
    46c8:	22 0f       	add	r18, r18
    46ca:	33 1f       	adc	r19, r19
    46cc:	22 0f       	add	r18, r18
    46ce:	33 1f       	adc	r19, r19
    46d0:	8c 81       	ldd	r24, Y+4	; 0x04
    46d2:	9d 81       	ldd	r25, Y+5	; 0x05
    46d4:	fc 01       	movw	r30, r24
    46d6:	e2 0f       	add	r30, r18
    46d8:	f3 1f       	adc	r31, r19
    46da:	83 81       	ldd	r24, Z+3	; 0x03
    46dc:	88 23       	and	r24, r24
    46de:	a9 f4       	brne	.+42     	; 0x470a <M_PORT_voidInit+0x3dc>
					{
						CLR_BIT(PORTB_REG,Local_u8Pin);
    46e0:	a8 e3       	ldi	r26, 0x38	; 56
    46e2:	b0 e0       	ldi	r27, 0x00	; 0
    46e4:	e8 e3       	ldi	r30, 0x38	; 56
    46e6:	f0 e0       	ldi	r31, 0x00	; 0
    46e8:	80 81       	ld	r24, Z
    46ea:	48 2f       	mov	r20, r24
    46ec:	8b 81       	ldd	r24, Y+3	; 0x03
    46ee:	28 2f       	mov	r18, r24
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	81 e0       	ldi	r24, 0x01	; 1
    46f4:	90 e0       	ldi	r25, 0x00	; 0
    46f6:	02 2e       	mov	r0, r18
    46f8:	02 c0       	rjmp	.+4      	; 0x46fe <M_PORT_voidInit+0x3d0>
    46fa:	88 0f       	add	r24, r24
    46fc:	99 1f       	adc	r25, r25
    46fe:	0a 94       	dec	r0
    4700:	e2 f7       	brpl	.-8      	; 0x46fa <M_PORT_voidInit+0x3cc>
    4702:	80 95       	com	r24
    4704:	84 23       	and	r24, r20
    4706:	8c 93       	st	X, r24
    4708:	d9 c1       	rjmp	.+946    	; 0x4abc <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_PULLUP)
    470a:	89 81       	ldd	r24, Y+1	; 0x01
    470c:	88 2f       	mov	r24, r24
    470e:	90 e0       	ldi	r25, 0x00	; 0
    4710:	9c 01       	movw	r18, r24
    4712:	22 0f       	add	r18, r18
    4714:	33 1f       	adc	r19, r19
    4716:	22 0f       	add	r18, r18
    4718:	33 1f       	adc	r19, r19
    471a:	8c 81       	ldd	r24, Y+4	; 0x04
    471c:	9d 81       	ldd	r25, Y+5	; 0x05
    471e:	fc 01       	movw	r30, r24
    4720:	e2 0f       	add	r30, r18
    4722:	f3 1f       	adc	r31, r19
    4724:	83 81       	ldd	r24, Z+3	; 0x03
    4726:	81 30       	cpi	r24, 0x01	; 1
    4728:	09 f0       	breq	.+2      	; 0x472c <M_PORT_voidInit+0x3fe>
    472a:	c8 c1       	rjmp	.+912    	; 0x4abc <M_PORT_voidInit+0x78e>
					{
						SET_BIT(PORTB_REG,Local_u8Pin);
    472c:	a8 e3       	ldi	r26, 0x38	; 56
    472e:	b0 e0       	ldi	r27, 0x00	; 0
    4730:	e8 e3       	ldi	r30, 0x38	; 56
    4732:	f0 e0       	ldi	r31, 0x00	; 0
    4734:	80 81       	ld	r24, Z
    4736:	48 2f       	mov	r20, r24
    4738:	8b 81       	ldd	r24, Y+3	; 0x03
    473a:	28 2f       	mov	r18, r24
    473c:	30 e0       	ldi	r19, 0x00	; 0
    473e:	81 e0       	ldi	r24, 0x01	; 1
    4740:	90 e0       	ldi	r25, 0x00	; 0
    4742:	02 2e       	mov	r0, r18
    4744:	02 c0       	rjmp	.+4      	; 0x474a <M_PORT_voidInit+0x41c>
    4746:	88 0f       	add	r24, r24
    4748:	99 1f       	adc	r25, r25
    474a:	0a 94       	dec	r0
    474c:	e2 f7       	brpl	.-8      	; 0x4746 <M_PORT_voidInit+0x418>
    474e:	84 2b       	or	r24, r20
    4750:	8c 93       	st	X, r24
    4752:	b4 c1       	rjmp	.+872    	; 0x4abc <M_PORT_voidInit+0x78e>
					/* Error */
				}
				break;
			case PORTC :
				/* Set the direction of the pin */
				if(ConfigPtr[Local_u8Counter].PinDirection == PORT_OUTPUT)
    4754:	89 81       	ldd	r24, Y+1	; 0x01
    4756:	88 2f       	mov	r24, r24
    4758:	90 e0       	ldi	r25, 0x00	; 0
    475a:	9c 01       	movw	r18, r24
    475c:	22 0f       	add	r18, r18
    475e:	33 1f       	adc	r19, r19
    4760:	22 0f       	add	r18, r18
    4762:	33 1f       	adc	r19, r19
    4764:	8c 81       	ldd	r24, Y+4	; 0x04
    4766:	9d 81       	ldd	r25, Y+5	; 0x05
    4768:	fc 01       	movw	r30, r24
    476a:	e2 0f       	add	r30, r18
    476c:	f3 1f       	adc	r31, r19
    476e:	82 81       	ldd	r24, Z+2	; 0x02
    4770:	81 30       	cpi	r24, 0x01	; 1
    4772:	09 f0       	breq	.+2      	; 0x4776 <M_PORT_voidInit+0x448>
    4774:	5c c0       	rjmp	.+184    	; 0x482e <M_PORT_voidInit+0x500>
				{
					/* Set the output direction by set the bits in DDRC register */
					SET_BIT(DDRC_REG,Local_u8Pin);
    4776:	a4 e3       	ldi	r26, 0x34	; 52
    4778:	b0 e0       	ldi	r27, 0x00	; 0
    477a:	e4 e3       	ldi	r30, 0x34	; 52
    477c:	f0 e0       	ldi	r31, 0x00	; 0
    477e:	80 81       	ld	r24, Z
    4780:	48 2f       	mov	r20, r24
    4782:	8b 81       	ldd	r24, Y+3	; 0x03
    4784:	28 2f       	mov	r18, r24
    4786:	30 e0       	ldi	r19, 0x00	; 0
    4788:	81 e0       	ldi	r24, 0x01	; 1
    478a:	90 e0       	ldi	r25, 0x00	; 0
    478c:	02 c0       	rjmp	.+4      	; 0x4792 <M_PORT_voidInit+0x464>
    478e:	88 0f       	add	r24, r24
    4790:	99 1f       	adc	r25, r25
    4792:	2a 95       	dec	r18
    4794:	e2 f7       	brpl	.-8      	; 0x478e <M_PORT_voidInit+0x460>
    4796:	84 2b       	or	r24, r20
    4798:	8c 93       	st	X, r24
					/* Set the Initial Value in PORTC register */
					if(ConfigPtr[Local_u8Counter].InitialValue == PORT_HIGH)
    479a:	89 81       	ldd	r24, Y+1	; 0x01
    479c:	88 2f       	mov	r24, r24
    479e:	90 e0       	ldi	r25, 0x00	; 0
    47a0:	9c 01       	movw	r18, r24
    47a2:	22 0f       	add	r18, r18
    47a4:	33 1f       	adc	r19, r19
    47a6:	22 0f       	add	r18, r18
    47a8:	33 1f       	adc	r19, r19
    47aa:	8c 81       	ldd	r24, Y+4	; 0x04
    47ac:	9d 81       	ldd	r25, Y+5	; 0x05
    47ae:	fc 01       	movw	r30, r24
    47b0:	e2 0f       	add	r30, r18
    47b2:	f3 1f       	adc	r31, r19
    47b4:	81 81       	ldd	r24, Z+1	; 0x01
    47b6:	81 30       	cpi	r24, 0x01	; 1
    47b8:	a1 f4       	brne	.+40     	; 0x47e2 <M_PORT_voidInit+0x4b4>
					{
						SET_BIT(PORTC_REG,Local_u8Pin);
    47ba:	a5 e3       	ldi	r26, 0x35	; 53
    47bc:	b0 e0       	ldi	r27, 0x00	; 0
    47be:	e5 e3       	ldi	r30, 0x35	; 53
    47c0:	f0 e0       	ldi	r31, 0x00	; 0
    47c2:	80 81       	ld	r24, Z
    47c4:	48 2f       	mov	r20, r24
    47c6:	8b 81       	ldd	r24, Y+3	; 0x03
    47c8:	28 2f       	mov	r18, r24
    47ca:	30 e0       	ldi	r19, 0x00	; 0
    47cc:	81 e0       	ldi	r24, 0x01	; 1
    47ce:	90 e0       	ldi	r25, 0x00	; 0
    47d0:	02 2e       	mov	r0, r18
    47d2:	02 c0       	rjmp	.+4      	; 0x47d8 <M_PORT_voidInit+0x4aa>
    47d4:	88 0f       	add	r24, r24
    47d6:	99 1f       	adc	r25, r25
    47d8:	0a 94       	dec	r0
    47da:	e2 f7       	brpl	.-8      	; 0x47d4 <M_PORT_voidInit+0x4a6>
    47dc:	84 2b       	or	r24, r20
    47de:	8c 93       	st	X, r24
    47e0:	6d c1       	rjmp	.+730    	; 0x4abc <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InitialValue == PORT_LOW)
    47e2:	89 81       	ldd	r24, Y+1	; 0x01
    47e4:	88 2f       	mov	r24, r24
    47e6:	90 e0       	ldi	r25, 0x00	; 0
    47e8:	9c 01       	movw	r18, r24
    47ea:	22 0f       	add	r18, r18
    47ec:	33 1f       	adc	r19, r19
    47ee:	22 0f       	add	r18, r18
    47f0:	33 1f       	adc	r19, r19
    47f2:	8c 81       	ldd	r24, Y+4	; 0x04
    47f4:	9d 81       	ldd	r25, Y+5	; 0x05
    47f6:	fc 01       	movw	r30, r24
    47f8:	e2 0f       	add	r30, r18
    47fa:	f3 1f       	adc	r31, r19
    47fc:	81 81       	ldd	r24, Z+1	; 0x01
    47fe:	88 23       	and	r24, r24
    4800:	09 f0       	breq	.+2      	; 0x4804 <M_PORT_voidInit+0x4d6>
    4802:	5c c1       	rjmp	.+696    	; 0x4abc <M_PORT_voidInit+0x78e>
					{
						CLR_BIT(PORTC_REG,Local_u8Pin);
    4804:	a5 e3       	ldi	r26, 0x35	; 53
    4806:	b0 e0       	ldi	r27, 0x00	; 0
    4808:	e5 e3       	ldi	r30, 0x35	; 53
    480a:	f0 e0       	ldi	r31, 0x00	; 0
    480c:	80 81       	ld	r24, Z
    480e:	48 2f       	mov	r20, r24
    4810:	8b 81       	ldd	r24, Y+3	; 0x03
    4812:	28 2f       	mov	r18, r24
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	81 e0       	ldi	r24, 0x01	; 1
    4818:	90 e0       	ldi	r25, 0x00	; 0
    481a:	02 2e       	mov	r0, r18
    481c:	02 c0       	rjmp	.+4      	; 0x4822 <M_PORT_voidInit+0x4f4>
    481e:	88 0f       	add	r24, r24
    4820:	99 1f       	adc	r25, r25
    4822:	0a 94       	dec	r0
    4824:	e2 f7       	brpl	.-8      	; 0x481e <M_PORT_voidInit+0x4f0>
    4826:	80 95       	com	r24
    4828:	84 23       	and	r24, r20
    482a:	8c 93       	st	X, r24
    482c:	47 c1       	rjmp	.+654    	; 0x4abc <M_PORT_voidInit+0x78e>
					else
					{
						/* Error */
					}
				}
				else if(ConfigPtr[Local_u8Counter].PinDirection == PORT_INPUT)
    482e:	89 81       	ldd	r24, Y+1	; 0x01
    4830:	88 2f       	mov	r24, r24
    4832:	90 e0       	ldi	r25, 0x00	; 0
    4834:	9c 01       	movw	r18, r24
    4836:	22 0f       	add	r18, r18
    4838:	33 1f       	adc	r19, r19
    483a:	22 0f       	add	r18, r18
    483c:	33 1f       	adc	r19, r19
    483e:	8c 81       	ldd	r24, Y+4	; 0x04
    4840:	9d 81       	ldd	r25, Y+5	; 0x05
    4842:	fc 01       	movw	r30, r24
    4844:	e2 0f       	add	r30, r18
    4846:	f3 1f       	adc	r31, r19
    4848:	82 81       	ldd	r24, Z+2	; 0x02
    484a:	88 23       	and	r24, r24
    484c:	09 f0       	breq	.+2      	; 0x4850 <M_PORT_voidInit+0x522>
    484e:	36 c1       	rjmp	.+620    	; 0x4abc <M_PORT_voidInit+0x78e>
				{
					/* Set the input direction by clear the bits in DDRC register */
					CLR_BIT(DDRC_REG,Local_u8Pin);
    4850:	a4 e3       	ldi	r26, 0x34	; 52
    4852:	b0 e0       	ldi	r27, 0x00	; 0
    4854:	e4 e3       	ldi	r30, 0x34	; 52
    4856:	f0 e0       	ldi	r31, 0x00	; 0
    4858:	80 81       	ld	r24, Z
    485a:	48 2f       	mov	r20, r24
    485c:	8b 81       	ldd	r24, Y+3	; 0x03
    485e:	28 2f       	mov	r18, r24
    4860:	30 e0       	ldi	r19, 0x00	; 0
    4862:	81 e0       	ldi	r24, 0x01	; 1
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	02 c0       	rjmp	.+4      	; 0x486c <M_PORT_voidInit+0x53e>
    4868:	88 0f       	add	r24, r24
    486a:	99 1f       	adc	r25, r25
    486c:	2a 95       	dec	r18
    486e:	e2 f7       	brpl	.-8      	; 0x4868 <M_PORT_voidInit+0x53a>
    4870:	80 95       	com	r24
    4872:	84 23       	and	r24, r20
    4874:	8c 93       	st	X, r24
					/* Set the internal attach in PORTB register */
					if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_FLOATING)
    4876:	89 81       	ldd	r24, Y+1	; 0x01
    4878:	88 2f       	mov	r24, r24
    487a:	90 e0       	ldi	r25, 0x00	; 0
    487c:	9c 01       	movw	r18, r24
    487e:	22 0f       	add	r18, r18
    4880:	33 1f       	adc	r19, r19
    4882:	22 0f       	add	r18, r18
    4884:	33 1f       	adc	r19, r19
    4886:	8c 81       	ldd	r24, Y+4	; 0x04
    4888:	9d 81       	ldd	r25, Y+5	; 0x05
    488a:	fc 01       	movw	r30, r24
    488c:	e2 0f       	add	r30, r18
    488e:	f3 1f       	adc	r31, r19
    4890:	83 81       	ldd	r24, Z+3	; 0x03
    4892:	88 23       	and	r24, r24
    4894:	a9 f4       	brne	.+42     	; 0x48c0 <M_PORT_voidInit+0x592>
					{
						CLR_BIT(PORTC_REG,Local_u8Pin);
    4896:	a5 e3       	ldi	r26, 0x35	; 53
    4898:	b0 e0       	ldi	r27, 0x00	; 0
    489a:	e5 e3       	ldi	r30, 0x35	; 53
    489c:	f0 e0       	ldi	r31, 0x00	; 0
    489e:	80 81       	ld	r24, Z
    48a0:	48 2f       	mov	r20, r24
    48a2:	8b 81       	ldd	r24, Y+3	; 0x03
    48a4:	28 2f       	mov	r18, r24
    48a6:	30 e0       	ldi	r19, 0x00	; 0
    48a8:	81 e0       	ldi	r24, 0x01	; 1
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	02 2e       	mov	r0, r18
    48ae:	02 c0       	rjmp	.+4      	; 0x48b4 <M_PORT_voidInit+0x586>
    48b0:	88 0f       	add	r24, r24
    48b2:	99 1f       	adc	r25, r25
    48b4:	0a 94       	dec	r0
    48b6:	e2 f7       	brpl	.-8      	; 0x48b0 <M_PORT_voidInit+0x582>
    48b8:	80 95       	com	r24
    48ba:	84 23       	and	r24, r20
    48bc:	8c 93       	st	X, r24
    48be:	fe c0       	rjmp	.+508    	; 0x4abc <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_PULLUP)
    48c0:	89 81       	ldd	r24, Y+1	; 0x01
    48c2:	88 2f       	mov	r24, r24
    48c4:	90 e0       	ldi	r25, 0x00	; 0
    48c6:	9c 01       	movw	r18, r24
    48c8:	22 0f       	add	r18, r18
    48ca:	33 1f       	adc	r19, r19
    48cc:	22 0f       	add	r18, r18
    48ce:	33 1f       	adc	r19, r19
    48d0:	8c 81       	ldd	r24, Y+4	; 0x04
    48d2:	9d 81       	ldd	r25, Y+5	; 0x05
    48d4:	fc 01       	movw	r30, r24
    48d6:	e2 0f       	add	r30, r18
    48d8:	f3 1f       	adc	r31, r19
    48da:	83 81       	ldd	r24, Z+3	; 0x03
    48dc:	81 30       	cpi	r24, 0x01	; 1
    48de:	09 f0       	breq	.+2      	; 0x48e2 <M_PORT_voidInit+0x5b4>
    48e0:	ed c0       	rjmp	.+474    	; 0x4abc <M_PORT_voidInit+0x78e>
					{
						SET_BIT(PORTC_REG,Local_u8Pin);
    48e2:	a5 e3       	ldi	r26, 0x35	; 53
    48e4:	b0 e0       	ldi	r27, 0x00	; 0
    48e6:	e5 e3       	ldi	r30, 0x35	; 53
    48e8:	f0 e0       	ldi	r31, 0x00	; 0
    48ea:	80 81       	ld	r24, Z
    48ec:	48 2f       	mov	r20, r24
    48ee:	8b 81       	ldd	r24, Y+3	; 0x03
    48f0:	28 2f       	mov	r18, r24
    48f2:	30 e0       	ldi	r19, 0x00	; 0
    48f4:	81 e0       	ldi	r24, 0x01	; 1
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	02 2e       	mov	r0, r18
    48fa:	02 c0       	rjmp	.+4      	; 0x4900 <M_PORT_voidInit+0x5d2>
    48fc:	88 0f       	add	r24, r24
    48fe:	99 1f       	adc	r25, r25
    4900:	0a 94       	dec	r0
    4902:	e2 f7       	brpl	.-8      	; 0x48fc <M_PORT_voidInit+0x5ce>
    4904:	84 2b       	or	r24, r20
    4906:	8c 93       	st	X, r24
    4908:	d9 c0       	rjmp	.+434    	; 0x4abc <M_PORT_voidInit+0x78e>
					/* Error */
				}
				break;
			case PORTD :
				/* Set the direction of the pin */
				if(ConfigPtr[Local_u8Counter].PinDirection == PORT_OUTPUT)
    490a:	89 81       	ldd	r24, Y+1	; 0x01
    490c:	88 2f       	mov	r24, r24
    490e:	90 e0       	ldi	r25, 0x00	; 0
    4910:	9c 01       	movw	r18, r24
    4912:	22 0f       	add	r18, r18
    4914:	33 1f       	adc	r19, r19
    4916:	22 0f       	add	r18, r18
    4918:	33 1f       	adc	r19, r19
    491a:	8c 81       	ldd	r24, Y+4	; 0x04
    491c:	9d 81       	ldd	r25, Y+5	; 0x05
    491e:	fc 01       	movw	r30, r24
    4920:	e2 0f       	add	r30, r18
    4922:	f3 1f       	adc	r31, r19
    4924:	82 81       	ldd	r24, Z+2	; 0x02
    4926:	81 30       	cpi	r24, 0x01	; 1
    4928:	09 f0       	breq	.+2      	; 0x492c <M_PORT_voidInit+0x5fe>
    492a:	5c c0       	rjmp	.+184    	; 0x49e4 <M_PORT_voidInit+0x6b6>
				{
					/* Set the output direction by set the bits in DDRD register */
					SET_BIT(DDRD_REG,Local_u8Pin);
    492c:	a1 e3       	ldi	r26, 0x31	; 49
    492e:	b0 e0       	ldi	r27, 0x00	; 0
    4930:	e1 e3       	ldi	r30, 0x31	; 49
    4932:	f0 e0       	ldi	r31, 0x00	; 0
    4934:	80 81       	ld	r24, Z
    4936:	48 2f       	mov	r20, r24
    4938:	8b 81       	ldd	r24, Y+3	; 0x03
    493a:	28 2f       	mov	r18, r24
    493c:	30 e0       	ldi	r19, 0x00	; 0
    493e:	81 e0       	ldi	r24, 0x01	; 1
    4940:	90 e0       	ldi	r25, 0x00	; 0
    4942:	02 c0       	rjmp	.+4      	; 0x4948 <M_PORT_voidInit+0x61a>
    4944:	88 0f       	add	r24, r24
    4946:	99 1f       	adc	r25, r25
    4948:	2a 95       	dec	r18
    494a:	e2 f7       	brpl	.-8      	; 0x4944 <M_PORT_voidInit+0x616>
    494c:	84 2b       	or	r24, r20
    494e:	8c 93       	st	X, r24
					/* Set the Initial Value in PORTD register */
					if(ConfigPtr[Local_u8Counter].InitialValue == PORT_HIGH)
    4950:	89 81       	ldd	r24, Y+1	; 0x01
    4952:	88 2f       	mov	r24, r24
    4954:	90 e0       	ldi	r25, 0x00	; 0
    4956:	9c 01       	movw	r18, r24
    4958:	22 0f       	add	r18, r18
    495a:	33 1f       	adc	r19, r19
    495c:	22 0f       	add	r18, r18
    495e:	33 1f       	adc	r19, r19
    4960:	8c 81       	ldd	r24, Y+4	; 0x04
    4962:	9d 81       	ldd	r25, Y+5	; 0x05
    4964:	fc 01       	movw	r30, r24
    4966:	e2 0f       	add	r30, r18
    4968:	f3 1f       	adc	r31, r19
    496a:	81 81       	ldd	r24, Z+1	; 0x01
    496c:	81 30       	cpi	r24, 0x01	; 1
    496e:	a1 f4       	brne	.+40     	; 0x4998 <M_PORT_voidInit+0x66a>
					{
						SET_BIT(PORTD_REG,Local_u8Pin);
    4970:	a2 e3       	ldi	r26, 0x32	; 50
    4972:	b0 e0       	ldi	r27, 0x00	; 0
    4974:	e2 e3       	ldi	r30, 0x32	; 50
    4976:	f0 e0       	ldi	r31, 0x00	; 0
    4978:	80 81       	ld	r24, Z
    497a:	48 2f       	mov	r20, r24
    497c:	8b 81       	ldd	r24, Y+3	; 0x03
    497e:	28 2f       	mov	r18, r24
    4980:	30 e0       	ldi	r19, 0x00	; 0
    4982:	81 e0       	ldi	r24, 0x01	; 1
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	02 2e       	mov	r0, r18
    4988:	02 c0       	rjmp	.+4      	; 0x498e <M_PORT_voidInit+0x660>
    498a:	88 0f       	add	r24, r24
    498c:	99 1f       	adc	r25, r25
    498e:	0a 94       	dec	r0
    4990:	e2 f7       	brpl	.-8      	; 0x498a <M_PORT_voidInit+0x65c>
    4992:	84 2b       	or	r24, r20
    4994:	8c 93       	st	X, r24
    4996:	92 c0       	rjmp	.+292    	; 0x4abc <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InitialValue == PORT_LOW)
    4998:	89 81       	ldd	r24, Y+1	; 0x01
    499a:	88 2f       	mov	r24, r24
    499c:	90 e0       	ldi	r25, 0x00	; 0
    499e:	9c 01       	movw	r18, r24
    49a0:	22 0f       	add	r18, r18
    49a2:	33 1f       	adc	r19, r19
    49a4:	22 0f       	add	r18, r18
    49a6:	33 1f       	adc	r19, r19
    49a8:	8c 81       	ldd	r24, Y+4	; 0x04
    49aa:	9d 81       	ldd	r25, Y+5	; 0x05
    49ac:	fc 01       	movw	r30, r24
    49ae:	e2 0f       	add	r30, r18
    49b0:	f3 1f       	adc	r31, r19
    49b2:	81 81       	ldd	r24, Z+1	; 0x01
    49b4:	88 23       	and	r24, r24
    49b6:	09 f0       	breq	.+2      	; 0x49ba <M_PORT_voidInit+0x68c>
    49b8:	81 c0       	rjmp	.+258    	; 0x4abc <M_PORT_voidInit+0x78e>
					{
						CLR_BIT(PORTD_REG,Local_u8Pin);
    49ba:	a2 e3       	ldi	r26, 0x32	; 50
    49bc:	b0 e0       	ldi	r27, 0x00	; 0
    49be:	e2 e3       	ldi	r30, 0x32	; 50
    49c0:	f0 e0       	ldi	r31, 0x00	; 0
    49c2:	80 81       	ld	r24, Z
    49c4:	48 2f       	mov	r20, r24
    49c6:	8b 81       	ldd	r24, Y+3	; 0x03
    49c8:	28 2f       	mov	r18, r24
    49ca:	30 e0       	ldi	r19, 0x00	; 0
    49cc:	81 e0       	ldi	r24, 0x01	; 1
    49ce:	90 e0       	ldi	r25, 0x00	; 0
    49d0:	02 2e       	mov	r0, r18
    49d2:	02 c0       	rjmp	.+4      	; 0x49d8 <M_PORT_voidInit+0x6aa>
    49d4:	88 0f       	add	r24, r24
    49d6:	99 1f       	adc	r25, r25
    49d8:	0a 94       	dec	r0
    49da:	e2 f7       	brpl	.-8      	; 0x49d4 <M_PORT_voidInit+0x6a6>
    49dc:	80 95       	com	r24
    49de:	84 23       	and	r24, r20
    49e0:	8c 93       	st	X, r24
    49e2:	6c c0       	rjmp	.+216    	; 0x4abc <M_PORT_voidInit+0x78e>
					else
					{
						/* Error */
					}
				}
				else if(ConfigPtr[Local_u8Counter].PinDirection == PORT_INPUT)
    49e4:	89 81       	ldd	r24, Y+1	; 0x01
    49e6:	88 2f       	mov	r24, r24
    49e8:	90 e0       	ldi	r25, 0x00	; 0
    49ea:	9c 01       	movw	r18, r24
    49ec:	22 0f       	add	r18, r18
    49ee:	33 1f       	adc	r19, r19
    49f0:	22 0f       	add	r18, r18
    49f2:	33 1f       	adc	r19, r19
    49f4:	8c 81       	ldd	r24, Y+4	; 0x04
    49f6:	9d 81       	ldd	r25, Y+5	; 0x05
    49f8:	fc 01       	movw	r30, r24
    49fa:	e2 0f       	add	r30, r18
    49fc:	f3 1f       	adc	r31, r19
    49fe:	82 81       	ldd	r24, Z+2	; 0x02
    4a00:	88 23       	and	r24, r24
    4a02:	09 f0       	breq	.+2      	; 0x4a06 <M_PORT_voidInit+0x6d8>
    4a04:	5b c0       	rjmp	.+182    	; 0x4abc <M_PORT_voidInit+0x78e>
				{
					/* Set the input direction by clear the bits in DDRD register */
					CLR_BIT(DDRD_REG,Local_u8Pin);
    4a06:	a1 e3       	ldi	r26, 0x31	; 49
    4a08:	b0 e0       	ldi	r27, 0x00	; 0
    4a0a:	e1 e3       	ldi	r30, 0x31	; 49
    4a0c:	f0 e0       	ldi	r31, 0x00	; 0
    4a0e:	80 81       	ld	r24, Z
    4a10:	48 2f       	mov	r20, r24
    4a12:	8b 81       	ldd	r24, Y+3	; 0x03
    4a14:	28 2f       	mov	r18, r24
    4a16:	30 e0       	ldi	r19, 0x00	; 0
    4a18:	81 e0       	ldi	r24, 0x01	; 1
    4a1a:	90 e0       	ldi	r25, 0x00	; 0
    4a1c:	02 c0       	rjmp	.+4      	; 0x4a22 <M_PORT_voidInit+0x6f4>
    4a1e:	88 0f       	add	r24, r24
    4a20:	99 1f       	adc	r25, r25
    4a22:	2a 95       	dec	r18
    4a24:	e2 f7       	brpl	.-8      	; 0x4a1e <M_PORT_voidInit+0x6f0>
    4a26:	80 95       	com	r24
    4a28:	84 23       	and	r24, r20
    4a2a:	8c 93       	st	X, r24
					/* Set the internal attach in PORTD register */
					if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_FLOATING)
    4a2c:	89 81       	ldd	r24, Y+1	; 0x01
    4a2e:	88 2f       	mov	r24, r24
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	9c 01       	movw	r18, r24
    4a34:	22 0f       	add	r18, r18
    4a36:	33 1f       	adc	r19, r19
    4a38:	22 0f       	add	r18, r18
    4a3a:	33 1f       	adc	r19, r19
    4a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    4a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    4a40:	fc 01       	movw	r30, r24
    4a42:	e2 0f       	add	r30, r18
    4a44:	f3 1f       	adc	r31, r19
    4a46:	83 81       	ldd	r24, Z+3	; 0x03
    4a48:	88 23       	and	r24, r24
    4a4a:	a9 f4       	brne	.+42     	; 0x4a76 <M_PORT_voidInit+0x748>
					{
						CLR_BIT(PORTD_REG,Local_u8Pin);
    4a4c:	a2 e3       	ldi	r26, 0x32	; 50
    4a4e:	b0 e0       	ldi	r27, 0x00	; 0
    4a50:	e2 e3       	ldi	r30, 0x32	; 50
    4a52:	f0 e0       	ldi	r31, 0x00	; 0
    4a54:	80 81       	ld	r24, Z
    4a56:	48 2f       	mov	r20, r24
    4a58:	8b 81       	ldd	r24, Y+3	; 0x03
    4a5a:	28 2f       	mov	r18, r24
    4a5c:	30 e0       	ldi	r19, 0x00	; 0
    4a5e:	81 e0       	ldi	r24, 0x01	; 1
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	02 2e       	mov	r0, r18
    4a64:	02 c0       	rjmp	.+4      	; 0x4a6a <M_PORT_voidInit+0x73c>
    4a66:	88 0f       	add	r24, r24
    4a68:	99 1f       	adc	r25, r25
    4a6a:	0a 94       	dec	r0
    4a6c:	e2 f7       	brpl	.-8      	; 0x4a66 <M_PORT_voidInit+0x738>
    4a6e:	80 95       	com	r24
    4a70:	84 23       	and	r24, r20
    4a72:	8c 93       	st	X, r24
    4a74:	23 c0       	rjmp	.+70     	; 0x4abc <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_PULLUP)
    4a76:	89 81       	ldd	r24, Y+1	; 0x01
    4a78:	88 2f       	mov	r24, r24
    4a7a:	90 e0       	ldi	r25, 0x00	; 0
    4a7c:	9c 01       	movw	r18, r24
    4a7e:	22 0f       	add	r18, r18
    4a80:	33 1f       	adc	r19, r19
    4a82:	22 0f       	add	r18, r18
    4a84:	33 1f       	adc	r19, r19
    4a86:	8c 81       	ldd	r24, Y+4	; 0x04
    4a88:	9d 81       	ldd	r25, Y+5	; 0x05
    4a8a:	fc 01       	movw	r30, r24
    4a8c:	e2 0f       	add	r30, r18
    4a8e:	f3 1f       	adc	r31, r19
    4a90:	83 81       	ldd	r24, Z+3	; 0x03
    4a92:	81 30       	cpi	r24, 0x01	; 1
    4a94:	99 f4       	brne	.+38     	; 0x4abc <M_PORT_voidInit+0x78e>
					{
						SET_BIT(PORTD_REG,Local_u8Pin);
    4a96:	a2 e3       	ldi	r26, 0x32	; 50
    4a98:	b0 e0       	ldi	r27, 0x00	; 0
    4a9a:	e2 e3       	ldi	r30, 0x32	; 50
    4a9c:	f0 e0       	ldi	r31, 0x00	; 0
    4a9e:	80 81       	ld	r24, Z
    4aa0:	48 2f       	mov	r20, r24
    4aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    4aa4:	28 2f       	mov	r18, r24
    4aa6:	30 e0       	ldi	r19, 0x00	; 0
    4aa8:	81 e0       	ldi	r24, 0x01	; 1
    4aaa:	90 e0       	ldi	r25, 0x00	; 0
    4aac:	02 2e       	mov	r0, r18
    4aae:	02 c0       	rjmp	.+4      	; 0x4ab4 <M_PORT_voidInit+0x786>
    4ab0:	88 0f       	add	r24, r24
    4ab2:	99 1f       	adc	r25, r25
    4ab4:	0a 94       	dec	r0
    4ab6:	e2 f7       	brpl	.-8      	; 0x4ab0 <M_PORT_voidInit+0x782>
    4ab8:	84 2b       	or	r24, r20
    4aba:	8c 93       	st	X, r24
	if(ConfigPtr != NULL )
	{
		u8 Local_u8Pin;
		u8 Local_u8Port;
		u8 Local_u8Counter;
		for(Local_u8Counter = 0;Local_u8Counter<PORT_PINS_CONFIG_ARR_SIZE;Local_u8Counter++)
    4abc:	89 81       	ldd	r24, Y+1	; 0x01
    4abe:	8f 5f       	subi	r24, 0xFF	; 255
    4ac0:	89 83       	std	Y+1, r24	; 0x01
    4ac2:	89 81       	ldd	r24, Y+1	; 0x01
    4ac4:	8a 31       	cpi	r24, 0x1A	; 26
    4ac6:	08 f4       	brcc	.+2      	; 0x4aca <M_PORT_voidInit+0x79c>
    4ac8:	45 cc       	rjmp	.-1910   	; 0x4354 <M_PORT_voidInit+0x26>
	}
	else
	{
		/* Error */
	}
}
    4aca:	27 96       	adiw	r28, 0x07	; 7
    4acc:	0f b6       	in	r0, 0x3f	; 63
    4ace:	f8 94       	cli
    4ad0:	de bf       	out	0x3e, r29	; 62
    4ad2:	0f be       	out	0x3f, r0	; 63
    4ad4:	cd bf       	out	0x3d, r28	; 61
    4ad6:	cf 91       	pop	r28
    4ad8:	df 91       	pop	r29
    4ada:	08 95       	ret

00004adc <M_GIE_void_EnableGlobalInterrupt>:


#include "GIE_private.h"
#include "GIE_interface.h"

void M_GIE_void_EnableGlobalInterrupt(){
    4adc:	df 93       	push	r29
    4ade:	cf 93       	push	r28
    4ae0:	cd b7       	in	r28, 0x3d	; 61
    4ae2:	de b7       	in	r29, 0x3e	; 62
	sei();
    4ae4:	78 94       	sei
}
    4ae6:	cf 91       	pop	r28
    4ae8:	df 91       	pop	r29
    4aea:	08 95       	ret

00004aec <M_GIE_void_DisableGlobalInterrupt>:
void M_GIE_void_DisableGlobalInterrupt(){
    4aec:	df 93       	push	r29
    4aee:	cf 93       	push	r28
    4af0:	cd b7       	in	r28, 0x3d	; 61
    4af2:	de b7       	in	r29, 0x3e	; 62

	cli();
    4af4:	f8 94       	cli
}
    4af6:	cf 91       	pop	r28
    4af8:	df 91       	pop	r29
    4afa:	08 95       	ret

00004afc <M_DIO_enGetPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_PinLevelType M_DIO_enGetPinValue(Dio_ChannelType ChannelId)
{
    4afc:	df 93       	push	r29
    4afe:	cf 93       	push	r28
    4b00:	00 d0       	rcall	.+0      	; 0x4b02 <M_DIO_enGetPinValue+0x6>
    4b02:	00 d0       	rcall	.+0      	; 0x4b04 <M_DIO_enGetPinValue+0x8>
    4b04:	00 d0       	rcall	.+0      	; 0x4b06 <M_DIO_enGetPinValue+0xa>
    4b06:	cd b7       	in	r28, 0x3d	; 61
    4b08:	de b7       	in	r29, 0x3e	; 62
    4b0a:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8pin = ChannelId % 10;
    4b0c:	8c 81       	ldd	r24, Y+4	; 0x04
    4b0e:	9a e0       	ldi	r25, 0x0A	; 10
    4b10:	69 2f       	mov	r22, r25
    4b12:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <__udivmodqi4>
    4b16:	89 2f       	mov	r24, r25
    4b18:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8port = ChannelId / 10;
    4b1a:	8c 81       	ldd	r24, Y+4	; 0x04
    4b1c:	9a e0       	ldi	r25, 0x0A	; 10
    4b1e:	69 2f       	mov	r22, r25
    4b20:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <__udivmodqi4>
    4b24:	8a 83       	std	Y+2, r24	; 0x02

	Dio_PinLevelType Local_levelType;
	switch(Local_u8port)
    4b26:	8a 81       	ldd	r24, Y+2	; 0x02
    4b28:	28 2f       	mov	r18, r24
    4b2a:	30 e0       	ldi	r19, 0x00	; 0
    4b2c:	3e 83       	std	Y+6, r19	; 0x06
    4b2e:	2d 83       	std	Y+5, r18	; 0x05
    4b30:	4d 81       	ldd	r20, Y+5	; 0x05
    4b32:	5e 81       	ldd	r21, Y+6	; 0x06
    4b34:	42 30       	cpi	r20, 0x02	; 2
    4b36:	51 05       	cpc	r21, r1
    4b38:	41 f1       	breq	.+80     	; 0x4b8a <M_DIO_enGetPinValue+0x8e>
    4b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b3e:	83 30       	cpi	r24, 0x03	; 3
    4b40:	91 05       	cpc	r25, r1
    4b42:	34 f4       	brge	.+12     	; 0x4b50 <M_DIO_enGetPinValue+0x54>
    4b44:	2d 81       	ldd	r18, Y+5	; 0x05
    4b46:	3e 81       	ldd	r19, Y+6	; 0x06
    4b48:	21 30       	cpi	r18, 0x01	; 1
    4b4a:	31 05       	cpc	r19, r1
    4b4c:	61 f0       	breq	.+24     	; 0x4b66 <M_DIO_enGetPinValue+0x6a>
    4b4e:	52 c0       	rjmp	.+164    	; 0x4bf4 <M_DIO_enGetPinValue+0xf8>
    4b50:	4d 81       	ldd	r20, Y+5	; 0x05
    4b52:	5e 81       	ldd	r21, Y+6	; 0x06
    4b54:	43 30       	cpi	r20, 0x03	; 3
    4b56:	51 05       	cpc	r21, r1
    4b58:	51 f1       	breq	.+84     	; 0x4bae <M_DIO_enGetPinValue+0xb2>
    4b5a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b5c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b5e:	84 30       	cpi	r24, 0x04	; 4
    4b60:	91 05       	cpc	r25, r1
    4b62:	b9 f1       	breq	.+110    	; 0x4bd2 <M_DIO_enGetPinValue+0xd6>
    4b64:	47 c0       	rjmp	.+142    	; 0x4bf4 <M_DIO_enGetPinValue+0xf8>
	{
		case DIO_PORTA : Local_levelType = GET_BIT( PINA_REG,Local_u8pin); break;
    4b66:	e9 e3       	ldi	r30, 0x39	; 57
    4b68:	f0 e0       	ldi	r31, 0x00	; 0
    4b6a:	80 81       	ld	r24, Z
    4b6c:	28 2f       	mov	r18, r24
    4b6e:	30 e0       	ldi	r19, 0x00	; 0
    4b70:	8b 81       	ldd	r24, Y+3	; 0x03
    4b72:	88 2f       	mov	r24, r24
    4b74:	90 e0       	ldi	r25, 0x00	; 0
    4b76:	a9 01       	movw	r20, r18
    4b78:	02 c0       	rjmp	.+4      	; 0x4b7e <M_DIO_enGetPinValue+0x82>
    4b7a:	55 95       	asr	r21
    4b7c:	47 95       	ror	r20
    4b7e:	8a 95       	dec	r24
    4b80:	e2 f7       	brpl	.-8      	; 0x4b7a <M_DIO_enGetPinValue+0x7e>
    4b82:	ca 01       	movw	r24, r20
    4b84:	81 70       	andi	r24, 0x01	; 1
    4b86:	89 83       	std	Y+1, r24	; 0x01
    4b88:	35 c0       	rjmp	.+106    	; 0x4bf4 <M_DIO_enGetPinValue+0xf8>
		case DIO_PORTB : Local_levelType = GET_BIT( PINB_REG,Local_u8pin);	break;
    4b8a:	e6 e3       	ldi	r30, 0x36	; 54
    4b8c:	f0 e0       	ldi	r31, 0x00	; 0
    4b8e:	80 81       	ld	r24, Z
    4b90:	28 2f       	mov	r18, r24
    4b92:	30 e0       	ldi	r19, 0x00	; 0
    4b94:	8b 81       	ldd	r24, Y+3	; 0x03
    4b96:	88 2f       	mov	r24, r24
    4b98:	90 e0       	ldi	r25, 0x00	; 0
    4b9a:	a9 01       	movw	r20, r18
    4b9c:	02 c0       	rjmp	.+4      	; 0x4ba2 <M_DIO_enGetPinValue+0xa6>
    4b9e:	55 95       	asr	r21
    4ba0:	47 95       	ror	r20
    4ba2:	8a 95       	dec	r24
    4ba4:	e2 f7       	brpl	.-8      	; 0x4b9e <M_DIO_enGetPinValue+0xa2>
    4ba6:	ca 01       	movw	r24, r20
    4ba8:	81 70       	andi	r24, 0x01	; 1
    4baa:	89 83       	std	Y+1, r24	; 0x01
    4bac:	23 c0       	rjmp	.+70     	; 0x4bf4 <M_DIO_enGetPinValue+0xf8>
		case DIO_PORTC : Local_levelType = GET_BIT( PINC_REG,Local_u8pin);	break;
    4bae:	e3 e3       	ldi	r30, 0x33	; 51
    4bb0:	f0 e0       	ldi	r31, 0x00	; 0
    4bb2:	80 81       	ld	r24, Z
    4bb4:	28 2f       	mov	r18, r24
    4bb6:	30 e0       	ldi	r19, 0x00	; 0
    4bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bba:	88 2f       	mov	r24, r24
    4bbc:	90 e0       	ldi	r25, 0x00	; 0
    4bbe:	a9 01       	movw	r20, r18
    4bc0:	02 c0       	rjmp	.+4      	; 0x4bc6 <M_DIO_enGetPinValue+0xca>
    4bc2:	55 95       	asr	r21
    4bc4:	47 95       	ror	r20
    4bc6:	8a 95       	dec	r24
    4bc8:	e2 f7       	brpl	.-8      	; 0x4bc2 <M_DIO_enGetPinValue+0xc6>
    4bca:	ca 01       	movw	r24, r20
    4bcc:	81 70       	andi	r24, 0x01	; 1
    4bce:	89 83       	std	Y+1, r24	; 0x01
    4bd0:	11 c0       	rjmp	.+34     	; 0x4bf4 <M_DIO_enGetPinValue+0xf8>
		case DIO_PORTD : Local_levelType = GET_BIT( PIND_REG,Local_u8pin); break;
    4bd2:	e0 e3       	ldi	r30, 0x30	; 48
    4bd4:	f0 e0       	ldi	r31, 0x00	; 0
    4bd6:	80 81       	ld	r24, Z
    4bd8:	28 2f       	mov	r18, r24
    4bda:	30 e0       	ldi	r19, 0x00	; 0
    4bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bde:	88 2f       	mov	r24, r24
    4be0:	90 e0       	ldi	r25, 0x00	; 0
    4be2:	a9 01       	movw	r20, r18
    4be4:	02 c0       	rjmp	.+4      	; 0x4bea <M_DIO_enGetPinValue+0xee>
    4be6:	55 95       	asr	r21
    4be8:	47 95       	ror	r20
    4bea:	8a 95       	dec	r24
    4bec:	e2 f7       	brpl	.-8      	; 0x4be6 <M_DIO_enGetPinValue+0xea>
    4bee:	ca 01       	movw	r24, r20
    4bf0:	81 70       	andi	r24, 0x01	; 1
    4bf2:	89 83       	std	Y+1, r24	; 0x01
		default: break;
	}
    return Local_levelType ;
    4bf4:	89 81       	ldd	r24, Y+1	; 0x01
}
    4bf6:	26 96       	adiw	r28, 0x06	; 6
    4bf8:	0f b6       	in	r0, 0x3f	; 63
    4bfa:	f8 94       	cli
    4bfc:	de bf       	out	0x3e, r29	; 62
    4bfe:	0f be       	out	0x3f, r0	; 63
    4c00:	cd bf       	out	0x3d, r28	; 61
    4c02:	cf 91       	pop	r28
    4c04:	df 91       	pop	r29
    4c06:	08 95       	ret

00004c08 <M_DIO_voidSetPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_DIO_voidSetPinValue(Dio_ChannelType ChannelId,Dio_PinLevelType Level)
{
    4c08:	df 93       	push	r29
    4c0a:	cf 93       	push	r28
    4c0c:	cd b7       	in	r28, 0x3d	; 61
    4c0e:	de b7       	in	r29, 0x3e	; 62
    4c10:	28 97       	sbiw	r28, 0x08	; 8
    4c12:	0f b6       	in	r0, 0x3f	; 63
    4c14:	f8 94       	cli
    4c16:	de bf       	out	0x3e, r29	; 62
    4c18:	0f be       	out	0x3f, r0	; 63
    4c1a:	cd bf       	out	0x3d, r28	; 61
    4c1c:	8b 83       	std	Y+3, r24	; 0x03
    4c1e:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8pin = ChannelId % 10;
    4c20:	8b 81       	ldd	r24, Y+3	; 0x03
    4c22:	9a e0       	ldi	r25, 0x0A	; 10
    4c24:	69 2f       	mov	r22, r25
    4c26:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <__udivmodqi4>
    4c2a:	89 2f       	mov	r24, r25
    4c2c:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8port = ChannelId / 10;
    4c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c30:	9a e0       	ldi	r25, 0x0A	; 10
    4c32:	69 2f       	mov	r22, r25
    4c34:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <__udivmodqi4>
    4c38:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    4c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    4c3c:	81 30       	cpi	r24, 0x01	; 1
    4c3e:	09 f0       	breq	.+2      	; 0x4c42 <M_DIO_voidSetPinValue+0x3a>
    4c40:	70 c0       	rjmp	.+224    	; 0x4d22 <M_DIO_voidSetPinValue+0x11a>
	{
		switch(Local_u8port)
    4c42:	89 81       	ldd	r24, Y+1	; 0x01
    4c44:	28 2f       	mov	r18, r24
    4c46:	30 e0       	ldi	r19, 0x00	; 0
    4c48:	38 87       	std	Y+8, r19	; 0x08
    4c4a:	2f 83       	std	Y+7, r18	; 0x07
    4c4c:	8f 81       	ldd	r24, Y+7	; 0x07
    4c4e:	98 85       	ldd	r25, Y+8	; 0x08
    4c50:	82 30       	cpi	r24, 0x02	; 2
    4c52:	91 05       	cpc	r25, r1
    4c54:	51 f1       	breq	.+84     	; 0x4caa <M_DIO_voidSetPinValue+0xa2>
    4c56:	2f 81       	ldd	r18, Y+7	; 0x07
    4c58:	38 85       	ldd	r19, Y+8	; 0x08
    4c5a:	23 30       	cpi	r18, 0x03	; 3
    4c5c:	31 05       	cpc	r19, r1
    4c5e:	34 f4       	brge	.+12     	; 0x4c6c <M_DIO_voidSetPinValue+0x64>
    4c60:	8f 81       	ldd	r24, Y+7	; 0x07
    4c62:	98 85       	ldd	r25, Y+8	; 0x08
    4c64:	81 30       	cpi	r24, 0x01	; 1
    4c66:	91 05       	cpc	r25, r1
    4c68:	61 f0       	breq	.+24     	; 0x4c82 <M_DIO_voidSetPinValue+0x7a>
    4c6a:	d3 c0       	rjmp	.+422    	; 0x4e12 <M_DIO_voidSetPinValue+0x20a>
    4c6c:	2f 81       	ldd	r18, Y+7	; 0x07
    4c6e:	38 85       	ldd	r19, Y+8	; 0x08
    4c70:	23 30       	cpi	r18, 0x03	; 3
    4c72:	31 05       	cpc	r19, r1
    4c74:	71 f1       	breq	.+92     	; 0x4cd2 <M_DIO_voidSetPinValue+0xca>
    4c76:	8f 81       	ldd	r24, Y+7	; 0x07
    4c78:	98 85       	ldd	r25, Y+8	; 0x08
    4c7a:	84 30       	cpi	r24, 0x04	; 4
    4c7c:	91 05       	cpc	r25, r1
    4c7e:	e9 f1       	breq	.+122    	; 0x4cfa <M_DIO_voidSetPinValue+0xf2>
    4c80:	c8 c0       	rjmp	.+400    	; 0x4e12 <M_DIO_voidSetPinValue+0x20a>
		{
			case DIO_PORTA : SET_BIT( PORTA_REG,Local_u8pin); break;
    4c82:	ab e3       	ldi	r26, 0x3B	; 59
    4c84:	b0 e0       	ldi	r27, 0x00	; 0
    4c86:	eb e3       	ldi	r30, 0x3B	; 59
    4c88:	f0 e0       	ldi	r31, 0x00	; 0
    4c8a:	80 81       	ld	r24, Z
    4c8c:	48 2f       	mov	r20, r24
    4c8e:	8a 81       	ldd	r24, Y+2	; 0x02
    4c90:	28 2f       	mov	r18, r24
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	81 e0       	ldi	r24, 0x01	; 1
    4c96:	90 e0       	ldi	r25, 0x00	; 0
    4c98:	02 2e       	mov	r0, r18
    4c9a:	02 c0       	rjmp	.+4      	; 0x4ca0 <M_DIO_voidSetPinValue+0x98>
    4c9c:	88 0f       	add	r24, r24
    4c9e:	99 1f       	adc	r25, r25
    4ca0:	0a 94       	dec	r0
    4ca2:	e2 f7       	brpl	.-8      	; 0x4c9c <M_DIO_voidSetPinValue+0x94>
    4ca4:	84 2b       	or	r24, r20
    4ca6:	8c 93       	st	X, r24
    4ca8:	b4 c0       	rjmp	.+360    	; 0x4e12 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTB : SET_BIT( PORTB_REG,Local_u8pin); break;
    4caa:	a8 e3       	ldi	r26, 0x38	; 56
    4cac:	b0 e0       	ldi	r27, 0x00	; 0
    4cae:	e8 e3       	ldi	r30, 0x38	; 56
    4cb0:	f0 e0       	ldi	r31, 0x00	; 0
    4cb2:	80 81       	ld	r24, Z
    4cb4:	48 2f       	mov	r20, r24
    4cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    4cb8:	28 2f       	mov	r18, r24
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	81 e0       	ldi	r24, 0x01	; 1
    4cbe:	90 e0       	ldi	r25, 0x00	; 0
    4cc0:	02 2e       	mov	r0, r18
    4cc2:	02 c0       	rjmp	.+4      	; 0x4cc8 <M_DIO_voidSetPinValue+0xc0>
    4cc4:	88 0f       	add	r24, r24
    4cc6:	99 1f       	adc	r25, r25
    4cc8:	0a 94       	dec	r0
    4cca:	e2 f7       	brpl	.-8      	; 0x4cc4 <M_DIO_voidSetPinValue+0xbc>
    4ccc:	84 2b       	or	r24, r20
    4cce:	8c 93       	st	X, r24
    4cd0:	a0 c0       	rjmp	.+320    	; 0x4e12 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTC : SET_BIT( PORTC_REG,Local_u8pin); break;
    4cd2:	a5 e3       	ldi	r26, 0x35	; 53
    4cd4:	b0 e0       	ldi	r27, 0x00	; 0
    4cd6:	e5 e3       	ldi	r30, 0x35	; 53
    4cd8:	f0 e0       	ldi	r31, 0x00	; 0
    4cda:	80 81       	ld	r24, Z
    4cdc:	48 2f       	mov	r20, r24
    4cde:	8a 81       	ldd	r24, Y+2	; 0x02
    4ce0:	28 2f       	mov	r18, r24
    4ce2:	30 e0       	ldi	r19, 0x00	; 0
    4ce4:	81 e0       	ldi	r24, 0x01	; 1
    4ce6:	90 e0       	ldi	r25, 0x00	; 0
    4ce8:	02 2e       	mov	r0, r18
    4cea:	02 c0       	rjmp	.+4      	; 0x4cf0 <M_DIO_voidSetPinValue+0xe8>
    4cec:	88 0f       	add	r24, r24
    4cee:	99 1f       	adc	r25, r25
    4cf0:	0a 94       	dec	r0
    4cf2:	e2 f7       	brpl	.-8      	; 0x4cec <M_DIO_voidSetPinValue+0xe4>
    4cf4:	84 2b       	or	r24, r20
    4cf6:	8c 93       	st	X, r24
    4cf8:	8c c0       	rjmp	.+280    	; 0x4e12 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTD : SET_BIT( PORTD_REG,Local_u8pin); break;
    4cfa:	a2 e3       	ldi	r26, 0x32	; 50
    4cfc:	b0 e0       	ldi	r27, 0x00	; 0
    4cfe:	e2 e3       	ldi	r30, 0x32	; 50
    4d00:	f0 e0       	ldi	r31, 0x00	; 0
    4d02:	80 81       	ld	r24, Z
    4d04:	48 2f       	mov	r20, r24
    4d06:	8a 81       	ldd	r24, Y+2	; 0x02
    4d08:	28 2f       	mov	r18, r24
    4d0a:	30 e0       	ldi	r19, 0x00	; 0
    4d0c:	81 e0       	ldi	r24, 0x01	; 1
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	02 2e       	mov	r0, r18
    4d12:	02 c0       	rjmp	.+4      	; 0x4d18 <M_DIO_voidSetPinValue+0x110>
    4d14:	88 0f       	add	r24, r24
    4d16:	99 1f       	adc	r25, r25
    4d18:	0a 94       	dec	r0
    4d1a:	e2 f7       	brpl	.-8      	; 0x4d14 <M_DIO_voidSetPinValue+0x10c>
    4d1c:	84 2b       	or	r24, r20
    4d1e:	8c 93       	st	X, r24
    4d20:	78 c0       	rjmp	.+240    	; 0x4e12 <M_DIO_voidSetPinValue+0x20a>
			default: break;
		}
	}
	else if (Level == DIO_LOW)
    4d22:	8c 81       	ldd	r24, Y+4	; 0x04
    4d24:	88 23       	and	r24, r24
    4d26:	09 f0       	breq	.+2      	; 0x4d2a <M_DIO_voidSetPinValue+0x122>
    4d28:	74 c0       	rjmp	.+232    	; 0x4e12 <M_DIO_voidSetPinValue+0x20a>
	{
		switch(Local_u8port)
    4d2a:	89 81       	ldd	r24, Y+1	; 0x01
    4d2c:	28 2f       	mov	r18, r24
    4d2e:	30 e0       	ldi	r19, 0x00	; 0
    4d30:	3e 83       	std	Y+6, r19	; 0x06
    4d32:	2d 83       	std	Y+5, r18	; 0x05
    4d34:	8d 81       	ldd	r24, Y+5	; 0x05
    4d36:	9e 81       	ldd	r25, Y+6	; 0x06
    4d38:	82 30       	cpi	r24, 0x02	; 2
    4d3a:	91 05       	cpc	r25, r1
    4d3c:	61 f1       	breq	.+88     	; 0x4d96 <M_DIO_voidSetPinValue+0x18e>
    4d3e:	2d 81       	ldd	r18, Y+5	; 0x05
    4d40:	3e 81       	ldd	r19, Y+6	; 0x06
    4d42:	23 30       	cpi	r18, 0x03	; 3
    4d44:	31 05       	cpc	r19, r1
    4d46:	34 f4       	brge	.+12     	; 0x4d54 <M_DIO_voidSetPinValue+0x14c>
    4d48:	8d 81       	ldd	r24, Y+5	; 0x05
    4d4a:	9e 81       	ldd	r25, Y+6	; 0x06
    4d4c:	81 30       	cpi	r24, 0x01	; 1
    4d4e:	91 05       	cpc	r25, r1
    4d50:	69 f0       	breq	.+26     	; 0x4d6c <M_DIO_voidSetPinValue+0x164>
    4d52:	5f c0       	rjmp	.+190    	; 0x4e12 <M_DIO_voidSetPinValue+0x20a>
    4d54:	2d 81       	ldd	r18, Y+5	; 0x05
    4d56:	3e 81       	ldd	r19, Y+6	; 0x06
    4d58:	23 30       	cpi	r18, 0x03	; 3
    4d5a:	31 05       	cpc	r19, r1
    4d5c:	89 f1       	breq	.+98     	; 0x4dc0 <M_DIO_voidSetPinValue+0x1b8>
    4d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    4d60:	9e 81       	ldd	r25, Y+6	; 0x06
    4d62:	84 30       	cpi	r24, 0x04	; 4
    4d64:	91 05       	cpc	r25, r1
    4d66:	09 f4       	brne	.+2      	; 0x4d6a <M_DIO_voidSetPinValue+0x162>
    4d68:	40 c0       	rjmp	.+128    	; 0x4dea <M_DIO_voidSetPinValue+0x1e2>
    4d6a:	53 c0       	rjmp	.+166    	; 0x4e12 <M_DIO_voidSetPinValue+0x20a>
		{
			case DIO_PORTA : CLR_BIT( PORTA_REG,Local_u8pin); break;
    4d6c:	ab e3       	ldi	r26, 0x3B	; 59
    4d6e:	b0 e0       	ldi	r27, 0x00	; 0
    4d70:	eb e3       	ldi	r30, 0x3B	; 59
    4d72:	f0 e0       	ldi	r31, 0x00	; 0
    4d74:	80 81       	ld	r24, Z
    4d76:	48 2f       	mov	r20, r24
    4d78:	8a 81       	ldd	r24, Y+2	; 0x02
    4d7a:	28 2f       	mov	r18, r24
    4d7c:	30 e0       	ldi	r19, 0x00	; 0
    4d7e:	81 e0       	ldi	r24, 0x01	; 1
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	02 2e       	mov	r0, r18
    4d84:	02 c0       	rjmp	.+4      	; 0x4d8a <M_DIO_voidSetPinValue+0x182>
    4d86:	88 0f       	add	r24, r24
    4d88:	99 1f       	adc	r25, r25
    4d8a:	0a 94       	dec	r0
    4d8c:	e2 f7       	brpl	.-8      	; 0x4d86 <M_DIO_voidSetPinValue+0x17e>
    4d8e:	80 95       	com	r24
    4d90:	84 23       	and	r24, r20
    4d92:	8c 93       	st	X, r24
    4d94:	3e c0       	rjmp	.+124    	; 0x4e12 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTB : CLR_BIT( PORTB_REG,Local_u8pin); break;
    4d96:	a8 e3       	ldi	r26, 0x38	; 56
    4d98:	b0 e0       	ldi	r27, 0x00	; 0
    4d9a:	e8 e3       	ldi	r30, 0x38	; 56
    4d9c:	f0 e0       	ldi	r31, 0x00	; 0
    4d9e:	80 81       	ld	r24, Z
    4da0:	48 2f       	mov	r20, r24
    4da2:	8a 81       	ldd	r24, Y+2	; 0x02
    4da4:	28 2f       	mov	r18, r24
    4da6:	30 e0       	ldi	r19, 0x00	; 0
    4da8:	81 e0       	ldi	r24, 0x01	; 1
    4daa:	90 e0       	ldi	r25, 0x00	; 0
    4dac:	02 2e       	mov	r0, r18
    4dae:	02 c0       	rjmp	.+4      	; 0x4db4 <M_DIO_voidSetPinValue+0x1ac>
    4db0:	88 0f       	add	r24, r24
    4db2:	99 1f       	adc	r25, r25
    4db4:	0a 94       	dec	r0
    4db6:	e2 f7       	brpl	.-8      	; 0x4db0 <M_DIO_voidSetPinValue+0x1a8>
    4db8:	80 95       	com	r24
    4dba:	84 23       	and	r24, r20
    4dbc:	8c 93       	st	X, r24
    4dbe:	29 c0       	rjmp	.+82     	; 0x4e12 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTC : CLR_BIT( PORTC_REG,Local_u8pin); break;
    4dc0:	a5 e3       	ldi	r26, 0x35	; 53
    4dc2:	b0 e0       	ldi	r27, 0x00	; 0
    4dc4:	e5 e3       	ldi	r30, 0x35	; 53
    4dc6:	f0 e0       	ldi	r31, 0x00	; 0
    4dc8:	80 81       	ld	r24, Z
    4dca:	48 2f       	mov	r20, r24
    4dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    4dce:	28 2f       	mov	r18, r24
    4dd0:	30 e0       	ldi	r19, 0x00	; 0
    4dd2:	81 e0       	ldi	r24, 0x01	; 1
    4dd4:	90 e0       	ldi	r25, 0x00	; 0
    4dd6:	02 2e       	mov	r0, r18
    4dd8:	02 c0       	rjmp	.+4      	; 0x4dde <M_DIO_voidSetPinValue+0x1d6>
    4dda:	88 0f       	add	r24, r24
    4ddc:	99 1f       	adc	r25, r25
    4dde:	0a 94       	dec	r0
    4de0:	e2 f7       	brpl	.-8      	; 0x4dda <M_DIO_voidSetPinValue+0x1d2>
    4de2:	80 95       	com	r24
    4de4:	84 23       	and	r24, r20
    4de6:	8c 93       	st	X, r24
    4de8:	14 c0       	rjmp	.+40     	; 0x4e12 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTD : CLR_BIT( PORTD_REG,Local_u8pin); break;
    4dea:	a2 e3       	ldi	r26, 0x32	; 50
    4dec:	b0 e0       	ldi	r27, 0x00	; 0
    4dee:	e2 e3       	ldi	r30, 0x32	; 50
    4df0:	f0 e0       	ldi	r31, 0x00	; 0
    4df2:	80 81       	ld	r24, Z
    4df4:	48 2f       	mov	r20, r24
    4df6:	8a 81       	ldd	r24, Y+2	; 0x02
    4df8:	28 2f       	mov	r18, r24
    4dfa:	30 e0       	ldi	r19, 0x00	; 0
    4dfc:	81 e0       	ldi	r24, 0x01	; 1
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	02 2e       	mov	r0, r18
    4e02:	02 c0       	rjmp	.+4      	; 0x4e08 <M_DIO_voidSetPinValue+0x200>
    4e04:	88 0f       	add	r24, r24
    4e06:	99 1f       	adc	r25, r25
    4e08:	0a 94       	dec	r0
    4e0a:	e2 f7       	brpl	.-8      	; 0x4e04 <M_DIO_voidSetPinValue+0x1fc>
    4e0c:	80 95       	com	r24
    4e0e:	84 23       	and	r24, r20
    4e10:	8c 93       	st	X, r24
			default: break;
		}
	}
}
    4e12:	28 96       	adiw	r28, 0x08	; 8
    4e14:	0f b6       	in	r0, 0x3f	; 63
    4e16:	f8 94       	cli
    4e18:	de bf       	out	0x3e, r29	; 62
    4e1a:	0f be       	out	0x3f, r0	; 63
    4e1c:	cd bf       	out	0x3d, r28	; 61
    4e1e:	cf 91       	pop	r28
    4e20:	df 91       	pop	r29
    4e22:	08 95       	ret

00004e24 <M_DIO_enGetPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_DIO_enGetPortValue(Dio_PortType PortId)
{
    4e24:	df 93       	push	r29
    4e26:	cf 93       	push	r28
    4e28:	00 d0       	rcall	.+0      	; 0x4e2a <M_DIO_enGetPortValue+0x6>
    4e2a:	00 d0       	rcall	.+0      	; 0x4e2c <M_DIO_enGetPortValue+0x8>
    4e2c:	cd b7       	in	r28, 0x3d	; 61
    4e2e:	de b7       	in	r29, 0x3e	; 62
    4e30:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_u8Reading;

	switch( PortId)
    4e32:	8a 81       	ldd	r24, Y+2	; 0x02
    4e34:	28 2f       	mov	r18, r24
    4e36:	30 e0       	ldi	r19, 0x00	; 0
    4e38:	3c 83       	std	Y+4, r19	; 0x04
    4e3a:	2b 83       	std	Y+3, r18	; 0x03
    4e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    4e40:	82 30       	cpi	r24, 0x02	; 2
    4e42:	91 05       	cpc	r25, r1
    4e44:	d9 f0       	breq	.+54     	; 0x4e7c <M_DIO_enGetPortValue+0x58>
    4e46:	2b 81       	ldd	r18, Y+3	; 0x03
    4e48:	3c 81       	ldd	r19, Y+4	; 0x04
    4e4a:	23 30       	cpi	r18, 0x03	; 3
    4e4c:	31 05       	cpc	r19, r1
    4e4e:	34 f4       	brge	.+12     	; 0x4e5c <M_DIO_enGetPortValue+0x38>
    4e50:	8b 81       	ldd	r24, Y+3	; 0x03
    4e52:	9c 81       	ldd	r25, Y+4	; 0x04
    4e54:	81 30       	cpi	r24, 0x01	; 1
    4e56:	91 05       	cpc	r25, r1
    4e58:	61 f0       	breq	.+24     	; 0x4e72 <M_DIO_enGetPortValue+0x4e>
    4e5a:	1e c0       	rjmp	.+60     	; 0x4e98 <M_DIO_enGetPortValue+0x74>
    4e5c:	2b 81       	ldd	r18, Y+3	; 0x03
    4e5e:	3c 81       	ldd	r19, Y+4	; 0x04
    4e60:	23 30       	cpi	r18, 0x03	; 3
    4e62:	31 05       	cpc	r19, r1
    4e64:	81 f0       	breq	.+32     	; 0x4e86 <M_DIO_enGetPortValue+0x62>
    4e66:	8b 81       	ldd	r24, Y+3	; 0x03
    4e68:	9c 81       	ldd	r25, Y+4	; 0x04
    4e6a:	84 30       	cpi	r24, 0x04	; 4
    4e6c:	91 05       	cpc	r25, r1
    4e6e:	81 f0       	breq	.+32     	; 0x4e90 <M_DIO_enGetPortValue+0x6c>
    4e70:	13 c0       	rjmp	.+38     	; 0x4e98 <M_DIO_enGetPortValue+0x74>
	{
		case DIO_PORTA : Local_u8Reading =  PORTA_REG; break;
    4e72:	eb e3       	ldi	r30, 0x3B	; 59
    4e74:	f0 e0       	ldi	r31, 0x00	; 0
    4e76:	80 81       	ld	r24, Z
    4e78:	89 83       	std	Y+1, r24	; 0x01
    4e7a:	0e c0       	rjmp	.+28     	; 0x4e98 <M_DIO_enGetPortValue+0x74>
		case DIO_PORTB : Local_u8Reading =  PORTB_REG; break;
    4e7c:	e8 e3       	ldi	r30, 0x38	; 56
    4e7e:	f0 e0       	ldi	r31, 0x00	; 0
    4e80:	80 81       	ld	r24, Z
    4e82:	89 83       	std	Y+1, r24	; 0x01
    4e84:	09 c0       	rjmp	.+18     	; 0x4e98 <M_DIO_enGetPortValue+0x74>
		case DIO_PORTC : Local_u8Reading =  PORTC_REG; break;
    4e86:	e5 e3       	ldi	r30, 0x35	; 53
    4e88:	f0 e0       	ldi	r31, 0x00	; 0
    4e8a:	80 81       	ld	r24, Z
    4e8c:	89 83       	std	Y+1, r24	; 0x01
    4e8e:	04 c0       	rjmp	.+8      	; 0x4e98 <M_DIO_enGetPortValue+0x74>
		case DIO_PORTD : Local_u8Reading =  PORTD_REG; break;
    4e90:	e2 e3       	ldi	r30, 0x32	; 50
    4e92:	f0 e0       	ldi	r31, 0x00	; 0
    4e94:	80 81       	ld	r24, Z
    4e96:	89 83       	std	Y+1, r24	; 0x01
		default: break;
	}

	return Local_u8Reading;
    4e98:	89 81       	ldd	r24, Y+1	; 0x01
}
    4e9a:	0f 90       	pop	r0
    4e9c:	0f 90       	pop	r0
    4e9e:	0f 90       	pop	r0
    4ea0:	0f 90       	pop	r0
    4ea2:	cf 91       	pop	r28
    4ea4:	df 91       	pop	r29
    4ea6:	08 95       	ret

00004ea8 <M_DIO_voidSetPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_DIO_voidSetPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    4ea8:	df 93       	push	r29
    4eaa:	cf 93       	push	r28
    4eac:	00 d0       	rcall	.+0      	; 0x4eae <M_DIO_voidSetPortValue+0x6>
    4eae:	00 d0       	rcall	.+0      	; 0x4eb0 <M_DIO_voidSetPortValue+0x8>
    4eb0:	cd b7       	in	r28, 0x3d	; 61
    4eb2:	de b7       	in	r29, 0x3e	; 62
    4eb4:	89 83       	std	Y+1, r24	; 0x01
    4eb6:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    4eb8:	89 81       	ldd	r24, Y+1	; 0x01
    4eba:	28 2f       	mov	r18, r24
    4ebc:	30 e0       	ldi	r19, 0x00	; 0
    4ebe:	3c 83       	std	Y+4, r19	; 0x04
    4ec0:	2b 83       	std	Y+3, r18	; 0x03
    4ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    4ec6:	82 30       	cpi	r24, 0x02	; 2
    4ec8:	91 05       	cpc	r25, r1
    4eca:	d9 f0       	breq	.+54     	; 0x4f02 <M_DIO_voidSetPortValue+0x5a>
    4ecc:	2b 81       	ldd	r18, Y+3	; 0x03
    4ece:	3c 81       	ldd	r19, Y+4	; 0x04
    4ed0:	23 30       	cpi	r18, 0x03	; 3
    4ed2:	31 05       	cpc	r19, r1
    4ed4:	34 f4       	brge	.+12     	; 0x4ee2 <M_DIO_voidSetPortValue+0x3a>
    4ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ed8:	9c 81       	ldd	r25, Y+4	; 0x04
    4eda:	81 30       	cpi	r24, 0x01	; 1
    4edc:	91 05       	cpc	r25, r1
    4ede:	61 f0       	breq	.+24     	; 0x4ef8 <M_DIO_voidSetPortValue+0x50>
    4ee0:	1e c0       	rjmp	.+60     	; 0x4f1e <M_DIO_voidSetPortValue+0x76>
    4ee2:	2b 81       	ldd	r18, Y+3	; 0x03
    4ee4:	3c 81       	ldd	r19, Y+4	; 0x04
    4ee6:	23 30       	cpi	r18, 0x03	; 3
    4ee8:	31 05       	cpc	r19, r1
    4eea:	81 f0       	breq	.+32     	; 0x4f0c <M_DIO_voidSetPortValue+0x64>
    4eec:	8b 81       	ldd	r24, Y+3	; 0x03
    4eee:	9c 81       	ldd	r25, Y+4	; 0x04
    4ef0:	84 30       	cpi	r24, 0x04	; 4
    4ef2:	91 05       	cpc	r25, r1
    4ef4:	81 f0       	breq	.+32     	; 0x4f16 <M_DIO_voidSetPortValue+0x6e>
    4ef6:	13 c0       	rjmp	.+38     	; 0x4f1e <M_DIO_voidSetPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level; break;
    4ef8:	eb e3       	ldi	r30, 0x3B	; 59
    4efa:	f0 e0       	ldi	r31, 0x00	; 0
    4efc:	8a 81       	ldd	r24, Y+2	; 0x02
    4efe:	80 83       	st	Z, r24
    4f00:	0e c0       	rjmp	.+28     	; 0x4f1e <M_DIO_voidSetPortValue+0x76>
		case DIO_PORTB : PORTB_REG = Level; break;
    4f02:	e8 e3       	ldi	r30, 0x38	; 56
    4f04:	f0 e0       	ldi	r31, 0x00	; 0
    4f06:	8a 81       	ldd	r24, Y+2	; 0x02
    4f08:	80 83       	st	Z, r24
    4f0a:	09 c0       	rjmp	.+18     	; 0x4f1e <M_DIO_voidSetPortValue+0x76>
		case DIO_PORTC : PORTC_REG = Level; break;
    4f0c:	e5 e3       	ldi	r30, 0x35	; 53
    4f0e:	f0 e0       	ldi	r31, 0x00	; 0
    4f10:	8a 81       	ldd	r24, Y+2	; 0x02
    4f12:	80 83       	st	Z, r24
    4f14:	04 c0       	rjmp	.+8      	; 0x4f1e <M_DIO_voidSetPortValue+0x76>
		case DIO_PORTD : PORTD_REG = Level; break;
    4f16:	e2 e3       	ldi	r30, 0x32	; 50
    4f18:	f0 e0       	ldi	r31, 0x00	; 0
    4f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4f1c:	80 83       	st	Z, r24
		default: break;
	}
}
    4f1e:	0f 90       	pop	r0
    4f20:	0f 90       	pop	r0
    4f22:	0f 90       	pop	r0
    4f24:	0f 90       	pop	r0
    4f26:	cf 91       	pop	r28
    4f28:	df 91       	pop	r29
    4f2a:	08 95       	ret

00004f2c <M_DIO_voidTogglePin>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_DIO_voidTogglePin(Dio_ChannelType channelId)
{
    4f2c:	df 93       	push	r29
    4f2e:	cf 93       	push	r28
    4f30:	00 d0       	rcall	.+0      	; 0x4f32 <M_DIO_voidTogglePin+0x6>
    4f32:	00 d0       	rcall	.+0      	; 0x4f34 <M_DIO_voidTogglePin+0x8>
    4f34:	0f 92       	push	r0
    4f36:	cd b7       	in	r28, 0x3d	; 61
    4f38:	de b7       	in	r29, 0x3e	; 62
    4f3a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8pin = channelId % 10;
    4f3c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f3e:	9a e0       	ldi	r25, 0x0A	; 10
    4f40:	69 2f       	mov	r22, r25
    4f42:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <__udivmodqi4>
    4f46:	89 2f       	mov	r24, r25
    4f48:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8port = channelId/ 10;
    4f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f4c:	9a e0       	ldi	r25, 0x0A	; 10
    4f4e:	69 2f       	mov	r22, r25
    4f50:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <__udivmodqi4>
    4f54:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_u8port)
    4f56:	89 81       	ldd	r24, Y+1	; 0x01
    4f58:	28 2f       	mov	r18, r24
    4f5a:	30 e0       	ldi	r19, 0x00	; 0
    4f5c:	3d 83       	std	Y+5, r19	; 0x05
    4f5e:	2c 83       	std	Y+4, r18	; 0x04
    4f60:	8c 81       	ldd	r24, Y+4	; 0x04
    4f62:	9d 81       	ldd	r25, Y+5	; 0x05
    4f64:	82 30       	cpi	r24, 0x02	; 2
    4f66:	91 05       	cpc	r25, r1
    4f68:	51 f1       	breq	.+84     	; 0x4fbe <M_DIO_voidTogglePin+0x92>
    4f6a:	2c 81       	ldd	r18, Y+4	; 0x04
    4f6c:	3d 81       	ldd	r19, Y+5	; 0x05
    4f6e:	23 30       	cpi	r18, 0x03	; 3
    4f70:	31 05       	cpc	r19, r1
    4f72:	34 f4       	brge	.+12     	; 0x4f80 <M_DIO_voidTogglePin+0x54>
    4f74:	8c 81       	ldd	r24, Y+4	; 0x04
    4f76:	9d 81       	ldd	r25, Y+5	; 0x05
    4f78:	81 30       	cpi	r24, 0x01	; 1
    4f7a:	91 05       	cpc	r25, r1
    4f7c:	61 f0       	breq	.+24     	; 0x4f96 <M_DIO_voidTogglePin+0x6a>
    4f7e:	5a c0       	rjmp	.+180    	; 0x5034 <M_DIO_voidTogglePin+0x108>
    4f80:	2c 81       	ldd	r18, Y+4	; 0x04
    4f82:	3d 81       	ldd	r19, Y+5	; 0x05
    4f84:	23 30       	cpi	r18, 0x03	; 3
    4f86:	31 05       	cpc	r19, r1
    4f88:	71 f1       	breq	.+92     	; 0x4fe6 <M_DIO_voidTogglePin+0xba>
    4f8a:	8c 81       	ldd	r24, Y+4	; 0x04
    4f8c:	9d 81       	ldd	r25, Y+5	; 0x05
    4f8e:	84 30       	cpi	r24, 0x04	; 4
    4f90:	91 05       	cpc	r25, r1
    4f92:	e9 f1       	breq	.+122    	; 0x500e <M_DIO_voidTogglePin+0xe2>
    4f94:	4f c0       	rjmp	.+158    	; 0x5034 <M_DIO_voidTogglePin+0x108>
	{
		case DIO_PORTA : TOG_BIT(PORTA_REG,Local_u8pin); break;
    4f96:	ab e3       	ldi	r26, 0x3B	; 59
    4f98:	b0 e0       	ldi	r27, 0x00	; 0
    4f9a:	eb e3       	ldi	r30, 0x3B	; 59
    4f9c:	f0 e0       	ldi	r31, 0x00	; 0
    4f9e:	80 81       	ld	r24, Z
    4fa0:	48 2f       	mov	r20, r24
    4fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    4fa4:	28 2f       	mov	r18, r24
    4fa6:	30 e0       	ldi	r19, 0x00	; 0
    4fa8:	81 e0       	ldi	r24, 0x01	; 1
    4faa:	90 e0       	ldi	r25, 0x00	; 0
    4fac:	02 2e       	mov	r0, r18
    4fae:	02 c0       	rjmp	.+4      	; 0x4fb4 <M_DIO_voidTogglePin+0x88>
    4fb0:	88 0f       	add	r24, r24
    4fb2:	99 1f       	adc	r25, r25
    4fb4:	0a 94       	dec	r0
    4fb6:	e2 f7       	brpl	.-8      	; 0x4fb0 <M_DIO_voidTogglePin+0x84>
    4fb8:	84 27       	eor	r24, r20
    4fba:	8c 93       	st	X, r24
    4fbc:	3b c0       	rjmp	.+118    	; 0x5034 <M_DIO_voidTogglePin+0x108>
		case DIO_PORTB : TOG_BIT(PORTB_REG,Local_u8pin); break;
    4fbe:	a8 e3       	ldi	r26, 0x38	; 56
    4fc0:	b0 e0       	ldi	r27, 0x00	; 0
    4fc2:	e8 e3       	ldi	r30, 0x38	; 56
    4fc4:	f0 e0       	ldi	r31, 0x00	; 0
    4fc6:	80 81       	ld	r24, Z
    4fc8:	48 2f       	mov	r20, r24
    4fca:	8a 81       	ldd	r24, Y+2	; 0x02
    4fcc:	28 2f       	mov	r18, r24
    4fce:	30 e0       	ldi	r19, 0x00	; 0
    4fd0:	81 e0       	ldi	r24, 0x01	; 1
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	02 2e       	mov	r0, r18
    4fd6:	02 c0       	rjmp	.+4      	; 0x4fdc <M_DIO_voidTogglePin+0xb0>
    4fd8:	88 0f       	add	r24, r24
    4fda:	99 1f       	adc	r25, r25
    4fdc:	0a 94       	dec	r0
    4fde:	e2 f7       	brpl	.-8      	; 0x4fd8 <M_DIO_voidTogglePin+0xac>
    4fe0:	84 27       	eor	r24, r20
    4fe2:	8c 93       	st	X, r24
    4fe4:	27 c0       	rjmp	.+78     	; 0x5034 <M_DIO_voidTogglePin+0x108>
		case DIO_PORTC : TOG_BIT(PORTC_REG,Local_u8pin); break;
    4fe6:	a5 e3       	ldi	r26, 0x35	; 53
    4fe8:	b0 e0       	ldi	r27, 0x00	; 0
    4fea:	e5 e3       	ldi	r30, 0x35	; 53
    4fec:	f0 e0       	ldi	r31, 0x00	; 0
    4fee:	80 81       	ld	r24, Z
    4ff0:	48 2f       	mov	r20, r24
    4ff2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff4:	28 2f       	mov	r18, r24
    4ff6:	30 e0       	ldi	r19, 0x00	; 0
    4ff8:	81 e0       	ldi	r24, 0x01	; 1
    4ffa:	90 e0       	ldi	r25, 0x00	; 0
    4ffc:	02 2e       	mov	r0, r18
    4ffe:	02 c0       	rjmp	.+4      	; 0x5004 <M_DIO_voidTogglePin+0xd8>
    5000:	88 0f       	add	r24, r24
    5002:	99 1f       	adc	r25, r25
    5004:	0a 94       	dec	r0
    5006:	e2 f7       	brpl	.-8      	; 0x5000 <M_DIO_voidTogglePin+0xd4>
    5008:	84 27       	eor	r24, r20
    500a:	8c 93       	st	X, r24
    500c:	13 c0       	rjmp	.+38     	; 0x5034 <M_DIO_voidTogglePin+0x108>
		case DIO_PORTD : TOG_BIT(PORTD_REG,Local_u8pin); break;
    500e:	a2 e3       	ldi	r26, 0x32	; 50
    5010:	b0 e0       	ldi	r27, 0x00	; 0
    5012:	e2 e3       	ldi	r30, 0x32	; 50
    5014:	f0 e0       	ldi	r31, 0x00	; 0
    5016:	80 81       	ld	r24, Z
    5018:	48 2f       	mov	r20, r24
    501a:	8a 81       	ldd	r24, Y+2	; 0x02
    501c:	28 2f       	mov	r18, r24
    501e:	30 e0       	ldi	r19, 0x00	; 0
    5020:	81 e0       	ldi	r24, 0x01	; 1
    5022:	90 e0       	ldi	r25, 0x00	; 0
    5024:	02 2e       	mov	r0, r18
    5026:	02 c0       	rjmp	.+4      	; 0x502c <M_DIO_voidTogglePin+0x100>
    5028:	88 0f       	add	r24, r24
    502a:	99 1f       	adc	r25, r25
    502c:	0a 94       	dec	r0
    502e:	e2 f7       	brpl	.-8      	; 0x5028 <M_DIO_voidTogglePin+0xfc>
    5030:	84 27       	eor	r24, r20
    5032:	8c 93       	st	X, r24
		default: break;
	}
}
    5034:	0f 90       	pop	r0
    5036:	0f 90       	pop	r0
    5038:	0f 90       	pop	r0
    503a:	0f 90       	pop	r0
    503c:	0f 90       	pop	r0
    503e:	cf 91       	pop	r28
    5040:	df 91       	pop	r29
    5042:	08 95       	ret

00005044 <M_ADC_void_Init>:
#include "Mcu_HW.h"
#include "BIT_MATH.h"
#include "ADC_interface.h"


void M_ADC_void_Init(ADC_config_t mADC){
    5044:	df 93       	push	r29
    5046:	cf 93       	push	r28
    5048:	00 d0       	rcall	.+0      	; 0x504a <M_ADC_void_Init+0x6>
    504a:	00 d0       	rcall	.+0      	; 0x504c <M_ADC_void_Init+0x8>
    504c:	0f 92       	push	r0
    504e:	cd b7       	in	r28, 0x3d	; 61
    5050:	de b7       	in	r29, 0x3e	; 62
    5052:	49 83       	std	Y+1, r20	; 0x01
    5054:	5a 83       	std	Y+2, r21	; 0x02
    5056:	6b 83       	std	Y+3, r22	; 0x03
    5058:	7c 83       	std	Y+4, r23	; 0x04
    505a:	8d 83       	std	Y+5, r24	; 0x05


	//Right "0" or Left "1" Adjustment of the ADC data register
	ADMUX_REG |= (ADC_ADJUSTMENT<<ADMUX_ADLAR);
    505c:	a7 e2       	ldi	r26, 0x27	; 39
    505e:	b0 e0       	ldi	r27, 0x00	; 0
    5060:	e7 e2       	ldi	r30, 0x27	; 39
    5062:	f0 e0       	ldi	r31, 0x00	; 0
    5064:	80 81       	ld	r24, Z
    5066:	28 2f       	mov	r18, r24
    5068:	80 91 7b 03 	lds	r24, 0x037B
    506c:	88 2f       	mov	r24, r24
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	88 0f       	add	r24, r24
    5072:	99 1f       	adc	r25, r25
    5074:	82 95       	swap	r24
    5076:	92 95       	swap	r25
    5078:	90 7f       	andi	r25, 0xF0	; 240
    507a:	98 27       	eor	r25, r24
    507c:	80 7f       	andi	r24, 0xF0	; 240
    507e:	98 27       	eor	r25, r24
    5080:	82 2b       	or	r24, r18
    5082:	8c 93       	st	X, r24

	//Voltage Reference
	//ADMUX_REG &= 0x3F; //Zeroing the last 2 bits
	ADMUX_REG |= ((mADC.volt_ref)<<ADMUX_REFS0);
    5084:	a7 e2       	ldi	r26, 0x27	; 39
    5086:	b0 e0       	ldi	r27, 0x00	; 0
    5088:	e7 e2       	ldi	r30, 0x27	; 39
    508a:	f0 e0       	ldi	r31, 0x00	; 0
    508c:	80 81       	ld	r24, Z
    508e:	28 2f       	mov	r18, r24
    5090:	89 81       	ldd	r24, Y+1	; 0x01
    5092:	88 2f       	mov	r24, r24
    5094:	90 e0       	ldi	r25, 0x00	; 0
    5096:	00 24       	eor	r0, r0
    5098:	96 95       	lsr	r25
    509a:	87 95       	ror	r24
    509c:	07 94       	ror	r0
    509e:	96 95       	lsr	r25
    50a0:	87 95       	ror	r24
    50a2:	07 94       	ror	r0
    50a4:	98 2f       	mov	r25, r24
    50a6:	80 2d       	mov	r24, r0
    50a8:	82 2b       	or	r24, r18
    50aa:	8c 93       	st	X, r24

	//Auto trigger enable/disable
	ADCSRA_REG |= ((mADC.auto_trigger)<<ADCSRA_ADATE);
    50ac:	a6 e2       	ldi	r26, 0x26	; 38
    50ae:	b0 e0       	ldi	r27, 0x00	; 0
    50b0:	e6 e2       	ldi	r30, 0x26	; 38
    50b2:	f0 e0       	ldi	r31, 0x00	; 0
    50b4:	80 81       	ld	r24, Z
    50b6:	28 2f       	mov	r18, r24
    50b8:	8a 81       	ldd	r24, Y+2	; 0x02
    50ba:	88 2f       	mov	r24, r24
    50bc:	90 e0       	ldi	r25, 0x00	; 0
    50be:	88 0f       	add	r24, r24
    50c0:	99 1f       	adc	r25, r25
    50c2:	82 95       	swap	r24
    50c4:	92 95       	swap	r25
    50c6:	90 7f       	andi	r25, 0xF0	; 240
    50c8:	98 27       	eor	r25, r24
    50ca:	80 7f       	andi	r24, 0xF0	; 240
    50cc:	98 27       	eor	r25, r24
    50ce:	82 2b       	or	r24, r18
    50d0:	8c 93       	st	X, r24

	//Interrupt Enable/Disable
	ADCSRA_REG |= ((mADC.interrupt)<<ADCSRA_ADIE);
    50d2:	a6 e2       	ldi	r26, 0x26	; 38
    50d4:	b0 e0       	ldi	r27, 0x00	; 0
    50d6:	e6 e2       	ldi	r30, 0x26	; 38
    50d8:	f0 e0       	ldi	r31, 0x00	; 0
    50da:	80 81       	ld	r24, Z
    50dc:	28 2f       	mov	r18, r24
    50de:	8b 81       	ldd	r24, Y+3	; 0x03
    50e0:	88 2f       	mov	r24, r24
    50e2:	90 e0       	ldi	r25, 0x00	; 0
    50e4:	88 0f       	add	r24, r24
    50e6:	99 1f       	adc	r25, r25
    50e8:	88 0f       	add	r24, r24
    50ea:	99 1f       	adc	r25, r25
    50ec:	88 0f       	add	r24, r24
    50ee:	99 1f       	adc	r25, r25
    50f0:	82 2b       	or	r24, r18
    50f2:	8c 93       	st	X, r24

	//Prescaler Select
	ADCSRA_REG &= 0xF8;
    50f4:	a6 e2       	ldi	r26, 0x26	; 38
    50f6:	b0 e0       	ldi	r27, 0x00	; 0
    50f8:	e6 e2       	ldi	r30, 0x26	; 38
    50fa:	f0 e0       	ldi	r31, 0x00	; 0
    50fc:	80 81       	ld	r24, Z
    50fe:	88 7f       	andi	r24, 0xF8	; 248
    5100:	8c 93       	st	X, r24
	ADCSRA_REG |= ((mADC.prescaler)<<ADCSRA_ADPS0);
    5102:	a6 e2       	ldi	r26, 0x26	; 38
    5104:	b0 e0       	ldi	r27, 0x00	; 0
    5106:	e6 e2       	ldi	r30, 0x26	; 38
    5108:	f0 e0       	ldi	r31, 0x00	; 0
    510a:	90 81       	ld	r25, Z
    510c:	8c 81       	ldd	r24, Y+4	; 0x04
    510e:	89 2b       	or	r24, r25
    5110:	8c 93       	st	X, r24

	//Auto trigger Source
	SFIOR_REG &= 0x0F;
    5112:	a0 e5       	ldi	r26, 0x50	; 80
    5114:	b0 e0       	ldi	r27, 0x00	; 0
    5116:	e0 e5       	ldi	r30, 0x50	; 80
    5118:	f0 e0       	ldi	r31, 0x00	; 0
    511a:	80 81       	ld	r24, Z
    511c:	8f 70       	andi	r24, 0x0F	; 15
    511e:	8c 93       	st	X, r24
	SFIOR_REG |= ((mADC.auto_trigger_source)<<SFIOR_ADTS0);
    5120:	a0 e5       	ldi	r26, 0x50	; 80
    5122:	b0 e0       	ldi	r27, 0x00	; 0
    5124:	e0 e5       	ldi	r30, 0x50	; 80
    5126:	f0 e0       	ldi	r31, 0x00	; 0
    5128:	80 81       	ld	r24, Z
    512a:	28 2f       	mov	r18, r24
    512c:	8d 81       	ldd	r24, Y+5	; 0x05
    512e:	88 2f       	mov	r24, r24
    5130:	90 e0       	ldi	r25, 0x00	; 0
    5132:	88 0f       	add	r24, r24
    5134:	99 1f       	adc	r25, r25
    5136:	82 95       	swap	r24
    5138:	92 95       	swap	r25
    513a:	90 7f       	andi	r25, 0xF0	; 240
    513c:	98 27       	eor	r25, r24
    513e:	80 7f       	andi	r24, 0xF0	; 240
    5140:	98 27       	eor	r25, r24
    5142:	82 2b       	or	r24, r18
    5144:	8c 93       	st	X, r24

	//Finally Enable
	ADCSRA_REG |= (1<<ADCSRA_ADEN);
    5146:	a6 e2       	ldi	r26, 0x26	; 38
    5148:	b0 e0       	ldi	r27, 0x00	; 0
    514a:	e6 e2       	ldi	r30, 0x26	; 38
    514c:	f0 e0       	ldi	r31, 0x00	; 0
    514e:	80 81       	ld	r24, Z
    5150:	80 68       	ori	r24, 0x80	; 128
    5152:	8c 93       	st	X, r24


}
    5154:	0f 90       	pop	r0
    5156:	0f 90       	pop	r0
    5158:	0f 90       	pop	r0
    515a:	0f 90       	pop	r0
    515c:	0f 90       	pop	r0
    515e:	cf 91       	pop	r28
    5160:	df 91       	pop	r29
    5162:	08 95       	ret

00005164 <M_ADC_void_StartConversion>:

void M_ADC_void_StartConversion(){
    5164:	df 93       	push	r29
    5166:	cf 93       	push	r28
    5168:	cd b7       	in	r28, 0x3d	; 61
    516a:	de b7       	in	r29, 0x3e	; 62

	//Start Conversion
	ADCSRA_REG |= (1<<ADCSRA_ADSC);
    516c:	a6 e2       	ldi	r26, 0x26	; 38
    516e:	b0 e0       	ldi	r27, 0x00	; 0
    5170:	e6 e2       	ldi	r30, 0x26	; 38
    5172:	f0 e0       	ldi	r31, 0x00	; 0
    5174:	80 81       	ld	r24, Z
    5176:	80 64       	ori	r24, 0x40	; 64
    5178:	8c 93       	st	X, r24


}
    517a:	cf 91       	pop	r28
    517c:	df 91       	pop	r29
    517e:	08 95       	ret

00005180 <M_ADC_void_GetDigitalValueSynchNonBlocking>:
//Polling NonBlocking (conversion is started externally)
ADC_state_code_t M_ADC_void_GetDigitalValueSynchNonBlocking(ADC_channel_t channel, u16* data){
    5180:	df 93       	push	r29
    5182:	cf 93       	push	r28
    5184:	00 d0       	rcall	.+0      	; 0x5186 <M_ADC_void_GetDigitalValueSynchNonBlocking+0x6>
    5186:	00 d0       	rcall	.+0      	; 0x5188 <M_ADC_void_GetDigitalValueSynchNonBlocking+0x8>
    5188:	00 d0       	rcall	.+0      	; 0x518a <M_ADC_void_GetDigitalValueSynchNonBlocking+0xa>
    518a:	cd b7       	in	r28, 0x3d	; 61
    518c:	de b7       	in	r29, 0x3e	; 62
    518e:	89 83       	std	Y+1, r24	; 0x01
    5190:	7b 83       	std	Y+3, r23	; 0x03
    5192:	6a 83       	std	Y+2, r22	; 0x02

	//Channel
	ADMUX_REG &= 0xE0;
    5194:	a7 e2       	ldi	r26, 0x27	; 39
    5196:	b0 e0       	ldi	r27, 0x00	; 0
    5198:	e7 e2       	ldi	r30, 0x27	; 39
    519a:	f0 e0       	ldi	r31, 0x00	; 0
    519c:	80 81       	ld	r24, Z
    519e:	80 7e       	andi	r24, 0xE0	; 224
    51a0:	8c 93       	st	X, r24
	ADMUX_REG |= channel ;
    51a2:	a7 e2       	ldi	r26, 0x27	; 39
    51a4:	b0 e0       	ldi	r27, 0x00	; 0
    51a6:	e7 e2       	ldi	r30, 0x27	; 39
    51a8:	f0 e0       	ldi	r31, 0x00	; 0
    51aa:	90 81       	ld	r25, Z
    51ac:	89 81       	ldd	r24, Y+1	; 0x01
    51ae:	89 2b       	or	r24, r25
    51b0:	8c 93       	st	X, r24


	if((GET_BIT(ADCSRA_REG,ADCSRA_ADIF)) == 0){
    51b2:	e6 e2       	ldi	r30, 0x26	; 38
    51b4:	f0 e0       	ldi	r31, 0x00	; 0
    51b6:	80 81       	ld	r24, Z
    51b8:	82 95       	swap	r24
    51ba:	8f 70       	andi	r24, 0x0F	; 15
    51bc:	88 2f       	mov	r24, r24
    51be:	90 e0       	ldi	r25, 0x00	; 0
    51c0:	81 70       	andi	r24, 0x01	; 1
    51c2:	90 70       	andi	r25, 0x00	; 0
    51c4:	00 97       	sbiw	r24, 0x00	; 0
    51c6:	11 f4       	brne	.+4      	; 0x51cc <M_ADC_void_GetDigitalValueSynchNonBlocking+0x4c>
		return ADC_FAILED;
    51c8:	1e 82       	std	Y+6, r1	; 0x06
    51ca:	4f c0       	rjmp	.+158    	; 0x526a <M_ADC_void_GetDigitalValueSynchNonBlocking+0xea>
	}
	else{
	ADCSRA_REG |= (1<<ADCSRA_ADIF); //clear the flag
    51cc:	a6 e2       	ldi	r26, 0x26	; 38
    51ce:	b0 e0       	ldi	r27, 0x00	; 0
    51d0:	e6 e2       	ldi	r30, 0x26	; 38
    51d2:	f0 e0       	ldi	r31, 0x00	; 0
    51d4:	80 81       	ld	r24, Z
    51d6:	80 61       	ori	r24, 0x10	; 16
    51d8:	8c 93       	st	X, r24

	switch(ADC_ADJUSTMENT){
    51da:	80 91 7b 03 	lds	r24, 0x037B
    51de:	28 2f       	mov	r18, r24
    51e0:	30 e0       	ldi	r19, 0x00	; 0
    51e2:	3d 83       	std	Y+5, r19	; 0x05
    51e4:	2c 83       	std	Y+4, r18	; 0x04
    51e6:	8c 81       	ldd	r24, Y+4	; 0x04
    51e8:	9d 81       	ldd	r25, Y+5	; 0x05
    51ea:	00 97       	sbiw	r24, 0x00	; 0
    51ec:	11 f1       	breq	.+68     	; 0x5232 <M_ADC_void_GetDigitalValueSynchNonBlocking+0xb2>
    51ee:	2c 81       	ldd	r18, Y+4	; 0x04
    51f0:	3d 81       	ldd	r19, Y+5	; 0x05
    51f2:	21 30       	cpi	r18, 0x01	; 1
    51f4:	31 05       	cpc	r19, r1
    51f6:	b9 f5       	brne	.+110    	; 0x5266 <M_ADC_void_GetDigitalValueSynchNonBlocking+0xe6>
	case ADC_LEFT_ADJUST:
		(*data) = ADCL_REG;
    51f8:	e4 e2       	ldi	r30, 0x24	; 36
    51fa:	f0 e0       	ldi	r31, 0x00	; 0
    51fc:	80 81       	ld	r24, Z
    51fe:	88 2f       	mov	r24, r24
    5200:	90 e0       	ldi	r25, 0x00	; 0
    5202:	ea 81       	ldd	r30, Y+2	; 0x02
    5204:	fb 81       	ldd	r31, Y+3	; 0x03
    5206:	91 83       	std	Z+1, r25	; 0x01
    5208:	80 83       	st	Z, r24
		(*data) |= ADCH_REG<<2;
    520a:	ea 81       	ldd	r30, Y+2	; 0x02
    520c:	fb 81       	ldd	r31, Y+3	; 0x03
    520e:	20 81       	ld	r18, Z
    5210:	31 81       	ldd	r19, Z+1	; 0x01
    5212:	e5 e2       	ldi	r30, 0x25	; 37
    5214:	f0 e0       	ldi	r31, 0x00	; 0
    5216:	80 81       	ld	r24, Z
    5218:	88 2f       	mov	r24, r24
    521a:	90 e0       	ldi	r25, 0x00	; 0
    521c:	88 0f       	add	r24, r24
    521e:	99 1f       	adc	r25, r25
    5220:	88 0f       	add	r24, r24
    5222:	99 1f       	adc	r25, r25
    5224:	82 2b       	or	r24, r18
    5226:	93 2b       	or	r25, r19
    5228:	ea 81       	ldd	r30, Y+2	; 0x02
    522a:	fb 81       	ldd	r31, Y+3	; 0x03
    522c:	91 83       	std	Z+1, r25	; 0x01
    522e:	80 83       	st	Z, r24
    5230:	1a c0       	rjmp	.+52     	; 0x5266 <M_ADC_void_GetDigitalValueSynchNonBlocking+0xe6>
		break;
	case ADC_RIGHT_ADJUST:
		(*data) = ADCL_REG;
    5232:	e4 e2       	ldi	r30, 0x24	; 36
    5234:	f0 e0       	ldi	r31, 0x00	; 0
    5236:	80 81       	ld	r24, Z
    5238:	88 2f       	mov	r24, r24
    523a:	90 e0       	ldi	r25, 0x00	; 0
    523c:	ea 81       	ldd	r30, Y+2	; 0x02
    523e:	fb 81       	ldd	r31, Y+3	; 0x03
    5240:	91 83       	std	Z+1, r25	; 0x01
    5242:	80 83       	st	Z, r24
		(*data) |= (ADCH_REG<<8);
    5244:	ea 81       	ldd	r30, Y+2	; 0x02
    5246:	fb 81       	ldd	r31, Y+3	; 0x03
    5248:	20 81       	ld	r18, Z
    524a:	31 81       	ldd	r19, Z+1	; 0x01
    524c:	e5 e2       	ldi	r30, 0x25	; 37
    524e:	f0 e0       	ldi	r31, 0x00	; 0
    5250:	80 81       	ld	r24, Z
    5252:	88 2f       	mov	r24, r24
    5254:	90 e0       	ldi	r25, 0x00	; 0
    5256:	98 2f       	mov	r25, r24
    5258:	88 27       	eor	r24, r24
    525a:	82 2b       	or	r24, r18
    525c:	93 2b       	or	r25, r19
    525e:	ea 81       	ldd	r30, Y+2	; 0x02
    5260:	fb 81       	ldd	r31, Y+3	; 0x03
    5262:	91 83       	std	Z+1, r25	; 0x01
    5264:	80 83       	st	Z, r24
		break;
	}

	return ADC_SUCCEED;
    5266:	31 e0       	ldi	r19, 0x01	; 1
    5268:	3e 83       	std	Y+6, r19	; 0x06
    526a:	8e 81       	ldd	r24, Y+6	; 0x06

	}
}
    526c:	26 96       	adiw	r28, 0x06	; 6
    526e:	0f b6       	in	r0, 0x3f	; 63
    5270:	f8 94       	cli
    5272:	de bf       	out	0x3e, r29	; 62
    5274:	0f be       	out	0x3f, r0	; 63
    5276:	cd bf       	out	0x3d, r28	; 61
    5278:	cf 91       	pop	r28
    527a:	df 91       	pop	r29
    527c:	08 95       	ret

0000527e <M_ADC_void_GetDigitalValueAsynchCallback>:

//(conversion is started externally)
void M_ADC_void_GetDigitalValueAsynchCallback(ADC_channel_t channel, void (*localCallBack)(void)){
    527e:	df 93       	push	r29
    5280:	cf 93       	push	r28
    5282:	00 d0       	rcall	.+0      	; 0x5284 <M_ADC_void_GetDigitalValueAsynchCallback+0x6>
    5284:	0f 92       	push	r0
    5286:	cd b7       	in	r28, 0x3d	; 61
    5288:	de b7       	in	r29, 0x3e	; 62
    528a:	89 83       	std	Y+1, r24	; 0x01
    528c:	7b 83       	std	Y+3, r23	; 0x03
    528e:	6a 83       	std	Y+2, r22	; 0x02

	//Channel
	ADMUX_REG &= 0xE0;
    5290:	a7 e2       	ldi	r26, 0x27	; 39
    5292:	b0 e0       	ldi	r27, 0x00	; 0
    5294:	e7 e2       	ldi	r30, 0x27	; 39
    5296:	f0 e0       	ldi	r31, 0x00	; 0
    5298:	80 81       	ld	r24, Z
    529a:	80 7e       	andi	r24, 0xE0	; 224
    529c:	8c 93       	st	X, r24
	ADMUX_REG |= channel ;
    529e:	a7 e2       	ldi	r26, 0x27	; 39
    52a0:	b0 e0       	ldi	r27, 0x00	; 0
    52a2:	e7 e2       	ldi	r30, 0x27	; 39
    52a4:	f0 e0       	ldi	r31, 0x00	; 0
    52a6:	90 81       	ld	r25, Z
    52a8:	89 81       	ldd	r24, Y+1	; 0x01
    52aa:	89 2b       	or	r24, r25
    52ac:	8c 93       	st	X, r24

	ADC_CallBackPTR = localCallBack;
    52ae:	8a 81       	ldd	r24, Y+2	; 0x02
    52b0:	9b 81       	ldd	r25, Y+3	; 0x03
    52b2:	90 93 7a 03 	sts	0x037A, r25
    52b6:	80 93 79 03 	sts	0x0379, r24

}
    52ba:	0f 90       	pop	r0
    52bc:	0f 90       	pop	r0
    52be:	0f 90       	pop	r0
    52c0:	cf 91       	pop	r28
    52c2:	df 91       	pop	r29
    52c4:	08 95       	ret

000052c6 <__vector_16>:


ISR(ADC_vect){
    52c6:	1f 92       	push	r1
    52c8:	0f 92       	push	r0
    52ca:	0f b6       	in	r0, 0x3f	; 63
    52cc:	0f 92       	push	r0
    52ce:	11 24       	eor	r1, r1
    52d0:	2f 93       	push	r18
    52d2:	3f 93       	push	r19
    52d4:	4f 93       	push	r20
    52d6:	5f 93       	push	r21
    52d8:	6f 93       	push	r22
    52da:	7f 93       	push	r23
    52dc:	8f 93       	push	r24
    52de:	9f 93       	push	r25
    52e0:	af 93       	push	r26
    52e2:	bf 93       	push	r27
    52e4:	ef 93       	push	r30
    52e6:	ff 93       	push	r31
    52e8:	df 93       	push	r29
    52ea:	cf 93       	push	r28
    52ec:	cd b7       	in	r28, 0x3d	; 61
    52ee:	de b7       	in	r29, 0x3e	; 62

	if(ADC_CallBackPTR != NULL){
    52f0:	80 91 79 03 	lds	r24, 0x0379
    52f4:	90 91 7a 03 	lds	r25, 0x037A
    52f8:	00 97       	sbiw	r24, 0x00	; 0
    52fa:	29 f0       	breq	.+10     	; 0x5306 <__vector_16+0x40>
		ADC_CallBackPTR();
    52fc:	e0 91 79 03 	lds	r30, 0x0379
    5300:	f0 91 7a 03 	lds	r31, 0x037A
    5304:	09 95       	icall
	}



}
    5306:	cf 91       	pop	r28
    5308:	df 91       	pop	r29
    530a:	ff 91       	pop	r31
    530c:	ef 91       	pop	r30
    530e:	bf 91       	pop	r27
    5310:	af 91       	pop	r26
    5312:	9f 91       	pop	r25
    5314:	8f 91       	pop	r24
    5316:	7f 91       	pop	r23
    5318:	6f 91       	pop	r22
    531a:	5f 91       	pop	r21
    531c:	4f 91       	pop	r20
    531e:	3f 91       	pop	r19
    5320:	2f 91       	pop	r18
    5322:	0f 90       	pop	r0
    5324:	0f be       	out	0x3f, r0	; 63
    5326:	0f 90       	pop	r0
    5328:	1f 90       	pop	r1
    532a:	18 95       	reti

0000532c <H_WIFI_void_WIFIInit>:

extern u8 RX_Counter_UART;

char buff[100];

void H_WIFI_void_WIFIInit(S_WIFI_Config_t S_WIFI_Config) {
    532c:	df 93       	push	r29
    532e:	cf 93       	push	r28
    5330:	cd b7       	in	r28, 0x3d	; 61
    5332:	de b7       	in	r29, 0x3e	; 62
    5334:	cc 56       	subi	r28, 0x6C	; 108
    5336:	d0 40       	sbci	r29, 0x00	; 0
    5338:	0f b6       	in	r0, 0x3f	; 63
    533a:	f8 94       	cli
    533c:	de bf       	out	0x3e, r29	; 62
    533e:	0f be       	out	0x3f, r0	; 63
    5340:	cd bf       	out	0x3d, r28	; 61
    5342:	fe 01       	movw	r30, r28
    5344:	ea 59       	subi	r30, 0x9A	; 154
    5346:	ff 4f       	sbci	r31, 0xFF	; 255
    5348:	20 83       	st	Z, r18
    534a:	31 83       	std	Z+1, r19	; 0x01
    534c:	42 83       	std	Z+2, r20	; 0x02
    534e:	53 83       	std	Z+3, r21	; 0x03
    5350:	64 83       	std	Z+4, r22	; 0x04
    5352:	75 83       	std	Z+5, r23	; 0x05
    5354:	86 83       	std	Z+6, r24	; 0x06
	//configuar UART here
	char command[100];

	sprintf(command, "AT+CWMODE=%d\r\n", S_WIFI_Config.WIFI_Mode);
    5356:	fe 01       	movw	r30, r28
    5358:	ea 59       	subi	r30, 0x9A	; 154
    535a:	ff 4f       	sbci	r31, 0xFF	; 255
    535c:	80 81       	ld	r24, Z
    535e:	28 2f       	mov	r18, r24
    5360:	30 e0       	ldi	r19, 0x00	; 0
    5362:	00 d0       	rcall	.+0      	; 0x5364 <H_WIFI_void_WIFIInit+0x38>
    5364:	00 d0       	rcall	.+0      	; 0x5366 <H_WIFI_void_WIFIInit+0x3a>
    5366:	00 d0       	rcall	.+0      	; 0x5368 <H_WIFI_void_WIFIInit+0x3c>
    5368:	ed b7       	in	r30, 0x3d	; 61
    536a:	fe b7       	in	r31, 0x3e	; 62
    536c:	31 96       	adiw	r30, 0x01	; 1
    536e:	ce 01       	movw	r24, r28
    5370:	02 96       	adiw	r24, 0x02	; 2
    5372:	91 83       	std	Z+1, r25	; 0x01
    5374:	80 83       	st	Z, r24
    5376:	80 e6       	ldi	r24, 0x60	; 96
    5378:	90 e0       	ldi	r25, 0x00	; 0
    537a:	93 83       	std	Z+3, r25	; 0x03
    537c:	82 83       	std	Z+2, r24	; 0x02
    537e:	35 83       	std	Z+5, r19	; 0x05
    5380:	24 83       	std	Z+4, r18	; 0x04
    5382:	0e 94 b0 38 	call	0x7160	; 0x7160 <sprintf>
    5386:	8d b7       	in	r24, 0x3d	; 61
    5388:	9e b7       	in	r25, 0x3e	; 62
    538a:	06 96       	adiw	r24, 0x06	; 6
    538c:	0f b6       	in	r0, 0x3f	; 63
    538e:	f8 94       	cli
    5390:	9e bf       	out	0x3e, r25	; 62
    5392:	0f be       	out	0x3f, r0	; 63
    5394:	8d bf       	out	0x3d, r24	; 61
	WIFI_command_statue_t command_statue = H_WIFI_command_statue_t_sendData(
			command, buff, 2000);
    5396:	ce 01       	movw	r24, r28
    5398:	02 96       	adiw	r24, 0x02	; 2
    539a:	22 ee       	ldi	r18, 0xE2	; 226
    539c:	33 e0       	ldi	r19, 0x03	; 3
    539e:	b9 01       	movw	r22, r18
    53a0:	40 ed       	ldi	r20, 0xD0	; 208
    53a2:	57 e0       	ldi	r21, 0x07	; 7
    53a4:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <H_WIFI_command_statue_t_sendData>
    53a8:	89 83       	std	Y+1, r24	; 0x01
		H_LCD_void_sendString("WIFI mode update timeout");

	}
#endif

	sprintf(command, "AT+CWJAP=\"%s\",\"%s\"\r\n", S_WIFI_Config.ssid,
    53aa:	fe 01       	movw	r30, r28
    53ac:	ea 59       	subi	r30, 0x9A	; 154
    53ae:	ff 4f       	sbci	r31, 0xFF	; 255
    53b0:	21 81       	ldd	r18, Z+1	; 0x01
    53b2:	32 81       	ldd	r19, Z+2	; 0x02
    53b4:	fe 01       	movw	r30, r28
    53b6:	ea 59       	subi	r30, 0x9A	; 154
    53b8:	ff 4f       	sbci	r31, 0xFF	; 255
    53ba:	43 81       	ldd	r20, Z+3	; 0x03
    53bc:	54 81       	ldd	r21, Z+4	; 0x04
    53be:	8d b7       	in	r24, 0x3d	; 61
    53c0:	9e b7       	in	r25, 0x3e	; 62
    53c2:	08 97       	sbiw	r24, 0x08	; 8
    53c4:	0f b6       	in	r0, 0x3f	; 63
    53c6:	f8 94       	cli
    53c8:	9e bf       	out	0x3e, r25	; 62
    53ca:	0f be       	out	0x3f, r0	; 63
    53cc:	8d bf       	out	0x3d, r24	; 61
    53ce:	ed b7       	in	r30, 0x3d	; 61
    53d0:	fe b7       	in	r31, 0x3e	; 62
    53d2:	31 96       	adiw	r30, 0x01	; 1
    53d4:	ce 01       	movw	r24, r28
    53d6:	02 96       	adiw	r24, 0x02	; 2
    53d8:	91 83       	std	Z+1, r25	; 0x01
    53da:	80 83       	st	Z, r24
    53dc:	8f e6       	ldi	r24, 0x6F	; 111
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	93 83       	std	Z+3, r25	; 0x03
    53e2:	82 83       	std	Z+2, r24	; 0x02
    53e4:	35 83       	std	Z+5, r19	; 0x05
    53e6:	24 83       	std	Z+4, r18	; 0x04
    53e8:	57 83       	std	Z+7, r21	; 0x07
    53ea:	46 83       	std	Z+6, r20	; 0x06
    53ec:	0e 94 b0 38 	call	0x7160	; 0x7160 <sprintf>
    53f0:	8d b7       	in	r24, 0x3d	; 61
    53f2:	9e b7       	in	r25, 0x3e	; 62
    53f4:	08 96       	adiw	r24, 0x08	; 8
    53f6:	0f b6       	in	r0, 0x3f	; 63
    53f8:	f8 94       	cli
    53fa:	9e bf       	out	0x3e, r25	; 62
    53fc:	0f be       	out	0x3f, r0	; 63
    53fe:	8d bf       	out	0x3d, r24	; 61
			S_WIFI_Config.password);
	command_statue = H_WIFI_command_statue_t_sendData(command, buff, 2000);
    5400:	ce 01       	movw	r24, r28
    5402:	02 96       	adiw	r24, 0x02	; 2
    5404:	22 ee       	ldi	r18, 0xE2	; 226
    5406:	33 e0       	ldi	r19, 0x03	; 3
    5408:	b9 01       	movw	r22, r18
    540a:	40 ed       	ldi	r20, 0xD0	; 208
    540c:	57 e0       	ldi	r21, 0x07	; 7
    540e:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <H_WIFI_command_statue_t_sendData>
    5412:	89 83       	std	Y+1, r24	; 0x01
		H_LCD_void_sendString("WIFI SSID update timeout");

	}
#endif

}
    5414:	c4 59       	subi	r28, 0x94	; 148
    5416:	df 4f       	sbci	r29, 0xFF	; 255
    5418:	0f b6       	in	r0, 0x3f	; 63
    541a:	f8 94       	cli
    541c:	de bf       	out	0x3e, r29	; 62
    541e:	0f be       	out	0x3f, r0	; 63
    5420:	cd bf       	out	0x3d, r28	; 61
    5422:	cf 91       	pop	r28
    5424:	df 91       	pop	r29
    5426:	08 95       	ret

00005428 <H_WIFI_void_StartTCPServer>:

void H_WIFI_void_StartTCPServer(void) {
    5428:	df 93       	push	r29
    542a:	cf 93       	push	r28
    542c:	0f 92       	push	r0
    542e:	cd b7       	in	r28, 0x3d	; 61
    5430:	de b7       	in	r29, 0x3e	; 62
	WIFI_command_statue_t command_statue = H_WIFI_command_statue_t_sendData(
			"AT+CIPMUX=1\r\n", buff, 2000);
    5432:	84 e8       	ldi	r24, 0x84	; 132
    5434:	90 e0       	ldi	r25, 0x00	; 0
    5436:	22 ee       	ldi	r18, 0xE2	; 226
    5438:	33 e0       	ldi	r19, 0x03	; 3
    543a:	b9 01       	movw	r22, r18
    543c:	40 ed       	ldi	r20, 0xD0	; 208
    543e:	57 e0       	ldi	r21, 0x07	; 7
    5440:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <H_WIFI_command_statue_t_sendData>
    5444:	89 83       	std	Y+1, r24	; 0x01
	command_statue = H_WIFI_command_statue_t_sendData("AT+CIPSERVER=1\r\n",
    5446:	82 e9       	ldi	r24, 0x92	; 146
    5448:	90 e0       	ldi	r25, 0x00	; 0
    544a:	22 ee       	ldi	r18, 0xE2	; 226
    544c:	33 e0       	ldi	r19, 0x03	; 3
    544e:	b9 01       	movw	r22, r18
    5450:	40 ed       	ldi	r20, 0xD0	; 208
    5452:	57 e0       	ldi	r21, 0x07	; 7
    5454:	0e 94 6b 2a 	call	0x54d6	; 0x54d6 <H_WIFI_command_statue_t_sendData>
    5458:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		H_LCD_void_Clear();
		H_LCD_void_sendString(buff);
	}
#endif
}
    545a:	0f 90       	pop	r0
    545c:	cf 91       	pop	r28
    545e:	df 91       	pop	r29
    5460:	08 95       	ret

00005462 <H_WIFI_statue_t_cheakOk>:

WIFI_command_statue_t H_WIFI_statue_t_cheakOk(char *response) {
    5462:	df 93       	push	r29
    5464:	cf 93       	push	r28
    5466:	00 d0       	rcall	.+0      	; 0x5468 <H_WIFI_statue_t_cheakOk+0x6>
    5468:	00 d0       	rcall	.+0      	; 0x546a <H_WIFI_statue_t_cheakOk+0x8>
    546a:	0f 92       	push	r0
    546c:	cd b7       	in	r28, 0x3d	; 61
    546e:	de b7       	in	r29, 0x3e	; 62
    5470:	9c 83       	std	Y+4, r25	; 0x04
    5472:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i <= UART_BUFFER_SIZE; i++) {
    5474:	1a 82       	std	Y+2, r1	; 0x02
    5476:	19 82       	std	Y+1, r1	; 0x01
    5478:	1e c0       	rjmp	.+60     	; 0x54b6 <H_WIFI_statue_t_cheakOk+0x54>
		if (*(response + i) == 'O')
    547a:	29 81       	ldd	r18, Y+1	; 0x01
    547c:	3a 81       	ldd	r19, Y+2	; 0x02
    547e:	8b 81       	ldd	r24, Y+3	; 0x03
    5480:	9c 81       	ldd	r25, Y+4	; 0x04
    5482:	fc 01       	movw	r30, r24
    5484:	e2 0f       	add	r30, r18
    5486:	f3 1f       	adc	r31, r19
    5488:	80 81       	ld	r24, Z
    548a:	8f 34       	cpi	r24, 0x4F	; 79
    548c:	79 f4       	brne	.+30     	; 0x54ac <H_WIFI_statue_t_cheakOk+0x4a>
			if (*(response + i + 1) == 'K')
    548e:	89 81       	ldd	r24, Y+1	; 0x01
    5490:	9a 81       	ldd	r25, Y+2	; 0x02
    5492:	9c 01       	movw	r18, r24
    5494:	2f 5f       	subi	r18, 0xFF	; 255
    5496:	3f 4f       	sbci	r19, 0xFF	; 255
    5498:	8b 81       	ldd	r24, Y+3	; 0x03
    549a:	9c 81       	ldd	r25, Y+4	; 0x04
    549c:	fc 01       	movw	r30, r24
    549e:	e2 0f       	add	r30, r18
    54a0:	f3 1f       	adc	r31, r19
    54a2:	80 81       	ld	r24, Z
    54a4:	8b 34       	cpi	r24, 0x4B	; 75
    54a6:	11 f4       	brne	.+4      	; 0x54ac <H_WIFI_statue_t_cheakOk+0x4a>
				return WIFI_command_ok;
    54a8:	1d 82       	std	Y+5, r1	; 0x05
    54aa:	0c c0       	rjmp	.+24     	; 0x54c4 <H_WIFI_statue_t_cheakOk+0x62>
	}
#endif
}

WIFI_command_statue_t H_WIFI_statue_t_cheakOk(char *response) {
	for (int i = 0; i <= UART_BUFFER_SIZE; i++) {
    54ac:	89 81       	ldd	r24, Y+1	; 0x01
    54ae:	9a 81       	ldd	r25, Y+2	; 0x02
    54b0:	01 96       	adiw	r24, 0x01	; 1
    54b2:	9a 83       	std	Y+2, r25	; 0x02
    54b4:	89 83       	std	Y+1, r24	; 0x01
    54b6:	89 81       	ldd	r24, Y+1	; 0x01
    54b8:	9a 81       	ldd	r25, Y+2	; 0x02
    54ba:	85 36       	cpi	r24, 0x65	; 101
    54bc:	91 05       	cpc	r25, r1
    54be:	ec f2       	brlt	.-70     	; 0x547a <H_WIFI_statue_t_cheakOk+0x18>
		if (*(response + i) == 'O')
			if (*(response + i + 1) == 'K')
				return WIFI_command_ok;
	}
	return WIFI_command_error;
    54c0:	81 e0       	ldi	r24, 0x01	; 1
    54c2:	8d 83       	std	Y+5, r24	; 0x05
    54c4:	8d 81       	ldd	r24, Y+5	; 0x05

}
    54c6:	0f 90       	pop	r0
    54c8:	0f 90       	pop	r0
    54ca:	0f 90       	pop	r0
    54cc:	0f 90       	pop	r0
    54ce:	0f 90       	pop	r0
    54d0:	cf 91       	pop	r28
    54d2:	df 91       	pop	r29
    54d4:	08 95       	ret

000054d6 <H_WIFI_command_statue_t_sendData>:

WIFI_command_statue_t H_WIFI_command_statue_t_sendData(char *command,
		char *response, const int timeout) {
    54d6:	ef 92       	push	r14
    54d8:	ff 92       	push	r15
    54da:	0f 93       	push	r16
    54dc:	1f 93       	push	r17
    54de:	df 93       	push	r29
    54e0:	cf 93       	push	r28
    54e2:	cd b7       	in	r28, 0x3d	; 61
    54e4:	de b7       	in	r29, 0x3e	; 62
    54e6:	2d 97       	sbiw	r28, 0x0d	; 13
    54e8:	0f b6       	in	r0, 0x3f	; 63
    54ea:	f8 94       	cli
    54ec:	de bf       	out	0x3e, r29	; 62
    54ee:	0f be       	out	0x3f, r0	; 63
    54f0:	cd bf       	out	0x3d, r28	; 61
    54f2:	98 87       	std	Y+8, r25	; 0x08
    54f4:	8f 83       	std	Y+7, r24	; 0x07
    54f6:	7a 87       	std	Y+10, r23	; 0x0a
    54f8:	69 87       	std	Y+9, r22	; 0x09
    54fa:	5c 87       	std	Y+12, r21	; 0x0c
    54fc:	4b 87       	std	Y+11, r20	; 0x0b
	init_millis(16000000);
    54fe:	60 e0       	ldi	r22, 0x00	; 0
    5500:	74 e2       	ldi	r23, 0x24	; 36
    5502:	84 ef       	ldi	r24, 0xF4	; 244
    5504:	90 e0       	ldi	r25, 0x00	; 0
    5506:	0e 94 05 37 	call	0x6e0a	; 0x6e0a <init_millis>
	M_UART_void_UARTSendString(command);
    550a:	8f 81       	ldd	r24, Y+7	; 0x07
    550c:	98 85       	ldd	r25, Y+8	; 0x08
    550e:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <M_UART_void_UARTSendString>
	int counter = 0;
    5512:	1e 82       	std	Y+6, r1	; 0x06
    5514:	1d 82       	std	Y+5, r1	; 0x05
	long int time = millis();
    5516:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <millis>
    551a:	dc 01       	movw	r26, r24
    551c:	cb 01       	movw	r24, r22
    551e:	89 83       	std	Y+1, r24	; 0x01
    5520:	9a 83       	std	Y+2, r25	; 0x02
    5522:	ab 83       	std	Y+3, r26	; 0x03
    5524:	bc 83       	std	Y+4, r27	; 0x04
	while (1) {
		if ((time + 2000) < millis())
    5526:	89 81       	ldd	r24, Y+1	; 0x01
    5528:	9a 81       	ldd	r25, Y+2	; 0x02
    552a:	ab 81       	ldd	r26, Y+3	; 0x03
    552c:	bc 81       	ldd	r27, Y+4	; 0x04
    552e:	80 53       	subi	r24, 0x30	; 48
    5530:	98 4f       	sbci	r25, 0xF8	; 248
    5532:	af 4f       	sbci	r26, 0xFF	; 255
    5534:	bf 4f       	sbci	r27, 0xFF	; 255
    5536:	7c 01       	movw	r14, r24
    5538:	8d 01       	movw	r16, r26
    553a:	0e 94 4b 37 	call	0x6e96	; 0x6e96 <millis>
    553e:	dc 01       	movw	r26, r24
    5540:	cb 01       	movw	r24, r22
    5542:	e8 16       	cp	r14, r24
    5544:	f9 06       	cpc	r15, r25
    5546:	0a 07       	cpc	r16, r26
    5548:	1b 07       	cpc	r17, r27
    554a:	00 f1       	brcs	.+64     	; 0x558c <H_WIFI_command_statue_t_sendData+0xb6>
    554c:	1a c0       	rjmp	.+52     	; 0x5582 <H_WIFI_command_statue_t_sendData+0xac>
			break;
		while (RX_Counter_UART) {
			*(response + counter) = M_UART_u8_receiveByteASynchNonBlocking();
    554e:	2d 81       	ldd	r18, Y+5	; 0x05
    5550:	3e 81       	ldd	r19, Y+6	; 0x06
    5552:	89 85       	ldd	r24, Y+9	; 0x09
    5554:	9a 85       	ldd	r25, Y+10	; 0x0a
    5556:	8c 01       	movw	r16, r24
    5558:	02 0f       	add	r16, r18
    555a:	13 1f       	adc	r17, r19
    555c:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <M_UART_u8_receiveByteASynchNonBlocking>
    5560:	f8 01       	movw	r30, r16
    5562:	80 83       	st	Z, r24
			if (*(response + counter))
    5564:	2d 81       	ldd	r18, Y+5	; 0x05
    5566:	3e 81       	ldd	r19, Y+6	; 0x06
    5568:	89 85       	ldd	r24, Y+9	; 0x09
    556a:	9a 85       	ldd	r25, Y+10	; 0x0a
    556c:	fc 01       	movw	r30, r24
    556e:	e2 0f       	add	r30, r18
    5570:	f3 1f       	adc	r31, r19
    5572:	80 81       	ld	r24, Z
    5574:	88 23       	and	r24, r24
    5576:	29 f0       	breq	.+10     	; 0x5582 <H_WIFI_command_statue_t_sendData+0xac>
				counter++;
    5578:	8d 81       	ldd	r24, Y+5	; 0x05
    557a:	9e 81       	ldd	r25, Y+6	; 0x06
    557c:	01 96       	adiw	r24, 0x01	; 1
    557e:	9e 83       	std	Y+6, r25	; 0x06
    5580:	8d 83       	std	Y+5, r24	; 0x05
	int counter = 0;
	long int time = millis();
	while (1) {
		if ((time + 2000) < millis())
			break;
		while (RX_Counter_UART) {
    5582:	80 91 66 03 	lds	r24, 0x0366
    5586:	88 23       	and	r24, r24
    5588:	11 f7       	brne	.-60     	; 0x554e <H_WIFI_command_statue_t_sendData+0x78>
    558a:	cd cf       	rjmp	.-102    	; 0x5526 <H_WIFI_command_statue_t_sendData+0x50>
			if (*(response + counter))
				counter++;
		}
	}

	*(response + counter) = 0;
    558c:	2d 81       	ldd	r18, Y+5	; 0x05
    558e:	3e 81       	ldd	r19, Y+6	; 0x06
    5590:	89 85       	ldd	r24, Y+9	; 0x09
    5592:	9a 85       	ldd	r25, Y+10	; 0x0a
    5594:	fc 01       	movw	r30, r24
    5596:	e2 0f       	add	r30, r18
    5598:	f3 1f       	adc	r31, r19
    559a:	10 82       	st	Z, r1
	if (counter == 0)
    559c:	8d 81       	ldd	r24, Y+5	; 0x05
    559e:	9e 81       	ldd	r25, Y+6	; 0x06
    55a0:	00 97       	sbiw	r24, 0x00	; 0
    55a2:	19 f4       	brne	.+6      	; 0x55aa <H_WIFI_command_statue_t_sendData+0xd4>
		return WIFI_command_timeOute;
    55a4:	f2 e0       	ldi	r31, 0x02	; 2
    55a6:	fd 87       	std	Y+13, r31	; 0x0d
    55a8:	05 c0       	rjmp	.+10     	; 0x55b4 <H_WIFI_command_statue_t_sendData+0xde>
	return H_WIFI_statue_t_cheakOk(response);
    55aa:	89 85       	ldd	r24, Y+9	; 0x09
    55ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    55ae:	0e 94 31 2a 	call	0x5462	; 0x5462 <H_WIFI_statue_t_cheakOk>
    55b2:	8d 87       	std	Y+13, r24	; 0x0d
    55b4:	8d 85       	ldd	r24, Y+13	; 0x0d

}
    55b6:	2d 96       	adiw	r28, 0x0d	; 13
    55b8:	0f b6       	in	r0, 0x3f	; 63
    55ba:	f8 94       	cli
    55bc:	de bf       	out	0x3e, r29	; 62
    55be:	0f be       	out	0x3f, r0	; 63
    55c0:	cd bf       	out	0x3d, r28	; 61
    55c2:	cf 91       	pop	r28
    55c4:	df 91       	pop	r29
    55c6:	1f 91       	pop	r17
    55c8:	0f 91       	pop	r16
    55ca:	ff 90       	pop	r15
    55cc:	ef 90       	pop	r14
    55ce:	08 95       	ret

000055d0 <H_WIFI_TCPCommand_t_TCPCommand>:

WIFI_TCPCommand_t H_WIFI_TCPCommand_t_TCPCommand(char *StrReceved) {
    55d0:	df 93       	push	r29
    55d2:	cf 93       	push	r28
    55d4:	00 d0       	rcall	.+0      	; 0x55d6 <H_WIFI_TCPCommand_t_TCPCommand+0x6>
    55d6:	00 d0       	rcall	.+0      	; 0x55d8 <H_WIFI_TCPCommand_t_TCPCommand+0x8>
    55d8:	00 d0       	rcall	.+0      	; 0x55da <H_WIFI_TCPCommand_t_TCPCommand+0xa>
    55da:	cd b7       	in	r28, 0x3d	; 61
    55dc:	de b7       	in	r29, 0x3e	; 62
    55de:	9d 83       	std	Y+5, r25	; 0x05
    55e0:	8c 83       	std	Y+4, r24	; 0x04
	char *command;
	command = strstr(StrReceved, "REL");
    55e2:	8c 81       	ldd	r24, Y+4	; 0x04
    55e4:	9d 81       	ldd	r25, Y+5	; 0x05
    55e6:	23 ea       	ldi	r18, 0xA3	; 163
    55e8:	30 e0       	ldi	r19, 0x00	; 0
    55ea:	b9 01       	movw	r22, r18
    55ec:	0e 94 75 38 	call	0x70ea	; 0x70ea <strstr>
    55f0:	9b 83       	std	Y+3, r25	; 0x03
    55f2:	8a 83       	std	Y+2, r24	; 0x02
	if (command != NULL) {
    55f4:	8a 81       	ldd	r24, Y+2	; 0x02
    55f6:	9b 81       	ldd	r25, Y+3	; 0x03
    55f8:	00 97       	sbiw	r24, 0x00	; 0
    55fa:	99 f0       	breq	.+38     	; 0x5622 <H_WIFI_TCPCommand_t_TCPCommand+0x52>
		u8 LEDstatues = *(command + 3) - '0';
    55fc:	8a 81       	ldd	r24, Y+2	; 0x02
    55fe:	9b 81       	ldd	r25, Y+3	; 0x03
    5600:	fc 01       	movw	r30, r24
    5602:	33 96       	adiw	r30, 0x03	; 3
    5604:	80 81       	ld	r24, Z
    5606:	80 53       	subi	r24, 0x30	; 48
    5608:	89 83       	std	Y+1, r24	; 0x01
		if (LEDstatues == 0) {
    560a:	89 81       	ldd	r24, Y+1	; 0x01
    560c:	88 23       	and	r24, r24
    560e:	19 f4       	brne	.+6      	; 0x5616 <H_WIFI_TCPCommand_t_TCPCommand+0x46>


			return TCPCommand_RelayOFF;
    5610:	82 e0       	ldi	r24, 0x02	; 2
    5612:	8e 83       	std	Y+6, r24	; 0x06
    5614:	07 c0       	rjmp	.+14     	; 0x5624 <H_WIFI_TCPCommand_t_TCPCommand+0x54>
		} else if (LEDstatues == 1) {
    5616:	89 81       	ldd	r24, Y+1	; 0x01
    5618:	81 30       	cpi	r24, 0x01	; 1
    561a:	19 f4       	brne	.+6      	; 0x5622 <H_WIFI_TCPCommand_t_TCPCommand+0x52>


			return TCPCommand_RelayON;
    561c:	81 e0       	ldi	r24, 0x01	; 1
    561e:	8e 83       	std	Y+6, r24	; 0x06
    5620:	01 c0       	rjmp	.+2      	; 0x5624 <H_WIFI_TCPCommand_t_TCPCommand+0x54>
		}
	}

	return TCPCommand_NULL;
    5622:	1e 82       	std	Y+6, r1	; 0x06
    5624:	8e 81       	ldd	r24, Y+6	; 0x06
}
    5626:	26 96       	adiw	r28, 0x06	; 6
    5628:	0f b6       	in	r0, 0x3f	; 63
    562a:	f8 94       	cli
    562c:	de bf       	out	0x3e, r29	; 62
    562e:	0f be       	out	0x3f, r0	; 63
    5630:	cd bf       	out	0x3d, r28	; 61
    5632:	cf 91       	pop	r28
    5634:	df 91       	pop	r29
    5636:	08 95       	ret

00005638 <H_LM35_void_Init>:
extern ADC_config_t LM35_ADC_config_struct;


#define LM35_NUM_OF_SAMPLES	40

void H_LM35_void_Init(){
    5638:	df 93       	push	r29
    563a:	cf 93       	push	r28
    563c:	cd b7       	in	r28, 0x3d	; 61
    563e:	de b7       	in	r29, 0x3e	; 62
	M_ADC_void_Init(LM35_ADC_config_struct);
    5640:	40 91 d6 01 	lds	r20, 0x01D6
    5644:	50 91 d7 01 	lds	r21, 0x01D7
    5648:	60 91 d8 01 	lds	r22, 0x01D8
    564c:	70 91 d9 01 	lds	r23, 0x01D9
    5650:	80 91 da 01 	lds	r24, 0x01DA
    5654:	0e 94 22 28 	call	0x5044	; 0x5044 <M_ADC_void_Init>
}
    5658:	cf 91       	pop	r28
    565a:	df 91       	pop	r29
    565c:	08 95       	ret

0000565e <H_LM35_u16_ReadTemprature>:

u16 H_LM35_u16_ReadTemprature(ADC_channel_t channel){
    565e:	df 93       	push	r29
    5660:	cf 93       	push	r28
    5662:	cd b7       	in	r28, 0x3d	; 61
    5664:	de b7       	in	r29, 0x3e	; 62
    5666:	c3 55       	subi	r28, 0x53	; 83
    5668:	d0 40       	sbci	r29, 0x00	; 0
    566a:	0f b6       	in	r0, 0x3f	; 63
    566c:	f8 94       	cli
    566e:	de bf       	out	0x3e, r29	; 62
    5670:	0f be       	out	0x3f, r0	; 63
    5672:	cd bf       	out	0x3d, r28	; 61
    5674:	fe 01       	movw	r30, r28
    5676:	ef 5a       	subi	r30, 0xAF	; 175
    5678:	ff 4f       	sbci	r31, 0xFF	; 255
    567a:	80 83       	st	Z, r24
*/

	f64 analog_volt;
	f64 tempreture;
	u16 ADC_result;
	u8 state= ADC_FAILED;
    567c:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 readings[LM35_NUM_OF_SAMPLES];
	int i, j;

	//Taking samples
	for(i= 0; i< LM35_NUM_OF_SAMPLES ; i++){
    567e:	1d 8e       	std	Y+29, r1	; 0x1d
    5680:	1c 8e       	std	Y+28, r1	; 0x1c
    5682:	df c0       	rjmp	.+446    	; 0x5842 <H_LM35_u16_ReadTemprature+0x1e4>
		M_ADC_void_StartConversion();
    5684:	0e 94 b2 28 	call	0x5164	; 0x5164 <M_ADC_void_StartConversion>
    5688:	0b c0       	rjmp	.+22     	; 0x56a0 <H_LM35_u16_ReadTemprature+0x42>

		while(state == ADC_FAILED){
			state = M_ADC_void_GetDigitalValueSynchNonBlocking(channel, &ADC_result);
    568a:	fe 01       	movw	r30, r28
    568c:	ef 5a       	subi	r30, 0xAF	; 175
    568e:	ff 4f       	sbci	r31, 0xFF	; 255
    5690:	9e 01       	movw	r18, r28
    5692:	29 5d       	subi	r18, 0xD9	; 217
    5694:	3f 4f       	sbci	r19, 0xFF	; 255
    5696:	80 81       	ld	r24, Z
    5698:	b9 01       	movw	r22, r18
    569a:	0e 94 c0 28 	call	0x5180	; 0x5180 <M_ADC_void_GetDigitalValueSynchNonBlocking>
    569e:	8e 8f       	std	Y+30, r24	; 0x1e

	//Taking samples
	for(i= 0; i< LM35_NUM_OF_SAMPLES ; i++){
		M_ADC_void_StartConversion();

		while(state == ADC_FAILED){
    56a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    56a2:	88 23       	and	r24, r24
    56a4:	91 f3       	breq	.-28     	; 0x568a <H_LM35_u16_ReadTemprature+0x2c>
			state = M_ADC_void_GetDigitalValueSynchNonBlocking(channel, &ADC_result);
		}
		readings[i] = ADC_result;
    56a6:	2c 8d       	ldd	r18, Y+28	; 0x1c
    56a8:	3d 8d       	ldd	r19, Y+29	; 0x1d
    56aa:	8f a1       	ldd	r24, Y+39	; 0x27
    56ac:	98 a5       	ldd	r25, Y+40	; 0x28
    56ae:	48 2f       	mov	r20, r24
    56b0:	ce 01       	movw	r24, r28
    56b2:	89 96       	adiw	r24, 0x29	; 41
    56b4:	fc 01       	movw	r30, r24
    56b6:	e2 0f       	add	r30, r18
    56b8:	f3 1f       	adc	r31, r19
    56ba:	40 83       	st	Z, r20
    56bc:	80 e0       	ldi	r24, 0x00	; 0
    56be:	90 e0       	ldi	r25, 0x00	; 0
    56c0:	a8 ec       	ldi	r26, 0xC8	; 200
    56c2:	b2 e4       	ldi	r27, 0x42	; 66
    56c4:	8d 8b       	std	Y+21, r24	; 0x15
    56c6:	9e 8b       	std	Y+22, r25	; 0x16
    56c8:	af 8b       	std	Y+23, r26	; 0x17
    56ca:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    56cc:	6d 89       	ldd	r22, Y+21	; 0x15
    56ce:	7e 89       	ldd	r23, Y+22	; 0x16
    56d0:	8f 89       	ldd	r24, Y+23	; 0x17
    56d2:	98 8d       	ldd	r25, Y+24	; 0x18
    56d4:	2b ea       	ldi	r18, 0xAB	; 171
    56d6:	3a ea       	ldi	r19, 0xAA	; 170
    56d8:	4a ea       	ldi	r20, 0xAA	; 170
    56da:	50 e4       	ldi	r21, 0x40	; 64
    56dc:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    56e0:	dc 01       	movw	r26, r24
    56e2:	cb 01       	movw	r24, r22
    56e4:	89 8b       	std	Y+17, r24	; 0x11
    56e6:	9a 8b       	std	Y+18, r25	; 0x12
    56e8:	ab 8b       	std	Y+19, r26	; 0x13
    56ea:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    56ec:	69 89       	ldd	r22, Y+17	; 0x11
    56ee:	7a 89       	ldd	r23, Y+18	; 0x12
    56f0:	8b 89       	ldd	r24, Y+19	; 0x13
    56f2:	9c 89       	ldd	r25, Y+20	; 0x14
    56f4:	20 e0       	ldi	r18, 0x00	; 0
    56f6:	30 e0       	ldi	r19, 0x00	; 0
    56f8:	40 e8       	ldi	r20, 0x80	; 128
    56fa:	5f e3       	ldi	r21, 0x3F	; 63
    56fc:	0e 94 33 13 	call	0x2666	; 0x2666 <__ltsf2>
    5700:	88 23       	and	r24, r24
    5702:	1c f4       	brge	.+6      	; 0x570a <H_LM35_u16_ReadTemprature+0xac>
		__ticks = 1;
    5704:	81 e0       	ldi	r24, 0x01	; 1
    5706:	88 8b       	std	Y+16, r24	; 0x10
    5708:	91 c0       	rjmp	.+290    	; 0x582c <H_LM35_u16_ReadTemprature+0x1ce>
	else if (__tmp > 255)
    570a:	69 89       	ldd	r22, Y+17	; 0x11
    570c:	7a 89       	ldd	r23, Y+18	; 0x12
    570e:	8b 89       	ldd	r24, Y+19	; 0x13
    5710:	9c 89       	ldd	r25, Y+20	; 0x14
    5712:	20 e0       	ldi	r18, 0x00	; 0
    5714:	30 e0       	ldi	r19, 0x00	; 0
    5716:	4f e7       	ldi	r20, 0x7F	; 127
    5718:	53 e4       	ldi	r21, 0x43	; 67
    571a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gtsf2>
    571e:	18 16       	cp	r1, r24
    5720:	0c f0       	brlt	.+2      	; 0x5724 <H_LM35_u16_ReadTemprature+0xc6>
    5722:	7b c0       	rjmp	.+246    	; 0x581a <H_LM35_u16_ReadTemprature+0x1bc>
	{
		_delay_ms(__us / 1000.0);
    5724:	6d 89       	ldd	r22, Y+21	; 0x15
    5726:	7e 89       	ldd	r23, Y+22	; 0x16
    5728:	8f 89       	ldd	r24, Y+23	; 0x17
    572a:	98 8d       	ldd	r25, Y+24	; 0x18
    572c:	20 e0       	ldi	r18, 0x00	; 0
    572e:	30 e0       	ldi	r19, 0x00	; 0
    5730:	4a e7       	ldi	r20, 0x7A	; 122
    5732:	54 e4       	ldi	r21, 0x44	; 68
    5734:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    5738:	dc 01       	movw	r26, r24
    573a:	cb 01       	movw	r24, r22
    573c:	8c 87       	std	Y+12, r24	; 0x0c
    573e:	9d 87       	std	Y+13, r25	; 0x0d
    5740:	ae 87       	std	Y+14, r26	; 0x0e
    5742:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5744:	6c 85       	ldd	r22, Y+12	; 0x0c
    5746:	7d 85       	ldd	r23, Y+13	; 0x0d
    5748:	8e 85       	ldd	r24, Y+14	; 0x0e
    574a:	9f 85       	ldd	r25, Y+15	; 0x0f
    574c:	20 e0       	ldi	r18, 0x00	; 0
    574e:	30 e0       	ldi	r19, 0x00	; 0
    5750:	4a e7       	ldi	r20, 0x7A	; 122
    5752:	55 e4       	ldi	r21, 0x45	; 69
    5754:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5758:	dc 01       	movw	r26, r24
    575a:	cb 01       	movw	r24, r22
    575c:	88 87       	std	Y+8, r24	; 0x08
    575e:	99 87       	std	Y+9, r25	; 0x09
    5760:	aa 87       	std	Y+10, r26	; 0x0a
    5762:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5764:	68 85       	ldd	r22, Y+8	; 0x08
    5766:	79 85       	ldd	r23, Y+9	; 0x09
    5768:	8a 85       	ldd	r24, Y+10	; 0x0a
    576a:	9b 85       	ldd	r25, Y+11	; 0x0b
    576c:	20 e0       	ldi	r18, 0x00	; 0
    576e:	30 e0       	ldi	r19, 0x00	; 0
    5770:	40 e8       	ldi	r20, 0x80	; 128
    5772:	5f e3       	ldi	r21, 0x3F	; 63
    5774:	0e 94 33 13 	call	0x2666	; 0x2666 <__ltsf2>
    5778:	88 23       	and	r24, r24
    577a:	2c f4       	brge	.+10     	; 0x5786 <H_LM35_u16_ReadTemprature+0x128>
		__ticks = 1;
    577c:	81 e0       	ldi	r24, 0x01	; 1
    577e:	90 e0       	ldi	r25, 0x00	; 0
    5780:	9f 83       	std	Y+7, r25	; 0x07
    5782:	8e 83       	std	Y+6, r24	; 0x06
    5784:	3f c0       	rjmp	.+126    	; 0x5804 <H_LM35_u16_ReadTemprature+0x1a6>
	else if (__tmp > 65535)
    5786:	68 85       	ldd	r22, Y+8	; 0x08
    5788:	79 85       	ldd	r23, Y+9	; 0x09
    578a:	8a 85       	ldd	r24, Y+10	; 0x0a
    578c:	9b 85       	ldd	r25, Y+11	; 0x0b
    578e:	20 e0       	ldi	r18, 0x00	; 0
    5790:	3f ef       	ldi	r19, 0xFF	; 255
    5792:	4f e7       	ldi	r20, 0x7F	; 127
    5794:	57 e4       	ldi	r21, 0x47	; 71
    5796:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gtsf2>
    579a:	18 16       	cp	r1, r24
    579c:	4c f5       	brge	.+82     	; 0x57f0 <H_LM35_u16_ReadTemprature+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    579e:	6c 85       	ldd	r22, Y+12	; 0x0c
    57a0:	7d 85       	ldd	r23, Y+13	; 0x0d
    57a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    57a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    57a6:	20 e0       	ldi	r18, 0x00	; 0
    57a8:	30 e0       	ldi	r19, 0x00	; 0
    57aa:	40 e2       	ldi	r20, 0x20	; 32
    57ac:	51 e4       	ldi	r21, 0x41	; 65
    57ae:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    57b2:	dc 01       	movw	r26, r24
    57b4:	cb 01       	movw	r24, r22
    57b6:	bc 01       	movw	r22, r24
    57b8:	cd 01       	movw	r24, r26
    57ba:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    57be:	dc 01       	movw	r26, r24
    57c0:	cb 01       	movw	r24, r22
    57c2:	9f 83       	std	Y+7, r25	; 0x07
    57c4:	8e 83       	std	Y+6, r24	; 0x06
    57c6:	0f c0       	rjmp	.+30     	; 0x57e6 <H_LM35_u16_ReadTemprature+0x188>
    57c8:	80 e9       	ldi	r24, 0x90	; 144
    57ca:	91 e0       	ldi	r25, 0x01	; 1
    57cc:	9d 83       	std	Y+5, r25	; 0x05
    57ce:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    57d0:	8c 81       	ldd	r24, Y+4	; 0x04
    57d2:	9d 81       	ldd	r25, Y+5	; 0x05
    57d4:	01 97       	sbiw	r24, 0x01	; 1
    57d6:	f1 f7       	brne	.-4      	; 0x57d4 <H_LM35_u16_ReadTemprature+0x176>
    57d8:	9d 83       	std	Y+5, r25	; 0x05
    57da:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    57dc:	8e 81       	ldd	r24, Y+6	; 0x06
    57de:	9f 81       	ldd	r25, Y+7	; 0x07
    57e0:	01 97       	sbiw	r24, 0x01	; 1
    57e2:	9f 83       	std	Y+7, r25	; 0x07
    57e4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57e6:	8e 81       	ldd	r24, Y+6	; 0x06
    57e8:	9f 81       	ldd	r25, Y+7	; 0x07
    57ea:	00 97       	sbiw	r24, 0x00	; 0
    57ec:	69 f7       	brne	.-38     	; 0x57c8 <H_LM35_u16_ReadTemprature+0x16a>
    57ee:	24 c0       	rjmp	.+72     	; 0x5838 <H_LM35_u16_ReadTemprature+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57f0:	68 85       	ldd	r22, Y+8	; 0x08
    57f2:	79 85       	ldd	r23, Y+9	; 0x09
    57f4:	8a 85       	ldd	r24, Y+10	; 0x0a
    57f6:	9b 85       	ldd	r25, Y+11	; 0x0b
    57f8:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    57fc:	dc 01       	movw	r26, r24
    57fe:	cb 01       	movw	r24, r22
    5800:	9f 83       	std	Y+7, r25	; 0x07
    5802:	8e 83       	std	Y+6, r24	; 0x06
    5804:	8e 81       	ldd	r24, Y+6	; 0x06
    5806:	9f 81       	ldd	r25, Y+7	; 0x07
    5808:	9b 83       	std	Y+3, r25	; 0x03
    580a:	8a 83       	std	Y+2, r24	; 0x02
    580c:	8a 81       	ldd	r24, Y+2	; 0x02
    580e:	9b 81       	ldd	r25, Y+3	; 0x03
    5810:	01 97       	sbiw	r24, 0x01	; 1
    5812:	f1 f7       	brne	.-4      	; 0x5810 <H_LM35_u16_ReadTemprature+0x1b2>
    5814:	9b 83       	std	Y+3, r25	; 0x03
    5816:	8a 83       	std	Y+2, r24	; 0x02
    5818:	0f c0       	rjmp	.+30     	; 0x5838 <H_LM35_u16_ReadTemprature+0x1da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    581a:	69 89       	ldd	r22, Y+17	; 0x11
    581c:	7a 89       	ldd	r23, Y+18	; 0x12
    581e:	8b 89       	ldd	r24, Y+19	; 0x13
    5820:	9c 89       	ldd	r25, Y+20	; 0x14
    5822:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5826:	dc 01       	movw	r26, r24
    5828:	cb 01       	movw	r24, r22
    582a:	88 8b       	std	Y+16, r24	; 0x10
    582c:	88 89       	ldd	r24, Y+16	; 0x10
    582e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5830:	89 81       	ldd	r24, Y+1	; 0x01
    5832:	8a 95       	dec	r24
    5834:	f1 f7       	brne	.-4      	; 0x5832 <H_LM35_u16_ReadTemprature+0x1d4>
    5836:	89 83       	std	Y+1, r24	; 0x01
	u8 state= ADC_FAILED;
	u8 readings[LM35_NUM_OF_SAMPLES];
	int i, j;

	//Taking samples
	for(i= 0; i< LM35_NUM_OF_SAMPLES ; i++){
    5838:	8c 8d       	ldd	r24, Y+28	; 0x1c
    583a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    583c:	01 96       	adiw	r24, 0x01	; 1
    583e:	9d 8f       	std	Y+29, r25	; 0x1d
    5840:	8c 8f       	std	Y+28, r24	; 0x1c
    5842:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5844:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5846:	88 32       	cpi	r24, 0x28	; 40
    5848:	91 05       	cpc	r25, r1
    584a:	0c f4       	brge	.+2      	; 0x584e <H_LM35_u16_ReadTemprature+0x1f0>
    584c:	1b cf       	rjmp	.-458    	; 0x5684 <H_LM35_u16_ReadTemprature+0x26>

	}

	//Sorting readings (Bubble Sort)
		u8 temp;
	    for (i = 0; i < LM35_NUM_OF_SAMPLES; i++) {
    584e:	1d 8e       	std	Y+29, r1	; 0x1d
    5850:	1c 8e       	std	Y+28, r1	; 0x1c
    5852:	56 c0       	rjmp	.+172    	; 0x5900 <H_LM35_u16_ReadTemprature+0x2a2>
	        for (j = 0; j < LM35_NUM_OF_SAMPLES-j-1; j++) {
    5854:	1b 8e       	std	Y+27, r1	; 0x1b
    5856:	1a 8e       	std	Y+26, r1	; 0x1a
    5858:	42 c0       	rjmp	.+132    	; 0x58de <H_LM35_u16_ReadTemprature+0x280>
	            if (readings[j] > readings[j+1]) {
    585a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    585c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    585e:	ce 01       	movw	r24, r28
    5860:	89 96       	adiw	r24, 0x29	; 41
    5862:	fc 01       	movw	r30, r24
    5864:	e2 0f       	add	r30, r18
    5866:	f3 1f       	adc	r31, r19
    5868:	40 81       	ld	r20, Z
    586a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    586c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    586e:	9c 01       	movw	r18, r24
    5870:	2f 5f       	subi	r18, 0xFF	; 255
    5872:	3f 4f       	sbci	r19, 0xFF	; 255
    5874:	ce 01       	movw	r24, r28
    5876:	89 96       	adiw	r24, 0x29	; 41
    5878:	fc 01       	movw	r30, r24
    587a:	e2 0f       	add	r30, r18
    587c:	f3 1f       	adc	r31, r19
    587e:	80 81       	ld	r24, Z
    5880:	84 17       	cp	r24, r20
    5882:	40 f5       	brcc	.+80     	; 0x58d4 <H_LM35_u16_ReadTemprature+0x276>
	                temp = readings[j];
    5884:	2a 8d       	ldd	r18, Y+26	; 0x1a
    5886:	3b 8d       	ldd	r19, Y+27	; 0x1b
    5888:	ce 01       	movw	r24, r28
    588a:	89 96       	adiw	r24, 0x29	; 41
    588c:	fc 01       	movw	r30, r24
    588e:	e2 0f       	add	r30, r18
    5890:	f3 1f       	adc	r31, r19
    5892:	80 81       	ld	r24, Z
    5894:	89 8f       	std	Y+25, r24	; 0x19
	                readings[j] = readings[j+1];
    5896:	4a 8d       	ldd	r20, Y+26	; 0x1a
    5898:	5b 8d       	ldd	r21, Y+27	; 0x1b
    589a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    589c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    589e:	9c 01       	movw	r18, r24
    58a0:	2f 5f       	subi	r18, 0xFF	; 255
    58a2:	3f 4f       	sbci	r19, 0xFF	; 255
    58a4:	ce 01       	movw	r24, r28
    58a6:	89 96       	adiw	r24, 0x29	; 41
    58a8:	fc 01       	movw	r30, r24
    58aa:	e2 0f       	add	r30, r18
    58ac:	f3 1f       	adc	r31, r19
    58ae:	20 81       	ld	r18, Z
    58b0:	ce 01       	movw	r24, r28
    58b2:	89 96       	adiw	r24, 0x29	; 41
    58b4:	fc 01       	movw	r30, r24
    58b6:	e4 0f       	add	r30, r20
    58b8:	f5 1f       	adc	r31, r21
    58ba:	20 83       	st	Z, r18
	                readings[j+1] = temp;
    58bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    58be:	9b 8d       	ldd	r25, Y+27	; 0x1b
    58c0:	9c 01       	movw	r18, r24
    58c2:	2f 5f       	subi	r18, 0xFF	; 255
    58c4:	3f 4f       	sbci	r19, 0xFF	; 255
    58c6:	ce 01       	movw	r24, r28
    58c8:	89 96       	adiw	r24, 0x29	; 41
    58ca:	fc 01       	movw	r30, r24
    58cc:	e2 0f       	add	r30, r18
    58ce:	f3 1f       	adc	r31, r19
    58d0:	89 8d       	ldd	r24, Y+25	; 0x19
    58d2:	80 83       	st	Z, r24
	}

	//Sorting readings (Bubble Sort)
		u8 temp;
	    for (i = 0; i < LM35_NUM_OF_SAMPLES; i++) {
	        for (j = 0; j < LM35_NUM_OF_SAMPLES-j-1; j++) {
    58d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    58d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    58d8:	01 96       	adiw	r24, 0x01	; 1
    58da:	9b 8f       	std	Y+27, r25	; 0x1b
    58dc:	8a 8f       	std	Y+26, r24	; 0x1a
    58de:	27 e2       	ldi	r18, 0x27	; 39
    58e0:	30 e0       	ldi	r19, 0x00	; 0
    58e2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    58e4:	9b 8d       	ldd	r25, Y+27	; 0x1b
    58e6:	28 1b       	sub	r18, r24
    58e8:	39 0b       	sbc	r19, r25
    58ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    58ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
    58ee:	82 17       	cp	r24, r18
    58f0:	93 07       	cpc	r25, r19
    58f2:	0c f4       	brge	.+2      	; 0x58f6 <H_LM35_u16_ReadTemprature+0x298>
    58f4:	b2 cf       	rjmp	.-156    	; 0x585a <H_LM35_u16_ReadTemprature+0x1fc>

	}

	//Sorting readings (Bubble Sort)
		u8 temp;
	    for (i = 0; i < LM35_NUM_OF_SAMPLES; i++) {
    58f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    58f8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    58fa:	01 96       	adiw	r24, 0x01	; 1
    58fc:	9d 8f       	std	Y+29, r25	; 0x1d
    58fe:	8c 8f       	std	Y+28, r24	; 0x1c
    5900:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5902:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5904:	88 32       	cpi	r24, 0x28	; 40
    5906:	91 05       	cpc	r25, r1
    5908:	0c f4       	brge	.+2      	; 0x590c <H_LM35_u16_ReadTemprature+0x2ae>
    590a:	a4 cf       	rjmp	.-184    	; 0x5854 <H_LM35_u16_ReadTemprature+0x1f6>
	        }
	    }

	    // Find the median value in the window
	    if (LM35_NUM_OF_SAMPLES % 2 == 0) {
	        ADC_result = (readings[LM35_NUM_OF_SAMPLES/2] + readings[LM35_NUM_OF_SAMPLES/2-1])/2;
    590c:	8d ad       	ldd	r24, Y+61	; 0x3d
    590e:	28 2f       	mov	r18, r24
    5910:	30 e0       	ldi	r19, 0x00	; 0
    5912:	8c ad       	ldd	r24, Y+60	; 0x3c
    5914:	88 2f       	mov	r24, r24
    5916:	90 e0       	ldi	r25, 0x00	; 0
    5918:	82 0f       	add	r24, r18
    591a:	93 1f       	adc	r25, r19
    591c:	64 96       	adiw	r28, 0x14	; 20
    591e:	9f af       	std	Y+63, r25	; 0x3f
    5920:	8e af       	std	Y+62, r24	; 0x3e
    5922:	64 97       	sbiw	r28, 0x14	; 20
    5924:	64 96       	adiw	r28, 0x14	; 20
    5926:	8e ad       	ldd	r24, Y+62	; 0x3e
    5928:	9f ad       	ldd	r25, Y+63	; 0x3f
    592a:	64 97       	sbiw	r28, 0x14	; 20
    592c:	99 23       	and	r25, r25
    592e:	4c f4       	brge	.+18     	; 0x5942 <H_LM35_u16_ReadTemprature+0x2e4>
    5930:	64 96       	adiw	r28, 0x14	; 20
    5932:	8e ad       	ldd	r24, Y+62	; 0x3e
    5934:	9f ad       	ldd	r25, Y+63	; 0x3f
    5936:	64 97       	sbiw	r28, 0x14	; 20
    5938:	01 96       	adiw	r24, 0x01	; 1
    593a:	64 96       	adiw	r28, 0x14	; 20
    593c:	9f af       	std	Y+63, r25	; 0x3f
    593e:	8e af       	std	Y+62, r24	; 0x3e
    5940:	64 97       	sbiw	r28, 0x14	; 20
    5942:	64 96       	adiw	r28, 0x14	; 20
    5944:	8e ad       	ldd	r24, Y+62	; 0x3e
    5946:	9f ad       	ldd	r25, Y+63	; 0x3f
    5948:	64 97       	sbiw	r28, 0x14	; 20
    594a:	95 95       	asr	r25
    594c:	87 95       	ror	r24
    594e:	98 a7       	std	Y+40, r25	; 0x28
    5950:	8f a3       	std	Y+39, r24	; 0x27
	    else {
	        ADC_result = readings[LM35_NUM_OF_SAMPLES/2];
	    }


		analog_volt = ADC_result * ((5.0*1000)/1024);  //in millieVolts
    5952:	8f a1       	ldd	r24, Y+39	; 0x27
    5954:	98 a5       	ldd	r25, Y+40	; 0x28
    5956:	cc 01       	movw	r24, r24
    5958:	a0 e0       	ldi	r26, 0x00	; 0
    595a:	b0 e0       	ldi	r27, 0x00	; 0
    595c:	bc 01       	movw	r22, r24
    595e:	cd 01       	movw	r24, r26
    5960:	0e 94 b7 13 	call	0x276e	; 0x276e <__floatunsisf>
    5964:	dc 01       	movw	r26, r24
    5966:	cb 01       	movw	r24, r22
    5968:	bc 01       	movw	r22, r24
    596a:	cd 01       	movw	r24, r26
    596c:	20 e0       	ldi	r18, 0x00	; 0
    596e:	30 e4       	ldi	r19, 0x40	; 64
    5970:	4c e9       	ldi	r20, 0x9C	; 156
    5972:	50 e4       	ldi	r21, 0x40	; 64
    5974:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5978:	dc 01       	movw	r26, r24
    597a:	cb 01       	movw	r24, r22
    597c:	8b a3       	std	Y+35, r24	; 0x23
    597e:	9c a3       	std	Y+36, r25	; 0x24
    5980:	ad a3       	std	Y+37, r26	; 0x25
    5982:	be a3       	std	Y+38, r27	; 0x26

		if(analog_volt == (f64)550){
    5984:	6b a1       	ldd	r22, Y+35	; 0x23
    5986:	7c a1       	ldd	r23, Y+36	; 0x24
    5988:	8d a1       	ldd	r24, Y+37	; 0x25
    598a:	9e a1       	ldd	r25, Y+38	; 0x26
    598c:	20 e0       	ldi	r18, 0x00	; 0
    598e:	30 e8       	ldi	r19, 0x80	; 128
    5990:	49 e0       	ldi	r20, 0x09	; 9
    5992:	54 e4       	ldi	r21, 0x44	; 68
    5994:	0e 94 a3 12 	call	0x2546	; 0x2546 <__eqsf2>
    5998:	88 23       	and	r24, r24
    599a:	49 f4       	brne	.+18     	; 0x59ae <H_LM35_u16_ReadTemprature+0x350>
			tempreture = 0.0;
    599c:	80 e0       	ldi	r24, 0x00	; 0
    599e:	90 e0       	ldi	r25, 0x00	; 0
    59a0:	a0 e0       	ldi	r26, 0x00	; 0
    59a2:	b0 e0       	ldi	r27, 0x00	; 0
    59a4:	8f 8f       	std	Y+31, r24	; 0x1f
    59a6:	98 a3       	std	Y+32, r25	; 0x20
    59a8:	a9 a3       	std	Y+33, r26	; 0x21
    59aa:	ba a3       	std	Y+34, r27	; 0x22
    59ac:	10 c0       	rjmp	.+32     	; 0x59ce <H_LM35_u16_ReadTemprature+0x370>

		}else {
			tempreture = analog_volt / 10.0;
    59ae:	6b a1       	ldd	r22, Y+35	; 0x23
    59b0:	7c a1       	ldd	r23, Y+36	; 0x24
    59b2:	8d a1       	ldd	r24, Y+37	; 0x25
    59b4:	9e a1       	ldd	r25, Y+38	; 0x26
    59b6:	20 e0       	ldi	r18, 0x00	; 0
    59b8:	30 e0       	ldi	r19, 0x00	; 0
    59ba:	40 e2       	ldi	r20, 0x20	; 32
    59bc:	51 e4       	ldi	r21, 0x41	; 65
    59be:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    59c2:	dc 01       	movw	r26, r24
    59c4:	cb 01       	movw	r24, r22
    59c6:	8f 8f       	std	Y+31, r24	; 0x1f
    59c8:	98 a3       	std	Y+32, r25	; 0x20
    59ca:	a9 a3       	std	Y+33, r26	; 0x21
    59cc:	ba a3       	std	Y+34, r27	; 0x22
		}

		//return ADC_result;
		return tempreture;
    59ce:	6f 8d       	ldd	r22, Y+31	; 0x1f
    59d0:	78 a1       	ldd	r23, Y+32	; 0x20
    59d2:	89 a1       	ldd	r24, Y+33	; 0x21
    59d4:	9a a1       	ldd	r25, Y+34	; 0x22
    59d6:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    59da:	dc 01       	movw	r26, r24
    59dc:	cb 01       	movw	r24, r22

}
    59de:	cd 5a       	subi	r28, 0xAD	; 173
    59e0:	df 4f       	sbci	r29, 0xFF	; 255
    59e2:	0f b6       	in	r0, 0x3f	; 63
    59e4:	f8 94       	cli
    59e6:	de bf       	out	0x3e, r29	; 62
    59e8:	0f be       	out	0x3f, r0	; 63
    59ea:	cd bf       	out	0x3d, r28	; 61
    59ec:	cf 91       	pop	r28
    59ee:	df 91       	pop	r29
    59f0:	08 95       	ret

000059f2 <H_LDR_void_Init>:
extern ADC_config_t LDR_ADC_config_struct;
/*** HOW to use
 * - You provide ADC_config_t structure with the desired ADC configurations
 *   to read LDR outputs.
 *  ***/
void H_LDR_void_Init(){
    59f2:	df 93       	push	r29
    59f4:	cf 93       	push	r28
    59f6:	cd b7       	in	r28, 0x3d	; 61
    59f8:	de b7       	in	r29, 0x3e	; 62
	M_ADC_void_Init(LDR_ADC_config_struct);
    59fa:	40 91 d1 01 	lds	r20, 0x01D1
    59fe:	50 91 d2 01 	lds	r21, 0x01D2
    5a02:	60 91 d3 01 	lds	r22, 0x01D3
    5a06:	70 91 d4 01 	lds	r23, 0x01D4
    5a0a:	80 91 d5 01 	lds	r24, 0x01D5
    5a0e:	0e 94 22 28 	call	0x5044	; 0x5044 <M_ADC_void_Init>
}
    5a12:	cf 91       	pop	r28
    5a14:	df 91       	pop	r29
    5a16:	08 95       	ret

00005a18 <H_LDR_u16_Read>:
 * - After initializing the ADC reading LDR through H_LDR_void_Init
 * - You provide the channel that LDR is connected to
 * - The function does a 1-shoot ADC conversion and return the voltage in millieVolts
 * - The function uses the non-blocking ADC reading function, but H_LDR_u16_Read itself
 *   blocks the code because it loops until the Reading function returns ADC_SUCCEED  ***/
u16 H_LDR_u16_Read(ADC_channel_t channel){
    5a18:	df 93       	push	r29
    5a1a:	cf 93       	push	r28
    5a1c:	cd b7       	in	r28, 0x3d	; 61
    5a1e:	de b7       	in	r29, 0x3e	; 62
    5a20:	e9 97       	sbiw	r28, 0x39	; 57
    5a22:	0f b6       	in	r0, 0x3f	; 63
    5a24:	f8 94       	cli
    5a26:	de bf       	out	0x3e, r29	; 62
    5a28:	0f be       	out	0x3f, r0	; 63
    5a2a:	cd bf       	out	0x3d, r28	; 61
    5a2c:	89 af       	std	Y+57, r24	; 0x39

	f64 analog_volt;
	u16 ADC_result;
	u8 state = ADC_FAILED;
    5a2e:	1e 8e       	std	Y+30, r1	; 0x1e
	u16 readings[LDR_NUM_OF_SAMPLES] ;
	int i,j;

	//taking 5 readings
	for( i = 0 ; i< LDR_NUM_OF_SAMPLES ;i++){
    5a30:	1d 8e       	std	Y+29, r1	; 0x1d
    5a32:	1c 8e       	std	Y+28, r1	; 0x1c
    5a34:	e0 c0       	rjmp	.+448    	; 0x5bf6 <H_LDR_u16_Read+0x1de>

		M_ADC_void_StartConversion();
    5a36:	0e 94 b2 28 	call	0x5164	; 0x5164 <M_ADC_void_StartConversion>
    5a3a:	08 c0       	rjmp	.+16     	; 0x5a4c <H_LDR_u16_Read+0x34>
		while(state == ADC_FAILED){
			state = M_ADC_void_GetDigitalValueSynchNonBlocking(channel, &ADC_result);
    5a3c:	9e 01       	movw	r18, r28
    5a3e:	2d 5d       	subi	r18, 0xDD	; 221
    5a40:	3f 4f       	sbci	r19, 0xFF	; 255
    5a42:	89 ad       	ldd	r24, Y+57	; 0x39
    5a44:	b9 01       	movw	r22, r18
    5a46:	0e 94 c0 28 	call	0x5180	; 0x5180 <M_ADC_void_GetDigitalValueSynchNonBlocking>
    5a4a:	8e 8f       	std	Y+30, r24	; 0x1e

	//taking 5 readings
	for( i = 0 ; i< LDR_NUM_OF_SAMPLES ;i++){

		M_ADC_void_StartConversion();
		while(state == ADC_FAILED){
    5a4c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    5a4e:	88 23       	and	r24, r24
    5a50:	a9 f3       	breq	.-22     	; 0x5a3c <H_LDR_u16_Read+0x24>
			state = M_ADC_void_GetDigitalValueSynchNonBlocking(channel, &ADC_result);
		}
		readings[i] = ADC_result;
    5a52:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5a54:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5a56:	4b a1       	ldd	r20, Y+35	; 0x23
    5a58:	5c a1       	ldd	r21, Y+36	; 0x24
    5a5a:	9c 01       	movw	r18, r24
    5a5c:	22 0f       	add	r18, r18
    5a5e:	33 1f       	adc	r19, r19
    5a60:	ce 01       	movw	r24, r28
    5a62:	01 96       	adiw	r24, 0x01	; 1
    5a64:	82 0f       	add	r24, r18
    5a66:	93 1f       	adc	r25, r19
    5a68:	fc 01       	movw	r30, r24
    5a6a:	b4 96       	adiw	r30, 0x24	; 36
    5a6c:	51 83       	std	Z+1, r21	; 0x01
    5a6e:	40 83       	st	Z, r20
    5a70:	80 e0       	ldi	r24, 0x00	; 0
    5a72:	90 e0       	ldi	r25, 0x00	; 0
    5a74:	a8 ec       	ldi	r26, 0xC8	; 200
    5a76:	b2 e4       	ldi	r27, 0x42	; 66
    5a78:	8d 8b       	std	Y+21, r24	; 0x15
    5a7a:	9e 8b       	std	Y+22, r25	; 0x16
    5a7c:	af 8b       	std	Y+23, r26	; 0x17
    5a7e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    5a80:	6d 89       	ldd	r22, Y+21	; 0x15
    5a82:	7e 89       	ldd	r23, Y+22	; 0x16
    5a84:	8f 89       	ldd	r24, Y+23	; 0x17
    5a86:	98 8d       	ldd	r25, Y+24	; 0x18
    5a88:	2b ea       	ldi	r18, 0xAB	; 171
    5a8a:	3a ea       	ldi	r19, 0xAA	; 170
    5a8c:	4a ea       	ldi	r20, 0xAA	; 170
    5a8e:	50 e4       	ldi	r21, 0x40	; 64
    5a90:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5a94:	dc 01       	movw	r26, r24
    5a96:	cb 01       	movw	r24, r22
    5a98:	89 8b       	std	Y+17, r24	; 0x11
    5a9a:	9a 8b       	std	Y+18, r25	; 0x12
    5a9c:	ab 8b       	std	Y+19, r26	; 0x13
    5a9e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    5aa0:	69 89       	ldd	r22, Y+17	; 0x11
    5aa2:	7a 89       	ldd	r23, Y+18	; 0x12
    5aa4:	8b 89       	ldd	r24, Y+19	; 0x13
    5aa6:	9c 89       	ldd	r25, Y+20	; 0x14
    5aa8:	20 e0       	ldi	r18, 0x00	; 0
    5aaa:	30 e0       	ldi	r19, 0x00	; 0
    5aac:	40 e8       	ldi	r20, 0x80	; 128
    5aae:	5f e3       	ldi	r21, 0x3F	; 63
    5ab0:	0e 94 33 13 	call	0x2666	; 0x2666 <__ltsf2>
    5ab4:	88 23       	and	r24, r24
    5ab6:	1c f4       	brge	.+6      	; 0x5abe <H_LDR_u16_Read+0xa6>
		__ticks = 1;
    5ab8:	81 e0       	ldi	r24, 0x01	; 1
    5aba:	88 8b       	std	Y+16, r24	; 0x10
    5abc:	91 c0       	rjmp	.+290    	; 0x5be0 <H_LDR_u16_Read+0x1c8>
	else if (__tmp > 255)
    5abe:	69 89       	ldd	r22, Y+17	; 0x11
    5ac0:	7a 89       	ldd	r23, Y+18	; 0x12
    5ac2:	8b 89       	ldd	r24, Y+19	; 0x13
    5ac4:	9c 89       	ldd	r25, Y+20	; 0x14
    5ac6:	20 e0       	ldi	r18, 0x00	; 0
    5ac8:	30 e0       	ldi	r19, 0x00	; 0
    5aca:	4f e7       	ldi	r20, 0x7F	; 127
    5acc:	53 e4       	ldi	r21, 0x43	; 67
    5ace:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gtsf2>
    5ad2:	18 16       	cp	r1, r24
    5ad4:	0c f0       	brlt	.+2      	; 0x5ad8 <H_LDR_u16_Read+0xc0>
    5ad6:	7b c0       	rjmp	.+246    	; 0x5bce <H_LDR_u16_Read+0x1b6>
	{
		_delay_ms(__us / 1000.0);
    5ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    5ada:	7e 89       	ldd	r23, Y+22	; 0x16
    5adc:	8f 89       	ldd	r24, Y+23	; 0x17
    5ade:	98 8d       	ldd	r25, Y+24	; 0x18
    5ae0:	20 e0       	ldi	r18, 0x00	; 0
    5ae2:	30 e0       	ldi	r19, 0x00	; 0
    5ae4:	4a e7       	ldi	r20, 0x7A	; 122
    5ae6:	54 e4       	ldi	r21, 0x44	; 68
    5ae8:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3>
    5aec:	dc 01       	movw	r26, r24
    5aee:	cb 01       	movw	r24, r22
    5af0:	8c 87       	std	Y+12, r24	; 0x0c
    5af2:	9d 87       	std	Y+13, r25	; 0x0d
    5af4:	ae 87       	std	Y+14, r26	; 0x0e
    5af6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5af8:	6c 85       	ldd	r22, Y+12	; 0x0c
    5afa:	7d 85       	ldd	r23, Y+13	; 0x0d
    5afc:	8e 85       	ldd	r24, Y+14	; 0x0e
    5afe:	9f 85       	ldd	r25, Y+15	; 0x0f
    5b00:	20 e0       	ldi	r18, 0x00	; 0
    5b02:	30 e0       	ldi	r19, 0x00	; 0
    5b04:	4a e7       	ldi	r20, 0x7A	; 122
    5b06:	55 e4       	ldi	r21, 0x45	; 69
    5b08:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5b0c:	dc 01       	movw	r26, r24
    5b0e:	cb 01       	movw	r24, r22
    5b10:	88 87       	std	Y+8, r24	; 0x08
    5b12:	99 87       	std	Y+9, r25	; 0x09
    5b14:	aa 87       	std	Y+10, r26	; 0x0a
    5b16:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    5b18:	68 85       	ldd	r22, Y+8	; 0x08
    5b1a:	79 85       	ldd	r23, Y+9	; 0x09
    5b1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    5b20:	20 e0       	ldi	r18, 0x00	; 0
    5b22:	30 e0       	ldi	r19, 0x00	; 0
    5b24:	40 e8       	ldi	r20, 0x80	; 128
    5b26:	5f e3       	ldi	r21, 0x3F	; 63
    5b28:	0e 94 33 13 	call	0x2666	; 0x2666 <__ltsf2>
    5b2c:	88 23       	and	r24, r24
    5b2e:	2c f4       	brge	.+10     	; 0x5b3a <H_LDR_u16_Read+0x122>
		__ticks = 1;
    5b30:	81 e0       	ldi	r24, 0x01	; 1
    5b32:	90 e0       	ldi	r25, 0x00	; 0
    5b34:	9f 83       	std	Y+7, r25	; 0x07
    5b36:	8e 83       	std	Y+6, r24	; 0x06
    5b38:	3f c0       	rjmp	.+126    	; 0x5bb8 <H_LDR_u16_Read+0x1a0>
	else if (__tmp > 65535)
    5b3a:	68 85       	ldd	r22, Y+8	; 0x08
    5b3c:	79 85       	ldd	r23, Y+9	; 0x09
    5b3e:	8a 85       	ldd	r24, Y+10	; 0x0a
    5b40:	9b 85       	ldd	r25, Y+11	; 0x0b
    5b42:	20 e0       	ldi	r18, 0x00	; 0
    5b44:	3f ef       	ldi	r19, 0xFF	; 255
    5b46:	4f e7       	ldi	r20, 0x7F	; 127
    5b48:	57 e4       	ldi	r21, 0x47	; 71
    5b4a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gtsf2>
    5b4e:	18 16       	cp	r1, r24
    5b50:	4c f5       	brge	.+82     	; 0x5ba4 <H_LDR_u16_Read+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b52:	6c 85       	ldd	r22, Y+12	; 0x0c
    5b54:	7d 85       	ldd	r23, Y+13	; 0x0d
    5b56:	8e 85       	ldd	r24, Y+14	; 0x0e
    5b58:	9f 85       	ldd	r25, Y+15	; 0x0f
    5b5a:	20 e0       	ldi	r18, 0x00	; 0
    5b5c:	30 e0       	ldi	r19, 0x00	; 0
    5b5e:	40 e2       	ldi	r20, 0x20	; 32
    5b60:	51 e4       	ldi	r21, 0x41	; 65
    5b62:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5b66:	dc 01       	movw	r26, r24
    5b68:	cb 01       	movw	r24, r22
    5b6a:	bc 01       	movw	r22, r24
    5b6c:	cd 01       	movw	r24, r26
    5b6e:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5b72:	dc 01       	movw	r26, r24
    5b74:	cb 01       	movw	r24, r22
    5b76:	9f 83       	std	Y+7, r25	; 0x07
    5b78:	8e 83       	std	Y+6, r24	; 0x06
    5b7a:	0f c0       	rjmp	.+30     	; 0x5b9a <H_LDR_u16_Read+0x182>
    5b7c:	80 e9       	ldi	r24, 0x90	; 144
    5b7e:	91 e0       	ldi	r25, 0x01	; 1
    5b80:	9d 83       	std	Y+5, r25	; 0x05
    5b82:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5b84:	8c 81       	ldd	r24, Y+4	; 0x04
    5b86:	9d 81       	ldd	r25, Y+5	; 0x05
    5b88:	01 97       	sbiw	r24, 0x01	; 1
    5b8a:	f1 f7       	brne	.-4      	; 0x5b88 <H_LDR_u16_Read+0x170>
    5b8c:	9d 83       	std	Y+5, r25	; 0x05
    5b8e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5b90:	8e 81       	ldd	r24, Y+6	; 0x06
    5b92:	9f 81       	ldd	r25, Y+7	; 0x07
    5b94:	01 97       	sbiw	r24, 0x01	; 1
    5b96:	9f 83       	std	Y+7, r25	; 0x07
    5b98:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5b9a:	8e 81       	ldd	r24, Y+6	; 0x06
    5b9c:	9f 81       	ldd	r25, Y+7	; 0x07
    5b9e:	00 97       	sbiw	r24, 0x00	; 0
    5ba0:	69 f7       	brne	.-38     	; 0x5b7c <H_LDR_u16_Read+0x164>
    5ba2:	24 c0       	rjmp	.+72     	; 0x5bec <H_LDR_u16_Read+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ba4:	68 85       	ldd	r22, Y+8	; 0x08
    5ba6:	79 85       	ldd	r23, Y+9	; 0x09
    5ba8:	8a 85       	ldd	r24, Y+10	; 0x0a
    5baa:	9b 85       	ldd	r25, Y+11	; 0x0b
    5bac:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5bb0:	dc 01       	movw	r26, r24
    5bb2:	cb 01       	movw	r24, r22
    5bb4:	9f 83       	std	Y+7, r25	; 0x07
    5bb6:	8e 83       	std	Y+6, r24	; 0x06
    5bb8:	8e 81       	ldd	r24, Y+6	; 0x06
    5bba:	9f 81       	ldd	r25, Y+7	; 0x07
    5bbc:	9b 83       	std	Y+3, r25	; 0x03
    5bbe:	8a 83       	std	Y+2, r24	; 0x02
    5bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    5bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    5bc4:	01 97       	sbiw	r24, 0x01	; 1
    5bc6:	f1 f7       	brne	.-4      	; 0x5bc4 <H_LDR_u16_Read+0x1ac>
    5bc8:	9b 83       	std	Y+3, r25	; 0x03
    5bca:	8a 83       	std	Y+2, r24	; 0x02
    5bcc:	0f c0       	rjmp	.+30     	; 0x5bec <H_LDR_u16_Read+0x1d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    5bce:	69 89       	ldd	r22, Y+17	; 0x11
    5bd0:	7a 89       	ldd	r23, Y+18	; 0x12
    5bd2:	8b 89       	ldd	r24, Y+19	; 0x13
    5bd4:	9c 89       	ldd	r25, Y+20	; 0x14
    5bd6:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5bda:	dc 01       	movw	r26, r24
    5bdc:	cb 01       	movw	r24, r22
    5bde:	88 8b       	std	Y+16, r24	; 0x10
    5be0:	88 89       	ldd	r24, Y+16	; 0x10
    5be2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    5be4:	89 81       	ldd	r24, Y+1	; 0x01
    5be6:	8a 95       	dec	r24
    5be8:	f1 f7       	brne	.-4      	; 0x5be6 <H_LDR_u16_Read+0x1ce>
    5bea:	89 83       	std	Y+1, r24	; 0x01
	u8 state = ADC_FAILED;
	u16 readings[LDR_NUM_OF_SAMPLES] ;
	int i,j;

	//taking 5 readings
	for( i = 0 ; i< LDR_NUM_OF_SAMPLES ;i++){
    5bec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5bee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5bf0:	01 96       	adiw	r24, 0x01	; 1
    5bf2:	9d 8f       	std	Y+29, r25	; 0x1d
    5bf4:	8c 8f       	std	Y+28, r24	; 0x1c
    5bf6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5bf8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5bfa:	8a 30       	cpi	r24, 0x0A	; 10
    5bfc:	91 05       	cpc	r25, r1
    5bfe:	0c f4       	brge	.+2      	; 0x5c02 <H_LDR_u16_Read+0x1ea>
    5c00:	1a cf       	rjmp	.-460    	; 0x5a36 <H_LDR_u16_Read+0x1e>
		_delay_us(100);
	}

	//Sorting readings (Bubble Sort)
	u8 temp;
    for (i = 0; i < LDR_NUM_OF_SAMPLES; i++) {
    5c02:	1d 8e       	std	Y+29, r1	; 0x1d
    5c04:	1c 8e       	std	Y+28, r1	; 0x1c
    5c06:	72 c0       	rjmp	.+228    	; 0x5cec <H_LDR_u16_Read+0x2d4>
        for (j = 0; j < LDR_NUM_OF_SAMPLES-j-1; j++) {
    5c08:	1b 8e       	std	Y+27, r1	; 0x1b
    5c0a:	1a 8e       	std	Y+26, r1	; 0x1a
    5c0c:	5e c0       	rjmp	.+188    	; 0x5cca <H_LDR_u16_Read+0x2b2>
            if (readings[j] > readings[j+1]) {
    5c0e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5c10:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5c12:	9c 01       	movw	r18, r24
    5c14:	22 0f       	add	r18, r18
    5c16:	33 1f       	adc	r19, r19
    5c18:	ce 01       	movw	r24, r28
    5c1a:	01 96       	adiw	r24, 0x01	; 1
    5c1c:	82 0f       	add	r24, r18
    5c1e:	93 1f       	adc	r25, r19
    5c20:	fc 01       	movw	r30, r24
    5c22:	b4 96       	adiw	r30, 0x24	; 36
    5c24:	40 81       	ld	r20, Z
    5c26:	51 81       	ldd	r21, Z+1	; 0x01
    5c28:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5c2a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5c2c:	01 96       	adiw	r24, 0x01	; 1
    5c2e:	9c 01       	movw	r18, r24
    5c30:	22 0f       	add	r18, r18
    5c32:	33 1f       	adc	r19, r19
    5c34:	ce 01       	movw	r24, r28
    5c36:	01 96       	adiw	r24, 0x01	; 1
    5c38:	82 0f       	add	r24, r18
    5c3a:	93 1f       	adc	r25, r19
    5c3c:	fc 01       	movw	r30, r24
    5c3e:	b4 96       	adiw	r30, 0x24	; 36
    5c40:	80 81       	ld	r24, Z
    5c42:	91 81       	ldd	r25, Z+1	; 0x01
    5c44:	84 17       	cp	r24, r20
    5c46:	95 07       	cpc	r25, r21
    5c48:	d8 f5       	brcc	.+118    	; 0x5cc0 <H_LDR_u16_Read+0x2a8>
                temp = readings[j];
    5c4a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5c4c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5c4e:	9c 01       	movw	r18, r24
    5c50:	22 0f       	add	r18, r18
    5c52:	33 1f       	adc	r19, r19
    5c54:	ce 01       	movw	r24, r28
    5c56:	01 96       	adiw	r24, 0x01	; 1
    5c58:	82 0f       	add	r24, r18
    5c5a:	93 1f       	adc	r25, r19
    5c5c:	fc 01       	movw	r30, r24
    5c5e:	b4 96       	adiw	r30, 0x24	; 36
    5c60:	80 81       	ld	r24, Z
    5c62:	91 81       	ldd	r25, Z+1	; 0x01
    5c64:	89 8f       	std	Y+25, r24	; 0x19
                readings[j] = readings[j+1];
    5c66:	6a 8d       	ldd	r22, Y+26	; 0x1a
    5c68:	7b 8d       	ldd	r23, Y+27	; 0x1b
    5c6a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5c6c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5c6e:	01 96       	adiw	r24, 0x01	; 1
    5c70:	9c 01       	movw	r18, r24
    5c72:	22 0f       	add	r18, r18
    5c74:	33 1f       	adc	r19, r19
    5c76:	ce 01       	movw	r24, r28
    5c78:	01 96       	adiw	r24, 0x01	; 1
    5c7a:	82 0f       	add	r24, r18
    5c7c:	93 1f       	adc	r25, r19
    5c7e:	fc 01       	movw	r30, r24
    5c80:	b4 96       	adiw	r30, 0x24	; 36
    5c82:	40 81       	ld	r20, Z
    5c84:	51 81       	ldd	r21, Z+1	; 0x01
    5c86:	9b 01       	movw	r18, r22
    5c88:	22 0f       	add	r18, r18
    5c8a:	33 1f       	adc	r19, r19
    5c8c:	ce 01       	movw	r24, r28
    5c8e:	01 96       	adiw	r24, 0x01	; 1
    5c90:	82 0f       	add	r24, r18
    5c92:	93 1f       	adc	r25, r19
    5c94:	fc 01       	movw	r30, r24
    5c96:	b4 96       	adiw	r30, 0x24	; 36
    5c98:	51 83       	std	Z+1, r21	; 0x01
    5c9a:	40 83       	st	Z, r20
                readings[j+1] = temp;
    5c9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5c9e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5ca0:	9c 01       	movw	r18, r24
    5ca2:	2f 5f       	subi	r18, 0xFF	; 255
    5ca4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ca6:	89 8d       	ldd	r24, Y+25	; 0x19
    5ca8:	48 2f       	mov	r20, r24
    5caa:	50 e0       	ldi	r21, 0x00	; 0
    5cac:	22 0f       	add	r18, r18
    5cae:	33 1f       	adc	r19, r19
    5cb0:	ce 01       	movw	r24, r28
    5cb2:	01 96       	adiw	r24, 0x01	; 1
    5cb4:	82 0f       	add	r24, r18
    5cb6:	93 1f       	adc	r25, r19
    5cb8:	fc 01       	movw	r30, r24
    5cba:	b4 96       	adiw	r30, 0x24	; 36
    5cbc:	51 83       	std	Z+1, r21	; 0x01
    5cbe:	40 83       	st	Z, r20
	}

	//Sorting readings (Bubble Sort)
	u8 temp;
    for (i = 0; i < LDR_NUM_OF_SAMPLES; i++) {
        for (j = 0; j < LDR_NUM_OF_SAMPLES-j-1; j++) {
    5cc0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5cc2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5cc4:	01 96       	adiw	r24, 0x01	; 1
    5cc6:	9b 8f       	std	Y+27, r25	; 0x1b
    5cc8:	8a 8f       	std	Y+26, r24	; 0x1a
    5cca:	29 e0       	ldi	r18, 0x09	; 9
    5ccc:	30 e0       	ldi	r19, 0x00	; 0
    5cce:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5cd0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5cd2:	28 1b       	sub	r18, r24
    5cd4:	39 0b       	sbc	r19, r25
    5cd6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    5cd8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    5cda:	82 17       	cp	r24, r18
    5cdc:	93 07       	cpc	r25, r19
    5cde:	0c f4       	brge	.+2      	; 0x5ce2 <H_LDR_u16_Read+0x2ca>
    5ce0:	96 cf       	rjmp	.-212    	; 0x5c0e <H_LDR_u16_Read+0x1f6>
		_delay_us(100);
	}

	//Sorting readings (Bubble Sort)
	u8 temp;
    for (i = 0; i < LDR_NUM_OF_SAMPLES; i++) {
    5ce2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5ce4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5ce6:	01 96       	adiw	r24, 0x01	; 1
    5ce8:	9d 8f       	std	Y+29, r25	; 0x1d
    5cea:	8c 8f       	std	Y+28, r24	; 0x1c
    5cec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    5cee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    5cf0:	8a 30       	cpi	r24, 0x0A	; 10
    5cf2:	91 05       	cpc	r25, r1
    5cf4:	0c f4       	brge	.+2      	; 0x5cf8 <H_LDR_u16_Read+0x2e0>
    5cf6:	88 cf       	rjmp	.-240    	; 0x5c08 <H_LDR_u16_Read+0x1f0>
        }
    }

    // Find the median value in the window
    if (LDR_NUM_OF_SAMPLES % 2 == 0) {
        ADC_result = (readings[LDR_NUM_OF_SAMPLES/2] + readings[LDR_NUM_OF_SAMPLES/2-1])/2;
    5cf8:	2f a5       	ldd	r18, Y+47	; 0x2f
    5cfa:	38 a9       	ldd	r19, Y+48	; 0x30
    5cfc:	8d a5       	ldd	r24, Y+45	; 0x2d
    5cfe:	9e a5       	ldd	r25, Y+46	; 0x2e
    5d00:	82 0f       	add	r24, r18
    5d02:	93 1f       	adc	r25, r19
    5d04:	96 95       	lsr	r25
    5d06:	87 95       	ror	r24
    5d08:	9c a3       	std	Y+36, r25	; 0x24
    5d0a:	8b a3       	std	Y+35, r24	; 0x23
    else {
        ADC_result = readings[LDR_NUM_OF_SAMPLES/2];
    }


	analog_volt = ADC_result * (((f64)5.0*1000)/1024);  //in millieVolts
    5d0c:	8b a1       	ldd	r24, Y+35	; 0x23
    5d0e:	9c a1       	ldd	r25, Y+36	; 0x24
    5d10:	cc 01       	movw	r24, r24
    5d12:	a0 e0       	ldi	r26, 0x00	; 0
    5d14:	b0 e0       	ldi	r27, 0x00	; 0
    5d16:	bc 01       	movw	r22, r24
    5d18:	cd 01       	movw	r24, r26
    5d1a:	0e 94 b7 13 	call	0x276e	; 0x276e <__floatunsisf>
    5d1e:	dc 01       	movw	r26, r24
    5d20:	cb 01       	movw	r24, r22
    5d22:	bc 01       	movw	r22, r24
    5d24:	cd 01       	movw	r24, r26
    5d26:	20 e0       	ldi	r18, 0x00	; 0
    5d28:	30 e4       	ldi	r19, 0x40	; 64
    5d2a:	4c e9       	ldi	r20, 0x9C	; 156
    5d2c:	50 e4       	ldi	r21, 0x40	; 64
    5d2e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5d32:	dc 01       	movw	r26, r24
    5d34:	cb 01       	movw	r24, r22
    5d36:	8f 8f       	std	Y+31, r24	; 0x1f
    5d38:	98 a3       	std	Y+32, r25	; 0x20
    5d3a:	a9 a3       	std	Y+33, r26	; 0x21
    5d3c:	ba a3       	std	Y+34, r27	; 0x22

	return analog_volt;
    5d3e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    5d40:	78 a1       	ldd	r23, Y+32	; 0x20
    5d42:	89 a1       	ldd	r24, Y+33	; 0x21
    5d44:	9a a1       	ldd	r25, Y+34	; 0x22
    5d46:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5d4a:	dc 01       	movw	r26, r24
    5d4c:	cb 01       	movw	r24, r22
	//return ADC_result;

}
    5d4e:	e9 96       	adiw	r28, 0x39	; 57
    5d50:	0f b6       	in	r0, 0x3f	; 63
    5d52:	f8 94       	cli
    5d54:	de bf       	out	0x3e, r29	; 62
    5d56:	0f be       	out	0x3f, r0	; 63
    5d58:	cd bf       	out	0x3d, r28	; 61
    5d5a:	cf 91       	pop	r28
    5d5c:	df 91       	pop	r29
    5d5e:	08 95       	ret

00005d60 <H_CLCD_voidlatchByte>:
#include <stdlib.h>
#include <stdio.h>


static void H_CLCD_voidlatchByte(u8 copy_u8Byte)
{
    5d60:	df 93       	push	r29
    5d62:	cf 93       	push	r28
    5d64:	cd b7       	in	r28, 0x3d	; 61
    5d66:	de b7       	in	r29, 0x3e	; 62
    5d68:	e9 97       	sbiw	r28, 0x39	; 57
    5d6a:	0f b6       	in	r0, 0x3f	; 63
    5d6c:	f8 94       	cli
    5d6e:	de bf       	out	0x3e, r29	; 62
    5d70:	0f be       	out	0x3f, r0	; 63
    5d72:	cd bf       	out	0x3d, r28	; 61
    5d74:	89 af       	std	Y+57, r24	; 0x39
#if CLCD_MODE == _8_BIT_MODE
	M_DIO_voidSetPortValue(CLCD_PORT, copy_u8Byte);

#elif CLCD_MODE == _4_BIT_MODE

	M_DIO_voidSetPinValue(CLCD_E_PIN, DIO_LOW);
    5d76:	8c e0       	ldi	r24, 0x0C	; 12
    5d78:	60 e0       	ldi	r22, 0x00	; 0
    5d7a:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>

	M_DIO_voidSetPinValue(CLCD_D4_PIN, GET_BIT(copy_u8Byte,4));
    5d7e:	89 ad       	ldd	r24, Y+57	; 0x39
    5d80:	82 95       	swap	r24
    5d82:	8f 70       	andi	r24, 0x0F	; 15
    5d84:	98 2f       	mov	r25, r24
    5d86:	91 70       	andi	r25, 0x01	; 1
    5d88:	84 e1       	ldi	r24, 0x14	; 20
    5d8a:	69 2f       	mov	r22, r25
    5d8c:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(CLCD_D5_PIN, GET_BIT(copy_u8Byte,5));
    5d90:	89 ad       	ldd	r24, Y+57	; 0x39
    5d92:	82 95       	swap	r24
    5d94:	86 95       	lsr	r24
    5d96:	87 70       	andi	r24, 0x07	; 7
    5d98:	98 2f       	mov	r25, r24
    5d9a:	91 70       	andi	r25, 0x01	; 1
    5d9c:	85 e1       	ldi	r24, 0x15	; 21
    5d9e:	69 2f       	mov	r22, r25
    5da0:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(CLCD_D6_PIN, GET_BIT(copy_u8Byte,6));
    5da4:	89 ad       	ldd	r24, Y+57	; 0x39
    5da6:	82 95       	swap	r24
    5da8:	86 95       	lsr	r24
    5daa:	86 95       	lsr	r24
    5dac:	83 70       	andi	r24, 0x03	; 3
    5dae:	98 2f       	mov	r25, r24
    5db0:	91 70       	andi	r25, 0x01	; 1
    5db2:	86 e1       	ldi	r24, 0x16	; 22
    5db4:	69 2f       	mov	r22, r25
    5db6:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(CLCD_D7_PIN, GET_BIT(copy_u8Byte,7));
    5dba:	89 ad       	ldd	r24, Y+57	; 0x39
    5dbc:	98 2f       	mov	r25, r24
    5dbe:	99 1f       	adc	r25, r25
    5dc0:	99 27       	eor	r25, r25
    5dc2:	99 1f       	adc	r25, r25
    5dc4:	88 e1       	ldi	r24, 0x18	; 24
    5dc6:	69 2f       	mov	r22, r25
    5dc8:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>

	M_DIO_voidSetPinValue(CLCD_E_PIN, DIO_HIGH);
    5dcc:	8c e0       	ldi	r24, 0x0C	; 12
    5dce:	61 e0       	ldi	r22, 0x01	; 1
    5dd0:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>
    5dd4:	80 e0       	ldi	r24, 0x00	; 0
    5dd6:	90 e0       	ldi	r25, 0x00	; 0
    5dd8:	a0 e8       	ldi	r26, 0x80	; 128
    5dda:	bf e3       	ldi	r27, 0x3F	; 63
    5ddc:	8d ab       	std	Y+53, r24	; 0x35
    5dde:	9e ab       	std	Y+54, r25	; 0x36
    5de0:	af ab       	std	Y+55, r26	; 0x37
    5de2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5de4:	6d a9       	ldd	r22, Y+53	; 0x35
    5de6:	7e a9       	ldd	r23, Y+54	; 0x36
    5de8:	8f a9       	ldd	r24, Y+55	; 0x37
    5dea:	98 ad       	ldd	r25, Y+56	; 0x38
    5dec:	20 e0       	ldi	r18, 0x00	; 0
    5dee:	30 e0       	ldi	r19, 0x00	; 0
    5df0:	4a e7       	ldi	r20, 0x7A	; 122
    5df2:	55 e4       	ldi	r21, 0x45	; 69
    5df4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5df8:	dc 01       	movw	r26, r24
    5dfa:	cb 01       	movw	r24, r22
    5dfc:	89 ab       	std	Y+49, r24	; 0x31
    5dfe:	9a ab       	std	Y+50, r25	; 0x32
    5e00:	ab ab       	std	Y+51, r26	; 0x33
    5e02:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5e04:	69 a9       	ldd	r22, Y+49	; 0x31
    5e06:	7a a9       	ldd	r23, Y+50	; 0x32
    5e08:	8b a9       	ldd	r24, Y+51	; 0x33
    5e0a:	9c a9       	ldd	r25, Y+52	; 0x34
    5e0c:	20 e0       	ldi	r18, 0x00	; 0
    5e0e:	30 e0       	ldi	r19, 0x00	; 0
    5e10:	40 e8       	ldi	r20, 0x80	; 128
    5e12:	5f e3       	ldi	r21, 0x3F	; 63
    5e14:	0e 94 33 13 	call	0x2666	; 0x2666 <__ltsf2>
    5e18:	88 23       	and	r24, r24
    5e1a:	2c f4       	brge	.+10     	; 0x5e26 <H_CLCD_voidlatchByte+0xc6>
		__ticks = 1;
    5e1c:	81 e0       	ldi	r24, 0x01	; 1
    5e1e:	90 e0       	ldi	r25, 0x00	; 0
    5e20:	98 ab       	std	Y+48, r25	; 0x30
    5e22:	8f a7       	std	Y+47, r24	; 0x2f
    5e24:	3f c0       	rjmp	.+126    	; 0x5ea4 <H_CLCD_voidlatchByte+0x144>
	else if (__tmp > 65535)
    5e26:	69 a9       	ldd	r22, Y+49	; 0x31
    5e28:	7a a9       	ldd	r23, Y+50	; 0x32
    5e2a:	8b a9       	ldd	r24, Y+51	; 0x33
    5e2c:	9c a9       	ldd	r25, Y+52	; 0x34
    5e2e:	20 e0       	ldi	r18, 0x00	; 0
    5e30:	3f ef       	ldi	r19, 0xFF	; 255
    5e32:	4f e7       	ldi	r20, 0x7F	; 127
    5e34:	57 e4       	ldi	r21, 0x47	; 71
    5e36:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gtsf2>
    5e3a:	18 16       	cp	r1, r24
    5e3c:	4c f5       	brge	.+82     	; 0x5e90 <H_CLCD_voidlatchByte+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e3e:	6d a9       	ldd	r22, Y+53	; 0x35
    5e40:	7e a9       	ldd	r23, Y+54	; 0x36
    5e42:	8f a9       	ldd	r24, Y+55	; 0x37
    5e44:	98 ad       	ldd	r25, Y+56	; 0x38
    5e46:	20 e0       	ldi	r18, 0x00	; 0
    5e48:	30 e0       	ldi	r19, 0x00	; 0
    5e4a:	40 e2       	ldi	r20, 0x20	; 32
    5e4c:	51 e4       	ldi	r21, 0x41	; 65
    5e4e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5e52:	dc 01       	movw	r26, r24
    5e54:	cb 01       	movw	r24, r22
    5e56:	bc 01       	movw	r22, r24
    5e58:	cd 01       	movw	r24, r26
    5e5a:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5e5e:	dc 01       	movw	r26, r24
    5e60:	cb 01       	movw	r24, r22
    5e62:	98 ab       	std	Y+48, r25	; 0x30
    5e64:	8f a7       	std	Y+47, r24	; 0x2f
    5e66:	0f c0       	rjmp	.+30     	; 0x5e86 <H_CLCD_voidlatchByte+0x126>
    5e68:	80 e9       	ldi	r24, 0x90	; 144
    5e6a:	91 e0       	ldi	r25, 0x01	; 1
    5e6c:	9e a7       	std	Y+46, r25	; 0x2e
    5e6e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5e70:	8d a5       	ldd	r24, Y+45	; 0x2d
    5e72:	9e a5       	ldd	r25, Y+46	; 0x2e
    5e74:	01 97       	sbiw	r24, 0x01	; 1
    5e76:	f1 f7       	brne	.-4      	; 0x5e74 <H_CLCD_voidlatchByte+0x114>
    5e78:	9e a7       	std	Y+46, r25	; 0x2e
    5e7a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    5e7e:	98 a9       	ldd	r25, Y+48	; 0x30
    5e80:	01 97       	sbiw	r24, 0x01	; 1
    5e82:	98 ab       	std	Y+48, r25	; 0x30
    5e84:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e86:	8f a5       	ldd	r24, Y+47	; 0x2f
    5e88:	98 a9       	ldd	r25, Y+48	; 0x30
    5e8a:	00 97       	sbiw	r24, 0x00	; 0
    5e8c:	69 f7       	brne	.-38     	; 0x5e68 <H_CLCD_voidlatchByte+0x108>
    5e8e:	14 c0       	rjmp	.+40     	; 0x5eb8 <H_CLCD_voidlatchByte+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5e90:	69 a9       	ldd	r22, Y+49	; 0x31
    5e92:	7a a9       	ldd	r23, Y+50	; 0x32
    5e94:	8b a9       	ldd	r24, Y+51	; 0x33
    5e96:	9c a9       	ldd	r25, Y+52	; 0x34
    5e98:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5e9c:	dc 01       	movw	r26, r24
    5e9e:	cb 01       	movw	r24, r22
    5ea0:	98 ab       	std	Y+48, r25	; 0x30
    5ea2:	8f a7       	std	Y+47, r24	; 0x2f
    5ea4:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ea6:	98 a9       	ldd	r25, Y+48	; 0x30
    5ea8:	9c a7       	std	Y+44, r25	; 0x2c
    5eaa:	8b a7       	std	Y+43, r24	; 0x2b
    5eac:	8b a5       	ldd	r24, Y+43	; 0x2b
    5eae:	9c a5       	ldd	r25, Y+44	; 0x2c
    5eb0:	01 97       	sbiw	r24, 0x01	; 1
    5eb2:	f1 f7       	brne	.-4      	; 0x5eb0 <H_CLCD_voidlatchByte+0x150>
    5eb4:	9c a7       	std	Y+44, r25	; 0x2c
    5eb6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	M_DIO_voidSetPinValue(CLCD_E_PIN, DIO_LOW);
    5eb8:	8c e0       	ldi	r24, 0x0C	; 12
    5eba:	60 e0       	ldi	r22, 0x00	; 0
    5ebc:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>
    5ec0:	80 e0       	ldi	r24, 0x00	; 0
    5ec2:	90 e0       	ldi	r25, 0x00	; 0
    5ec4:	a0 e4       	ldi	r26, 0x40	; 64
    5ec6:	b0 e4       	ldi	r27, 0x40	; 64
    5ec8:	8f a3       	std	Y+39, r24	; 0x27
    5eca:	98 a7       	std	Y+40, r25	; 0x28
    5ecc:	a9 a7       	std	Y+41, r26	; 0x29
    5ece:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ed0:	6f a1       	ldd	r22, Y+39	; 0x27
    5ed2:	78 a5       	ldd	r23, Y+40	; 0x28
    5ed4:	89 a5       	ldd	r24, Y+41	; 0x29
    5ed6:	9a a5       	ldd	r25, Y+42	; 0x2a
    5ed8:	20 e0       	ldi	r18, 0x00	; 0
    5eda:	30 e0       	ldi	r19, 0x00	; 0
    5edc:	4a e7       	ldi	r20, 0x7A	; 122
    5ede:	55 e4       	ldi	r21, 0x45	; 69
    5ee0:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5ee4:	dc 01       	movw	r26, r24
    5ee6:	cb 01       	movw	r24, r22
    5ee8:	8b a3       	std	Y+35, r24	; 0x23
    5eea:	9c a3       	std	Y+36, r25	; 0x24
    5eec:	ad a3       	std	Y+37, r26	; 0x25
    5eee:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5ef0:	6b a1       	ldd	r22, Y+35	; 0x23
    5ef2:	7c a1       	ldd	r23, Y+36	; 0x24
    5ef4:	8d a1       	ldd	r24, Y+37	; 0x25
    5ef6:	9e a1       	ldd	r25, Y+38	; 0x26
    5ef8:	20 e0       	ldi	r18, 0x00	; 0
    5efa:	30 e0       	ldi	r19, 0x00	; 0
    5efc:	40 e8       	ldi	r20, 0x80	; 128
    5efe:	5f e3       	ldi	r21, 0x3F	; 63
    5f00:	0e 94 33 13 	call	0x2666	; 0x2666 <__ltsf2>
    5f04:	88 23       	and	r24, r24
    5f06:	2c f4       	brge	.+10     	; 0x5f12 <H_CLCD_voidlatchByte+0x1b2>
		__ticks = 1;
    5f08:	81 e0       	ldi	r24, 0x01	; 1
    5f0a:	90 e0       	ldi	r25, 0x00	; 0
    5f0c:	9a a3       	std	Y+34, r25	; 0x22
    5f0e:	89 a3       	std	Y+33, r24	; 0x21
    5f10:	3f c0       	rjmp	.+126    	; 0x5f90 <H_CLCD_voidlatchByte+0x230>
	else if (__tmp > 65535)
    5f12:	6b a1       	ldd	r22, Y+35	; 0x23
    5f14:	7c a1       	ldd	r23, Y+36	; 0x24
    5f16:	8d a1       	ldd	r24, Y+37	; 0x25
    5f18:	9e a1       	ldd	r25, Y+38	; 0x26
    5f1a:	20 e0       	ldi	r18, 0x00	; 0
    5f1c:	3f ef       	ldi	r19, 0xFF	; 255
    5f1e:	4f e7       	ldi	r20, 0x7F	; 127
    5f20:	57 e4       	ldi	r21, 0x47	; 71
    5f22:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gtsf2>
    5f26:	18 16       	cp	r1, r24
    5f28:	4c f5       	brge	.+82     	; 0x5f7c <H_CLCD_voidlatchByte+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f2a:	6f a1       	ldd	r22, Y+39	; 0x27
    5f2c:	78 a5       	ldd	r23, Y+40	; 0x28
    5f2e:	89 a5       	ldd	r24, Y+41	; 0x29
    5f30:	9a a5       	ldd	r25, Y+42	; 0x2a
    5f32:	20 e0       	ldi	r18, 0x00	; 0
    5f34:	30 e0       	ldi	r19, 0x00	; 0
    5f36:	40 e2       	ldi	r20, 0x20	; 32
    5f38:	51 e4       	ldi	r21, 0x41	; 65
    5f3a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    5f3e:	dc 01       	movw	r26, r24
    5f40:	cb 01       	movw	r24, r22
    5f42:	bc 01       	movw	r22, r24
    5f44:	cd 01       	movw	r24, r26
    5f46:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5f4a:	dc 01       	movw	r26, r24
    5f4c:	cb 01       	movw	r24, r22
    5f4e:	9a a3       	std	Y+34, r25	; 0x22
    5f50:	89 a3       	std	Y+33, r24	; 0x21
    5f52:	0f c0       	rjmp	.+30     	; 0x5f72 <H_CLCD_voidlatchByte+0x212>
    5f54:	80 e9       	ldi	r24, 0x90	; 144
    5f56:	91 e0       	ldi	r25, 0x01	; 1
    5f58:	98 a3       	std	Y+32, r25	; 0x20
    5f5a:	8f 8f       	std	Y+31, r24	; 0x1f
    5f5c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5f5e:	98 a1       	ldd	r25, Y+32	; 0x20
    5f60:	01 97       	sbiw	r24, 0x01	; 1
    5f62:	f1 f7       	brne	.-4      	; 0x5f60 <H_CLCD_voidlatchByte+0x200>
    5f64:	98 a3       	std	Y+32, r25	; 0x20
    5f66:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5f68:	89 a1       	ldd	r24, Y+33	; 0x21
    5f6a:	9a a1       	ldd	r25, Y+34	; 0x22
    5f6c:	01 97       	sbiw	r24, 0x01	; 1
    5f6e:	9a a3       	std	Y+34, r25	; 0x22
    5f70:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5f72:	89 a1       	ldd	r24, Y+33	; 0x21
    5f74:	9a a1       	ldd	r25, Y+34	; 0x22
    5f76:	00 97       	sbiw	r24, 0x00	; 0
    5f78:	69 f7       	brne	.-38     	; 0x5f54 <H_CLCD_voidlatchByte+0x1f4>
    5f7a:	14 c0       	rjmp	.+40     	; 0x5fa4 <H_CLCD_voidlatchByte+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5f7c:	6b a1       	ldd	r22, Y+35	; 0x23
    5f7e:	7c a1       	ldd	r23, Y+36	; 0x24
    5f80:	8d a1       	ldd	r24, Y+37	; 0x25
    5f82:	9e a1       	ldd	r25, Y+38	; 0x26
    5f84:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    5f88:	dc 01       	movw	r26, r24
    5f8a:	cb 01       	movw	r24, r22
    5f8c:	9a a3       	std	Y+34, r25	; 0x22
    5f8e:	89 a3       	std	Y+33, r24	; 0x21
    5f90:	89 a1       	ldd	r24, Y+33	; 0x21
    5f92:	9a a1       	ldd	r25, Y+34	; 0x22
    5f94:	9e 8f       	std	Y+30, r25	; 0x1e
    5f96:	8d 8f       	std	Y+29, r24	; 0x1d
    5f98:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5f9a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5f9c:	01 97       	sbiw	r24, 0x01	; 1
    5f9e:	f1 f7       	brne	.-4      	; 0x5f9c <H_CLCD_voidlatchByte+0x23c>
    5fa0:	9e 8f       	std	Y+30, r25	; 0x1e
    5fa2:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(3);

	M_DIO_voidSetPinValue(CLCD_D4_PIN, GET_BIT(copy_u8Byte,0));
    5fa4:	89 ad       	ldd	r24, Y+57	; 0x39
    5fa6:	98 2f       	mov	r25, r24
    5fa8:	91 70       	andi	r25, 0x01	; 1
    5faa:	84 e1       	ldi	r24, 0x14	; 20
    5fac:	69 2f       	mov	r22, r25
    5fae:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(CLCD_D5_PIN, GET_BIT(copy_u8Byte,1));
    5fb2:	89 ad       	ldd	r24, Y+57	; 0x39
    5fb4:	86 95       	lsr	r24
    5fb6:	98 2f       	mov	r25, r24
    5fb8:	91 70       	andi	r25, 0x01	; 1
    5fba:	85 e1       	ldi	r24, 0x15	; 21
    5fbc:	69 2f       	mov	r22, r25
    5fbe:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(CLCD_D6_PIN, GET_BIT(copy_u8Byte,2));
    5fc2:	89 ad       	ldd	r24, Y+57	; 0x39
    5fc4:	86 95       	lsr	r24
    5fc6:	86 95       	lsr	r24
    5fc8:	98 2f       	mov	r25, r24
    5fca:	91 70       	andi	r25, 0x01	; 1
    5fcc:	86 e1       	ldi	r24, 0x16	; 22
    5fce:	69 2f       	mov	r22, r25
    5fd0:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(CLCD_D7_PIN, GET_BIT(copy_u8Byte,3));
    5fd4:	89 ad       	ldd	r24, Y+57	; 0x39
    5fd6:	86 95       	lsr	r24
    5fd8:	86 95       	lsr	r24
    5fda:	86 95       	lsr	r24
    5fdc:	98 2f       	mov	r25, r24
    5fde:	91 70       	andi	r25, 0x01	; 1
    5fe0:	88 e1       	ldi	r24, 0x18	; 24
    5fe2:	69 2f       	mov	r22, r25
    5fe4:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>

	M_DIO_voidSetPinValue(CLCD_E_PIN, DIO_HIGH);
    5fe8:	8c e0       	ldi	r24, 0x0C	; 12
    5fea:	61 e0       	ldi	r22, 0x01	; 1
    5fec:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>
    5ff0:	80 e0       	ldi	r24, 0x00	; 0
    5ff2:	90 e0       	ldi	r25, 0x00	; 0
    5ff4:	a0 e8       	ldi	r26, 0x80	; 128
    5ff6:	bf e3       	ldi	r27, 0x3F	; 63
    5ff8:	89 8f       	std	Y+25, r24	; 0x19
    5ffa:	9a 8f       	std	Y+26, r25	; 0x1a
    5ffc:	ab 8f       	std	Y+27, r26	; 0x1b
    5ffe:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6000:	69 8d       	ldd	r22, Y+25	; 0x19
    6002:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6004:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6006:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6008:	20 e0       	ldi	r18, 0x00	; 0
    600a:	30 e0       	ldi	r19, 0x00	; 0
    600c:	4a e7       	ldi	r20, 0x7A	; 122
    600e:	55 e4       	ldi	r21, 0x45	; 69
    6010:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    6014:	dc 01       	movw	r26, r24
    6016:	cb 01       	movw	r24, r22
    6018:	8d 8b       	std	Y+21, r24	; 0x15
    601a:	9e 8b       	std	Y+22, r25	; 0x16
    601c:	af 8b       	std	Y+23, r26	; 0x17
    601e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6020:	6d 89       	ldd	r22, Y+21	; 0x15
    6022:	7e 89       	ldd	r23, Y+22	; 0x16
    6024:	8f 89       	ldd	r24, Y+23	; 0x17
    6026:	98 8d       	ldd	r25, Y+24	; 0x18
    6028:	20 e0       	ldi	r18, 0x00	; 0
    602a:	30 e0       	ldi	r19, 0x00	; 0
    602c:	40 e8       	ldi	r20, 0x80	; 128
    602e:	5f e3       	ldi	r21, 0x3F	; 63
    6030:	0e 94 33 13 	call	0x2666	; 0x2666 <__ltsf2>
    6034:	88 23       	and	r24, r24
    6036:	2c f4       	brge	.+10     	; 0x6042 <H_CLCD_voidlatchByte+0x2e2>
		__ticks = 1;
    6038:	81 e0       	ldi	r24, 0x01	; 1
    603a:	90 e0       	ldi	r25, 0x00	; 0
    603c:	9c 8b       	std	Y+20, r25	; 0x14
    603e:	8b 8b       	std	Y+19, r24	; 0x13
    6040:	3f c0       	rjmp	.+126    	; 0x60c0 <H_CLCD_voidlatchByte+0x360>
	else if (__tmp > 65535)
    6042:	6d 89       	ldd	r22, Y+21	; 0x15
    6044:	7e 89       	ldd	r23, Y+22	; 0x16
    6046:	8f 89       	ldd	r24, Y+23	; 0x17
    6048:	98 8d       	ldd	r25, Y+24	; 0x18
    604a:	20 e0       	ldi	r18, 0x00	; 0
    604c:	3f ef       	ldi	r19, 0xFF	; 255
    604e:	4f e7       	ldi	r20, 0x7F	; 127
    6050:	57 e4       	ldi	r21, 0x47	; 71
    6052:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gtsf2>
    6056:	18 16       	cp	r1, r24
    6058:	4c f5       	brge	.+82     	; 0x60ac <H_CLCD_voidlatchByte+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    605a:	69 8d       	ldd	r22, Y+25	; 0x19
    605c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    605e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6060:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6062:	20 e0       	ldi	r18, 0x00	; 0
    6064:	30 e0       	ldi	r19, 0x00	; 0
    6066:	40 e2       	ldi	r20, 0x20	; 32
    6068:	51 e4       	ldi	r21, 0x41	; 65
    606a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    606e:	dc 01       	movw	r26, r24
    6070:	cb 01       	movw	r24, r22
    6072:	bc 01       	movw	r22, r24
    6074:	cd 01       	movw	r24, r26
    6076:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    607a:	dc 01       	movw	r26, r24
    607c:	cb 01       	movw	r24, r22
    607e:	9c 8b       	std	Y+20, r25	; 0x14
    6080:	8b 8b       	std	Y+19, r24	; 0x13
    6082:	0f c0       	rjmp	.+30     	; 0x60a2 <H_CLCD_voidlatchByte+0x342>
    6084:	80 e9       	ldi	r24, 0x90	; 144
    6086:	91 e0       	ldi	r25, 0x01	; 1
    6088:	9a 8b       	std	Y+18, r25	; 0x12
    608a:	89 8b       	std	Y+17, r24	; 0x11
    608c:	89 89       	ldd	r24, Y+17	; 0x11
    608e:	9a 89       	ldd	r25, Y+18	; 0x12
    6090:	01 97       	sbiw	r24, 0x01	; 1
    6092:	f1 f7       	brne	.-4      	; 0x6090 <H_CLCD_voidlatchByte+0x330>
    6094:	9a 8b       	std	Y+18, r25	; 0x12
    6096:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6098:	8b 89       	ldd	r24, Y+19	; 0x13
    609a:	9c 89       	ldd	r25, Y+20	; 0x14
    609c:	01 97       	sbiw	r24, 0x01	; 1
    609e:	9c 8b       	std	Y+20, r25	; 0x14
    60a0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60a2:	8b 89       	ldd	r24, Y+19	; 0x13
    60a4:	9c 89       	ldd	r25, Y+20	; 0x14
    60a6:	00 97       	sbiw	r24, 0x00	; 0
    60a8:	69 f7       	brne	.-38     	; 0x6084 <H_CLCD_voidlatchByte+0x324>
    60aa:	14 c0       	rjmp	.+40     	; 0x60d4 <H_CLCD_voidlatchByte+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60ac:	6d 89       	ldd	r22, Y+21	; 0x15
    60ae:	7e 89       	ldd	r23, Y+22	; 0x16
    60b0:	8f 89       	ldd	r24, Y+23	; 0x17
    60b2:	98 8d       	ldd	r25, Y+24	; 0x18
    60b4:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    60b8:	dc 01       	movw	r26, r24
    60ba:	cb 01       	movw	r24, r22
    60bc:	9c 8b       	std	Y+20, r25	; 0x14
    60be:	8b 8b       	std	Y+19, r24	; 0x13
    60c0:	8b 89       	ldd	r24, Y+19	; 0x13
    60c2:	9c 89       	ldd	r25, Y+20	; 0x14
    60c4:	98 8b       	std	Y+16, r25	; 0x10
    60c6:	8f 87       	std	Y+15, r24	; 0x0f
    60c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    60ca:	98 89       	ldd	r25, Y+16	; 0x10
    60cc:	01 97       	sbiw	r24, 0x01	; 1
    60ce:	f1 f7       	brne	.-4      	; 0x60cc <H_CLCD_voidlatchByte+0x36c>
    60d0:	98 8b       	std	Y+16, r25	; 0x10
    60d2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	M_DIO_voidSetPinValue(CLCD_E_PIN, DIO_LOW);
    60d4:	8c e0       	ldi	r24, 0x0C	; 12
    60d6:	60 e0       	ldi	r22, 0x00	; 0
    60d8:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>
    60dc:	80 e0       	ldi	r24, 0x00	; 0
    60de:	90 e0       	ldi	r25, 0x00	; 0
    60e0:	a0 e4       	ldi	r26, 0x40	; 64
    60e2:	b0 e4       	ldi	r27, 0x40	; 64
    60e4:	8b 87       	std	Y+11, r24	; 0x0b
    60e6:	9c 87       	std	Y+12, r25	; 0x0c
    60e8:	ad 87       	std	Y+13, r26	; 0x0d
    60ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    60ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    60f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    60f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    60f4:	20 e0       	ldi	r18, 0x00	; 0
    60f6:	30 e0       	ldi	r19, 0x00	; 0
    60f8:	4a e7       	ldi	r20, 0x7A	; 122
    60fa:	55 e4       	ldi	r21, 0x45	; 69
    60fc:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    6100:	dc 01       	movw	r26, r24
    6102:	cb 01       	movw	r24, r22
    6104:	8f 83       	std	Y+7, r24	; 0x07
    6106:	98 87       	std	Y+8, r25	; 0x08
    6108:	a9 87       	std	Y+9, r26	; 0x09
    610a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    610c:	6f 81       	ldd	r22, Y+7	; 0x07
    610e:	78 85       	ldd	r23, Y+8	; 0x08
    6110:	89 85       	ldd	r24, Y+9	; 0x09
    6112:	9a 85       	ldd	r25, Y+10	; 0x0a
    6114:	20 e0       	ldi	r18, 0x00	; 0
    6116:	30 e0       	ldi	r19, 0x00	; 0
    6118:	40 e8       	ldi	r20, 0x80	; 128
    611a:	5f e3       	ldi	r21, 0x3F	; 63
    611c:	0e 94 33 13 	call	0x2666	; 0x2666 <__ltsf2>
    6120:	88 23       	and	r24, r24
    6122:	2c f4       	brge	.+10     	; 0x612e <H_CLCD_voidlatchByte+0x3ce>
		__ticks = 1;
    6124:	81 e0       	ldi	r24, 0x01	; 1
    6126:	90 e0       	ldi	r25, 0x00	; 0
    6128:	9e 83       	std	Y+6, r25	; 0x06
    612a:	8d 83       	std	Y+5, r24	; 0x05
    612c:	3f c0       	rjmp	.+126    	; 0x61ac <H_CLCD_voidlatchByte+0x44c>
	else if (__tmp > 65535)
    612e:	6f 81       	ldd	r22, Y+7	; 0x07
    6130:	78 85       	ldd	r23, Y+8	; 0x08
    6132:	89 85       	ldd	r24, Y+9	; 0x09
    6134:	9a 85       	ldd	r25, Y+10	; 0x0a
    6136:	20 e0       	ldi	r18, 0x00	; 0
    6138:	3f ef       	ldi	r19, 0xFF	; 255
    613a:	4f e7       	ldi	r20, 0x7F	; 127
    613c:	57 e4       	ldi	r21, 0x47	; 71
    613e:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gtsf2>
    6142:	18 16       	cp	r1, r24
    6144:	4c f5       	brge	.+82     	; 0x6198 <H_CLCD_voidlatchByte+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6146:	6b 85       	ldd	r22, Y+11	; 0x0b
    6148:	7c 85       	ldd	r23, Y+12	; 0x0c
    614a:	8d 85       	ldd	r24, Y+13	; 0x0d
    614c:	9e 85       	ldd	r25, Y+14	; 0x0e
    614e:	20 e0       	ldi	r18, 0x00	; 0
    6150:	30 e0       	ldi	r19, 0x00	; 0
    6152:	40 e2       	ldi	r20, 0x20	; 32
    6154:	51 e4       	ldi	r21, 0x41	; 65
    6156:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    615a:	dc 01       	movw	r26, r24
    615c:	cb 01       	movw	r24, r22
    615e:	bc 01       	movw	r22, r24
    6160:	cd 01       	movw	r24, r26
    6162:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    6166:	dc 01       	movw	r26, r24
    6168:	cb 01       	movw	r24, r22
    616a:	9e 83       	std	Y+6, r25	; 0x06
    616c:	8d 83       	std	Y+5, r24	; 0x05
    616e:	0f c0       	rjmp	.+30     	; 0x618e <H_CLCD_voidlatchByte+0x42e>
    6170:	80 e9       	ldi	r24, 0x90	; 144
    6172:	91 e0       	ldi	r25, 0x01	; 1
    6174:	9c 83       	std	Y+4, r25	; 0x04
    6176:	8b 83       	std	Y+3, r24	; 0x03
    6178:	8b 81       	ldd	r24, Y+3	; 0x03
    617a:	9c 81       	ldd	r25, Y+4	; 0x04
    617c:	01 97       	sbiw	r24, 0x01	; 1
    617e:	f1 f7       	brne	.-4      	; 0x617c <H_CLCD_voidlatchByte+0x41c>
    6180:	9c 83       	std	Y+4, r25	; 0x04
    6182:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6184:	8d 81       	ldd	r24, Y+5	; 0x05
    6186:	9e 81       	ldd	r25, Y+6	; 0x06
    6188:	01 97       	sbiw	r24, 0x01	; 1
    618a:	9e 83       	std	Y+6, r25	; 0x06
    618c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    618e:	8d 81       	ldd	r24, Y+5	; 0x05
    6190:	9e 81       	ldd	r25, Y+6	; 0x06
    6192:	00 97       	sbiw	r24, 0x00	; 0
    6194:	69 f7       	brne	.-38     	; 0x6170 <H_CLCD_voidlatchByte+0x410>
    6196:	14 c0       	rjmp	.+40     	; 0x61c0 <H_CLCD_voidlatchByte+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6198:	6f 81       	ldd	r22, Y+7	; 0x07
    619a:	78 85       	ldd	r23, Y+8	; 0x08
    619c:	89 85       	ldd	r24, Y+9	; 0x09
    619e:	9a 85       	ldd	r25, Y+10	; 0x0a
    61a0:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    61a4:	dc 01       	movw	r26, r24
    61a6:	cb 01       	movw	r24, r22
    61a8:	9e 83       	std	Y+6, r25	; 0x06
    61aa:	8d 83       	std	Y+5, r24	; 0x05
    61ac:	8d 81       	ldd	r24, Y+5	; 0x05
    61ae:	9e 81       	ldd	r25, Y+6	; 0x06
    61b0:	9a 83       	std	Y+2, r25	; 0x02
    61b2:	89 83       	std	Y+1, r24	; 0x01
    61b4:	89 81       	ldd	r24, Y+1	; 0x01
    61b6:	9a 81       	ldd	r25, Y+2	; 0x02
    61b8:	01 97       	sbiw	r24, 0x01	; 1
    61ba:	f1 f7       	brne	.-4      	; 0x61b8 <H_CLCD_voidlatchByte+0x458>
    61bc:	9a 83       	std	Y+2, r25	; 0x02
    61be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(3);

#else
#error "Wrong mode configuration"
#endif
}
    61c0:	e9 96       	adiw	r28, 0x39	; 57
    61c2:	0f b6       	in	r0, 0x3f	; 63
    61c4:	f8 94       	cli
    61c6:	de bf       	out	0x3e, r29	; 62
    61c8:	0f be       	out	0x3f, r0	; 63
    61ca:	cd bf       	out	0x3d, r28	; 61
    61cc:	cf 91       	pop	r28
    61ce:	df 91       	pop	r29
    61d0:	08 95       	ret

000061d2 <H_CLCD_voidInit>:


void H_CLCD_voidInit(void)
{
    61d2:	0f 93       	push	r16
    61d4:	1f 93       	push	r17
    61d6:	df 93       	push	r29
    61d8:	cf 93       	push	r28
    61da:	cd b7       	in	r28, 0x3d	; 61
    61dc:	de b7       	in	r29, 0x3e	; 62
    61de:	c2 56       	subi	r28, 0x62	; 98
    61e0:	d0 40       	sbci	r29, 0x00	; 0
    61e2:	0f b6       	in	r0, 0x3f	; 63
    61e4:	f8 94       	cli
    61e6:	de bf       	out	0x3e, r29	; 62
    61e8:	0f be       	out	0x3f, r0	; 63
    61ea:	cd bf       	out	0x3d, r28	; 61
#if CLCD_MODE == _8_BIT_MODE


#elif CLCD_MODE == _4_BIT_MODE

	M_DIO_voidSetPinValue(CLCD_E_PIN, DIO_LOW); // set EN to LOW
    61ec:	8c e0       	ldi	r24, 0x0C	; 12
    61ee:	60 e0       	ldi	r22, 0x00	; 0
    61f0:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(CLCD_RS_PIN, DIO_LOW); // set RS to LOW for command mode
    61f4:	8d e0       	ldi	r24, 0x0D	; 13
    61f6:	60 e0       	ldi	r22, 0x00	; 0
    61f8:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>
    61fc:	fe 01       	movw	r30, r28
    61fe:	e1 5a       	subi	r30, 0xA1	; 161
    6200:	ff 4f       	sbci	r31, 0xFF	; 255
    6202:	80 e0       	ldi	r24, 0x00	; 0
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	ac e0       	ldi	r26, 0x0C	; 12
    6208:	b2 e4       	ldi	r27, 0x42	; 66
    620a:	80 83       	st	Z, r24
    620c:	91 83       	std	Z+1, r25	; 0x01
    620e:	a2 83       	std	Z+2, r26	; 0x02
    6210:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6212:	8e 01       	movw	r16, r28
    6214:	05 5a       	subi	r16, 0xA5	; 165
    6216:	1f 4f       	sbci	r17, 0xFF	; 255
    6218:	fe 01       	movw	r30, r28
    621a:	e1 5a       	subi	r30, 0xA1	; 161
    621c:	ff 4f       	sbci	r31, 0xFF	; 255
    621e:	60 81       	ld	r22, Z
    6220:	71 81       	ldd	r23, Z+1	; 0x01
    6222:	82 81       	ldd	r24, Z+2	; 0x02
    6224:	93 81       	ldd	r25, Z+3	; 0x03
    6226:	20 e0       	ldi	r18, 0x00	; 0
    6228:	30 e0       	ldi	r19, 0x00	; 0
    622a:	4a e7       	ldi	r20, 0x7A	; 122
    622c:	55 e4       	ldi	r21, 0x45	; 69
    622e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    6232:	dc 01       	movw	r26, r24
    6234:	cb 01       	movw	r24, r22
    6236:	f8 01       	movw	r30, r16
    6238:	80 83       	st	Z, r24
    623a:	91 83       	std	Z+1, r25	; 0x01
    623c:	a2 83       	std	Z+2, r26	; 0x02
    623e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6240:	fe 01       	movw	r30, r28
    6242:	e5 5a       	subi	r30, 0xA5	; 165
    6244:	ff 4f       	sbci	r31, 0xFF	; 255
    6246:	60 81       	ld	r22, Z
    6248:	71 81       	ldd	r23, Z+1	; 0x01
    624a:	82 81       	ldd	r24, Z+2	; 0x02
    624c:	93 81       	ldd	r25, Z+3	; 0x03
    624e:	20 e0       	ldi	r18, 0x00	; 0
    6250:	30 e0       	ldi	r19, 0x00	; 0
    6252:	40 e8       	ldi	r20, 0x80	; 128
    6254:	5f e3       	ldi	r21, 0x3F	; 63
    6256:	0e 94 33 13 	call	0x2666	; 0x2666 <__ltsf2>
    625a:	88 23       	and	r24, r24
    625c:	44 f4       	brge	.+16     	; 0x626e <H_CLCD_voidInit+0x9c>
		__ticks = 1;
    625e:	fe 01       	movw	r30, r28
    6260:	e7 5a       	subi	r30, 0xA7	; 167
    6262:	ff 4f       	sbci	r31, 0xFF	; 255
    6264:	81 e0       	ldi	r24, 0x01	; 1
    6266:	90 e0       	ldi	r25, 0x00	; 0
    6268:	91 83       	std	Z+1, r25	; 0x01
    626a:	80 83       	st	Z, r24
    626c:	64 c0       	rjmp	.+200    	; 0x6336 <H_CLCD_voidInit+0x164>
	else if (__tmp > 65535)
    626e:	fe 01       	movw	r30, r28
    6270:	e5 5a       	subi	r30, 0xA5	; 165
    6272:	ff 4f       	sbci	r31, 0xFF	; 255
    6274:	60 81       	ld	r22, Z
    6276:	71 81       	ldd	r23, Z+1	; 0x01
    6278:	82 81       	ldd	r24, Z+2	; 0x02
    627a:	93 81       	ldd	r25, Z+3	; 0x03
    627c:	20 e0       	ldi	r18, 0x00	; 0
    627e:	3f ef       	ldi	r19, 0xFF	; 255
    6280:	4f e7       	ldi	r20, 0x7F	; 127
    6282:	57 e4       	ldi	r21, 0x47	; 71
    6284:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gtsf2>
    6288:	18 16       	cp	r1, r24
    628a:	0c f0       	brlt	.+2      	; 0x628e <H_CLCD_voidInit+0xbc>
    628c:	43 c0       	rjmp	.+134    	; 0x6314 <H_CLCD_voidInit+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    628e:	fe 01       	movw	r30, r28
    6290:	e1 5a       	subi	r30, 0xA1	; 161
    6292:	ff 4f       	sbci	r31, 0xFF	; 255
    6294:	60 81       	ld	r22, Z
    6296:	71 81       	ldd	r23, Z+1	; 0x01
    6298:	82 81       	ldd	r24, Z+2	; 0x02
    629a:	93 81       	ldd	r25, Z+3	; 0x03
    629c:	20 e0       	ldi	r18, 0x00	; 0
    629e:	30 e0       	ldi	r19, 0x00	; 0
    62a0:	40 e2       	ldi	r20, 0x20	; 32
    62a2:	51 e4       	ldi	r21, 0x41	; 65
    62a4:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    62a8:	dc 01       	movw	r26, r24
    62aa:	cb 01       	movw	r24, r22
    62ac:	8e 01       	movw	r16, r28
    62ae:	07 5a       	subi	r16, 0xA7	; 167
    62b0:	1f 4f       	sbci	r17, 0xFF	; 255
    62b2:	bc 01       	movw	r22, r24
    62b4:	cd 01       	movw	r24, r26
    62b6:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    62ba:	dc 01       	movw	r26, r24
    62bc:	cb 01       	movw	r24, r22
    62be:	f8 01       	movw	r30, r16
    62c0:	91 83       	std	Z+1, r25	; 0x01
    62c2:	80 83       	st	Z, r24
    62c4:	1f c0       	rjmp	.+62     	; 0x6304 <H_CLCD_voidInit+0x132>
    62c6:	fe 01       	movw	r30, r28
    62c8:	e9 5a       	subi	r30, 0xA9	; 169
    62ca:	ff 4f       	sbci	r31, 0xFF	; 255
    62cc:	80 e9       	ldi	r24, 0x90	; 144
    62ce:	91 e0       	ldi	r25, 0x01	; 1
    62d0:	91 83       	std	Z+1, r25	; 0x01
    62d2:	80 83       	st	Z, r24
    62d4:	fe 01       	movw	r30, r28
    62d6:	e9 5a       	subi	r30, 0xA9	; 169
    62d8:	ff 4f       	sbci	r31, 0xFF	; 255
    62da:	80 81       	ld	r24, Z
    62dc:	91 81       	ldd	r25, Z+1	; 0x01
    62de:	01 97       	sbiw	r24, 0x01	; 1
    62e0:	f1 f7       	brne	.-4      	; 0x62de <H_CLCD_voidInit+0x10c>
    62e2:	fe 01       	movw	r30, r28
    62e4:	e9 5a       	subi	r30, 0xA9	; 169
    62e6:	ff 4f       	sbci	r31, 0xFF	; 255
    62e8:	91 83       	std	Z+1, r25	; 0x01
    62ea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62ec:	de 01       	movw	r26, r28
    62ee:	a7 5a       	subi	r26, 0xA7	; 167
    62f0:	bf 4f       	sbci	r27, 0xFF	; 255
    62f2:	fe 01       	movw	r30, r28
    62f4:	e7 5a       	subi	r30, 0xA7	; 167
    62f6:	ff 4f       	sbci	r31, 0xFF	; 255
    62f8:	80 81       	ld	r24, Z
    62fa:	91 81       	ldd	r25, Z+1	; 0x01
    62fc:	01 97       	sbiw	r24, 0x01	; 1
    62fe:	11 96       	adiw	r26, 0x01	; 1
    6300:	9c 93       	st	X, r25
    6302:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6304:	fe 01       	movw	r30, r28
    6306:	e7 5a       	subi	r30, 0xA7	; 167
    6308:	ff 4f       	sbci	r31, 0xFF	; 255
    630a:	80 81       	ld	r24, Z
    630c:	91 81       	ldd	r25, Z+1	; 0x01
    630e:	00 97       	sbiw	r24, 0x00	; 0
    6310:	d1 f6       	brne	.-76     	; 0x62c6 <H_CLCD_voidInit+0xf4>
    6312:	27 c0       	rjmp	.+78     	; 0x6362 <H_CLCD_voidInit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6314:	8e 01       	movw	r16, r28
    6316:	07 5a       	subi	r16, 0xA7	; 167
    6318:	1f 4f       	sbci	r17, 0xFF	; 255
    631a:	fe 01       	movw	r30, r28
    631c:	e5 5a       	subi	r30, 0xA5	; 165
    631e:	ff 4f       	sbci	r31, 0xFF	; 255
    6320:	60 81       	ld	r22, Z
    6322:	71 81       	ldd	r23, Z+1	; 0x01
    6324:	82 81       	ldd	r24, Z+2	; 0x02
    6326:	93 81       	ldd	r25, Z+3	; 0x03
    6328:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    632c:	dc 01       	movw	r26, r24
    632e:	cb 01       	movw	r24, r22
    6330:	f8 01       	movw	r30, r16
    6332:	91 83       	std	Z+1, r25	; 0x01
    6334:	80 83       	st	Z, r24
    6336:	de 01       	movw	r26, r28
    6338:	ab 5a       	subi	r26, 0xAB	; 171
    633a:	bf 4f       	sbci	r27, 0xFF	; 255
    633c:	fe 01       	movw	r30, r28
    633e:	e7 5a       	subi	r30, 0xA7	; 167
    6340:	ff 4f       	sbci	r31, 0xFF	; 255
    6342:	80 81       	ld	r24, Z
    6344:	91 81       	ldd	r25, Z+1	; 0x01
    6346:	8d 93       	st	X+, r24
    6348:	9c 93       	st	X, r25
    634a:	fe 01       	movw	r30, r28
    634c:	eb 5a       	subi	r30, 0xAB	; 171
    634e:	ff 4f       	sbci	r31, 0xFF	; 255
    6350:	80 81       	ld	r24, Z
    6352:	91 81       	ldd	r25, Z+1	; 0x01
    6354:	01 97       	sbiw	r24, 0x01	; 1
    6356:	f1 f7       	brne	.-4      	; 0x6354 <H_CLCD_voidInit+0x182>
    6358:	fe 01       	movw	r30, r28
    635a:	eb 5a       	subi	r30, 0xAB	; 171
    635c:	ff 4f       	sbci	r31, 0xFF	; 255
    635e:	91 83       	std	Z+1, r25	; 0x01
    6360:	80 83       	st	Z, r24
    6362:	fe 01       	movw	r30, r28
    6364:	ef 5a       	subi	r30, 0xAF	; 175
    6366:	ff 4f       	sbci	r31, 0xFF	; 255
    6368:	80 e0       	ldi	r24, 0x00	; 0
    636a:	90 e0       	ldi	r25, 0x00	; 0
    636c:	a0 e2       	ldi	r26, 0x20	; 32
    636e:	b2 e4       	ldi	r27, 0x42	; 66
    6370:	80 83       	st	Z, r24
    6372:	91 83       	std	Z+1, r25	; 0x01
    6374:	a2 83       	std	Z+2, r26	; 0x02
    6376:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6378:	8e 01       	movw	r16, r28
    637a:	03 5b       	subi	r16, 0xB3	; 179
    637c:	1f 4f       	sbci	r17, 0xFF	; 255
    637e:	fe 01       	movw	r30, r28
    6380:	ef 5a       	subi	r30, 0xAF	; 175
    6382:	ff 4f       	sbci	r31, 0xFF	; 255
    6384:	60 81       	ld	r22, Z
    6386:	71 81       	ldd	r23, Z+1	; 0x01
    6388:	82 81       	ldd	r24, Z+2	; 0x02
    638a:	93 81       	ldd	r25, Z+3	; 0x03
    638c:	20 e0       	ldi	r18, 0x00	; 0
    638e:	30 e0       	ldi	r19, 0x00	; 0
    6390:	4a e7       	ldi	r20, 0x7A	; 122
    6392:	55 e4       	ldi	r21, 0x45	; 69
    6394:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    6398:	dc 01       	movw	r26, r24
    639a:	cb 01       	movw	r24, r22
    639c:	f8 01       	movw	r30, r16
    639e:	80 83       	st	Z, r24
    63a0:	91 83       	std	Z+1, r25	; 0x01
    63a2:	a2 83       	std	Z+2, r26	; 0x02
    63a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    63a6:	fe 01       	movw	r30, r28
    63a8:	e3 5b       	subi	r30, 0xB3	; 179
    63aa:	ff 4f       	sbci	r31, 0xFF	; 255
    63ac:	60 81       	ld	r22, Z
    63ae:	71 81       	ldd	r23, Z+1	; 0x01
    63b0:	82 81       	ldd	r24, Z+2	; 0x02
    63b2:	93 81       	ldd	r25, Z+3	; 0x03
    63b4:	20 e0       	ldi	r18, 0x00	; 0
    63b6:	30 e0       	ldi	r19, 0x00	; 0
    63b8:	40 e8       	ldi	r20, 0x80	; 128
    63ba:	5f e3       	ldi	r21, 0x3F	; 63
    63bc:	0e 94 33 13 	call	0x2666	; 0x2666 <__ltsf2>
    63c0:	88 23       	and	r24, r24
    63c2:	44 f4       	brge	.+16     	; 0x63d4 <H_CLCD_voidInit+0x202>
		__ticks = 1;
    63c4:	fe 01       	movw	r30, r28
    63c6:	e5 5b       	subi	r30, 0xB5	; 181
    63c8:	ff 4f       	sbci	r31, 0xFF	; 255
    63ca:	81 e0       	ldi	r24, 0x01	; 1
    63cc:	90 e0       	ldi	r25, 0x00	; 0
    63ce:	91 83       	std	Z+1, r25	; 0x01
    63d0:	80 83       	st	Z, r24
    63d2:	64 c0       	rjmp	.+200    	; 0x649c <H_CLCD_voidInit+0x2ca>
	else if (__tmp > 65535)
    63d4:	fe 01       	movw	r30, r28
    63d6:	e3 5b       	subi	r30, 0xB3	; 179
    63d8:	ff 4f       	sbci	r31, 0xFF	; 255
    63da:	60 81       	ld	r22, Z
    63dc:	71 81       	ldd	r23, Z+1	; 0x01
    63de:	82 81       	ldd	r24, Z+2	; 0x02
    63e0:	93 81       	ldd	r25, Z+3	; 0x03
    63e2:	20 e0       	ldi	r18, 0x00	; 0
    63e4:	3f ef       	ldi	r19, 0xFF	; 255
    63e6:	4f e7       	ldi	r20, 0x7F	; 127
    63e8:	57 e4       	ldi	r21, 0x47	; 71
    63ea:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gtsf2>
    63ee:	18 16       	cp	r1, r24
    63f0:	0c f0       	brlt	.+2      	; 0x63f4 <H_CLCD_voidInit+0x222>
    63f2:	43 c0       	rjmp	.+134    	; 0x647a <H_CLCD_voidInit+0x2a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    63f4:	fe 01       	movw	r30, r28
    63f6:	ef 5a       	subi	r30, 0xAF	; 175
    63f8:	ff 4f       	sbci	r31, 0xFF	; 255
    63fa:	60 81       	ld	r22, Z
    63fc:	71 81       	ldd	r23, Z+1	; 0x01
    63fe:	82 81       	ldd	r24, Z+2	; 0x02
    6400:	93 81       	ldd	r25, Z+3	; 0x03
    6402:	20 e0       	ldi	r18, 0x00	; 0
    6404:	30 e0       	ldi	r19, 0x00	; 0
    6406:	40 e2       	ldi	r20, 0x20	; 32
    6408:	51 e4       	ldi	r21, 0x41	; 65
    640a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    640e:	dc 01       	movw	r26, r24
    6410:	cb 01       	movw	r24, r22
    6412:	8e 01       	movw	r16, r28
    6414:	05 5b       	subi	r16, 0xB5	; 181
    6416:	1f 4f       	sbci	r17, 0xFF	; 255
    6418:	bc 01       	movw	r22, r24
    641a:	cd 01       	movw	r24, r26
    641c:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    6420:	dc 01       	movw	r26, r24
    6422:	cb 01       	movw	r24, r22
    6424:	f8 01       	movw	r30, r16
    6426:	91 83       	std	Z+1, r25	; 0x01
    6428:	80 83       	st	Z, r24
    642a:	1f c0       	rjmp	.+62     	; 0x646a <H_CLCD_voidInit+0x298>
    642c:	fe 01       	movw	r30, r28
    642e:	e7 5b       	subi	r30, 0xB7	; 183
    6430:	ff 4f       	sbci	r31, 0xFF	; 255
    6432:	80 e9       	ldi	r24, 0x90	; 144
    6434:	91 e0       	ldi	r25, 0x01	; 1
    6436:	91 83       	std	Z+1, r25	; 0x01
    6438:	80 83       	st	Z, r24
    643a:	fe 01       	movw	r30, r28
    643c:	e7 5b       	subi	r30, 0xB7	; 183
    643e:	ff 4f       	sbci	r31, 0xFF	; 255
    6440:	80 81       	ld	r24, Z
    6442:	91 81       	ldd	r25, Z+1	; 0x01
    6444:	01 97       	sbiw	r24, 0x01	; 1
    6446:	f1 f7       	brne	.-4      	; 0x6444 <H_CLCD_voidInit+0x272>
    6448:	fe 01       	movw	r30, r28
    644a:	e7 5b       	subi	r30, 0xB7	; 183
    644c:	ff 4f       	sbci	r31, 0xFF	; 255
    644e:	91 83       	std	Z+1, r25	; 0x01
    6450:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6452:	de 01       	movw	r26, r28
    6454:	a5 5b       	subi	r26, 0xB5	; 181
    6456:	bf 4f       	sbci	r27, 0xFF	; 255
    6458:	fe 01       	movw	r30, r28
    645a:	e5 5b       	subi	r30, 0xB5	; 181
    645c:	ff 4f       	sbci	r31, 0xFF	; 255
    645e:	80 81       	ld	r24, Z
    6460:	91 81       	ldd	r25, Z+1	; 0x01
    6462:	01 97       	sbiw	r24, 0x01	; 1
    6464:	11 96       	adiw	r26, 0x01	; 1
    6466:	9c 93       	st	X, r25
    6468:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    646a:	fe 01       	movw	r30, r28
    646c:	e5 5b       	subi	r30, 0xB5	; 181
    646e:	ff 4f       	sbci	r31, 0xFF	; 255
    6470:	80 81       	ld	r24, Z
    6472:	91 81       	ldd	r25, Z+1	; 0x01
    6474:	00 97       	sbiw	r24, 0x00	; 0
    6476:	d1 f6       	brne	.-76     	; 0x642c <H_CLCD_voidInit+0x25a>
    6478:	27 c0       	rjmp	.+78     	; 0x64c8 <H_CLCD_voidInit+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    647a:	8e 01       	movw	r16, r28
    647c:	05 5b       	subi	r16, 0xB5	; 181
    647e:	1f 4f       	sbci	r17, 0xFF	; 255
    6480:	fe 01       	movw	r30, r28
    6482:	e3 5b       	subi	r30, 0xB3	; 179
    6484:	ff 4f       	sbci	r31, 0xFF	; 255
    6486:	60 81       	ld	r22, Z
    6488:	71 81       	ldd	r23, Z+1	; 0x01
    648a:	82 81       	ldd	r24, Z+2	; 0x02
    648c:	93 81       	ldd	r25, Z+3	; 0x03
    648e:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    6492:	dc 01       	movw	r26, r24
    6494:	cb 01       	movw	r24, r22
    6496:	f8 01       	movw	r30, r16
    6498:	91 83       	std	Z+1, r25	; 0x01
    649a:	80 83       	st	Z, r24
    649c:	de 01       	movw	r26, r28
    649e:	a9 5b       	subi	r26, 0xB9	; 185
    64a0:	bf 4f       	sbci	r27, 0xFF	; 255
    64a2:	fe 01       	movw	r30, r28
    64a4:	e5 5b       	subi	r30, 0xB5	; 181
    64a6:	ff 4f       	sbci	r31, 0xFF	; 255
    64a8:	80 81       	ld	r24, Z
    64aa:	91 81       	ldd	r25, Z+1	; 0x01
    64ac:	8d 93       	st	X+, r24
    64ae:	9c 93       	st	X, r25
    64b0:	fe 01       	movw	r30, r28
    64b2:	e9 5b       	subi	r30, 0xB9	; 185
    64b4:	ff 4f       	sbci	r31, 0xFF	; 255
    64b6:	80 81       	ld	r24, Z
    64b8:	91 81       	ldd	r25, Z+1	; 0x01
    64ba:	01 97       	sbiw	r24, 0x01	; 1
    64bc:	f1 f7       	brne	.-4      	; 0x64ba <H_CLCD_voidInit+0x2e8>
    64be:	fe 01       	movw	r30, r28
    64c0:	e9 5b       	subi	r30, 0xB9	; 185
    64c2:	ff 4f       	sbci	r31, 0xFF	; 255
    64c4:	91 83       	std	Z+1, r25	; 0x01
    64c6:	80 83       	st	Z, r24
	*/
	/* LCD Power ON delay  */
		_delay_ms(40);

		/* Send for 4 bit initialization of LCD  */
		H_CLCD_voidSendCommand(0x33);
    64c8:	83 e3       	ldi	r24, 0x33	; 51
    64ca:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <H_CLCD_voidSendCommand>
		H_CLCD_voidSendCommand(0x32);
    64ce:	82 e3       	ldi	r24, 0x32	; 50
    64d0:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <H_CLCD_voidSendCommand>
    64d4:	fe 01       	movw	r30, r28
    64d6:	ed 5b       	subi	r30, 0xBD	; 189
    64d8:	ff 4f       	sbci	r31, 0xFF	; 255
    64da:	80 e0       	ldi	r24, 0x00	; 0
    64dc:	90 e0       	ldi	r25, 0x00	; 0
    64de:	a0 e0       	ldi	r26, 0x00	; 0
    64e0:	b0 e4       	ldi	r27, 0x40	; 64
    64e2:	80 83       	st	Z, r24
    64e4:	91 83       	std	Z+1, r25	; 0x01
    64e6:	a2 83       	std	Z+2, r26	; 0x02
    64e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    64ea:	8e 01       	movw	r16, r28
    64ec:	01 5c       	subi	r16, 0xC1	; 193
    64ee:	1f 4f       	sbci	r17, 0xFF	; 255
    64f0:	fe 01       	movw	r30, r28
    64f2:	ed 5b       	subi	r30, 0xBD	; 189
    64f4:	ff 4f       	sbci	r31, 0xFF	; 255
    64f6:	60 81       	ld	r22, Z
    64f8:	71 81       	ldd	r23, Z+1	; 0x01
    64fa:	82 81       	ldd	r24, Z+2	; 0x02
    64fc:	93 81       	ldd	r25, Z+3	; 0x03
    64fe:	20 e0       	ldi	r18, 0x00	; 0
    6500:	30 e0       	ldi	r19, 0x00	; 0
    6502:	4a e7       	ldi	r20, 0x7A	; 122
    6504:	55 e4       	ldi	r21, 0x45	; 69
    6506:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    650a:	dc 01       	movw	r26, r24
    650c:	cb 01       	movw	r24, r22
    650e:	f8 01       	movw	r30, r16
    6510:	80 83       	st	Z, r24
    6512:	91 83       	std	Z+1, r25	; 0x01
    6514:	a2 83       	std	Z+2, r26	; 0x02
    6516:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6518:	fe 01       	movw	r30, r28
    651a:	ff 96       	adiw	r30, 0x3f	; 63
    651c:	60 81       	ld	r22, Z
    651e:	71 81       	ldd	r23, Z+1	; 0x01
    6520:	82 81       	ldd	r24, Z+2	; 0x02
    6522:	93 81       	ldd	r25, Z+3	; 0x03
    6524:	20 e0       	ldi	r18, 0x00	; 0
    6526:	30 e0       	ldi	r19, 0x00	; 0
    6528:	40 e8       	ldi	r20, 0x80	; 128
    652a:	5f e3       	ldi	r21, 0x3F	; 63
    652c:	0e 94 33 13 	call	0x2666	; 0x2666 <__ltsf2>
    6530:	88 23       	and	r24, r24
    6532:	2c f4       	brge	.+10     	; 0x653e <H_CLCD_voidInit+0x36c>
		__ticks = 1;
    6534:	81 e0       	ldi	r24, 0x01	; 1
    6536:	90 e0       	ldi	r25, 0x00	; 0
    6538:	9e af       	std	Y+62, r25	; 0x3e
    653a:	8d af       	std	Y+61, r24	; 0x3d
    653c:	46 c0       	rjmp	.+140    	; 0x65ca <H_CLCD_voidInit+0x3f8>
	else if (__tmp > 65535)
    653e:	fe 01       	movw	r30, r28
    6540:	ff 96       	adiw	r30, 0x3f	; 63
    6542:	60 81       	ld	r22, Z
    6544:	71 81       	ldd	r23, Z+1	; 0x01
    6546:	82 81       	ldd	r24, Z+2	; 0x02
    6548:	93 81       	ldd	r25, Z+3	; 0x03
    654a:	20 e0       	ldi	r18, 0x00	; 0
    654c:	3f ef       	ldi	r19, 0xFF	; 255
    654e:	4f e7       	ldi	r20, 0x7F	; 127
    6550:	57 e4       	ldi	r21, 0x47	; 71
    6552:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gtsf2>
    6556:	18 16       	cp	r1, r24
    6558:	64 f5       	brge	.+88     	; 0x65b2 <H_CLCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    655a:	fe 01       	movw	r30, r28
    655c:	ed 5b       	subi	r30, 0xBD	; 189
    655e:	ff 4f       	sbci	r31, 0xFF	; 255
    6560:	60 81       	ld	r22, Z
    6562:	71 81       	ldd	r23, Z+1	; 0x01
    6564:	82 81       	ldd	r24, Z+2	; 0x02
    6566:	93 81       	ldd	r25, Z+3	; 0x03
    6568:	20 e0       	ldi	r18, 0x00	; 0
    656a:	30 e0       	ldi	r19, 0x00	; 0
    656c:	40 e2       	ldi	r20, 0x20	; 32
    656e:	51 e4       	ldi	r21, 0x41	; 65
    6570:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    6574:	dc 01       	movw	r26, r24
    6576:	cb 01       	movw	r24, r22
    6578:	bc 01       	movw	r22, r24
    657a:	cd 01       	movw	r24, r26
    657c:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    6580:	dc 01       	movw	r26, r24
    6582:	cb 01       	movw	r24, r22
    6584:	9e af       	std	Y+62, r25	; 0x3e
    6586:	8d af       	std	Y+61, r24	; 0x3d
    6588:	0f c0       	rjmp	.+30     	; 0x65a8 <H_CLCD_voidInit+0x3d6>
    658a:	80 e9       	ldi	r24, 0x90	; 144
    658c:	91 e0       	ldi	r25, 0x01	; 1
    658e:	9c af       	std	Y+60, r25	; 0x3c
    6590:	8b af       	std	Y+59, r24	; 0x3b
    6592:	8b ad       	ldd	r24, Y+59	; 0x3b
    6594:	9c ad       	ldd	r25, Y+60	; 0x3c
    6596:	01 97       	sbiw	r24, 0x01	; 1
    6598:	f1 f7       	brne	.-4      	; 0x6596 <H_CLCD_voidInit+0x3c4>
    659a:	9c af       	std	Y+60, r25	; 0x3c
    659c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    659e:	8d ad       	ldd	r24, Y+61	; 0x3d
    65a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    65a2:	01 97       	sbiw	r24, 0x01	; 1
    65a4:	9e af       	std	Y+62, r25	; 0x3e
    65a6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    65a8:	8d ad       	ldd	r24, Y+61	; 0x3d
    65aa:	9e ad       	ldd	r25, Y+62	; 0x3e
    65ac:	00 97       	sbiw	r24, 0x00	; 0
    65ae:	69 f7       	brne	.-38     	; 0x658a <H_CLCD_voidInit+0x3b8>
    65b0:	16 c0       	rjmp	.+44     	; 0x65de <H_CLCD_voidInit+0x40c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    65b2:	fe 01       	movw	r30, r28
    65b4:	ff 96       	adiw	r30, 0x3f	; 63
    65b6:	60 81       	ld	r22, Z
    65b8:	71 81       	ldd	r23, Z+1	; 0x01
    65ba:	82 81       	ldd	r24, Z+2	; 0x02
    65bc:	93 81       	ldd	r25, Z+3	; 0x03
    65be:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    65c2:	dc 01       	movw	r26, r24
    65c4:	cb 01       	movw	r24, r22
    65c6:	9e af       	std	Y+62, r25	; 0x3e
    65c8:	8d af       	std	Y+61, r24	; 0x3d
    65ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    65cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    65ce:	9a af       	std	Y+58, r25	; 0x3a
    65d0:	89 af       	std	Y+57, r24	; 0x39
    65d2:	89 ad       	ldd	r24, Y+57	; 0x39
    65d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    65d6:	01 97       	sbiw	r24, 0x01	; 1
    65d8:	f1 f7       	brne	.-4      	; 0x65d6 <H_CLCD_voidInit+0x404>
    65da:	9a af       	std	Y+58, r25	; 0x3a
    65dc:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(2);

		/* 2 line, 5*7 matrix in 4-bit mode */
		H_CLCD_voidSendCommand(0x28);
    65de:	88 e2       	ldi	r24, 0x28	; 40
    65e0:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <H_CLCD_voidSendCommand>
    65e4:	80 e0       	ldi	r24, 0x00	; 0
    65e6:	90 e0       	ldi	r25, 0x00	; 0
    65e8:	a0 e0       	ldi	r26, 0x00	; 0
    65ea:	b0 e4       	ldi	r27, 0x40	; 64
    65ec:	8d ab       	std	Y+53, r24	; 0x35
    65ee:	9e ab       	std	Y+54, r25	; 0x36
    65f0:	af ab       	std	Y+55, r26	; 0x37
    65f2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    65f4:	6d a9       	ldd	r22, Y+53	; 0x35
    65f6:	7e a9       	ldd	r23, Y+54	; 0x36
    65f8:	8f a9       	ldd	r24, Y+55	; 0x37
    65fa:	98 ad       	ldd	r25, Y+56	; 0x38
    65fc:	20 e0       	ldi	r18, 0x00	; 0
    65fe:	30 e0       	ldi	r19, 0x00	; 0
    6600:	4a e7       	ldi	r20, 0x7A	; 122
    6602:	55 e4       	ldi	r21, 0x45	; 69
    6604:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    6608:	dc 01       	movw	r26, r24
    660a:	cb 01       	movw	r24, r22
    660c:	89 ab       	std	Y+49, r24	; 0x31
    660e:	9a ab       	std	Y+50, r25	; 0x32
    6610:	ab ab       	std	Y+51, r26	; 0x33
    6612:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6614:	69 a9       	ldd	r22, Y+49	; 0x31
    6616:	7a a9       	ldd	r23, Y+50	; 0x32
    6618:	8b a9       	ldd	r24, Y+51	; 0x33
    661a:	9c a9       	ldd	r25, Y+52	; 0x34
    661c:	20 e0       	ldi	r18, 0x00	; 0
    661e:	30 e0       	ldi	r19, 0x00	; 0
    6620:	40 e8       	ldi	r20, 0x80	; 128
    6622:	5f e3       	ldi	r21, 0x3F	; 63
    6624:	0e 94 33 13 	call	0x2666	; 0x2666 <__ltsf2>
    6628:	88 23       	and	r24, r24
    662a:	2c f4       	brge	.+10     	; 0x6636 <H_CLCD_voidInit+0x464>
		__ticks = 1;
    662c:	81 e0       	ldi	r24, 0x01	; 1
    662e:	90 e0       	ldi	r25, 0x00	; 0
    6630:	98 ab       	std	Y+48, r25	; 0x30
    6632:	8f a7       	std	Y+47, r24	; 0x2f
    6634:	3f c0       	rjmp	.+126    	; 0x66b4 <H_CLCD_voidInit+0x4e2>
	else if (__tmp > 65535)
    6636:	69 a9       	ldd	r22, Y+49	; 0x31
    6638:	7a a9       	ldd	r23, Y+50	; 0x32
    663a:	8b a9       	ldd	r24, Y+51	; 0x33
    663c:	9c a9       	ldd	r25, Y+52	; 0x34
    663e:	20 e0       	ldi	r18, 0x00	; 0
    6640:	3f ef       	ldi	r19, 0xFF	; 255
    6642:	4f e7       	ldi	r20, 0x7F	; 127
    6644:	57 e4       	ldi	r21, 0x47	; 71
    6646:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gtsf2>
    664a:	18 16       	cp	r1, r24
    664c:	4c f5       	brge	.+82     	; 0x66a0 <H_CLCD_voidInit+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    664e:	6d a9       	ldd	r22, Y+53	; 0x35
    6650:	7e a9       	ldd	r23, Y+54	; 0x36
    6652:	8f a9       	ldd	r24, Y+55	; 0x37
    6654:	98 ad       	ldd	r25, Y+56	; 0x38
    6656:	20 e0       	ldi	r18, 0x00	; 0
    6658:	30 e0       	ldi	r19, 0x00	; 0
    665a:	40 e2       	ldi	r20, 0x20	; 32
    665c:	51 e4       	ldi	r21, 0x41	; 65
    665e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    6662:	dc 01       	movw	r26, r24
    6664:	cb 01       	movw	r24, r22
    6666:	bc 01       	movw	r22, r24
    6668:	cd 01       	movw	r24, r26
    666a:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    666e:	dc 01       	movw	r26, r24
    6670:	cb 01       	movw	r24, r22
    6672:	98 ab       	std	Y+48, r25	; 0x30
    6674:	8f a7       	std	Y+47, r24	; 0x2f
    6676:	0f c0       	rjmp	.+30     	; 0x6696 <H_CLCD_voidInit+0x4c4>
    6678:	80 e9       	ldi	r24, 0x90	; 144
    667a:	91 e0       	ldi	r25, 0x01	; 1
    667c:	9e a7       	std	Y+46, r25	; 0x2e
    667e:	8d a7       	std	Y+45, r24	; 0x2d
    6680:	8d a5       	ldd	r24, Y+45	; 0x2d
    6682:	9e a5       	ldd	r25, Y+46	; 0x2e
    6684:	01 97       	sbiw	r24, 0x01	; 1
    6686:	f1 f7       	brne	.-4      	; 0x6684 <H_CLCD_voidInit+0x4b2>
    6688:	9e a7       	std	Y+46, r25	; 0x2e
    668a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    668c:	8f a5       	ldd	r24, Y+47	; 0x2f
    668e:	98 a9       	ldd	r25, Y+48	; 0x30
    6690:	01 97       	sbiw	r24, 0x01	; 1
    6692:	98 ab       	std	Y+48, r25	; 0x30
    6694:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6696:	8f a5       	ldd	r24, Y+47	; 0x2f
    6698:	98 a9       	ldd	r25, Y+48	; 0x30
    669a:	00 97       	sbiw	r24, 0x00	; 0
    669c:	69 f7       	brne	.-38     	; 0x6678 <H_CLCD_voidInit+0x4a6>
    669e:	14 c0       	rjmp	.+40     	; 0x66c8 <H_CLCD_voidInit+0x4f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    66a0:	69 a9       	ldd	r22, Y+49	; 0x31
    66a2:	7a a9       	ldd	r23, Y+50	; 0x32
    66a4:	8b a9       	ldd	r24, Y+51	; 0x33
    66a6:	9c a9       	ldd	r25, Y+52	; 0x34
    66a8:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    66ac:	dc 01       	movw	r26, r24
    66ae:	cb 01       	movw	r24, r22
    66b0:	98 ab       	std	Y+48, r25	; 0x30
    66b2:	8f a7       	std	Y+47, r24	; 0x2f
    66b4:	8f a5       	ldd	r24, Y+47	; 0x2f
    66b6:	98 a9       	ldd	r25, Y+48	; 0x30
    66b8:	9c a7       	std	Y+44, r25	; 0x2c
    66ba:	8b a7       	std	Y+43, r24	; 0x2b
    66bc:	8b a5       	ldd	r24, Y+43	; 0x2b
    66be:	9c a5       	ldd	r25, Y+44	; 0x2c
    66c0:	01 97       	sbiw	r24, 0x01	; 1
    66c2:	f1 f7       	brne	.-4      	; 0x66c0 <H_CLCD_voidInit+0x4ee>
    66c4:	9c a7       	std	Y+44, r25	; 0x2c
    66c6:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(2);

		/* Display on cursor ON */
		H_CLCD_voidSendCommand(0x0E);
    66c8:	8e e0       	ldi	r24, 0x0E	; 14
    66ca:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <H_CLCD_voidSendCommand>
    66ce:	80 e0       	ldi	r24, 0x00	; 0
    66d0:	90 e0       	ldi	r25, 0x00	; 0
    66d2:	a0 e0       	ldi	r26, 0x00	; 0
    66d4:	b0 e4       	ldi	r27, 0x40	; 64
    66d6:	8f a3       	std	Y+39, r24	; 0x27
    66d8:	98 a7       	std	Y+40, r25	; 0x28
    66da:	a9 a7       	std	Y+41, r26	; 0x29
    66dc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66de:	6f a1       	ldd	r22, Y+39	; 0x27
    66e0:	78 a5       	ldd	r23, Y+40	; 0x28
    66e2:	89 a5       	ldd	r24, Y+41	; 0x29
    66e4:	9a a5       	ldd	r25, Y+42	; 0x2a
    66e6:	20 e0       	ldi	r18, 0x00	; 0
    66e8:	30 e0       	ldi	r19, 0x00	; 0
    66ea:	4a e7       	ldi	r20, 0x7A	; 122
    66ec:	55 e4       	ldi	r21, 0x45	; 69
    66ee:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    66f2:	dc 01       	movw	r26, r24
    66f4:	cb 01       	movw	r24, r22
    66f6:	8b a3       	std	Y+35, r24	; 0x23
    66f8:	9c a3       	std	Y+36, r25	; 0x24
    66fa:	ad a3       	std	Y+37, r26	; 0x25
    66fc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    66fe:	6b a1       	ldd	r22, Y+35	; 0x23
    6700:	7c a1       	ldd	r23, Y+36	; 0x24
    6702:	8d a1       	ldd	r24, Y+37	; 0x25
    6704:	9e a1       	ldd	r25, Y+38	; 0x26
    6706:	20 e0       	ldi	r18, 0x00	; 0
    6708:	30 e0       	ldi	r19, 0x00	; 0
    670a:	40 e8       	ldi	r20, 0x80	; 128
    670c:	5f e3       	ldi	r21, 0x3F	; 63
    670e:	0e 94 33 13 	call	0x2666	; 0x2666 <__ltsf2>
    6712:	88 23       	and	r24, r24
    6714:	2c f4       	brge	.+10     	; 0x6720 <H_CLCD_voidInit+0x54e>
		__ticks = 1;
    6716:	81 e0       	ldi	r24, 0x01	; 1
    6718:	90 e0       	ldi	r25, 0x00	; 0
    671a:	9a a3       	std	Y+34, r25	; 0x22
    671c:	89 a3       	std	Y+33, r24	; 0x21
    671e:	3f c0       	rjmp	.+126    	; 0x679e <H_CLCD_voidInit+0x5cc>
	else if (__tmp > 65535)
    6720:	6b a1       	ldd	r22, Y+35	; 0x23
    6722:	7c a1       	ldd	r23, Y+36	; 0x24
    6724:	8d a1       	ldd	r24, Y+37	; 0x25
    6726:	9e a1       	ldd	r25, Y+38	; 0x26
    6728:	20 e0       	ldi	r18, 0x00	; 0
    672a:	3f ef       	ldi	r19, 0xFF	; 255
    672c:	4f e7       	ldi	r20, 0x7F	; 127
    672e:	57 e4       	ldi	r21, 0x47	; 71
    6730:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gtsf2>
    6734:	18 16       	cp	r1, r24
    6736:	4c f5       	brge	.+82     	; 0x678a <H_CLCD_voidInit+0x5b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6738:	6f a1       	ldd	r22, Y+39	; 0x27
    673a:	78 a5       	ldd	r23, Y+40	; 0x28
    673c:	89 a5       	ldd	r24, Y+41	; 0x29
    673e:	9a a5       	ldd	r25, Y+42	; 0x2a
    6740:	20 e0       	ldi	r18, 0x00	; 0
    6742:	30 e0       	ldi	r19, 0x00	; 0
    6744:	40 e2       	ldi	r20, 0x20	; 32
    6746:	51 e4       	ldi	r21, 0x41	; 65
    6748:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    674c:	dc 01       	movw	r26, r24
    674e:	cb 01       	movw	r24, r22
    6750:	bc 01       	movw	r22, r24
    6752:	cd 01       	movw	r24, r26
    6754:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    6758:	dc 01       	movw	r26, r24
    675a:	cb 01       	movw	r24, r22
    675c:	9a a3       	std	Y+34, r25	; 0x22
    675e:	89 a3       	std	Y+33, r24	; 0x21
    6760:	0f c0       	rjmp	.+30     	; 0x6780 <H_CLCD_voidInit+0x5ae>
    6762:	80 e9       	ldi	r24, 0x90	; 144
    6764:	91 e0       	ldi	r25, 0x01	; 1
    6766:	98 a3       	std	Y+32, r25	; 0x20
    6768:	8f 8f       	std	Y+31, r24	; 0x1f
    676a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    676c:	98 a1       	ldd	r25, Y+32	; 0x20
    676e:	01 97       	sbiw	r24, 0x01	; 1
    6770:	f1 f7       	brne	.-4      	; 0x676e <H_CLCD_voidInit+0x59c>
    6772:	98 a3       	std	Y+32, r25	; 0x20
    6774:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6776:	89 a1       	ldd	r24, Y+33	; 0x21
    6778:	9a a1       	ldd	r25, Y+34	; 0x22
    677a:	01 97       	sbiw	r24, 0x01	; 1
    677c:	9a a3       	std	Y+34, r25	; 0x22
    677e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6780:	89 a1       	ldd	r24, Y+33	; 0x21
    6782:	9a a1       	ldd	r25, Y+34	; 0x22
    6784:	00 97       	sbiw	r24, 0x00	; 0
    6786:	69 f7       	brne	.-38     	; 0x6762 <H_CLCD_voidInit+0x590>
    6788:	14 c0       	rjmp	.+40     	; 0x67b2 <H_CLCD_voidInit+0x5e0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    678a:	6b a1       	ldd	r22, Y+35	; 0x23
    678c:	7c a1       	ldd	r23, Y+36	; 0x24
    678e:	8d a1       	ldd	r24, Y+37	; 0x25
    6790:	9e a1       	ldd	r25, Y+38	; 0x26
    6792:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    6796:	dc 01       	movw	r26, r24
    6798:	cb 01       	movw	r24, r22
    679a:	9a a3       	std	Y+34, r25	; 0x22
    679c:	89 a3       	std	Y+33, r24	; 0x21
    679e:	89 a1       	ldd	r24, Y+33	; 0x21
    67a0:	9a a1       	ldd	r25, Y+34	; 0x22
    67a2:	9e 8f       	std	Y+30, r25	; 0x1e
    67a4:	8d 8f       	std	Y+29, r24	; 0x1d
    67a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    67a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    67aa:	01 97       	sbiw	r24, 0x01	; 1
    67ac:	f1 f7       	brne	.-4      	; 0x67aa <H_CLCD_voidInit+0x5d8>
    67ae:	9e 8f       	std	Y+30, r25	; 0x1e
    67b0:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2);

		/* Increment cursor (shift cursor to right) */
		H_CLCD_voidSendCommand(0x14);
    67b2:	84 e1       	ldi	r24, 0x14	; 20
    67b4:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <H_CLCD_voidSendCommand>
    67b8:	80 e0       	ldi	r24, 0x00	; 0
    67ba:	90 e0       	ldi	r25, 0x00	; 0
    67bc:	a0 e0       	ldi	r26, 0x00	; 0
    67be:	b0 e4       	ldi	r27, 0x40	; 64
    67c0:	89 8f       	std	Y+25, r24	; 0x19
    67c2:	9a 8f       	std	Y+26, r25	; 0x1a
    67c4:	ab 8f       	std	Y+27, r26	; 0x1b
    67c6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    67c8:	69 8d       	ldd	r22, Y+25	; 0x19
    67ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    67cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    67ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    67d0:	20 e0       	ldi	r18, 0x00	; 0
    67d2:	30 e0       	ldi	r19, 0x00	; 0
    67d4:	4a e7       	ldi	r20, 0x7A	; 122
    67d6:	55 e4       	ldi	r21, 0x45	; 69
    67d8:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    67dc:	dc 01       	movw	r26, r24
    67de:	cb 01       	movw	r24, r22
    67e0:	8d 8b       	std	Y+21, r24	; 0x15
    67e2:	9e 8b       	std	Y+22, r25	; 0x16
    67e4:	af 8b       	std	Y+23, r26	; 0x17
    67e6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    67e8:	6d 89       	ldd	r22, Y+21	; 0x15
    67ea:	7e 89       	ldd	r23, Y+22	; 0x16
    67ec:	8f 89       	ldd	r24, Y+23	; 0x17
    67ee:	98 8d       	ldd	r25, Y+24	; 0x18
    67f0:	20 e0       	ldi	r18, 0x00	; 0
    67f2:	30 e0       	ldi	r19, 0x00	; 0
    67f4:	40 e8       	ldi	r20, 0x80	; 128
    67f6:	5f e3       	ldi	r21, 0x3F	; 63
    67f8:	0e 94 33 13 	call	0x2666	; 0x2666 <__ltsf2>
    67fc:	88 23       	and	r24, r24
    67fe:	2c f4       	brge	.+10     	; 0x680a <H_CLCD_voidInit+0x638>
		__ticks = 1;
    6800:	81 e0       	ldi	r24, 0x01	; 1
    6802:	90 e0       	ldi	r25, 0x00	; 0
    6804:	9c 8b       	std	Y+20, r25	; 0x14
    6806:	8b 8b       	std	Y+19, r24	; 0x13
    6808:	3f c0       	rjmp	.+126    	; 0x6888 <H_CLCD_voidInit+0x6b6>
	else if (__tmp > 65535)
    680a:	6d 89       	ldd	r22, Y+21	; 0x15
    680c:	7e 89       	ldd	r23, Y+22	; 0x16
    680e:	8f 89       	ldd	r24, Y+23	; 0x17
    6810:	98 8d       	ldd	r25, Y+24	; 0x18
    6812:	20 e0       	ldi	r18, 0x00	; 0
    6814:	3f ef       	ldi	r19, 0xFF	; 255
    6816:	4f e7       	ldi	r20, 0x7F	; 127
    6818:	57 e4       	ldi	r21, 0x47	; 71
    681a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gtsf2>
    681e:	18 16       	cp	r1, r24
    6820:	4c f5       	brge	.+82     	; 0x6874 <H_CLCD_voidInit+0x6a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6822:	69 8d       	ldd	r22, Y+25	; 0x19
    6824:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6826:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6828:	9c 8d       	ldd	r25, Y+28	; 0x1c
    682a:	20 e0       	ldi	r18, 0x00	; 0
    682c:	30 e0       	ldi	r19, 0x00	; 0
    682e:	40 e2       	ldi	r20, 0x20	; 32
    6830:	51 e4       	ldi	r21, 0x41	; 65
    6832:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    6836:	dc 01       	movw	r26, r24
    6838:	cb 01       	movw	r24, r22
    683a:	bc 01       	movw	r22, r24
    683c:	cd 01       	movw	r24, r26
    683e:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    6842:	dc 01       	movw	r26, r24
    6844:	cb 01       	movw	r24, r22
    6846:	9c 8b       	std	Y+20, r25	; 0x14
    6848:	8b 8b       	std	Y+19, r24	; 0x13
    684a:	0f c0       	rjmp	.+30     	; 0x686a <H_CLCD_voidInit+0x698>
    684c:	80 e9       	ldi	r24, 0x90	; 144
    684e:	91 e0       	ldi	r25, 0x01	; 1
    6850:	9a 8b       	std	Y+18, r25	; 0x12
    6852:	89 8b       	std	Y+17, r24	; 0x11
    6854:	89 89       	ldd	r24, Y+17	; 0x11
    6856:	9a 89       	ldd	r25, Y+18	; 0x12
    6858:	01 97       	sbiw	r24, 0x01	; 1
    685a:	f1 f7       	brne	.-4      	; 0x6858 <H_CLCD_voidInit+0x686>
    685c:	9a 8b       	std	Y+18, r25	; 0x12
    685e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6860:	8b 89       	ldd	r24, Y+19	; 0x13
    6862:	9c 89       	ldd	r25, Y+20	; 0x14
    6864:	01 97       	sbiw	r24, 0x01	; 1
    6866:	9c 8b       	std	Y+20, r25	; 0x14
    6868:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    686a:	8b 89       	ldd	r24, Y+19	; 0x13
    686c:	9c 89       	ldd	r25, Y+20	; 0x14
    686e:	00 97       	sbiw	r24, 0x00	; 0
    6870:	69 f7       	brne	.-38     	; 0x684c <H_CLCD_voidInit+0x67a>
    6872:	14 c0       	rjmp	.+40     	; 0x689c <H_CLCD_voidInit+0x6ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6874:	6d 89       	ldd	r22, Y+21	; 0x15
    6876:	7e 89       	ldd	r23, Y+22	; 0x16
    6878:	8f 89       	ldd	r24, Y+23	; 0x17
    687a:	98 8d       	ldd	r25, Y+24	; 0x18
    687c:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    6880:	dc 01       	movw	r26, r24
    6882:	cb 01       	movw	r24, r22
    6884:	9c 8b       	std	Y+20, r25	; 0x14
    6886:	8b 8b       	std	Y+19, r24	; 0x13
    6888:	8b 89       	ldd	r24, Y+19	; 0x13
    688a:	9c 89       	ldd	r25, Y+20	; 0x14
    688c:	98 8b       	std	Y+16, r25	; 0x10
    688e:	8f 87       	std	Y+15, r24	; 0x0f
    6890:	8f 85       	ldd	r24, Y+15	; 0x0f
    6892:	98 89       	ldd	r25, Y+16	; 0x10
    6894:	01 97       	sbiw	r24, 0x01	; 1
    6896:	f1 f7       	brne	.-4      	; 0x6894 <H_CLCD_voidInit+0x6c2>
    6898:	98 8b       	std	Y+16, r25	; 0x10
    689a:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);

		/* Clear display screen */
		H_CLCD_voidSendCommand(0x01);
    689c:	81 e0       	ldi	r24, 0x01	; 1
    689e:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <H_CLCD_voidSendCommand>
    68a2:	80 e0       	ldi	r24, 0x00	; 0
    68a4:	90 e0       	ldi	r25, 0x00	; 0
    68a6:	a0 e0       	ldi	r26, 0x00	; 0
    68a8:	b0 e4       	ldi	r27, 0x40	; 64
    68aa:	8b 87       	std	Y+11, r24	; 0x0b
    68ac:	9c 87       	std	Y+12, r25	; 0x0c
    68ae:	ad 87       	std	Y+13, r26	; 0x0d
    68b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    68b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    68b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    68b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    68b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    68ba:	20 e0       	ldi	r18, 0x00	; 0
    68bc:	30 e0       	ldi	r19, 0x00	; 0
    68be:	4a e7       	ldi	r20, 0x7A	; 122
    68c0:	55 e4       	ldi	r21, 0x45	; 69
    68c2:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    68c6:	dc 01       	movw	r26, r24
    68c8:	cb 01       	movw	r24, r22
    68ca:	8f 83       	std	Y+7, r24	; 0x07
    68cc:	98 87       	std	Y+8, r25	; 0x08
    68ce:	a9 87       	std	Y+9, r26	; 0x09
    68d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    68d2:	6f 81       	ldd	r22, Y+7	; 0x07
    68d4:	78 85       	ldd	r23, Y+8	; 0x08
    68d6:	89 85       	ldd	r24, Y+9	; 0x09
    68d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    68da:	20 e0       	ldi	r18, 0x00	; 0
    68dc:	30 e0       	ldi	r19, 0x00	; 0
    68de:	40 e8       	ldi	r20, 0x80	; 128
    68e0:	5f e3       	ldi	r21, 0x3F	; 63
    68e2:	0e 94 33 13 	call	0x2666	; 0x2666 <__ltsf2>
    68e6:	88 23       	and	r24, r24
    68e8:	2c f4       	brge	.+10     	; 0x68f4 <H_CLCD_voidInit+0x722>
		__ticks = 1;
    68ea:	81 e0       	ldi	r24, 0x01	; 1
    68ec:	90 e0       	ldi	r25, 0x00	; 0
    68ee:	9e 83       	std	Y+6, r25	; 0x06
    68f0:	8d 83       	std	Y+5, r24	; 0x05
    68f2:	3f c0       	rjmp	.+126    	; 0x6972 <H_CLCD_voidInit+0x7a0>
	else if (__tmp > 65535)
    68f4:	6f 81       	ldd	r22, Y+7	; 0x07
    68f6:	78 85       	ldd	r23, Y+8	; 0x08
    68f8:	89 85       	ldd	r24, Y+9	; 0x09
    68fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    68fc:	20 e0       	ldi	r18, 0x00	; 0
    68fe:	3f ef       	ldi	r19, 0xFF	; 255
    6900:	4f e7       	ldi	r20, 0x7F	; 127
    6902:	57 e4       	ldi	r21, 0x47	; 71
    6904:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gtsf2>
    6908:	18 16       	cp	r1, r24
    690a:	4c f5       	brge	.+82     	; 0x695e <H_CLCD_voidInit+0x78c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    690c:	6b 85       	ldd	r22, Y+11	; 0x0b
    690e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6910:	8d 85       	ldd	r24, Y+13	; 0x0d
    6912:	9e 85       	ldd	r25, Y+14	; 0x0e
    6914:	20 e0       	ldi	r18, 0x00	; 0
    6916:	30 e0       	ldi	r19, 0x00	; 0
    6918:	40 e2       	ldi	r20, 0x20	; 32
    691a:	51 e4       	ldi	r21, 0x41	; 65
    691c:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    6920:	dc 01       	movw	r26, r24
    6922:	cb 01       	movw	r24, r22
    6924:	bc 01       	movw	r22, r24
    6926:	cd 01       	movw	r24, r26
    6928:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    692c:	dc 01       	movw	r26, r24
    692e:	cb 01       	movw	r24, r22
    6930:	9e 83       	std	Y+6, r25	; 0x06
    6932:	8d 83       	std	Y+5, r24	; 0x05
    6934:	0f c0       	rjmp	.+30     	; 0x6954 <H_CLCD_voidInit+0x782>
    6936:	80 e9       	ldi	r24, 0x90	; 144
    6938:	91 e0       	ldi	r25, 0x01	; 1
    693a:	9c 83       	std	Y+4, r25	; 0x04
    693c:	8b 83       	std	Y+3, r24	; 0x03
    693e:	8b 81       	ldd	r24, Y+3	; 0x03
    6940:	9c 81       	ldd	r25, Y+4	; 0x04
    6942:	01 97       	sbiw	r24, 0x01	; 1
    6944:	f1 f7       	brne	.-4      	; 0x6942 <H_CLCD_voidInit+0x770>
    6946:	9c 83       	std	Y+4, r25	; 0x04
    6948:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    694a:	8d 81       	ldd	r24, Y+5	; 0x05
    694c:	9e 81       	ldd	r25, Y+6	; 0x06
    694e:	01 97       	sbiw	r24, 0x01	; 1
    6950:	9e 83       	std	Y+6, r25	; 0x06
    6952:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6954:	8d 81       	ldd	r24, Y+5	; 0x05
    6956:	9e 81       	ldd	r25, Y+6	; 0x06
    6958:	00 97       	sbiw	r24, 0x00	; 0
    695a:	69 f7       	brne	.-38     	; 0x6936 <H_CLCD_voidInit+0x764>
    695c:	14 c0       	rjmp	.+40     	; 0x6986 <H_CLCD_voidInit+0x7b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    695e:	6f 81       	ldd	r22, Y+7	; 0x07
    6960:	78 85       	ldd	r23, Y+8	; 0x08
    6962:	89 85       	ldd	r24, Y+9	; 0x09
    6964:	9a 85       	ldd	r25, Y+10	; 0x0a
    6966:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    696a:	dc 01       	movw	r26, r24
    696c:	cb 01       	movw	r24, r22
    696e:	9e 83       	std	Y+6, r25	; 0x06
    6970:	8d 83       	std	Y+5, r24	; 0x05
    6972:	8d 81       	ldd	r24, Y+5	; 0x05
    6974:	9e 81       	ldd	r25, Y+6	; 0x06
    6976:	9a 83       	std	Y+2, r25	; 0x02
    6978:	89 83       	std	Y+1, r24	; 0x01
    697a:	89 81       	ldd	r24, Y+1	; 0x01
    697c:	9a 81       	ldd	r25, Y+2	; 0x02
    697e:	01 97       	sbiw	r24, 0x01	; 1
    6980:	f1 f7       	brne	.-4      	; 0x697e <H_CLCD_voidInit+0x7ac>
    6982:	9a 83       	std	Y+2, r25	; 0x02
    6984:	89 83       	std	Y+1, r24	; 0x01

		_delay_ms(2);

		H_CLCD_voidSendCommand(0x06);
    6986:	86 e0       	ldi	r24, 0x06	; 6
    6988:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <H_CLCD_voidSendCommand>


#else
#error "Wrong Mode Configuration"
#endif
}
    698c:	ce 59       	subi	r28, 0x9E	; 158
    698e:	df 4f       	sbci	r29, 0xFF	; 255
    6990:	0f b6       	in	r0, 0x3f	; 63
    6992:	f8 94       	cli
    6994:	de bf       	out	0x3e, r29	; 62
    6996:	0f be       	out	0x3f, r0	; 63
    6998:	cd bf       	out	0x3d, r28	; 61
    699a:	cf 91       	pop	r28
    699c:	df 91       	pop	r29
    699e:	1f 91       	pop	r17
    69a0:	0f 91       	pop	r16
    69a2:	08 95       	ret

000069a4 <H_CLCD_voidSendData>:


void H_CLCD_voidSendData(u8 Copy_u8Data)
{
    69a4:	df 93       	push	r29
    69a6:	cf 93       	push	r28
    69a8:	0f 92       	push	r0
    69aa:	cd b7       	in	r28, 0x3d	; 61
    69ac:	de b7       	in	r29, 0x3e	; 62
    69ae:	89 83       	std	Y+1, r24	; 0x01
	/* Set RS pin to high for data */
	M_DIO_voidSetPinValue(CLCD_RS_PIN, DIO_HIGH);
    69b0:	8d e0       	ldi	r24, 0x0D	; 13
    69b2:	61 e0       	ldi	r22, 0x01	; 1
    69b4:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>

	/* Set Data to data pins */
	H_CLCD_voidlatchByte(Copy_u8Data);
    69b8:	89 81       	ldd	r24, Y+1	; 0x01
    69ba:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <H_CLCD_voidlatchByte>
}
    69be:	0f 90       	pop	r0
    69c0:	cf 91       	pop	r28
    69c2:	df 91       	pop	r29
    69c4:	08 95       	ret

000069c6 <H_CLCD_voidSendCommand>:


void H_CLCD_voidSendCommand(u8 Copy_u8Command)
{
    69c6:	df 93       	push	r29
    69c8:	cf 93       	push	r28
    69ca:	0f 92       	push	r0
    69cc:	cd b7       	in	r28, 0x3d	; 61
    69ce:	de b7       	in	r29, 0x3e	; 62
    69d0:	89 83       	std	Y+1, r24	; 0x01
	/* Set RS pin to low for Command */
	M_DIO_voidSetPinValue(CLCD_RS_PIN, DIO_LOW);
    69d2:	8d e0       	ldi	r24, 0x0D	; 13
    69d4:	60 e0       	ldi	r22, 0x00	; 0
    69d6:	0e 94 04 26 	call	0x4c08	; 0x4c08 <M_DIO_voidSetPinValue>


	/* Set command to data pins */
	H_CLCD_voidlatchByte(Copy_u8Command);
    69da:	89 81       	ldd	r24, Y+1	; 0x01
    69dc:	0e 94 b0 2e 	call	0x5d60	; 0x5d60 <H_CLCD_voidlatchByte>

}
    69e0:	0f 90       	pop	r0
    69e2:	cf 91       	pop	r28
    69e4:	df 91       	pop	r29
    69e6:	08 95       	ret

000069e8 <H_CLCD_voidSendString>:


void H_CLCD_voidSendString(const u8 * Copy_ps8Str)
{
    69e8:	df 93       	push	r29
    69ea:	cf 93       	push	r28
    69ec:	cd b7       	in	r28, 0x3d	; 61
    69ee:	de b7       	in	r29, 0x3e	; 62
    69f0:	61 97       	sbiw	r28, 0x11	; 17
    69f2:	0f b6       	in	r0, 0x3f	; 63
    69f4:	f8 94       	cli
    69f6:	de bf       	out	0x3e, r29	; 62
    69f8:	0f be       	out	0x3f, r0	; 63
    69fa:	cd bf       	out	0x3d, r28	; 61
    69fc:	99 8b       	std	Y+17, r25	; 0x11
    69fe:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8Counter = 0;
    6a00:	1f 86       	std	Y+15, r1	; 0x0f
    6a02:	80 c0       	rjmp	.+256    	; 0x6b04 <H_CLCD_voidSendString+0x11c>

	while(Copy_ps8Str[Local_u8Counter] != '\0')
	{
		H_CLCD_voidSendData(Copy_ps8Str[Local_u8Counter]);
    6a04:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a06:	28 2f       	mov	r18, r24
    6a08:	30 e0       	ldi	r19, 0x00	; 0
    6a0a:	88 89       	ldd	r24, Y+16	; 0x10
    6a0c:	99 89       	ldd	r25, Y+17	; 0x11
    6a0e:	fc 01       	movw	r30, r24
    6a10:	e2 0f       	add	r30, r18
    6a12:	f3 1f       	adc	r31, r19
    6a14:	80 81       	ld	r24, Z
    6a16:	0e 94 d2 34 	call	0x69a4	; 0x69a4 <H_CLCD_voidSendData>
    6a1a:	80 e0       	ldi	r24, 0x00	; 0
    6a1c:	90 e0       	ldi	r25, 0x00	; 0
    6a1e:	a0 ea       	ldi	r26, 0xA0	; 160
    6a20:	b1 e4       	ldi	r27, 0x41	; 65
    6a22:	8b 87       	std	Y+11, r24	; 0x0b
    6a24:	9c 87       	std	Y+12, r25	; 0x0c
    6a26:	ad 87       	std	Y+13, r26	; 0x0d
    6a28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a30:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a32:	20 e0       	ldi	r18, 0x00	; 0
    6a34:	30 e0       	ldi	r19, 0x00	; 0
    6a36:	4a e7       	ldi	r20, 0x7A	; 122
    6a38:	55 e4       	ldi	r21, 0x45	; 69
    6a3a:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    6a3e:	dc 01       	movw	r26, r24
    6a40:	cb 01       	movw	r24, r22
    6a42:	8f 83       	std	Y+7, r24	; 0x07
    6a44:	98 87       	std	Y+8, r25	; 0x08
    6a46:	a9 87       	std	Y+9, r26	; 0x09
    6a48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    6a4c:	78 85       	ldd	r23, Y+8	; 0x08
    6a4e:	89 85       	ldd	r24, Y+9	; 0x09
    6a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a52:	20 e0       	ldi	r18, 0x00	; 0
    6a54:	30 e0       	ldi	r19, 0x00	; 0
    6a56:	40 e8       	ldi	r20, 0x80	; 128
    6a58:	5f e3       	ldi	r21, 0x3F	; 63
    6a5a:	0e 94 33 13 	call	0x2666	; 0x2666 <__ltsf2>
    6a5e:	88 23       	and	r24, r24
    6a60:	2c f4       	brge	.+10     	; 0x6a6c <H_CLCD_voidSendString+0x84>
		__ticks = 1;
    6a62:	81 e0       	ldi	r24, 0x01	; 1
    6a64:	90 e0       	ldi	r25, 0x00	; 0
    6a66:	9e 83       	std	Y+6, r25	; 0x06
    6a68:	8d 83       	std	Y+5, r24	; 0x05
    6a6a:	3f c0       	rjmp	.+126    	; 0x6aea <H_CLCD_voidSendString+0x102>
	else if (__tmp > 65535)
    6a6c:	6f 81       	ldd	r22, Y+7	; 0x07
    6a6e:	78 85       	ldd	r23, Y+8	; 0x08
    6a70:	89 85       	ldd	r24, Y+9	; 0x09
    6a72:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a74:	20 e0       	ldi	r18, 0x00	; 0
    6a76:	3f ef       	ldi	r19, 0xFF	; 255
    6a78:	4f e7       	ldi	r20, 0x7F	; 127
    6a7a:	57 e4       	ldi	r21, 0x47	; 71
    6a7c:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <__gtsf2>
    6a80:	18 16       	cp	r1, r24
    6a82:	4c f5       	brge	.+82     	; 0x6ad6 <H_CLCD_voidSendString+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a84:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a86:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a88:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a8c:	20 e0       	ldi	r18, 0x00	; 0
    6a8e:	30 e0       	ldi	r19, 0x00	; 0
    6a90:	40 e2       	ldi	r20, 0x20	; 32
    6a92:	51 e4       	ldi	r21, 0x41	; 65
    6a94:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    6a98:	dc 01       	movw	r26, r24
    6a9a:	cb 01       	movw	r24, r22
    6a9c:	bc 01       	movw	r22, r24
    6a9e:	cd 01       	movw	r24, r26
    6aa0:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    6aa4:	dc 01       	movw	r26, r24
    6aa6:	cb 01       	movw	r24, r22
    6aa8:	9e 83       	std	Y+6, r25	; 0x06
    6aaa:	8d 83       	std	Y+5, r24	; 0x05
    6aac:	0f c0       	rjmp	.+30     	; 0x6acc <H_CLCD_voidSendString+0xe4>
    6aae:	80 e9       	ldi	r24, 0x90	; 144
    6ab0:	91 e0       	ldi	r25, 0x01	; 1
    6ab2:	9c 83       	std	Y+4, r25	; 0x04
    6ab4:	8b 83       	std	Y+3, r24	; 0x03
    6ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    6ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    6aba:	01 97       	sbiw	r24, 0x01	; 1
    6abc:	f1 f7       	brne	.-4      	; 0x6aba <H_CLCD_voidSendString+0xd2>
    6abe:	9c 83       	std	Y+4, r25	; 0x04
    6ac0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    6ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    6ac6:	01 97       	sbiw	r24, 0x01	; 1
    6ac8:	9e 83       	std	Y+6, r25	; 0x06
    6aca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6acc:	8d 81       	ldd	r24, Y+5	; 0x05
    6ace:	9e 81       	ldd	r25, Y+6	; 0x06
    6ad0:	00 97       	sbiw	r24, 0x00	; 0
    6ad2:	69 f7       	brne	.-38     	; 0x6aae <H_CLCD_voidSendString+0xc6>
    6ad4:	14 c0       	rjmp	.+40     	; 0x6afe <H_CLCD_voidSendString+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6ad6:	6f 81       	ldd	r22, Y+7	; 0x07
    6ad8:	78 85       	ldd	r23, Y+8	; 0x08
    6ada:	89 85       	ldd	r24, Y+9	; 0x09
    6adc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ade:	0e 94 42 02 	call	0x484	; 0x484 <__fixunssfsi>
    6ae2:	dc 01       	movw	r26, r24
    6ae4:	cb 01       	movw	r24, r22
    6ae6:	9e 83       	std	Y+6, r25	; 0x06
    6ae8:	8d 83       	std	Y+5, r24	; 0x05
    6aea:	8d 81       	ldd	r24, Y+5	; 0x05
    6aec:	9e 81       	ldd	r25, Y+6	; 0x06
    6aee:	9a 83       	std	Y+2, r25	; 0x02
    6af0:	89 83       	std	Y+1, r24	; 0x01
    6af2:	89 81       	ldd	r24, Y+1	; 0x01
    6af4:	9a 81       	ldd	r25, Y+2	; 0x02
    6af6:	01 97       	sbiw	r24, 0x01	; 1
    6af8:	f1 f7       	brne	.-4      	; 0x6af6 <H_CLCD_voidSendString+0x10e>
    6afa:	9a 83       	std	Y+2, r25	; 0x02
    6afc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(20);
		Local_u8Counter++;
    6afe:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b00:	8f 5f       	subi	r24, 0xFF	; 255
    6b02:	8f 87       	std	Y+15, r24	; 0x0f

void H_CLCD_voidSendString(const u8 * Copy_ps8Str)
{
	u8 Local_u8Counter = 0;

	while(Copy_ps8Str[Local_u8Counter] != '\0')
    6b04:	8f 85       	ldd	r24, Y+15	; 0x0f
    6b06:	28 2f       	mov	r18, r24
    6b08:	30 e0       	ldi	r19, 0x00	; 0
    6b0a:	88 89       	ldd	r24, Y+16	; 0x10
    6b0c:	99 89       	ldd	r25, Y+17	; 0x11
    6b0e:	fc 01       	movw	r30, r24
    6b10:	e2 0f       	add	r30, r18
    6b12:	f3 1f       	adc	r31, r19
    6b14:	80 81       	ld	r24, Z
    6b16:	88 23       	and	r24, r24
    6b18:	09 f0       	breq	.+2      	; 0x6b1c <H_CLCD_voidSendString+0x134>
    6b1a:	74 cf       	rjmp	.-280    	; 0x6a04 <H_CLCD_voidSendString+0x1c>
	{
		H_CLCD_voidSendData(Copy_ps8Str[Local_u8Counter]);
		_delay_ms(20);
		Local_u8Counter++;
	}
}
    6b1c:	61 96       	adiw	r28, 0x11	; 17
    6b1e:	0f b6       	in	r0, 0x3f	; 63
    6b20:	f8 94       	cli
    6b22:	de bf       	out	0x3e, r29	; 62
    6b24:	0f be       	out	0x3f, r0	; 63
    6b26:	cd bf       	out	0x3d, r28	; 61
    6b28:	cf 91       	pop	r28
    6b2a:	df 91       	pop	r29
    6b2c:	08 95       	ret

00006b2e <H_CLCD_voidGotoXY>:


void H_CLCD_voidGotoXY(u8 Copy_u8Row,u8 Copy_u8Colum)
{
    6b2e:	df 93       	push	r29
    6b30:	cf 93       	push	r28
    6b32:	00 d0       	rcall	.+0      	; 0x6b34 <H_CLCD_voidGotoXY+0x6>
    6b34:	0f 92       	push	r0
    6b36:	cd b7       	in	r28, 0x3d	; 61
    6b38:	de b7       	in	r29, 0x3e	; 62
    6b3a:	8a 83       	std	Y+2, r24	; 0x02
    6b3c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;

	if(Copy_u8Row == 0)
    6b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    6b40:	88 23       	and	r24, r24
    6b42:	19 f4       	brne	.+6      	; 0x6b4a <H_CLCD_voidGotoXY+0x1c>
	{
		/* Location is at first line */
		Local_u8Address=Copy_u8Colum;
    6b44:	8b 81       	ldd	r24, Y+3	; 0x03
    6b46:	89 83       	std	Y+1, r24	; 0x01
    6b48:	14 c0       	rjmp	.+40     	; 0x6b72 <H_CLCD_voidGotoXY+0x44>
	}
	else if(Copy_u8Row == 1)
    6b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    6b4c:	81 30       	cpi	r24, 0x01	; 1
    6b4e:	21 f4       	brne	.+8      	; 0x6b58 <H_CLCD_voidGotoXY+0x2a>
	{
		/* Location is at second line */
		Local_u8Address=0x40+Copy_u8Colum;
    6b50:	8b 81       	ldd	r24, Y+3	; 0x03
    6b52:	80 5c       	subi	r24, 0xC0	; 192
    6b54:	89 83       	std	Y+1, r24	; 0x01
    6b56:	0d c0       	rjmp	.+26     	; 0x6b72 <H_CLCD_voidGotoXY+0x44>
	}
	else if(Copy_u8Row == 2)
    6b58:	8a 81       	ldd	r24, Y+2	; 0x02
    6b5a:	82 30       	cpi	r24, 0x02	; 2
    6b5c:	21 f4       	brne	.+8      	; 0x6b66 <H_CLCD_voidGotoXY+0x38>
	{
		/* Location is at Third line */
		Local_u8Address=0x14+Copy_u8Colum;
    6b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    6b60:	8c 5e       	subi	r24, 0xEC	; 236
    6b62:	89 83       	std	Y+1, r24	; 0x01
    6b64:	06 c0       	rjmp	.+12     	; 0x6b72 <H_CLCD_voidGotoXY+0x44>
	}
	else if(Copy_u8Row == 3)
    6b66:	8a 81       	ldd	r24, Y+2	; 0x02
    6b68:	83 30       	cpi	r24, 0x03	; 3
    6b6a:	19 f4       	brne	.+6      	; 0x6b72 <H_CLCD_voidGotoXY+0x44>
	{
		/* Location is at fourth line */
		Local_u8Address=0x54+Copy_u8Colum;
    6b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    6b6e:	8c 5a       	subi	r24, 0xAC	; 172
    6b70:	89 83       	std	Y+1, r24	; 0x01
	}

	/* Set bit number 7 for set DDRAM address command then send the command */
	Local_u8Address = SET_BIT(Local_u8Address,7);
    6b72:	89 81       	ldd	r24, Y+1	; 0x01
    6b74:	80 68       	ori	r24, 0x80	; 128
    6b76:	89 83       	std	Y+1, r24	; 0x01

	H_CLCD_voidSendCommand(Local_u8Address);
    6b78:	89 81       	ldd	r24, Y+1	; 0x01
    6b7a:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <H_CLCD_voidSendCommand>
}
    6b7e:	0f 90       	pop	r0
    6b80:	0f 90       	pop	r0
    6b82:	0f 90       	pop	r0
    6b84:	cf 91       	pop	r28
    6b86:	df 91       	pop	r29
    6b88:	08 95       	ret

00006b8a <H_CLCD_voidCreatCustomChar>:


void H_CLCD_voidCreatCustomChar(const u8 * ArrPattern,u8 copy_u8charCode)
{
    6b8a:	df 93       	push	r29
    6b8c:	cf 93       	push	r28
    6b8e:	00 d0       	rcall	.+0      	; 0x6b90 <H_CLCD_voidCreatCustomChar+0x6>
    6b90:	00 d0       	rcall	.+0      	; 0x6b92 <H_CLCD_voidCreatCustomChar+0x8>
    6b92:	0f 92       	push	r0
    6b94:	cd b7       	in	r28, 0x3d	; 61
    6b96:	de b7       	in	r29, 0x3e	; 62
    6b98:	9c 83       	std	Y+4, r25	; 0x04
    6b9a:	8b 83       	std	Y+3, r24	; 0x03
    6b9c:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8CGRAMAddress=0;
    6b9e:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Iterator;
	/* Calculate the CGRAM address whose each block is 8 bytes */
	Local_u8CGRAMAddress=(copy_u8charCode*BLOCK_SIAZE);
    6ba0:	8d 81       	ldd	r24, Y+5	; 0x05
    6ba2:	88 2f       	mov	r24, r24
    6ba4:	90 e0       	ldi	r25, 0x00	; 0
    6ba6:	88 0f       	add	r24, r24
    6ba8:	99 1f       	adc	r25, r25
    6baa:	88 0f       	add	r24, r24
    6bac:	99 1f       	adc	r25, r25
    6bae:	88 0f       	add	r24, r24
    6bb0:	99 1f       	adc	r25, r25
    6bb2:	8a 83       	std	Y+2, r24	; 0x02

	/* Send CGRAM address command to LCD with setting bit 6 , clearing bit 7 */
	Local_u8CGRAMAddress = SET_BIT(Local_u8CGRAMAddress,6);
    6bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    6bb6:	80 64       	ori	r24, 0x40	; 64
    6bb8:	8a 83       	std	Y+2, r24	; 0x02

	H_CLCD_voidSendCommand(Local_u8CGRAMAddress);
    6bba:	8a 81       	ldd	r24, Y+2	; 0x02
    6bbc:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <H_CLCD_voidSendCommand>

	/* Write the pattern into CGRAM */
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    6bc0:	19 82       	std	Y+1, r1	; 0x01
    6bc2:	0e c0       	rjmp	.+28     	; 0x6be0 <H_CLCD_voidCreatCustomChar+0x56>
	{
		H_CLCD_voidSendData(ArrPattern[Local_u8Iterator]);
    6bc4:	89 81       	ldd	r24, Y+1	; 0x01
    6bc6:	28 2f       	mov	r18, r24
    6bc8:	30 e0       	ldi	r19, 0x00	; 0
    6bca:	8b 81       	ldd	r24, Y+3	; 0x03
    6bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    6bce:	fc 01       	movw	r30, r24
    6bd0:	e2 0f       	add	r30, r18
    6bd2:	f3 1f       	adc	r31, r19
    6bd4:	80 81       	ld	r24, Z
    6bd6:	0e 94 d2 34 	call	0x69a4	; 0x69a4 <H_CLCD_voidSendData>
	Local_u8CGRAMAddress = SET_BIT(Local_u8CGRAMAddress,6);

	H_CLCD_voidSendCommand(Local_u8CGRAMAddress);

	/* Write the pattern into CGRAM */
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    6bda:	89 81       	ldd	r24, Y+1	; 0x01
    6bdc:	8f 5f       	subi	r24, 0xFF	; 255
    6bde:	89 83       	std	Y+1, r24	; 0x01
    6be0:	89 81       	ldd	r24, Y+1	; 0x01
    6be2:	88 30       	cpi	r24, 0x08	; 8
    6be4:	78 f3       	brcs	.-34     	; 0x6bc4 <H_CLCD_voidCreatCustomChar+0x3a>
	{
		H_CLCD_voidSendData(ArrPattern[Local_u8Iterator]);
	}
}
    6be6:	0f 90       	pop	r0
    6be8:	0f 90       	pop	r0
    6bea:	0f 90       	pop	r0
    6bec:	0f 90       	pop	r0
    6bee:	0f 90       	pop	r0
    6bf0:	cf 91       	pop	r28
    6bf2:	df 91       	pop	r29
    6bf4:	08 95       	ret

00006bf6 <H_CLCD_voidDisplayCustomChar>:


void H_CLCD_voidDisplayCustomChar(u8 Copy_u8charCode)
{
    6bf6:	df 93       	push	r29
    6bf8:	cf 93       	push	r28
    6bfa:	0f 92       	push	r0
    6bfc:	cd b7       	in	r28, 0x3d	; 61
    6bfe:	de b7       	in	r29, 0x3e	; 62
    6c00:	89 83       	std	Y+1, r24	; 0x01
	H_CLCD_voidSendData(Copy_u8charCode);
    6c02:	89 81       	ldd	r24, Y+1	; 0x01
    6c04:	0e 94 d2 34 	call	0x69a4	; 0x69a4 <H_CLCD_voidSendData>
}
    6c08:	0f 90       	pop	r0
    6c0a:	cf 91       	pop	r28
    6c0c:	df 91       	pop	r29
    6c0e:	08 95       	ret

00006c10 <H_CLCD_void_Send_u32Num>:

void H_CLCD_void_Send_u32Num(s32 n)
{
    6c10:	df 93       	push	r29
    6c12:	cf 93       	push	r28
    6c14:	cd b7       	in	r28, 0x3d	; 61
    6c16:	de b7       	in	r29, 0x3e	; 62
    6c18:	6c 97       	sbiw	r28, 0x1c	; 28
    6c1a:	0f b6       	in	r0, 0x3f	; 63
    6c1c:	f8 94       	cli
    6c1e:	de bf       	out	0x3e, r29	; 62
    6c20:	0f be       	out	0x3f, r0	; 63
    6c22:	cd bf       	out	0x3d, r28	; 61
    6c24:	69 8f       	std	Y+25, r22	; 0x19
    6c26:	7a 8f       	std	Y+26, r23	; 0x1a
    6c28:	8b 8f       	std	Y+27, r24	; 0x1b
    6c2a:	9c 8f       	std	Y+28, r25	; 0x1c

	u8 buffer[20];

	if(n > 0)
    6c2c:	89 8d       	ldd	r24, Y+25	; 0x19
    6c2e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6c30:	ab 8d       	ldd	r26, Y+27	; 0x1b
    6c32:	bc 8d       	ldd	r27, Y+28	; 0x1c
    6c34:	18 16       	cp	r1, r24
    6c36:	19 06       	cpc	r1, r25
    6c38:	1a 06       	cpc	r1, r26
    6c3a:	1b 06       	cpc	r1, r27
    6c3c:	7c f4       	brge	.+30     	; 0x6c5c <H_CLCD_void_Send_u32Num+0x4c>
	{
		itoa(n, buffer, 10);
    6c3e:	89 8d       	ldd	r24, Y+25	; 0x19
    6c40:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6c42:	9e 01       	movw	r18, r28
    6c44:	2b 5f       	subi	r18, 0xFB	; 251
    6c46:	3f 4f       	sbci	r19, 0xFF	; 255
    6c48:	b9 01       	movw	r22, r18
    6c4a:	4a e0       	ldi	r20, 0x0A	; 10
    6c4c:	50 e0       	ldi	r21, 0x00	; 0
    6c4e:	0e 94 8f 38 	call	0x711e	; 0x711e <itoa>
		H_CLCD_voidSendString(buffer);
    6c52:	ce 01       	movw	r24, r28
    6c54:	05 96       	adiw	r24, 0x05	; 5
    6c56:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <H_CLCD_voidSendString>
    6c5a:	28 c0       	rjmp	.+80     	; 0x6cac <H_CLCD_void_Send_u32Num+0x9c>
	}else if(n == 0){
    6c5c:	89 8d       	ldd	r24, Y+25	; 0x19
    6c5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6c60:	ab 8d       	ldd	r26, Y+27	; 0x1b
    6c62:	bc 8d       	ldd	r27, Y+28	; 0x1c
    6c64:	00 97       	sbiw	r24, 0x00	; 0
    6c66:	a1 05       	cpc	r26, r1
    6c68:	b1 05       	cpc	r27, r1
    6c6a:	29 f4       	brne	.+10     	; 0x6c76 <H_CLCD_void_Send_u32Num+0x66>
		H_CLCD_voidSendString("0");
    6c6c:	87 ea       	ldi	r24, 0xA7	; 167
    6c6e:	90 e0       	ldi	r25, 0x00	; 0
    6c70:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <H_CLCD_voidSendString>
    6c74:	1b c0       	rjmp	.+54     	; 0x6cac <H_CLCD_void_Send_u32Num+0x9c>

	}else{
		//negative

			s32 int_eq = int_eq * -1 ;
    6c76:	89 81       	ldd	r24, Y+1	; 0x01
    6c78:	9a 81       	ldd	r25, Y+2	; 0x02
    6c7a:	ab 81       	ldd	r26, Y+3	; 0x03
    6c7c:	bc 81       	ldd	r27, Y+4	; 0x04
    6c7e:	b0 95       	com	r27
    6c80:	a0 95       	com	r26
    6c82:	90 95       	com	r25
    6c84:	81 95       	neg	r24
    6c86:	9f 4f       	sbci	r25, 0xFF	; 255
    6c88:	af 4f       	sbci	r26, 0xFF	; 255
    6c8a:	bf 4f       	sbci	r27, 0xFF	; 255
    6c8c:	89 83       	std	Y+1, r24	; 0x01
    6c8e:	9a 83       	std	Y+2, r25	; 0x02
    6c90:	ab 83       	std	Y+3, r26	; 0x03
    6c92:	bc 83       	std	Y+4, r27	; 0x04
			H_CLCD_voidSendString("-");
    6c94:	89 ea       	ldi	r24, 0xA9	; 169
    6c96:	90 e0       	ldi	r25, 0x00	; 0
    6c98:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <H_CLCD_voidSendString>
			H_CLCD_void_Send_u32Num(int_eq);
    6c9c:	89 81       	ldd	r24, Y+1	; 0x01
    6c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    6ca0:	ab 81       	ldd	r26, Y+3	; 0x03
    6ca2:	bc 81       	ldd	r27, Y+4	; 0x04
    6ca4:	bc 01       	movw	r22, r24
    6ca6:	cd 01       	movw	r24, r26
    6ca8:	0e 94 08 36 	call	0x6c10	; 0x6c10 <H_CLCD_void_Send_u32Num>

	}


}
    6cac:	6c 96       	adiw	r28, 0x1c	; 28
    6cae:	0f b6       	in	r0, 0x3f	; 63
    6cb0:	f8 94       	cli
    6cb2:	de bf       	out	0x3e, r29	; 62
    6cb4:	0f be       	out	0x3f, r0	; 63
    6cb6:	cd bf       	out	0x3d, r28	; 61
    6cb8:	cf 91       	pop	r28
    6cba:	df 91       	pop	r29
    6cbc:	08 95       	ret

00006cbe <H_CLCD_Send_f64>:


void H_CLCD_Send_f64(f64 f){
    6cbe:	df 93       	push	r29
    6cc0:	cf 93       	push	r28
    6cc2:	cd b7       	in	r28, 0x3d	; 61
    6cc4:	de b7       	in	r29, 0x3e	; 62
    6cc6:	28 97       	sbiw	r28, 0x08	; 8
    6cc8:	0f b6       	in	r0, 0x3f	; 63
    6cca:	f8 94       	cli
    6ccc:	de bf       	out	0x3e, r29	; 62
    6cce:	0f be       	out	0x3f, r0	; 63
    6cd0:	cd bf       	out	0x3d, r28	; 61
    6cd2:	6d 83       	std	Y+5, r22	; 0x05
    6cd4:	7e 83       	std	Y+6, r23	; 0x06
    6cd6:	8f 83       	std	Y+7, r24	; 0x07
    6cd8:	98 87       	std	Y+8, r25	; 0x08
	sprintf(buffer,"%.2f",f);

	H_CLCD_voidSendString(buffer);*/

	//I'm targeting a precision of 2 numbers after the point (100);
	s32 int_eq= f * 100;
    6cda:	6d 81       	ldd	r22, Y+5	; 0x05
    6cdc:	7e 81       	ldd	r23, Y+6	; 0x06
    6cde:	8f 81       	ldd	r24, Y+7	; 0x07
    6ce0:	98 85       	ldd	r25, Y+8	; 0x08
    6ce2:	20 e0       	ldi	r18, 0x00	; 0
    6ce4:	30 e0       	ldi	r19, 0x00	; 0
    6ce6:	48 ec       	ldi	r20, 0xC8	; 200
    6ce8:	52 e4       	ldi	r21, 0x42	; 66
    6cea:	0e 94 fd 10 	call	0x21fa	; 0x21fa <__mulsf3>
    6cee:	dc 01       	movw	r26, r24
    6cf0:	cb 01       	movw	r24, r22
    6cf2:	bc 01       	movw	r22, r24
    6cf4:	cd 01       	movw	r24, r26
    6cf6:	0e 94 63 13 	call	0x26c6	; 0x26c6 <__fixsfsi>
    6cfa:	dc 01       	movw	r26, r24
    6cfc:	cb 01       	movw	r24, r22
    6cfe:	89 83       	std	Y+1, r24	; 0x01
    6d00:	9a 83       	std	Y+2, r25	; 0x02
    6d02:	ab 83       	std	Y+3, r26	; 0x03
    6d04:	bc 83       	std	Y+4, r27	; 0x04
	if(int_eq < 0 ){
    6d06:	89 81       	ldd	r24, Y+1	; 0x01
    6d08:	9a 81       	ldd	r25, Y+2	; 0x02
    6d0a:	ab 81       	ldd	r26, Y+3	; 0x03
    6d0c:	bc 81       	ldd	r27, Y+4	; 0x04
    6d0e:	bb 23       	and	r27, r27
    6d10:	9c f4       	brge	.+38     	; 0x6d38 <H_CLCD_Send_f64+0x7a>
		int_eq = int_eq * -1 ;
    6d12:	89 81       	ldd	r24, Y+1	; 0x01
    6d14:	9a 81       	ldd	r25, Y+2	; 0x02
    6d16:	ab 81       	ldd	r26, Y+3	; 0x03
    6d18:	bc 81       	ldd	r27, Y+4	; 0x04
    6d1a:	b0 95       	com	r27
    6d1c:	a0 95       	com	r26
    6d1e:	90 95       	com	r25
    6d20:	81 95       	neg	r24
    6d22:	9f 4f       	sbci	r25, 0xFF	; 255
    6d24:	af 4f       	sbci	r26, 0xFF	; 255
    6d26:	bf 4f       	sbci	r27, 0xFF	; 255
    6d28:	89 83       	std	Y+1, r24	; 0x01
    6d2a:	9a 83       	std	Y+2, r25	; 0x02
    6d2c:	ab 83       	std	Y+3, r26	; 0x03
    6d2e:	bc 83       	std	Y+4, r27	; 0x04
		H_CLCD_voidSendString("-");
    6d30:	89 ea       	ldi	r24, 0xA9	; 169
    6d32:	90 e0       	ldi	r25, 0x00	; 0
    6d34:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <H_CLCD_voidSendString>
	}
	H_CLCD_void_Send_u32Num(int_eq/100);
    6d38:	89 81       	ldd	r24, Y+1	; 0x01
    6d3a:	9a 81       	ldd	r25, Y+2	; 0x02
    6d3c:	ab 81       	ldd	r26, Y+3	; 0x03
    6d3e:	bc 81       	ldd	r27, Y+4	; 0x04
    6d40:	24 e6       	ldi	r18, 0x64	; 100
    6d42:	30 e0       	ldi	r19, 0x00	; 0
    6d44:	40 e0       	ldi	r20, 0x00	; 0
    6d46:	50 e0       	ldi	r21, 0x00	; 0
    6d48:	bc 01       	movw	r22, r24
    6d4a:	cd 01       	movw	r24, r26
    6d4c:	0e 94 23 38 	call	0x7046	; 0x7046 <__divmodsi4>
    6d50:	da 01       	movw	r26, r20
    6d52:	c9 01       	movw	r24, r18
    6d54:	bc 01       	movw	r22, r24
    6d56:	cd 01       	movw	r24, r26
    6d58:	0e 94 08 36 	call	0x6c10	; 0x6c10 <H_CLCD_void_Send_u32Num>
	H_CLCD_voidSendString(".");
    6d5c:	8b ea       	ldi	r24, 0xAB	; 171
    6d5e:	90 e0       	ldi	r25, 0x00	; 0
    6d60:	0e 94 f4 34 	call	0x69e8	; 0x69e8 <H_CLCD_voidSendString>
	H_CLCD_void_Send_u32Num(int_eq%100);
    6d64:	89 81       	ldd	r24, Y+1	; 0x01
    6d66:	9a 81       	ldd	r25, Y+2	; 0x02
    6d68:	ab 81       	ldd	r26, Y+3	; 0x03
    6d6a:	bc 81       	ldd	r27, Y+4	; 0x04
    6d6c:	24 e6       	ldi	r18, 0x64	; 100
    6d6e:	30 e0       	ldi	r19, 0x00	; 0
    6d70:	40 e0       	ldi	r20, 0x00	; 0
    6d72:	50 e0       	ldi	r21, 0x00	; 0
    6d74:	bc 01       	movw	r22, r24
    6d76:	cd 01       	movw	r24, r26
    6d78:	0e 94 23 38 	call	0x7046	; 0x7046 <__divmodsi4>
    6d7c:	dc 01       	movw	r26, r24
    6d7e:	cb 01       	movw	r24, r22
    6d80:	bc 01       	movw	r22, r24
    6d82:	cd 01       	movw	r24, r26
    6d84:	0e 94 08 36 	call	0x6c10	; 0x6c10 <H_CLCD_void_Send_u32Num>

}
    6d88:	28 96       	adiw	r28, 0x08	; 8
    6d8a:	0f b6       	in	r0, 0x3f	; 63
    6d8c:	f8 94       	cli
    6d8e:	de bf       	out	0x3e, r29	; 62
    6d90:	0f be       	out	0x3f, r0	; 63
    6d92:	cd bf       	out	0x3d, r28	; 61
    6d94:	cf 91       	pop	r28
    6d96:	df 91       	pop	r29
    6d98:	08 95       	ret

00006d9a <H_CLCD_voidClearDisplay>:

void H_CLCD_voidClearDisplay(){
    6d9a:	df 93       	push	r29
    6d9c:	cf 93       	push	r28
    6d9e:	cd b7       	in	r28, 0x3d	; 61
    6da0:	de b7       	in	r29, 0x3e	; 62

	H_CLCD_voidSendCommand(0x01);
    6da2:	81 e0       	ldi	r24, 0x01	; 1
    6da4:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <H_CLCD_voidSendCommand>
	H_CLCD_voidSendCommand(0x02);
    6da8:	82 e0       	ldi	r24, 0x02	; 2
    6daa:	0e 94 e3 34 	call	0x69c6	; 0x69c6 <H_CLCD_voidSendCommand>



}
    6dae:	cf 91       	pop	r28
    6db0:	df 91       	pop	r29
    6db2:	08 95       	ret

00006db4 <__vector_7>:
#include <avr/interrupt.h>
//#include "Mcu_HW.h"
#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
    6db4:	1f 92       	push	r1
    6db6:	0f 92       	push	r0
    6db8:	0f b6       	in	r0, 0x3f	; 63
    6dba:	0f 92       	push	r0
    6dbc:	11 24       	eor	r1, r1
    6dbe:	8f 93       	push	r24
    6dc0:	9f 93       	push	r25
    6dc2:	af 93       	push	r26
    6dc4:	bf 93       	push	r27
    6dc6:	df 93       	push	r29
    6dc8:	cf 93       	push	r28
    6dca:	cd b7       	in	r28, 0x3d	; 61
    6dcc:	de b7       	in	r29, 0x3e	; 62
  timer1_millis++;
    6dce:	80 91 46 04 	lds	r24, 0x0446
    6dd2:	90 91 47 04 	lds	r25, 0x0447
    6dd6:	a0 91 48 04 	lds	r26, 0x0448
    6dda:	b0 91 49 04 	lds	r27, 0x0449
    6dde:	01 96       	adiw	r24, 0x01	; 1
    6de0:	a1 1d       	adc	r26, r1
    6de2:	b1 1d       	adc	r27, r1
    6de4:	80 93 46 04 	sts	0x0446, r24
    6de8:	90 93 47 04 	sts	0x0447, r25
    6dec:	a0 93 48 04 	sts	0x0448, r26
    6df0:	b0 93 49 04 	sts	0x0449, r27
}
    6df4:	cf 91       	pop	r28
    6df6:	df 91       	pop	r29
    6df8:	bf 91       	pop	r27
    6dfa:	af 91       	pop	r26
    6dfc:	9f 91       	pop	r25
    6dfe:	8f 91       	pop	r24
    6e00:	0f 90       	pop	r0
    6e02:	0f be       	out	0x3f, r0	; 63
    6e04:	0f 90       	pop	r0
    6e06:	1f 90       	pop	r1
    6e08:	18 95       	reti

00006e0a <init_millis>:

void init_millis(unsigned long f_cpu)
{
    6e0a:	df 93       	push	r29
    6e0c:	cf 93       	push	r28
    6e0e:	cd b7       	in	r28, 0x3d	; 61
    6e10:	de b7       	in	r29, 0x3e	; 62
    6e12:	28 97       	sbiw	r28, 0x08	; 8
    6e14:	0f b6       	in	r0, 0x3f	; 63
    6e16:	f8 94       	cli
    6e18:	de bf       	out	0x3e, r29	; 62
    6e1a:	0f be       	out	0x3f, r0	; 63
    6e1c:	cd bf       	out	0x3d, r28	; 61
    6e1e:	6d 83       	std	Y+5, r22	; 0x05
    6e20:	7e 83       	std	Y+6, r23	; 0x06
    6e22:	8f 83       	std	Y+7, r24	; 0x07
    6e24:	98 87       	std	Y+8, r25	; 0x08
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
    6e26:	8d 81       	ldd	r24, Y+5	; 0x05
    6e28:	9e 81       	ldd	r25, Y+6	; 0x06
    6e2a:	af 81       	ldd	r26, Y+7	; 0x07
    6e2c:	b8 85       	ldd	r27, Y+8	; 0x08
    6e2e:	20 e4       	ldi	r18, 0x40	; 64
    6e30:	3f e1       	ldi	r19, 0x1F	; 31
    6e32:	40 e0       	ldi	r20, 0x00	; 0
    6e34:	50 e0       	ldi	r21, 0x00	; 0
    6e36:	bc 01       	movw	r22, r24
    6e38:	cd 01       	movw	r24, r26
    6e3a:	0e 94 01 38 	call	0x7002	; 0x7002 <__udivmodsi4>
    6e3e:	da 01       	movw	r26, r20
    6e40:	c9 01       	movw	r24, r18
    6e42:	89 83       	std	Y+1, r24	; 0x01
    6e44:	9a 83       	std	Y+2, r25	; 0x02
    6e46:	ab 83       	std	Y+3, r26	; 0x03
    6e48:	bc 83       	std	Y+4, r27	; 0x04

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
    6e4a:	ae e4       	ldi	r26, 0x4E	; 78
    6e4c:	b0 e0       	ldi	r27, 0x00	; 0
    6e4e:	ee e4       	ldi	r30, 0x4E	; 78
    6e50:	f0 e0       	ldi	r31, 0x00	; 0
    6e52:	80 81       	ld	r24, Z
    6e54:	8a 60       	ori	r24, 0x0A	; 10
    6e56:	8c 93       	st	X, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
    6e58:	eb e4       	ldi	r30, 0x4B	; 75
    6e5a:	f0 e0       	ldi	r31, 0x00	; 0
    6e5c:	89 81       	ldd	r24, Y+1	; 0x01
    6e5e:	9a 81       	ldd	r25, Y+2	; 0x02
    6e60:	ab 81       	ldd	r26, Y+3	; 0x03
    6e62:	bc 81       	ldd	r27, Y+4	; 0x04
    6e64:	89 2f       	mov	r24, r25
    6e66:	9a 2f       	mov	r25, r26
    6e68:	ab 2f       	mov	r26, r27
    6e6a:	bb 27       	eor	r27, r27
    6e6c:	80 83       	st	Z, r24
  OCR1AL = ctc_match_overflow;
    6e6e:	ea e4       	ldi	r30, 0x4A	; 74
    6e70:	f0 e0       	ldi	r31, 0x00	; 0
    6e72:	89 81       	ldd	r24, Y+1	; 0x01
    6e74:	80 83       	st	Z, r24

  // Enable the compare match interrupt
  TIMSK |= (1 << OCIE1A);
    6e76:	a9 e5       	ldi	r26, 0x59	; 89
    6e78:	b0 e0       	ldi	r27, 0x00	; 0
    6e7a:	e9 e5       	ldi	r30, 0x59	; 89
    6e7c:	f0 e0       	ldi	r31, 0x00	; 0
    6e7e:	80 81       	ld	r24, Z
    6e80:	80 61       	ori	r24, 0x10	; 16
    6e82:	8c 93       	st	X, r24

  //REMEMBER TO ENABLE GLOBAL INTERRUPTS AFTER THIS WITH sei(); !!!
}
    6e84:	28 96       	adiw	r28, 0x08	; 8
    6e86:	0f b6       	in	r0, 0x3f	; 63
    6e88:	f8 94       	cli
    6e8a:	de bf       	out	0x3e, r29	; 62
    6e8c:	0f be       	out	0x3f, r0	; 63
    6e8e:	cd bf       	out	0x3d, r28	; 61
    6e90:	cf 91       	pop	r28
    6e92:	df 91       	pop	r29
    6e94:	08 95       	ret

00006e96 <millis>:

unsigned long millis (void)
{
    6e96:	df 93       	push	r29
    6e98:	cf 93       	push	r28
    6e9a:	00 d0       	rcall	.+0      	; 0x6e9c <millis+0x6>
    6e9c:	00 d0       	rcall	.+0      	; 0x6e9e <millis+0x8>
    6e9e:	00 d0       	rcall	.+0      	; 0x6ea0 <millis+0xa>
    6ea0:	cd b7       	in	r28, 0x3d	; 61
    6ea2:	de b7       	in	r29, 0x3e	; 62
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    6ea4:	1e 82       	std	Y+6, r1	; 0x06
    6ea6:	0e 94 7a 37 	call	0x6ef4	; 0x6ef4 <__iCliRetVal>
    6eaa:	89 83       	std	Y+1, r24	; 0x01
    6eac:	0d c0       	rjmp	.+26     	; 0x6ec8 <millis+0x32>
    millis_return = timer1_millis;
    6eae:	80 91 46 04 	lds	r24, 0x0446
    6eb2:	90 91 47 04 	lds	r25, 0x0447
    6eb6:	a0 91 48 04 	lds	r26, 0x0448
    6eba:	b0 91 49 04 	lds	r27, 0x0449
    6ebe:	8a 83       	std	Y+2, r24	; 0x02
    6ec0:	9b 83       	std	Y+3, r25	; 0x03
    6ec2:	ac 83       	std	Y+4, r26	; 0x04
    6ec4:	bd 83       	std	Y+5, r27	; 0x05
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    6ec6:	19 82       	std	Y+1, r1	; 0x01
    6ec8:	89 81       	ldd	r24, Y+1	; 0x01
    6eca:	88 23       	and	r24, r24
    6ecc:	81 f7       	brne	.-32     	; 0x6eae <millis+0x18>
    6ece:	ce 01       	movw	r24, r28
    6ed0:	06 96       	adiw	r24, 0x06	; 6
    6ed2:	0e 94 83 37 	call	0x6f06	; 0x6f06 <__iSeiParam>
    millis_return = timer1_millis;
  }
  return millis_return;
    6ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    6ed8:	9b 81       	ldd	r25, Y+3	; 0x03
    6eda:	ac 81       	ldd	r26, Y+4	; 0x04
    6edc:	bd 81       	ldd	r27, Y+5	; 0x05
}
    6ede:	bc 01       	movw	r22, r24
    6ee0:	cd 01       	movw	r24, r26
    6ee2:	26 96       	adiw	r28, 0x06	; 6
    6ee4:	0f b6       	in	r0, 0x3f	; 63
    6ee6:	f8 94       	cli
    6ee8:	de bf       	out	0x3e, r29	; 62
    6eea:	0f be       	out	0x3f, r0	; 63
    6eec:	cd bf       	out	0x3d, r28	; 61
    6eee:	cf 91       	pop	r28
    6ef0:	df 91       	pop	r29
    6ef2:	08 95       	ret

00006ef4 <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    6ef4:	df 93       	push	r29
    6ef6:	cf 93       	push	r28
    6ef8:	cd b7       	in	r28, 0x3d	; 61
    6efa:	de b7       	in	r29, 0x3e	; 62
    cli();
    6efc:	f8 94       	cli
    return 1;
    6efe:	81 e0       	ldi	r24, 0x01	; 1
}
    6f00:	cf 91       	pop	r28
    6f02:	df 91       	pop	r29
    6f04:	08 95       	ret

00006f06 <__iSeiParam>:

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    6f06:	df 93       	push	r29
    6f08:	cf 93       	push	r28
    6f0a:	00 d0       	rcall	.+0      	; 0x6f0c <__iSeiParam+0x6>
    6f0c:	cd b7       	in	r28, 0x3d	; 61
    6f0e:	de b7       	in	r29, 0x3e	; 62
    6f10:	9a 83       	std	Y+2, r25	; 0x02
    6f12:	89 83       	std	Y+1, r24	; 0x01
    sei();
    6f14:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}
    6f16:	0f 90       	pop	r0
    6f18:	0f 90       	pop	r0
    6f1a:	cf 91       	pop	r28
    6f1c:	df 91       	pop	r29
    6f1e:	08 95       	ret

00006f20 <APP_SmartHome_void_LightIntensity_init>:
 *      Author: ahmed
 */
#include "SmartHome_init.h"
#include "LDR_interface.h"
#include "LDR_config.h"
void APP_SmartHome_void_LightIntensity_init(){
    6f20:	df 93       	push	r29
    6f22:	cf 93       	push	r28
    6f24:	cd b7       	in	r28, 0x3d	; 61
    6f26:	de b7       	in	r29, 0x3e	; 62

	H_LDR_void_Init();
    6f28:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <H_LDR_void_Init>

}
    6f2c:	cf 91       	pop	r28
    6f2e:	df 91       	pop	r29
    6f30:	08 95       	ret

00006f32 <APP_SmartHome_u8_GetIntensityLevel>:


u8 APP_SmartHome_u8_GetIntensityLevel(){
    6f32:	df 93       	push	r29
    6f34:	cf 93       	push	r28
    6f36:	00 d0       	rcall	.+0      	; 0x6f38 <APP_SmartHome_u8_GetIntensityLevel+0x6>
    6f38:	0f 92       	push	r0
    6f3a:	cd b7       	in	r28, 0x3d	; 61
    6f3c:	de b7       	in	r29, 0x3e	; 62
	 u8 intensityLVL = 0;
    6f3e:	1b 82       	std	Y+3, r1	; 0x03
	 u16 LDRreading = H_LDR_u16_Read(LDR_ADC_CHANNEL);
    6f40:	80 e0       	ldi	r24, 0x00	; 0
    6f42:	0e 94 0c 2d 	call	0x5a18	; 0x5a18 <H_LDR_u16_Read>
    6f46:	9a 83       	std	Y+2, r25	; 0x02
    6f48:	89 83       	std	Y+1, r24	; 0x01
     /*intensityLVL =
    	((LDRreading - LDR_MIN_READING) / (LDR_MAX_READING - LDR_MIN_READING))*
		(LED_MAX_INTENSITY - LED_MIN_INTENSITY) + LED_MIN_INTENSITY;*/

	 //DOES SOME KIND OF MAPPING
	 intensityLVL = LDRreading /(u16)50;
    6f4a:	89 81       	ldd	r24, Y+1	; 0x01
    6f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    6f4e:	22 e3       	ldi	r18, 0x32	; 50
    6f50:	30 e0       	ldi	r19, 0x00	; 0
    6f52:	b9 01       	movw	r22, r18
    6f54:	0e 94 ed 37 	call	0x6fda	; 0x6fda <__udivmodhi4>
    6f58:	cb 01       	movw	r24, r22
    6f5a:	8b 83       	std	Y+3, r24	; 0x03
     return intensityLVL;
    6f5c:	8b 81       	ldd	r24, Y+3	; 0x03

}
    6f5e:	0f 90       	pop	r0
    6f60:	0f 90       	pop	r0
    6f62:	0f 90       	pop	r0
    6f64:	cf 91       	pop	r28
    6f66:	df 91       	pop	r29
    6f68:	08 95       	ret

00006f6a <main>:
extern const Port_Configtype Port_ConfigArr[PORT_PINS_CONFIG_ARR_SIZE];




int main(){
    6f6a:	df 93       	push	r29
    6f6c:	cf 93       	push	r28
    6f6e:	cd b7       	in	r28, 0x3d	; 61
    6f70:	de b7       	in	r29, 0x3e	; 62


	/* Module Initialization */

M_GIE_void_EnableGlobalInterrupt();
    6f72:	0e 94 6e 25 	call	0x4adc	; 0x4adc <M_GIE_void_EnableGlobalInterrupt>
M_PORT_voidInit(Port_ConfigArr);
    6f76:	84 ef       	ldi	r24, 0xF4	; 244
    6f78:	91 e0       	ldi	r25, 0x01	; 1
    6f7a:	0e 94 97 21 	call	0x432e	; 0x432e <M_PORT_voidInit>
H_CLCD_voidInit();
    6f7e:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <H_CLCD_voidInit>
    6f82:	ff cf       	rjmp	.-2      	; 0x6f82 <main+0x18>

00006f84 <__mulsi3>:
    6f84:	62 9f       	mul	r22, r18
    6f86:	d0 01       	movw	r26, r0
    6f88:	73 9f       	mul	r23, r19
    6f8a:	f0 01       	movw	r30, r0
    6f8c:	82 9f       	mul	r24, r18
    6f8e:	e0 0d       	add	r30, r0
    6f90:	f1 1d       	adc	r31, r1
    6f92:	64 9f       	mul	r22, r20
    6f94:	e0 0d       	add	r30, r0
    6f96:	f1 1d       	adc	r31, r1
    6f98:	92 9f       	mul	r25, r18
    6f9a:	f0 0d       	add	r31, r0
    6f9c:	83 9f       	mul	r24, r19
    6f9e:	f0 0d       	add	r31, r0
    6fa0:	74 9f       	mul	r23, r20
    6fa2:	f0 0d       	add	r31, r0
    6fa4:	65 9f       	mul	r22, r21
    6fa6:	f0 0d       	add	r31, r0
    6fa8:	99 27       	eor	r25, r25
    6faa:	72 9f       	mul	r23, r18
    6fac:	b0 0d       	add	r27, r0
    6fae:	e1 1d       	adc	r30, r1
    6fb0:	f9 1f       	adc	r31, r25
    6fb2:	63 9f       	mul	r22, r19
    6fb4:	b0 0d       	add	r27, r0
    6fb6:	e1 1d       	adc	r30, r1
    6fb8:	f9 1f       	adc	r31, r25
    6fba:	bd 01       	movw	r22, r26
    6fbc:	cf 01       	movw	r24, r30
    6fbe:	11 24       	eor	r1, r1
    6fc0:	08 95       	ret

00006fc2 <__udivmodqi4>:
    6fc2:	99 1b       	sub	r25, r25
    6fc4:	79 e0       	ldi	r23, 0x09	; 9
    6fc6:	04 c0       	rjmp	.+8      	; 0x6fd0 <__udivmodqi4_ep>

00006fc8 <__udivmodqi4_loop>:
    6fc8:	99 1f       	adc	r25, r25
    6fca:	96 17       	cp	r25, r22
    6fcc:	08 f0       	brcs	.+2      	; 0x6fd0 <__udivmodqi4_ep>
    6fce:	96 1b       	sub	r25, r22

00006fd0 <__udivmodqi4_ep>:
    6fd0:	88 1f       	adc	r24, r24
    6fd2:	7a 95       	dec	r23
    6fd4:	c9 f7       	brne	.-14     	; 0x6fc8 <__udivmodqi4_loop>
    6fd6:	80 95       	com	r24
    6fd8:	08 95       	ret

00006fda <__udivmodhi4>:
    6fda:	aa 1b       	sub	r26, r26
    6fdc:	bb 1b       	sub	r27, r27
    6fde:	51 e1       	ldi	r21, 0x11	; 17
    6fe0:	07 c0       	rjmp	.+14     	; 0x6ff0 <__udivmodhi4_ep>

00006fe2 <__udivmodhi4_loop>:
    6fe2:	aa 1f       	adc	r26, r26
    6fe4:	bb 1f       	adc	r27, r27
    6fe6:	a6 17       	cp	r26, r22
    6fe8:	b7 07       	cpc	r27, r23
    6fea:	10 f0       	brcs	.+4      	; 0x6ff0 <__udivmodhi4_ep>
    6fec:	a6 1b       	sub	r26, r22
    6fee:	b7 0b       	sbc	r27, r23

00006ff0 <__udivmodhi4_ep>:
    6ff0:	88 1f       	adc	r24, r24
    6ff2:	99 1f       	adc	r25, r25
    6ff4:	5a 95       	dec	r21
    6ff6:	a9 f7       	brne	.-22     	; 0x6fe2 <__udivmodhi4_loop>
    6ff8:	80 95       	com	r24
    6ffa:	90 95       	com	r25
    6ffc:	bc 01       	movw	r22, r24
    6ffe:	cd 01       	movw	r24, r26
    7000:	08 95       	ret

00007002 <__udivmodsi4>:
    7002:	a1 e2       	ldi	r26, 0x21	; 33
    7004:	1a 2e       	mov	r1, r26
    7006:	aa 1b       	sub	r26, r26
    7008:	bb 1b       	sub	r27, r27
    700a:	fd 01       	movw	r30, r26
    700c:	0d c0       	rjmp	.+26     	; 0x7028 <__udivmodsi4_ep>

0000700e <__udivmodsi4_loop>:
    700e:	aa 1f       	adc	r26, r26
    7010:	bb 1f       	adc	r27, r27
    7012:	ee 1f       	adc	r30, r30
    7014:	ff 1f       	adc	r31, r31
    7016:	a2 17       	cp	r26, r18
    7018:	b3 07       	cpc	r27, r19
    701a:	e4 07       	cpc	r30, r20
    701c:	f5 07       	cpc	r31, r21
    701e:	20 f0       	brcs	.+8      	; 0x7028 <__udivmodsi4_ep>
    7020:	a2 1b       	sub	r26, r18
    7022:	b3 0b       	sbc	r27, r19
    7024:	e4 0b       	sbc	r30, r20
    7026:	f5 0b       	sbc	r31, r21

00007028 <__udivmodsi4_ep>:
    7028:	66 1f       	adc	r22, r22
    702a:	77 1f       	adc	r23, r23
    702c:	88 1f       	adc	r24, r24
    702e:	99 1f       	adc	r25, r25
    7030:	1a 94       	dec	r1
    7032:	69 f7       	brne	.-38     	; 0x700e <__udivmodsi4_loop>
    7034:	60 95       	com	r22
    7036:	70 95       	com	r23
    7038:	80 95       	com	r24
    703a:	90 95       	com	r25
    703c:	9b 01       	movw	r18, r22
    703e:	ac 01       	movw	r20, r24
    7040:	bd 01       	movw	r22, r26
    7042:	cf 01       	movw	r24, r30
    7044:	08 95       	ret

00007046 <__divmodsi4>:
    7046:	97 fb       	bst	r25, 7
    7048:	09 2e       	mov	r0, r25
    704a:	05 26       	eor	r0, r21
    704c:	0e d0       	rcall	.+28     	; 0x706a <__divmodsi4_neg1>
    704e:	57 fd       	sbrc	r21, 7
    7050:	04 d0       	rcall	.+8      	; 0x705a <__divmodsi4_neg2>
    7052:	d7 df       	rcall	.-82     	; 0x7002 <__udivmodsi4>
    7054:	0a d0       	rcall	.+20     	; 0x706a <__divmodsi4_neg1>
    7056:	00 1c       	adc	r0, r0
    7058:	38 f4       	brcc	.+14     	; 0x7068 <__divmodsi4_exit>

0000705a <__divmodsi4_neg2>:
    705a:	50 95       	com	r21
    705c:	40 95       	com	r20
    705e:	30 95       	com	r19
    7060:	21 95       	neg	r18
    7062:	3f 4f       	sbci	r19, 0xFF	; 255
    7064:	4f 4f       	sbci	r20, 0xFF	; 255
    7066:	5f 4f       	sbci	r21, 0xFF	; 255

00007068 <__divmodsi4_exit>:
    7068:	08 95       	ret

0000706a <__divmodsi4_neg1>:
    706a:	f6 f7       	brtc	.-4      	; 0x7068 <__divmodsi4_exit>
    706c:	90 95       	com	r25
    706e:	80 95       	com	r24
    7070:	70 95       	com	r23
    7072:	61 95       	neg	r22
    7074:	7f 4f       	sbci	r23, 0xFF	; 255
    7076:	8f 4f       	sbci	r24, 0xFF	; 255
    7078:	9f 4f       	sbci	r25, 0xFF	; 255
    707a:	08 95       	ret

0000707c <__prologue_saves__>:
    707c:	2f 92       	push	r2
    707e:	3f 92       	push	r3
    7080:	4f 92       	push	r4
    7082:	5f 92       	push	r5
    7084:	6f 92       	push	r6
    7086:	7f 92       	push	r7
    7088:	8f 92       	push	r8
    708a:	9f 92       	push	r9
    708c:	af 92       	push	r10
    708e:	bf 92       	push	r11
    7090:	cf 92       	push	r12
    7092:	df 92       	push	r13
    7094:	ef 92       	push	r14
    7096:	ff 92       	push	r15
    7098:	0f 93       	push	r16
    709a:	1f 93       	push	r17
    709c:	cf 93       	push	r28
    709e:	df 93       	push	r29
    70a0:	cd b7       	in	r28, 0x3d	; 61
    70a2:	de b7       	in	r29, 0x3e	; 62
    70a4:	ca 1b       	sub	r28, r26
    70a6:	db 0b       	sbc	r29, r27
    70a8:	0f b6       	in	r0, 0x3f	; 63
    70aa:	f8 94       	cli
    70ac:	de bf       	out	0x3e, r29	; 62
    70ae:	0f be       	out	0x3f, r0	; 63
    70b0:	cd bf       	out	0x3d, r28	; 61
    70b2:	09 94       	ijmp

000070b4 <__epilogue_restores__>:
    70b4:	2a 88       	ldd	r2, Y+18	; 0x12
    70b6:	39 88       	ldd	r3, Y+17	; 0x11
    70b8:	48 88       	ldd	r4, Y+16	; 0x10
    70ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    70bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    70be:	7d 84       	ldd	r7, Y+13	; 0x0d
    70c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    70c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    70c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    70c6:	b9 84       	ldd	r11, Y+9	; 0x09
    70c8:	c8 84       	ldd	r12, Y+8	; 0x08
    70ca:	df 80       	ldd	r13, Y+7	; 0x07
    70cc:	ee 80       	ldd	r14, Y+6	; 0x06
    70ce:	fd 80       	ldd	r15, Y+5	; 0x05
    70d0:	0c 81       	ldd	r16, Y+4	; 0x04
    70d2:	1b 81       	ldd	r17, Y+3	; 0x03
    70d4:	aa 81       	ldd	r26, Y+2	; 0x02
    70d6:	b9 81       	ldd	r27, Y+1	; 0x01
    70d8:	ce 0f       	add	r28, r30
    70da:	d1 1d       	adc	r29, r1
    70dc:	0f b6       	in	r0, 0x3f	; 63
    70de:	f8 94       	cli
    70e0:	de bf       	out	0x3e, r29	; 62
    70e2:	0f be       	out	0x3f, r0	; 63
    70e4:	cd bf       	out	0x3d, r28	; 61
    70e6:	ed 01       	movw	r28, r26
    70e8:	08 95       	ret

000070ea <strstr>:
    70ea:	fb 01       	movw	r30, r22
    70ec:	51 91       	ld	r21, Z+
    70ee:	55 23       	and	r21, r21
    70f0:	a9 f0       	breq	.+42     	; 0x711c <strstr+0x32>
    70f2:	bf 01       	movw	r22, r30
    70f4:	dc 01       	movw	r26, r24
    70f6:	4d 91       	ld	r20, X+
    70f8:	45 17       	cp	r20, r21
    70fa:	41 11       	cpse	r20, r1
    70fc:	e1 f7       	brne	.-8      	; 0x70f6 <strstr+0xc>
    70fe:	59 f4       	brne	.+22     	; 0x7116 <strstr+0x2c>
    7100:	cd 01       	movw	r24, r26
    7102:	01 90       	ld	r0, Z+
    7104:	00 20       	and	r0, r0
    7106:	49 f0       	breq	.+18     	; 0x711a <strstr+0x30>
    7108:	4d 91       	ld	r20, X+
    710a:	40 15       	cp	r20, r0
    710c:	41 11       	cpse	r20, r1
    710e:	c9 f3       	breq	.-14     	; 0x7102 <strstr+0x18>
    7110:	fb 01       	movw	r30, r22
    7112:	41 11       	cpse	r20, r1
    7114:	ef cf       	rjmp	.-34     	; 0x70f4 <strstr+0xa>
    7116:	81 e0       	ldi	r24, 0x01	; 1
    7118:	90 e0       	ldi	r25, 0x00	; 0
    711a:	01 97       	sbiw	r24, 0x01	; 1
    711c:	08 95       	ret

0000711e <itoa>:
    711e:	fb 01       	movw	r30, r22
    7120:	9f 01       	movw	r18, r30
    7122:	e8 94       	clt
    7124:	42 30       	cpi	r20, 0x02	; 2
    7126:	c4 f0       	brlt	.+48     	; 0x7158 <itoa+0x3a>
    7128:	45 32       	cpi	r20, 0x25	; 37
    712a:	b4 f4       	brge	.+44     	; 0x7158 <itoa+0x3a>
    712c:	4a 30       	cpi	r20, 0x0A	; 10
    712e:	29 f4       	brne	.+10     	; 0x713a <itoa+0x1c>
    7130:	97 fb       	bst	r25, 7
    7132:	1e f4       	brtc	.+6      	; 0x713a <itoa+0x1c>
    7134:	90 95       	com	r25
    7136:	81 95       	neg	r24
    7138:	9f 4f       	sbci	r25, 0xFF	; 255
    713a:	64 2f       	mov	r22, r20
    713c:	77 27       	eor	r23, r23
    713e:	0e 94 ed 37 	call	0x6fda	; 0x6fda <__udivmodhi4>
    7142:	80 5d       	subi	r24, 0xD0	; 208
    7144:	8a 33       	cpi	r24, 0x3A	; 58
    7146:	0c f0       	brlt	.+2      	; 0x714a <itoa+0x2c>
    7148:	89 5d       	subi	r24, 0xD9	; 217
    714a:	81 93       	st	Z+, r24
    714c:	cb 01       	movw	r24, r22
    714e:	00 97       	sbiw	r24, 0x00	; 0
    7150:	a1 f7       	brne	.-24     	; 0x713a <itoa+0x1c>
    7152:	16 f4       	brtc	.+4      	; 0x7158 <itoa+0x3a>
    7154:	5d e2       	ldi	r21, 0x2D	; 45
    7156:	51 93       	st	Z+, r21
    7158:	10 82       	st	Z, r1
    715a:	c9 01       	movw	r24, r18
    715c:	0c 94 c7 3a 	jmp	0x758e	; 0x758e <strrev>

00007160 <sprintf>:
    7160:	ae e0       	ldi	r26, 0x0E	; 14
    7162:	b0 e0       	ldi	r27, 0x00	; 0
    7164:	e6 eb       	ldi	r30, 0xB6	; 182
    7166:	f8 e3       	ldi	r31, 0x38	; 56
    7168:	0c 94 4c 38 	jmp	0x7098	; 0x7098 <__prologue_saves__+0x1c>
    716c:	0d 89       	ldd	r16, Y+21	; 0x15
    716e:	1e 89       	ldd	r17, Y+22	; 0x16
    7170:	86 e0       	ldi	r24, 0x06	; 6
    7172:	8c 83       	std	Y+4, r24	; 0x04
    7174:	1a 83       	std	Y+2, r17	; 0x02
    7176:	09 83       	std	Y+1, r16	; 0x01
    7178:	8f ef       	ldi	r24, 0xFF	; 255
    717a:	9f e7       	ldi	r25, 0x7F	; 127
    717c:	9e 83       	std	Y+6, r25	; 0x06
    717e:	8d 83       	std	Y+5, r24	; 0x05
    7180:	9e 01       	movw	r18, r28
    7182:	27 5e       	subi	r18, 0xE7	; 231
    7184:	3f 4f       	sbci	r19, 0xFF	; 255
    7186:	ce 01       	movw	r24, r28
    7188:	01 96       	adiw	r24, 0x01	; 1
    718a:	6f 89       	ldd	r22, Y+23	; 0x17
    718c:	78 8d       	ldd	r23, Y+24	; 0x18
    718e:	a9 01       	movw	r20, r18
    7190:	0e 94 d4 38 	call	0x71a8	; 0x71a8 <vfprintf>
    7194:	2f 81       	ldd	r18, Y+7	; 0x07
    7196:	38 85       	ldd	r19, Y+8	; 0x08
    7198:	02 0f       	add	r16, r18
    719a:	13 1f       	adc	r17, r19
    719c:	f8 01       	movw	r30, r16
    719e:	10 82       	st	Z, r1
    71a0:	2e 96       	adiw	r28, 0x0e	; 14
    71a2:	e4 e0       	ldi	r30, 0x04	; 4
    71a4:	0c 94 68 38 	jmp	0x70d0	; 0x70d0 <__epilogue_restores__+0x1c>

000071a8 <vfprintf>:
    71a8:	ab e0       	ldi	r26, 0x0B	; 11
    71aa:	b0 e0       	ldi	r27, 0x00	; 0
    71ac:	ea ed       	ldi	r30, 0xDA	; 218
    71ae:	f8 e3       	ldi	r31, 0x38	; 56
    71b0:	0c 94 3e 38 	jmp	0x707c	; 0x707c <__prologue_saves__>
    71b4:	3c 01       	movw	r6, r24
    71b6:	2b 01       	movw	r4, r22
    71b8:	5a 01       	movw	r10, r20
    71ba:	fc 01       	movw	r30, r24
    71bc:	17 82       	std	Z+7, r1	; 0x07
    71be:	16 82       	std	Z+6, r1	; 0x06
    71c0:	83 81       	ldd	r24, Z+3	; 0x03
    71c2:	81 fd       	sbrc	r24, 1
    71c4:	03 c0       	rjmp	.+6      	; 0x71cc <vfprintf+0x24>
    71c6:	6f ef       	ldi	r22, 0xFF	; 255
    71c8:	7f ef       	ldi	r23, 0xFF	; 255
    71ca:	c6 c1       	rjmp	.+908    	; 0x7558 <vfprintf+0x3b0>
    71cc:	9a e0       	ldi	r25, 0x0A	; 10
    71ce:	89 2e       	mov	r8, r25
    71d0:	1e 01       	movw	r2, r28
    71d2:	08 94       	sec
    71d4:	21 1c       	adc	r2, r1
    71d6:	31 1c       	adc	r3, r1
    71d8:	f3 01       	movw	r30, r6
    71da:	23 81       	ldd	r18, Z+3	; 0x03
    71dc:	f2 01       	movw	r30, r4
    71de:	23 fd       	sbrc	r18, 3
    71e0:	85 91       	lpm	r24, Z+
    71e2:	23 ff       	sbrs	r18, 3
    71e4:	81 91       	ld	r24, Z+
    71e6:	2f 01       	movw	r4, r30
    71e8:	88 23       	and	r24, r24
    71ea:	09 f4       	brne	.+2      	; 0x71ee <vfprintf+0x46>
    71ec:	b2 c1       	rjmp	.+868    	; 0x7552 <vfprintf+0x3aa>
    71ee:	85 32       	cpi	r24, 0x25	; 37
    71f0:	39 f4       	brne	.+14     	; 0x7200 <vfprintf+0x58>
    71f2:	23 fd       	sbrc	r18, 3
    71f4:	85 91       	lpm	r24, Z+
    71f6:	23 ff       	sbrs	r18, 3
    71f8:	81 91       	ld	r24, Z+
    71fa:	2f 01       	movw	r4, r30
    71fc:	85 32       	cpi	r24, 0x25	; 37
    71fe:	29 f4       	brne	.+10     	; 0x720a <vfprintf+0x62>
    7200:	90 e0       	ldi	r25, 0x00	; 0
    7202:	b3 01       	movw	r22, r6
    7204:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <fputc>
    7208:	e7 cf       	rjmp	.-50     	; 0x71d8 <vfprintf+0x30>
    720a:	98 2f       	mov	r25, r24
    720c:	ff 24       	eor	r15, r15
    720e:	ee 24       	eor	r14, r14
    7210:	99 24       	eor	r9, r9
    7212:	ff e1       	ldi	r31, 0x1F	; 31
    7214:	ff 15       	cp	r31, r15
    7216:	d0 f0       	brcs	.+52     	; 0x724c <vfprintf+0xa4>
    7218:	9b 32       	cpi	r25, 0x2B	; 43
    721a:	69 f0       	breq	.+26     	; 0x7236 <vfprintf+0x8e>
    721c:	9c 32       	cpi	r25, 0x2C	; 44
    721e:	28 f4       	brcc	.+10     	; 0x722a <vfprintf+0x82>
    7220:	90 32       	cpi	r25, 0x20	; 32
    7222:	59 f0       	breq	.+22     	; 0x723a <vfprintf+0x92>
    7224:	93 32       	cpi	r25, 0x23	; 35
    7226:	91 f4       	brne	.+36     	; 0x724c <vfprintf+0xa4>
    7228:	0e c0       	rjmp	.+28     	; 0x7246 <vfprintf+0x9e>
    722a:	9d 32       	cpi	r25, 0x2D	; 45
    722c:	49 f0       	breq	.+18     	; 0x7240 <vfprintf+0x98>
    722e:	90 33       	cpi	r25, 0x30	; 48
    7230:	69 f4       	brne	.+26     	; 0x724c <vfprintf+0xa4>
    7232:	41 e0       	ldi	r20, 0x01	; 1
    7234:	24 c0       	rjmp	.+72     	; 0x727e <vfprintf+0xd6>
    7236:	52 e0       	ldi	r21, 0x02	; 2
    7238:	f5 2a       	or	r15, r21
    723a:	84 e0       	ldi	r24, 0x04	; 4
    723c:	f8 2a       	or	r15, r24
    723e:	28 c0       	rjmp	.+80     	; 0x7290 <vfprintf+0xe8>
    7240:	98 e0       	ldi	r25, 0x08	; 8
    7242:	f9 2a       	or	r15, r25
    7244:	25 c0       	rjmp	.+74     	; 0x7290 <vfprintf+0xe8>
    7246:	e0 e1       	ldi	r30, 0x10	; 16
    7248:	fe 2a       	or	r15, r30
    724a:	22 c0       	rjmp	.+68     	; 0x7290 <vfprintf+0xe8>
    724c:	f7 fc       	sbrc	r15, 7
    724e:	29 c0       	rjmp	.+82     	; 0x72a2 <vfprintf+0xfa>
    7250:	89 2f       	mov	r24, r25
    7252:	80 53       	subi	r24, 0x30	; 48
    7254:	8a 30       	cpi	r24, 0x0A	; 10
    7256:	70 f4       	brcc	.+28     	; 0x7274 <vfprintf+0xcc>
    7258:	f6 fe       	sbrs	r15, 6
    725a:	05 c0       	rjmp	.+10     	; 0x7266 <vfprintf+0xbe>
    725c:	98 9c       	mul	r9, r8
    725e:	90 2c       	mov	r9, r0
    7260:	11 24       	eor	r1, r1
    7262:	98 0e       	add	r9, r24
    7264:	15 c0       	rjmp	.+42     	; 0x7290 <vfprintf+0xe8>
    7266:	e8 9c       	mul	r14, r8
    7268:	e0 2c       	mov	r14, r0
    726a:	11 24       	eor	r1, r1
    726c:	e8 0e       	add	r14, r24
    726e:	f0 e2       	ldi	r31, 0x20	; 32
    7270:	ff 2a       	or	r15, r31
    7272:	0e c0       	rjmp	.+28     	; 0x7290 <vfprintf+0xe8>
    7274:	9e 32       	cpi	r25, 0x2E	; 46
    7276:	29 f4       	brne	.+10     	; 0x7282 <vfprintf+0xda>
    7278:	f6 fc       	sbrc	r15, 6
    727a:	6b c1       	rjmp	.+726    	; 0x7552 <vfprintf+0x3aa>
    727c:	40 e4       	ldi	r20, 0x40	; 64
    727e:	f4 2a       	or	r15, r20
    7280:	07 c0       	rjmp	.+14     	; 0x7290 <vfprintf+0xe8>
    7282:	9c 36       	cpi	r25, 0x6C	; 108
    7284:	19 f4       	brne	.+6      	; 0x728c <vfprintf+0xe4>
    7286:	50 e8       	ldi	r21, 0x80	; 128
    7288:	f5 2a       	or	r15, r21
    728a:	02 c0       	rjmp	.+4      	; 0x7290 <vfprintf+0xe8>
    728c:	98 36       	cpi	r25, 0x68	; 104
    728e:	49 f4       	brne	.+18     	; 0x72a2 <vfprintf+0xfa>
    7290:	f2 01       	movw	r30, r4
    7292:	23 fd       	sbrc	r18, 3
    7294:	95 91       	lpm	r25, Z+
    7296:	23 ff       	sbrs	r18, 3
    7298:	91 91       	ld	r25, Z+
    729a:	2f 01       	movw	r4, r30
    729c:	99 23       	and	r25, r25
    729e:	09 f0       	breq	.+2      	; 0x72a2 <vfprintf+0xfa>
    72a0:	b8 cf       	rjmp	.-144    	; 0x7212 <vfprintf+0x6a>
    72a2:	89 2f       	mov	r24, r25
    72a4:	85 54       	subi	r24, 0x45	; 69
    72a6:	83 30       	cpi	r24, 0x03	; 3
    72a8:	18 f0       	brcs	.+6      	; 0x72b0 <vfprintf+0x108>
    72aa:	80 52       	subi	r24, 0x20	; 32
    72ac:	83 30       	cpi	r24, 0x03	; 3
    72ae:	38 f4       	brcc	.+14     	; 0x72be <vfprintf+0x116>
    72b0:	44 e0       	ldi	r20, 0x04	; 4
    72b2:	50 e0       	ldi	r21, 0x00	; 0
    72b4:	a4 0e       	add	r10, r20
    72b6:	b5 1e       	adc	r11, r21
    72b8:	5f e3       	ldi	r21, 0x3F	; 63
    72ba:	59 83       	std	Y+1, r21	; 0x01
    72bc:	0f c0       	rjmp	.+30     	; 0x72dc <vfprintf+0x134>
    72be:	93 36       	cpi	r25, 0x63	; 99
    72c0:	31 f0       	breq	.+12     	; 0x72ce <vfprintf+0x126>
    72c2:	93 37       	cpi	r25, 0x73	; 115
    72c4:	79 f0       	breq	.+30     	; 0x72e4 <vfprintf+0x13c>
    72c6:	93 35       	cpi	r25, 0x53	; 83
    72c8:	09 f0       	breq	.+2      	; 0x72cc <vfprintf+0x124>
    72ca:	56 c0       	rjmp	.+172    	; 0x7378 <vfprintf+0x1d0>
    72cc:	20 c0       	rjmp	.+64     	; 0x730e <vfprintf+0x166>
    72ce:	f5 01       	movw	r30, r10
    72d0:	80 81       	ld	r24, Z
    72d2:	89 83       	std	Y+1, r24	; 0x01
    72d4:	42 e0       	ldi	r20, 0x02	; 2
    72d6:	50 e0       	ldi	r21, 0x00	; 0
    72d8:	a4 0e       	add	r10, r20
    72da:	b5 1e       	adc	r11, r21
    72dc:	61 01       	movw	r12, r2
    72de:	01 e0       	ldi	r16, 0x01	; 1
    72e0:	10 e0       	ldi	r17, 0x00	; 0
    72e2:	12 c0       	rjmp	.+36     	; 0x7308 <vfprintf+0x160>
    72e4:	f5 01       	movw	r30, r10
    72e6:	c0 80       	ld	r12, Z
    72e8:	d1 80       	ldd	r13, Z+1	; 0x01
    72ea:	f6 fc       	sbrc	r15, 6
    72ec:	03 c0       	rjmp	.+6      	; 0x72f4 <vfprintf+0x14c>
    72ee:	6f ef       	ldi	r22, 0xFF	; 255
    72f0:	7f ef       	ldi	r23, 0xFF	; 255
    72f2:	02 c0       	rjmp	.+4      	; 0x72f8 <vfprintf+0x150>
    72f4:	69 2d       	mov	r22, r9
    72f6:	70 e0       	ldi	r23, 0x00	; 0
    72f8:	42 e0       	ldi	r20, 0x02	; 2
    72fa:	50 e0       	ldi	r21, 0x00	; 0
    72fc:	a4 0e       	add	r10, r20
    72fe:	b5 1e       	adc	r11, r21
    7300:	c6 01       	movw	r24, r12
    7302:	0e 94 bc 3a 	call	0x7578	; 0x7578 <strnlen>
    7306:	8c 01       	movw	r16, r24
    7308:	5f e7       	ldi	r21, 0x7F	; 127
    730a:	f5 22       	and	r15, r21
    730c:	14 c0       	rjmp	.+40     	; 0x7336 <vfprintf+0x18e>
    730e:	f5 01       	movw	r30, r10
    7310:	c0 80       	ld	r12, Z
    7312:	d1 80       	ldd	r13, Z+1	; 0x01
    7314:	f6 fc       	sbrc	r15, 6
    7316:	03 c0       	rjmp	.+6      	; 0x731e <vfprintf+0x176>
    7318:	6f ef       	ldi	r22, 0xFF	; 255
    731a:	7f ef       	ldi	r23, 0xFF	; 255
    731c:	02 c0       	rjmp	.+4      	; 0x7322 <vfprintf+0x17a>
    731e:	69 2d       	mov	r22, r9
    7320:	70 e0       	ldi	r23, 0x00	; 0
    7322:	42 e0       	ldi	r20, 0x02	; 2
    7324:	50 e0       	ldi	r21, 0x00	; 0
    7326:	a4 0e       	add	r10, r20
    7328:	b5 1e       	adc	r11, r21
    732a:	c6 01       	movw	r24, r12
    732c:	0e 94 b1 3a 	call	0x7562	; 0x7562 <strnlen_P>
    7330:	8c 01       	movw	r16, r24
    7332:	50 e8       	ldi	r21, 0x80	; 128
    7334:	f5 2a       	or	r15, r21
    7336:	f3 fe       	sbrs	r15, 3
    7338:	07 c0       	rjmp	.+14     	; 0x7348 <vfprintf+0x1a0>
    733a:	1a c0       	rjmp	.+52     	; 0x7370 <vfprintf+0x1c8>
    733c:	80 e2       	ldi	r24, 0x20	; 32
    733e:	90 e0       	ldi	r25, 0x00	; 0
    7340:	b3 01       	movw	r22, r6
    7342:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <fputc>
    7346:	ea 94       	dec	r14
    7348:	8e 2d       	mov	r24, r14
    734a:	90 e0       	ldi	r25, 0x00	; 0
    734c:	08 17       	cp	r16, r24
    734e:	19 07       	cpc	r17, r25
    7350:	a8 f3       	brcs	.-22     	; 0x733c <vfprintf+0x194>
    7352:	0e c0       	rjmp	.+28     	; 0x7370 <vfprintf+0x1c8>
    7354:	f6 01       	movw	r30, r12
    7356:	f7 fc       	sbrc	r15, 7
    7358:	85 91       	lpm	r24, Z+
    735a:	f7 fe       	sbrs	r15, 7
    735c:	81 91       	ld	r24, Z+
    735e:	6f 01       	movw	r12, r30
    7360:	90 e0       	ldi	r25, 0x00	; 0
    7362:	b3 01       	movw	r22, r6
    7364:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <fputc>
    7368:	e1 10       	cpse	r14, r1
    736a:	ea 94       	dec	r14
    736c:	01 50       	subi	r16, 0x01	; 1
    736e:	10 40       	sbci	r17, 0x00	; 0
    7370:	01 15       	cp	r16, r1
    7372:	11 05       	cpc	r17, r1
    7374:	79 f7       	brne	.-34     	; 0x7354 <vfprintf+0x1ac>
    7376:	ea c0       	rjmp	.+468    	; 0x754c <vfprintf+0x3a4>
    7378:	94 36       	cpi	r25, 0x64	; 100
    737a:	11 f0       	breq	.+4      	; 0x7380 <vfprintf+0x1d8>
    737c:	99 36       	cpi	r25, 0x69	; 105
    737e:	69 f5       	brne	.+90     	; 0x73da <vfprintf+0x232>
    7380:	f7 fe       	sbrs	r15, 7
    7382:	08 c0       	rjmp	.+16     	; 0x7394 <vfprintf+0x1ec>
    7384:	f5 01       	movw	r30, r10
    7386:	20 81       	ld	r18, Z
    7388:	31 81       	ldd	r19, Z+1	; 0x01
    738a:	42 81       	ldd	r20, Z+2	; 0x02
    738c:	53 81       	ldd	r21, Z+3	; 0x03
    738e:	84 e0       	ldi	r24, 0x04	; 4
    7390:	90 e0       	ldi	r25, 0x00	; 0
    7392:	0a c0       	rjmp	.+20     	; 0x73a8 <vfprintf+0x200>
    7394:	f5 01       	movw	r30, r10
    7396:	80 81       	ld	r24, Z
    7398:	91 81       	ldd	r25, Z+1	; 0x01
    739a:	9c 01       	movw	r18, r24
    739c:	44 27       	eor	r20, r20
    739e:	37 fd       	sbrc	r19, 7
    73a0:	40 95       	com	r20
    73a2:	54 2f       	mov	r21, r20
    73a4:	82 e0       	ldi	r24, 0x02	; 2
    73a6:	90 e0       	ldi	r25, 0x00	; 0
    73a8:	a8 0e       	add	r10, r24
    73aa:	b9 1e       	adc	r11, r25
    73ac:	9f e6       	ldi	r25, 0x6F	; 111
    73ae:	f9 22       	and	r15, r25
    73b0:	57 ff       	sbrs	r21, 7
    73b2:	09 c0       	rjmp	.+18     	; 0x73c6 <vfprintf+0x21e>
    73b4:	50 95       	com	r21
    73b6:	40 95       	com	r20
    73b8:	30 95       	com	r19
    73ba:	21 95       	neg	r18
    73bc:	3f 4f       	sbci	r19, 0xFF	; 255
    73be:	4f 4f       	sbci	r20, 0xFF	; 255
    73c0:	5f 4f       	sbci	r21, 0xFF	; 255
    73c2:	e0 e8       	ldi	r30, 0x80	; 128
    73c4:	fe 2a       	or	r15, r30
    73c6:	ca 01       	movw	r24, r20
    73c8:	b9 01       	movw	r22, r18
    73ca:	a1 01       	movw	r20, r2
    73cc:	2a e0       	ldi	r18, 0x0A	; 10
    73ce:	30 e0       	ldi	r19, 0x00	; 0
    73d0:	0e 94 03 3b 	call	0x7606	; 0x7606 <__ultoa_invert>
    73d4:	d8 2e       	mov	r13, r24
    73d6:	d2 18       	sub	r13, r2
    73d8:	40 c0       	rjmp	.+128    	; 0x745a <vfprintf+0x2b2>
    73da:	95 37       	cpi	r25, 0x75	; 117
    73dc:	29 f4       	brne	.+10     	; 0x73e8 <vfprintf+0x240>
    73de:	1f 2d       	mov	r17, r15
    73e0:	1f 7e       	andi	r17, 0xEF	; 239
    73e2:	2a e0       	ldi	r18, 0x0A	; 10
    73e4:	30 e0       	ldi	r19, 0x00	; 0
    73e6:	1d c0       	rjmp	.+58     	; 0x7422 <vfprintf+0x27a>
    73e8:	1f 2d       	mov	r17, r15
    73ea:	19 7f       	andi	r17, 0xF9	; 249
    73ec:	9f 36       	cpi	r25, 0x6F	; 111
    73ee:	61 f0       	breq	.+24     	; 0x7408 <vfprintf+0x260>
    73f0:	90 37       	cpi	r25, 0x70	; 112
    73f2:	20 f4       	brcc	.+8      	; 0x73fc <vfprintf+0x254>
    73f4:	98 35       	cpi	r25, 0x58	; 88
    73f6:	09 f0       	breq	.+2      	; 0x73fa <vfprintf+0x252>
    73f8:	ac c0       	rjmp	.+344    	; 0x7552 <vfprintf+0x3aa>
    73fa:	0f c0       	rjmp	.+30     	; 0x741a <vfprintf+0x272>
    73fc:	90 37       	cpi	r25, 0x70	; 112
    73fe:	39 f0       	breq	.+14     	; 0x740e <vfprintf+0x266>
    7400:	98 37       	cpi	r25, 0x78	; 120
    7402:	09 f0       	breq	.+2      	; 0x7406 <vfprintf+0x25e>
    7404:	a6 c0       	rjmp	.+332    	; 0x7552 <vfprintf+0x3aa>
    7406:	04 c0       	rjmp	.+8      	; 0x7410 <vfprintf+0x268>
    7408:	28 e0       	ldi	r18, 0x08	; 8
    740a:	30 e0       	ldi	r19, 0x00	; 0
    740c:	0a c0       	rjmp	.+20     	; 0x7422 <vfprintf+0x27a>
    740e:	10 61       	ori	r17, 0x10	; 16
    7410:	14 fd       	sbrc	r17, 4
    7412:	14 60       	ori	r17, 0x04	; 4
    7414:	20 e1       	ldi	r18, 0x10	; 16
    7416:	30 e0       	ldi	r19, 0x00	; 0
    7418:	04 c0       	rjmp	.+8      	; 0x7422 <vfprintf+0x27a>
    741a:	14 fd       	sbrc	r17, 4
    741c:	16 60       	ori	r17, 0x06	; 6
    741e:	20 e1       	ldi	r18, 0x10	; 16
    7420:	32 e0       	ldi	r19, 0x02	; 2
    7422:	17 ff       	sbrs	r17, 7
    7424:	08 c0       	rjmp	.+16     	; 0x7436 <vfprintf+0x28e>
    7426:	f5 01       	movw	r30, r10
    7428:	60 81       	ld	r22, Z
    742a:	71 81       	ldd	r23, Z+1	; 0x01
    742c:	82 81       	ldd	r24, Z+2	; 0x02
    742e:	93 81       	ldd	r25, Z+3	; 0x03
    7430:	44 e0       	ldi	r20, 0x04	; 4
    7432:	50 e0       	ldi	r21, 0x00	; 0
    7434:	08 c0       	rjmp	.+16     	; 0x7446 <vfprintf+0x29e>
    7436:	f5 01       	movw	r30, r10
    7438:	80 81       	ld	r24, Z
    743a:	91 81       	ldd	r25, Z+1	; 0x01
    743c:	bc 01       	movw	r22, r24
    743e:	80 e0       	ldi	r24, 0x00	; 0
    7440:	90 e0       	ldi	r25, 0x00	; 0
    7442:	42 e0       	ldi	r20, 0x02	; 2
    7444:	50 e0       	ldi	r21, 0x00	; 0
    7446:	a4 0e       	add	r10, r20
    7448:	b5 1e       	adc	r11, r21
    744a:	a1 01       	movw	r20, r2
    744c:	0e 94 03 3b 	call	0x7606	; 0x7606 <__ultoa_invert>
    7450:	d8 2e       	mov	r13, r24
    7452:	d2 18       	sub	r13, r2
    7454:	8f e7       	ldi	r24, 0x7F	; 127
    7456:	f8 2e       	mov	r15, r24
    7458:	f1 22       	and	r15, r17
    745a:	f6 fe       	sbrs	r15, 6
    745c:	0b c0       	rjmp	.+22     	; 0x7474 <vfprintf+0x2cc>
    745e:	5e ef       	ldi	r21, 0xFE	; 254
    7460:	f5 22       	and	r15, r21
    7462:	d9 14       	cp	r13, r9
    7464:	38 f4       	brcc	.+14     	; 0x7474 <vfprintf+0x2cc>
    7466:	f4 fe       	sbrs	r15, 4
    7468:	07 c0       	rjmp	.+14     	; 0x7478 <vfprintf+0x2d0>
    746a:	f2 fc       	sbrc	r15, 2
    746c:	05 c0       	rjmp	.+10     	; 0x7478 <vfprintf+0x2d0>
    746e:	8f ee       	ldi	r24, 0xEF	; 239
    7470:	f8 22       	and	r15, r24
    7472:	02 c0       	rjmp	.+4      	; 0x7478 <vfprintf+0x2d0>
    7474:	1d 2d       	mov	r17, r13
    7476:	01 c0       	rjmp	.+2      	; 0x747a <vfprintf+0x2d2>
    7478:	19 2d       	mov	r17, r9
    747a:	f4 fe       	sbrs	r15, 4
    747c:	0d c0       	rjmp	.+26     	; 0x7498 <vfprintf+0x2f0>
    747e:	fe 01       	movw	r30, r28
    7480:	ed 0d       	add	r30, r13
    7482:	f1 1d       	adc	r31, r1
    7484:	80 81       	ld	r24, Z
    7486:	80 33       	cpi	r24, 0x30	; 48
    7488:	19 f4       	brne	.+6      	; 0x7490 <vfprintf+0x2e8>
    748a:	99 ee       	ldi	r25, 0xE9	; 233
    748c:	f9 22       	and	r15, r25
    748e:	08 c0       	rjmp	.+16     	; 0x74a0 <vfprintf+0x2f8>
    7490:	1f 5f       	subi	r17, 0xFF	; 255
    7492:	f2 fe       	sbrs	r15, 2
    7494:	05 c0       	rjmp	.+10     	; 0x74a0 <vfprintf+0x2f8>
    7496:	03 c0       	rjmp	.+6      	; 0x749e <vfprintf+0x2f6>
    7498:	8f 2d       	mov	r24, r15
    749a:	86 78       	andi	r24, 0x86	; 134
    749c:	09 f0       	breq	.+2      	; 0x74a0 <vfprintf+0x2f8>
    749e:	1f 5f       	subi	r17, 0xFF	; 255
    74a0:	0f 2d       	mov	r16, r15
    74a2:	f3 fc       	sbrc	r15, 3
    74a4:	14 c0       	rjmp	.+40     	; 0x74ce <vfprintf+0x326>
    74a6:	f0 fe       	sbrs	r15, 0
    74a8:	0f c0       	rjmp	.+30     	; 0x74c8 <vfprintf+0x320>
    74aa:	1e 15       	cp	r17, r14
    74ac:	10 f0       	brcs	.+4      	; 0x74b2 <vfprintf+0x30a>
    74ae:	9d 2c       	mov	r9, r13
    74b0:	0b c0       	rjmp	.+22     	; 0x74c8 <vfprintf+0x320>
    74b2:	9d 2c       	mov	r9, r13
    74b4:	9e 0c       	add	r9, r14
    74b6:	91 1a       	sub	r9, r17
    74b8:	1e 2d       	mov	r17, r14
    74ba:	06 c0       	rjmp	.+12     	; 0x74c8 <vfprintf+0x320>
    74bc:	80 e2       	ldi	r24, 0x20	; 32
    74be:	90 e0       	ldi	r25, 0x00	; 0
    74c0:	b3 01       	movw	r22, r6
    74c2:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <fputc>
    74c6:	1f 5f       	subi	r17, 0xFF	; 255
    74c8:	1e 15       	cp	r17, r14
    74ca:	c0 f3       	brcs	.-16     	; 0x74bc <vfprintf+0x314>
    74cc:	04 c0       	rjmp	.+8      	; 0x74d6 <vfprintf+0x32e>
    74ce:	1e 15       	cp	r17, r14
    74d0:	10 f4       	brcc	.+4      	; 0x74d6 <vfprintf+0x32e>
    74d2:	e1 1a       	sub	r14, r17
    74d4:	01 c0       	rjmp	.+2      	; 0x74d8 <vfprintf+0x330>
    74d6:	ee 24       	eor	r14, r14
    74d8:	04 ff       	sbrs	r16, 4
    74da:	0f c0       	rjmp	.+30     	; 0x74fa <vfprintf+0x352>
    74dc:	80 e3       	ldi	r24, 0x30	; 48
    74de:	90 e0       	ldi	r25, 0x00	; 0
    74e0:	b3 01       	movw	r22, r6
    74e2:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <fputc>
    74e6:	02 ff       	sbrs	r16, 2
    74e8:	1d c0       	rjmp	.+58     	; 0x7524 <vfprintf+0x37c>
    74ea:	01 fd       	sbrc	r16, 1
    74ec:	03 c0       	rjmp	.+6      	; 0x74f4 <vfprintf+0x34c>
    74ee:	88 e7       	ldi	r24, 0x78	; 120
    74f0:	90 e0       	ldi	r25, 0x00	; 0
    74f2:	0e c0       	rjmp	.+28     	; 0x7510 <vfprintf+0x368>
    74f4:	88 e5       	ldi	r24, 0x58	; 88
    74f6:	90 e0       	ldi	r25, 0x00	; 0
    74f8:	0b c0       	rjmp	.+22     	; 0x7510 <vfprintf+0x368>
    74fa:	80 2f       	mov	r24, r16
    74fc:	86 78       	andi	r24, 0x86	; 134
    74fe:	91 f0       	breq	.+36     	; 0x7524 <vfprintf+0x37c>
    7500:	01 ff       	sbrs	r16, 1
    7502:	02 c0       	rjmp	.+4      	; 0x7508 <vfprintf+0x360>
    7504:	8b e2       	ldi	r24, 0x2B	; 43
    7506:	01 c0       	rjmp	.+2      	; 0x750a <vfprintf+0x362>
    7508:	80 e2       	ldi	r24, 0x20	; 32
    750a:	f7 fc       	sbrc	r15, 7
    750c:	8d e2       	ldi	r24, 0x2D	; 45
    750e:	90 e0       	ldi	r25, 0x00	; 0
    7510:	b3 01       	movw	r22, r6
    7512:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <fputc>
    7516:	06 c0       	rjmp	.+12     	; 0x7524 <vfprintf+0x37c>
    7518:	80 e3       	ldi	r24, 0x30	; 48
    751a:	90 e0       	ldi	r25, 0x00	; 0
    751c:	b3 01       	movw	r22, r6
    751e:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <fputc>
    7522:	9a 94       	dec	r9
    7524:	d9 14       	cp	r13, r9
    7526:	c0 f3       	brcs	.-16     	; 0x7518 <vfprintf+0x370>
    7528:	da 94       	dec	r13
    752a:	f1 01       	movw	r30, r2
    752c:	ed 0d       	add	r30, r13
    752e:	f1 1d       	adc	r31, r1
    7530:	80 81       	ld	r24, Z
    7532:	90 e0       	ldi	r25, 0x00	; 0
    7534:	b3 01       	movw	r22, r6
    7536:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <fputc>
    753a:	dd 20       	and	r13, r13
    753c:	a9 f7       	brne	.-22     	; 0x7528 <vfprintf+0x380>
    753e:	06 c0       	rjmp	.+12     	; 0x754c <vfprintf+0x3a4>
    7540:	80 e2       	ldi	r24, 0x20	; 32
    7542:	90 e0       	ldi	r25, 0x00	; 0
    7544:	b3 01       	movw	r22, r6
    7546:	0e 94 d7 3a 	call	0x75ae	; 0x75ae <fputc>
    754a:	ea 94       	dec	r14
    754c:	ee 20       	and	r14, r14
    754e:	c1 f7       	brne	.-16     	; 0x7540 <vfprintf+0x398>
    7550:	43 ce       	rjmp	.-890    	; 0x71d8 <vfprintf+0x30>
    7552:	f3 01       	movw	r30, r6
    7554:	66 81       	ldd	r22, Z+6	; 0x06
    7556:	77 81       	ldd	r23, Z+7	; 0x07
    7558:	cb 01       	movw	r24, r22
    755a:	2b 96       	adiw	r28, 0x0b	; 11
    755c:	e2 e1       	ldi	r30, 0x12	; 18
    755e:	0c 94 5a 38 	jmp	0x70b4	; 0x70b4 <__epilogue_restores__>

00007562 <strnlen_P>:
    7562:	fc 01       	movw	r30, r24
    7564:	05 90       	lpm	r0, Z+
    7566:	61 50       	subi	r22, 0x01	; 1
    7568:	70 40       	sbci	r23, 0x00	; 0
    756a:	01 10       	cpse	r0, r1
    756c:	d8 f7       	brcc	.-10     	; 0x7564 <strnlen_P+0x2>
    756e:	80 95       	com	r24
    7570:	90 95       	com	r25
    7572:	8e 0f       	add	r24, r30
    7574:	9f 1f       	adc	r25, r31
    7576:	08 95       	ret

00007578 <strnlen>:
    7578:	fc 01       	movw	r30, r24
    757a:	61 50       	subi	r22, 0x01	; 1
    757c:	70 40       	sbci	r23, 0x00	; 0
    757e:	01 90       	ld	r0, Z+
    7580:	01 10       	cpse	r0, r1
    7582:	d8 f7       	brcc	.-10     	; 0x757a <strnlen+0x2>
    7584:	80 95       	com	r24
    7586:	90 95       	com	r25
    7588:	8e 0f       	add	r24, r30
    758a:	9f 1f       	adc	r25, r31
    758c:	08 95       	ret

0000758e <strrev>:
    758e:	dc 01       	movw	r26, r24
    7590:	fc 01       	movw	r30, r24
    7592:	67 2f       	mov	r22, r23
    7594:	71 91       	ld	r23, Z+
    7596:	77 23       	and	r23, r23
    7598:	e1 f7       	brne	.-8      	; 0x7592 <strrev+0x4>
    759a:	32 97       	sbiw	r30, 0x02	; 2
    759c:	04 c0       	rjmp	.+8      	; 0x75a6 <strrev+0x18>
    759e:	7c 91       	ld	r23, X
    75a0:	6d 93       	st	X+, r22
    75a2:	70 83       	st	Z, r23
    75a4:	62 91       	ld	r22, -Z
    75a6:	ae 17       	cp	r26, r30
    75a8:	bf 07       	cpc	r27, r31
    75aa:	c8 f3       	brcs	.-14     	; 0x759e <strrev+0x10>
    75ac:	08 95       	ret

000075ae <fputc>:
    75ae:	0f 93       	push	r16
    75b0:	1f 93       	push	r17
    75b2:	cf 93       	push	r28
    75b4:	df 93       	push	r29
    75b6:	8c 01       	movw	r16, r24
    75b8:	eb 01       	movw	r28, r22
    75ba:	8b 81       	ldd	r24, Y+3	; 0x03
    75bc:	81 ff       	sbrs	r24, 1
    75be:	1b c0       	rjmp	.+54     	; 0x75f6 <fputc+0x48>
    75c0:	82 ff       	sbrs	r24, 2
    75c2:	0d c0       	rjmp	.+26     	; 0x75de <fputc+0x30>
    75c4:	2e 81       	ldd	r18, Y+6	; 0x06
    75c6:	3f 81       	ldd	r19, Y+7	; 0x07
    75c8:	8c 81       	ldd	r24, Y+4	; 0x04
    75ca:	9d 81       	ldd	r25, Y+5	; 0x05
    75cc:	28 17       	cp	r18, r24
    75ce:	39 07       	cpc	r19, r25
    75d0:	64 f4       	brge	.+24     	; 0x75ea <fputc+0x3c>
    75d2:	e8 81       	ld	r30, Y
    75d4:	f9 81       	ldd	r31, Y+1	; 0x01
    75d6:	01 93       	st	Z+, r16
    75d8:	f9 83       	std	Y+1, r31	; 0x01
    75da:	e8 83       	st	Y, r30
    75dc:	06 c0       	rjmp	.+12     	; 0x75ea <fputc+0x3c>
    75de:	e8 85       	ldd	r30, Y+8	; 0x08
    75e0:	f9 85       	ldd	r31, Y+9	; 0x09
    75e2:	80 2f       	mov	r24, r16
    75e4:	09 95       	icall
    75e6:	89 2b       	or	r24, r25
    75e8:	31 f4       	brne	.+12     	; 0x75f6 <fputc+0x48>
    75ea:	8e 81       	ldd	r24, Y+6	; 0x06
    75ec:	9f 81       	ldd	r25, Y+7	; 0x07
    75ee:	01 96       	adiw	r24, 0x01	; 1
    75f0:	9f 83       	std	Y+7, r25	; 0x07
    75f2:	8e 83       	std	Y+6, r24	; 0x06
    75f4:	02 c0       	rjmp	.+4      	; 0x75fa <fputc+0x4c>
    75f6:	0f ef       	ldi	r16, 0xFF	; 255
    75f8:	1f ef       	ldi	r17, 0xFF	; 255
    75fa:	c8 01       	movw	r24, r16
    75fc:	df 91       	pop	r29
    75fe:	cf 91       	pop	r28
    7600:	1f 91       	pop	r17
    7602:	0f 91       	pop	r16
    7604:	08 95       	ret

00007606 <__ultoa_invert>:
    7606:	fa 01       	movw	r30, r20
    7608:	aa 27       	eor	r26, r26
    760a:	28 30       	cpi	r18, 0x08	; 8
    760c:	51 f1       	breq	.+84     	; 0x7662 <__ultoa_invert+0x5c>
    760e:	20 31       	cpi	r18, 0x10	; 16
    7610:	81 f1       	breq	.+96     	; 0x7672 <__ultoa_invert+0x6c>
    7612:	e8 94       	clt
    7614:	6f 93       	push	r22
    7616:	6e 7f       	andi	r22, 0xFE	; 254
    7618:	6e 5f       	subi	r22, 0xFE	; 254
    761a:	7f 4f       	sbci	r23, 0xFF	; 255
    761c:	8f 4f       	sbci	r24, 0xFF	; 255
    761e:	9f 4f       	sbci	r25, 0xFF	; 255
    7620:	af 4f       	sbci	r26, 0xFF	; 255
    7622:	b1 e0       	ldi	r27, 0x01	; 1
    7624:	3e d0       	rcall	.+124    	; 0x76a2 <__ultoa_invert+0x9c>
    7626:	b4 e0       	ldi	r27, 0x04	; 4
    7628:	3c d0       	rcall	.+120    	; 0x76a2 <__ultoa_invert+0x9c>
    762a:	67 0f       	add	r22, r23
    762c:	78 1f       	adc	r23, r24
    762e:	89 1f       	adc	r24, r25
    7630:	9a 1f       	adc	r25, r26
    7632:	a1 1d       	adc	r26, r1
    7634:	68 0f       	add	r22, r24
    7636:	79 1f       	adc	r23, r25
    7638:	8a 1f       	adc	r24, r26
    763a:	91 1d       	adc	r25, r1
    763c:	a1 1d       	adc	r26, r1
    763e:	6a 0f       	add	r22, r26
    7640:	71 1d       	adc	r23, r1
    7642:	81 1d       	adc	r24, r1
    7644:	91 1d       	adc	r25, r1
    7646:	a1 1d       	adc	r26, r1
    7648:	20 d0       	rcall	.+64     	; 0x768a <__ultoa_invert+0x84>
    764a:	09 f4       	brne	.+2      	; 0x764e <__ultoa_invert+0x48>
    764c:	68 94       	set
    764e:	3f 91       	pop	r19
    7650:	2a e0       	ldi	r18, 0x0A	; 10
    7652:	26 9f       	mul	r18, r22
    7654:	11 24       	eor	r1, r1
    7656:	30 19       	sub	r19, r0
    7658:	30 5d       	subi	r19, 0xD0	; 208
    765a:	31 93       	st	Z+, r19
    765c:	de f6       	brtc	.-74     	; 0x7614 <__ultoa_invert+0xe>
    765e:	cf 01       	movw	r24, r30
    7660:	08 95       	ret
    7662:	46 2f       	mov	r20, r22
    7664:	47 70       	andi	r20, 0x07	; 7
    7666:	40 5d       	subi	r20, 0xD0	; 208
    7668:	41 93       	st	Z+, r20
    766a:	b3 e0       	ldi	r27, 0x03	; 3
    766c:	0f d0       	rcall	.+30     	; 0x768c <__ultoa_invert+0x86>
    766e:	c9 f7       	brne	.-14     	; 0x7662 <__ultoa_invert+0x5c>
    7670:	f6 cf       	rjmp	.-20     	; 0x765e <__ultoa_invert+0x58>
    7672:	46 2f       	mov	r20, r22
    7674:	4f 70       	andi	r20, 0x0F	; 15
    7676:	40 5d       	subi	r20, 0xD0	; 208
    7678:	4a 33       	cpi	r20, 0x3A	; 58
    767a:	18 f0       	brcs	.+6      	; 0x7682 <__ultoa_invert+0x7c>
    767c:	49 5d       	subi	r20, 0xD9	; 217
    767e:	31 fd       	sbrc	r19, 1
    7680:	40 52       	subi	r20, 0x20	; 32
    7682:	41 93       	st	Z+, r20
    7684:	02 d0       	rcall	.+4      	; 0x768a <__ultoa_invert+0x84>
    7686:	a9 f7       	brne	.-22     	; 0x7672 <__ultoa_invert+0x6c>
    7688:	ea cf       	rjmp	.-44     	; 0x765e <__ultoa_invert+0x58>
    768a:	b4 e0       	ldi	r27, 0x04	; 4
    768c:	a6 95       	lsr	r26
    768e:	97 95       	ror	r25
    7690:	87 95       	ror	r24
    7692:	77 95       	ror	r23
    7694:	67 95       	ror	r22
    7696:	ba 95       	dec	r27
    7698:	c9 f7       	brne	.-14     	; 0x768c <__ultoa_invert+0x86>
    769a:	00 97       	sbiw	r24, 0x00	; 0
    769c:	61 05       	cpc	r22, r1
    769e:	71 05       	cpc	r23, r1
    76a0:	08 95       	ret
    76a2:	9b 01       	movw	r18, r22
    76a4:	ac 01       	movw	r20, r24
    76a6:	0a 2e       	mov	r0, r26
    76a8:	06 94       	lsr	r0
    76aa:	57 95       	ror	r21
    76ac:	47 95       	ror	r20
    76ae:	37 95       	ror	r19
    76b0:	27 95       	ror	r18
    76b2:	ba 95       	dec	r27
    76b4:	c9 f7       	brne	.-14     	; 0x76a8 <__ultoa_invert+0xa2>
    76b6:	62 0f       	add	r22, r18
    76b8:	73 1f       	adc	r23, r19
    76ba:	84 1f       	adc	r24, r20
    76bc:	95 1f       	adc	r25, r21
    76be:	a0 1d       	adc	r26, r0
    76c0:	08 95       	ret

000076c2 <_exit>:
    76c2:	f8 94       	cli

000076c4 <__stop_program>:
    76c4:	ff cf       	rjmp	.-2      	; 0x76c4 <__stop_program>
