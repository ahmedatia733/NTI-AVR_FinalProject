
NTI_FinalProject_ECU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000046ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000003de  00800060  000046ec  00004780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000d5  0080043e  0080043e  00004b5e  2**0
                  ALLOC
  3 .stab         00005064  00000000  00000000  00004b60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004472  00000000  00000000  00009bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0000e036  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  0000e1f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0000e406  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  00010a90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  00011f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0001321c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  000133fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  000136fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000140a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 b5 1e 	jmp	0x3d6a	; 0x3d6a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ee       	ldi	r30, 0xEC	; 236
      68:	f6 e4       	ldi	r31, 0x46	; 70
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 33       	cpi	r26, 0x3E	; 62
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	ae e3       	ldi	r26, 0x3E	; 62
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 31       	cpi	r26, 0x13	; 19
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <main>
      8a:	0c 94 74 23 	jmp	0x46e8	; 0x46e8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 82 20 	jmp	0x4104	; 0x4104 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e8       	ldi	r26, 0x8A	; 138
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9e 20 	jmp	0x413c	; 0x413c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8e 20 	jmp	0x411c	; 0x411c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8e 20 	jmp	0x411c	; 0x411c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 82 20 	jmp	0x4104	; 0x4104 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e8       	ldi	r24, 0x8A	; 138
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9e 20 	jmp	0x413c	; 0x413c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e8       	ldi	r22, 0x8A	; 138
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 a6 20 	jmp	0x414c	; 0x414c <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 8e 20 	jmp	0x411c	; 0x411c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 8e 20 	jmp	0x411c	; 0x411c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 8e 20 	jmp	0x411c	; 0x411c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 8e 20 	jmp	0x411c	; 0x411c <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 aa 20 	jmp	0x4154	; 0x4154 <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 92 20 	jmp	0x4124	; 0x4124 <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 ae 20 	jmp	0x415c	; 0x415c <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 8a 20 	jmp	0x4114	; 0x4114 <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 a6 20 	jmp	0x414c	; 0x414c <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	ee 56       	subi	r30, 0x6E	; 110
     b2a:	fe 4f       	sbci	r31, 0xFE	; 254
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <M_UART_void_UARTAvalepale>:

u8 RX_Counter_UART = 0; //a total count of characters in the buffer
u8 RX_Buffer_Overflow_UART; // This flag is set on USART Receiver
// buffer overflow

u8 M_UART_void_UARTAvalepale() {
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
	return RX_Counter_UART;
     e96:	80 91 40 04 	lds	r24, 0x0440
}
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <M_UART_void_UARTInit>:

void M_UART_void_UARTInit(S_UART_config_t UART_config) {
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <M_UART_void_UARTInit+0x6>
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <M_UART_void_UARTInit+0x8>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	69 83       	std	Y+1, r22	; 0x01
     eae:	7a 83       	std	Y+2, r23	; 0x02
     eb0:	8b 83       	std	Y+3, r24	; 0x03
     eb2:	9c 83       	std	Y+4, r25	; 0x04

	UCSRC_REG = 0b10000000;
     eb4:	e0 e4       	ldi	r30, 0x40	; 64
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 e8       	ldi	r24, 0x80	; 128
     eba:	80 83       	st	Z, r24
	UCSRB_REG = 0b00000000;
     ebc:	ea e2       	ldi	r30, 0x2A	; 42
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	10 82       	st	Z, r1

	UCSRC_REG |= UART_config.UART_wordLength;   // set word length
     ec2:	a0 e4       	ldi	r26, 0x40	; 64
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e0 e4       	ldi	r30, 0x40	; 64
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	90 81       	ld	r25, Z
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	89 2b       	or	r24, r25
     ed0:	8c 93       	st	X, r24

	UCSRC_REG |= UART_config.UART_stopBits;		//  set stop bits
     ed2:	a0 e4       	ldi	r26, 0x40	; 64
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e0 e4       	ldi	r30, 0x40	; 64
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	90 81       	ld	r25, Z
     edc:	8c 81       	ldd	r24, Y+4	; 0x04
     ede:	89 2b       	or	r24, r25
     ee0:	8c 93       	st	X, r24

	if (UART_config.UART_Parity == UART_Parity_even) {
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	80 32       	cpi	r24, 0x20	; 32
     ee6:	41 f4       	brne	.+16     	; 0xef8 <M_UART_void_UARTInit+0x58>

		SET_BIT(UCSRC_REG, UCSRC_UPM1);
     ee8:	a0 e4       	ldi	r26, 0x40	; 64
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e0 e4       	ldi	r30, 0x40	; 64
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 62       	ori	r24, 0x20	; 32
     ef4:	8c 93       	st	X, r24
     ef6:	11 c0       	rjmp	.+34     	; 0xf1a <M_UART_void_UARTInit+0x7a>

	} else if (UART_config.UART_Parity == UART_Parity_odd) {
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	80 33       	cpi	r24, 0x30	; 48
     efc:	71 f4       	brne	.+28     	; 0xf1a <M_UART_void_UARTInit+0x7a>
		SET_BIT(UCSRC_REG, UCSRC_UPM0);
     efe:	a0 e4       	ldi	r26, 0x40	; 64
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e0 e4       	ldi	r30, 0x40	; 64
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 61       	ori	r24, 0x10	; 16
     f0a:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UPM1);
     f0c:	a0 e4       	ldi	r26, 0x40	; 64
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e0 e4       	ldi	r30, 0x40	; 64
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 62       	ori	r24, 0x20	; 32
     f18:	8c 93       	st	X, r24
	}

	UBRRL_REG = UART_config.UART_BaudRate; //set baudRate
     f1a:	e9 e2       	ldi	r30, 0x29	; 41
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	80 83       	st	Z, r24

	SET_BIT(UCSRB_REG, UCSRB_TXEN); // enable UART TX
     f22:	aa e2       	ldi	r26, 0x2A	; 42
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ea e2       	ldi	r30, 0x2A	; 42
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	88 60       	ori	r24, 0x08	; 8
     f2e:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, UCSRB_RXEN); // enable UART RX
     f30:	aa e2       	ldi	r26, 0x2A	; 42
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ea e2       	ldi	r30, 0x2A	; 42
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	80 61       	ori	r24, 0x10	; 16
     f3c:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, UCSRB_RXCIE);
     f3e:	aa e2       	ldi	r26, 0x2A	; 42
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	ea e2       	ldi	r30, 0x2A	; 42
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	80 68       	ori	r24, 0x80	; 128
     f4a:	8c 93       	st	X, r24


}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <__vector_13>:

ISR(USART_RXC_vect) {
     f5a:	1f 92       	push	r1
     f5c:	0f 92       	push	r0
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	0f 92       	push	r0
     f62:	11 24       	eor	r1, r1
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	ef 93       	push	r30
     f6a:	ff 93       	push	r31
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	0f 92       	push	r0
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62

	u8 rx_byte;

	rx_byte = UDR_REG;
     f76:	ec e2       	ldi	r30, 0x2C	; 44
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	89 83       	std	Y+1, r24	; 0x01
	Rx_Buffer_UART[RX_Wr_Index_UART] = rx_byte;  //s put received char in buffer
     f7e:	80 91 3e 04 	lds	r24, 0x043E
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	fc 01       	movw	r30, r24
     f88:	ea 5b       	subi	r30, 0xBA	; 186
     f8a:	fb 4f       	sbci	r31, 0xFB	; 251
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	80 83       	st	Z, r24
	if (++RX_Wr_Index_UART > UART_BUFFER_SIZE)
     f90:	80 91 3e 04 	lds	r24, 0x043E
     f94:	8f 5f       	subi	r24, 0xFF	; 255
     f96:	80 93 3e 04 	sts	0x043E, r24
     f9a:	80 91 3e 04 	lds	r24, 0x043E
     f9e:	85 36       	cpi	r24, 0x65	; 101
     fa0:	10 f0       	brcs	.+4      	; 0xfa6 <__vector_13+0x4c>
		RX_Wr_Index_UART = 0;
     fa2:	10 92 3e 04 	sts	0x043E, r1
	if (++RX_Counter_UART > UART_BUFFER_SIZE) // keep a character count
     fa6:	80 91 40 04 	lds	r24, 0x0440
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	80 93 40 04 	sts	0x0440, r24
     fb0:	80 91 40 04 	lds	r24, 0x0440
     fb4:	85 36       	cpi	r24, 0x65	; 101
     fb6:	18 f0       	brcs	.+6      	; 0xfbe <__vector_13+0x64>
	{
		RX_Counter_UART = UART_BUFFER_SIZE;  //;  if too many chars came
     fb8:	84 e6       	ldi	r24, 0x64	; 100
     fba:	80 93 40 04 	sts	0x0440, r24

	}

}
     fbe:	0f 90       	pop	r0
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	ff 91       	pop	r31
     fc6:	ef 91       	pop	r30
     fc8:	9f 91       	pop	r25
     fca:	8f 91       	pop	r24
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <M_UART_u8_receiveByteASynchNonBlocking>:

char M_UART_u8_receiveByteASynchNonBlocking(void) {
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62

	char ch = Rx_Buffer_UART[RX_Rd_Index_UART];
     fe0:	80 91 3f 04 	lds	r24, 0x043F
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	fc 01       	movw	r30, r24
     fea:	ea 5b       	subi	r30, 0xBA	; 186
     fec:	fb 4f       	sbci	r31, 0xFB	; 251
     fee:	80 81       	ld	r24, Z
     ff0:	89 83       	std	Y+1, r24	; 0x01
	if (RX_Counter_UART) {
     ff2:	80 91 40 04 	lds	r24, 0x0440
     ff6:	88 23       	and	r24, r24
     ff8:	29 f0       	breq	.+10     	; 0x1004 <M_UART_u8_receiveByteASynchNonBlocking+0x2e>
		RX_Counter_UART--;
     ffa:	80 91 40 04 	lds	r24, 0x0440
     ffe:	81 50       	subi	r24, 0x01	; 1
    1000:	80 93 40 04 	sts	0x0440, r24
	}

	if (++RX_Rd_Index_UART > UART_BUFFER_SIZE)
    1004:	80 91 3f 04 	lds	r24, 0x043F
    1008:	8f 5f       	subi	r24, 0xFF	; 255
    100a:	80 93 3f 04 	sts	0x043F, r24
    100e:	80 91 3f 04 	lds	r24, 0x043F
    1012:	85 36       	cpi	r24, 0x65	; 101
    1014:	10 f0       	brcs	.+4      	; 0x101a <M_UART_u8_receiveByteASynchNonBlocking+0x44>
		RX_Rd_Index_UART = 0;
    1016:	10 92 3f 04 	sts	0x043F, r1
	return ch;
    101a:	89 81       	ldd	r24, Y+1	; 0x01
}
    101c:	0f 90       	pop	r0
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <M_UART_void_UARTSendByte>:

void M_UART_void_UARTSendByte(u8 Byte) {
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	0f 92       	push	r0
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA_REG , UCSRA_UDRE) == 0)
    1030:	eb e2       	ldi	r30, 0x2B	; 43
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	82 95       	swap	r24
    1038:	86 95       	lsr	r24
    103a:	87 70       	andi	r24, 0x07	; 7
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	81 70       	andi	r24, 0x01	; 1
    1042:	90 70       	andi	r25, 0x00	; 0
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	a1 f3       	breq	.-24     	; 0x1030 <M_UART_void_UARTSendByte+0xc>
		;
	UDR_REG = Byte;
    1048:	ec e2       	ldi	r30, 0x2C	; 44
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	80 83       	st	Z, r24
}
    1050:	0f 90       	pop	r0
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <M_UART_void_UARTSendString>:
void M_UART_void_UARTSendString(char *strPtr) {
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	00 d0       	rcall	.+0      	; 0x105e <M_UART_void_UARTSendString+0x6>
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	9a 83       	std	Y+2, r25	; 0x02
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	0a c0       	rjmp	.+20     	; 0x107c <M_UART_void_UARTSendString+0x24>

	while (*strPtr) {
		M_UART_void_UARTSendByte(*strPtr);
    1068:	e9 81       	ldd	r30, Y+1	; 0x01
    106a:	fa 81       	ldd	r31, Y+2	; 0x02
    106c:	80 81       	ld	r24, Z
    106e:	0e 94 12 08 	call	0x1024	; 0x1024 <M_UART_void_UARTSendByte>
		strPtr++;
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01
		;
	UDR_REG = Byte;
}
void M_UART_void_UARTSendString(char *strPtr) {

	while (*strPtr) {
    107c:	e9 81       	ldd	r30, Y+1	; 0x01
    107e:	fa 81       	ldd	r31, Y+2	; 0x02
    1080:	80 81       	ld	r24, Z
    1082:	88 23       	and	r24, r24
    1084:	89 f7       	brne	.-30     	; 0x1068 <M_UART_void_UARTSendString+0x10>
		M_UART_void_UARTSendByte(*strPtr);
		strPtr++;
	}
}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <M_UART_void_UARTSendBytes>:

void M_UART_void_UARTSendBytes(u8* byteArr , u8 Arrlength)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <M_UART_void_UARTSendBytes+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <M_UART_void_UARTSendBytes+0x8>
    1098:	0f 92       	push	r0
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	9c 83       	std	Y+4, r25	; 0x04
    10a0:	8b 83       	std	Y+3, r24	; 0x03
    10a2:	6d 83       	std	Y+5, r22	; 0x05
	for(int i = 0 ; i < Arrlength ; i++ )
    10a4:	1a 82       	std	Y+2, r1	; 0x02
    10a6:	19 82       	std	Y+1, r1	; 0x01
    10a8:	0f c0       	rjmp	.+30     	; 0x10c8 <M_UART_void_UARTSendBytes+0x38>
	{
		M_UART_void_UARTSendByte(byteArr[i]);
    10aa:	29 81       	ldd	r18, Y+1	; 0x01
    10ac:	3a 81       	ldd	r19, Y+2	; 0x02
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	fc 01       	movw	r30, r24
    10b4:	e2 0f       	add	r30, r18
    10b6:	f3 1f       	adc	r31, r19
    10b8:	80 81       	ld	r24, Z
    10ba:	0e 94 12 08 	call	0x1024	; 0x1024 <M_UART_void_UARTSendByte>
	}
}

void M_UART_void_UARTSendBytes(u8* byteArr , u8 Arrlength)
{
	for(int i = 0 ; i < Arrlength ; i++ )
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	9a 83       	std	Y+2, r25	; 0x02
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	82 17       	cp	r24, r18
    10d4:	93 07       	cpc	r25, r19
    10d6:	4c f3       	brlt	.-46     	; 0x10aa <M_UART_void_UARTSendBytes+0x1a>
	{
		M_UART_void_UARTSendByte(byteArr[i]);
	}
}
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <M_UART_void_ReceiveString>:

void M_UART_void_ReceiveString(char *strPtr) {
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <M_UART_void_ReceiveString+0xa>
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <M_UART_void_ReceiveString+0xc>
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	9c 83       	std	Y+4, r25	; 0x04
    10fa:	8b 83       	std	Y+3, r24	; 0x03
	//init_millis(16000000);
	int counter = 0;
    10fc:	1a 82       	std	Y+2, r1	; 0x02
    10fe:	19 82       	std	Y+1, r1	; 0x01
    1100:	1a c0       	rjmp	.+52     	; 0x1136 <M_UART_void_ReceiveString+0x4e>
	//long int time = millis();
	//while (1) {
		//if ((time + 500) < millis())
			//break;
		while (RX_Counter_UART > 0) {
			*(strPtr + counter) = M_UART_u8_receiveByteASynchNonBlocking();
    1102:	29 81       	ldd	r18, Y+1	; 0x01
    1104:	3a 81       	ldd	r19, Y+2	; 0x02
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	8c 01       	movw	r16, r24
    110c:	02 0f       	add	r16, r18
    110e:	13 1f       	adc	r17, r19
    1110:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <M_UART_u8_receiveByteASynchNonBlocking>
    1114:	f8 01       	movw	r30, r16
    1116:	80 83       	st	Z, r24
			if (*(strPtr + counter))
    1118:	29 81       	ldd	r18, Y+1	; 0x01
    111a:	3a 81       	ldd	r19, Y+2	; 0x02
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	fc 01       	movw	r30, r24
    1122:	e2 0f       	add	r30, r18
    1124:	f3 1f       	adc	r31, r19
    1126:	80 81       	ld	r24, Z
    1128:	88 23       	and	r24, r24
    112a:	29 f0       	breq	.+10     	; 0x1136 <M_UART_void_ReceiveString+0x4e>
				counter++;
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	9a 81       	ldd	r25, Y+2	; 0x02
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	89 83       	std	Y+1, r24	; 0x01
	int counter = 0;
	//long int time = millis();
	//while (1) {
		//if ((time + 500) < millis())
			//break;
		while (RX_Counter_UART > 0) {
    1136:	80 91 40 04 	lds	r24, 0x0440
    113a:	88 23       	and	r24, r24
    113c:	11 f7       	brne	.-60     	; 0x1102 <M_UART_void_ReceiveString+0x1a>
			if (*(strPtr + counter))
				counter++;
		}
	//}

	*(strPtr + counter) = 0;
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	2b 81       	ldd	r18, Y+3	; 0x03
    1144:	3c 81       	ldd	r19, Y+4	; 0x04
    1146:	f9 01       	movw	r30, r18
    1148:	e8 0f       	add	r30, r24
    114a:	f9 1f       	adc	r31, r25
    114c:	10 82       	st	Z, r1

}
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	08 95       	ret

00001160 <M_PORT_voidInit>:
#include "BIT_MATH.h"
#include "Port_int.h"
#include "Port_cfg.h"
#include "Mcu_HW.h"
void M_PORT_voidInit(const Port_Configtype * ConfigPtr)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	27 97       	sbiw	r28, 0x07	; 7
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	9d 83       	std	Y+5, r25	; 0x05
    1176:	8c 83       	std	Y+4, r24	; 0x04
	/* Check the pointer is not equal NULL */
	if(ConfigPtr != NULL )
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	09 f4       	brne	.+2      	; 0x1182 <M_PORT_voidInit+0x22>
    1180:	bd c3       	rjmp	.+1914   	; 0x18fc <M_PORT_voidInit+0x79c>
	{
		u8 Local_u8Pin;
		u8 Local_u8Port;
		u8 Local_u8Counter;
		for(Local_u8Counter = 0;Local_u8Counter<PORT_PINS_CONFIG_ARR_SIZE;Local_u8Counter++)
    1182:	19 82       	std	Y+1, r1	; 0x01
    1184:	b7 c3       	rjmp	.+1902   	; 0x18f4 <M_PORT_voidInit+0x794>
		{
			Local_u8Pin  = ((ConfigPtr[Local_u8Counter].PinNumber)%10);
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9c 01       	movw	r18, r24
    118e:	22 0f       	add	r18, r18
    1190:	33 1f       	adc	r19, r19
    1192:	22 0f       	add	r18, r18
    1194:	33 1f       	adc	r19, r19
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    1198:	9d 81       	ldd	r25, Y+5	; 0x05
    119a:	fc 01       	movw	r30, r24
    119c:	e2 0f       	add	r30, r18
    119e:	f3 1f       	adc	r31, r19
    11a0:	80 81       	ld	r24, Z
    11a2:	9a e0       	ldi	r25, 0x0A	; 10
    11a4:	69 2f       	mov	r22, r25
    11a6:	0e 94 39 20 	call	0x4072	; 0x4072 <__udivmodqi4>
    11aa:	89 2f       	mov	r24, r25
    11ac:	8b 83       	std	Y+3, r24	; 0x03
			Local_u8Port = ((ConfigPtr[Local_u8Counter].PinNumber)/10);
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9c 01       	movw	r18, r24
    11b6:	22 0f       	add	r18, r18
    11b8:	33 1f       	adc	r19, r19
    11ba:	22 0f       	add	r18, r18
    11bc:	33 1f       	adc	r19, r19
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	9d 81       	ldd	r25, Y+5	; 0x05
    11c2:	fc 01       	movw	r30, r24
    11c4:	e2 0f       	add	r30, r18
    11c6:	f3 1f       	adc	r31, r19
    11c8:	80 81       	ld	r24, Z
    11ca:	9a e0       	ldi	r25, 0x0A	; 10
    11cc:	69 2f       	mov	r22, r25
    11ce:	0e 94 39 20 	call	0x4072	; 0x4072 <__udivmodqi4>
    11d2:	8a 83       	std	Y+2, r24	; 0x02
			switch(Local_u8Port)
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	3f 83       	std	Y+7, r19	; 0x07
    11dc:	2e 83       	std	Y+6, r18	; 0x06
    11de:	8e 81       	ldd	r24, Y+6	; 0x06
    11e0:	9f 81       	ldd	r25, Y+7	; 0x07
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	91 05       	cpc	r25, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <M_PORT_voidInit+0x8a>
    11e8:	f3 c0       	rjmp	.+486    	; 0x13d0 <M_PORT_voidInit+0x270>
    11ea:	2e 81       	ldd	r18, Y+6	; 0x06
    11ec:	3f 81       	ldd	r19, Y+7	; 0x07
    11ee:	23 30       	cpi	r18, 0x03	; 3
    11f0:	31 05       	cpc	r19, r1
    11f2:	34 f4       	brge	.+12     	; 0x1200 <M_PORT_voidInit+0xa0>
    11f4:	8e 81       	ldd	r24, Y+6	; 0x06
    11f6:	9f 81       	ldd	r25, Y+7	; 0x07
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	91 05       	cpc	r25, r1
    11fc:	71 f0       	breq	.+28     	; 0x121a <M_PORT_voidInit+0xba>
    11fe:	77 c3       	rjmp	.+1774   	; 0x18ee <M_PORT_voidInit+0x78e>
    1200:	2e 81       	ldd	r18, Y+6	; 0x06
    1202:	3f 81       	ldd	r19, Y+7	; 0x07
    1204:	23 30       	cpi	r18, 0x03	; 3
    1206:	31 05       	cpc	r19, r1
    1208:	09 f4       	brne	.+2      	; 0x120c <M_PORT_voidInit+0xac>
    120a:	bd c1       	rjmp	.+890    	; 0x1586 <M_PORT_voidInit+0x426>
    120c:	8e 81       	ldd	r24, Y+6	; 0x06
    120e:	9f 81       	ldd	r25, Y+7	; 0x07
    1210:	84 30       	cpi	r24, 0x04	; 4
    1212:	91 05       	cpc	r25, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <M_PORT_voidInit+0xb8>
    1216:	92 c2       	rjmp	.+1316   	; 0x173c <M_PORT_voidInit+0x5dc>
    1218:	6a c3       	rjmp	.+1748   	; 0x18ee <M_PORT_voidInit+0x78e>
			{
			case PORTA :
				/* Set the direction of pin */
				if(ConfigPtr[Local_u8Counter].PinDirection == PORT_OUTPUT)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	88 2f       	mov	r24, r24
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	9c 01       	movw	r18, r24
    1222:	22 0f       	add	r18, r18
    1224:	33 1f       	adc	r19, r19
    1226:	22 0f       	add	r18, r18
    1228:	33 1f       	adc	r19, r19
    122a:	8c 81       	ldd	r24, Y+4	; 0x04
    122c:	9d 81       	ldd	r25, Y+5	; 0x05
    122e:	fc 01       	movw	r30, r24
    1230:	e2 0f       	add	r30, r18
    1232:	f3 1f       	adc	r31, r19
    1234:	82 81       	ldd	r24, Z+2	; 0x02
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	09 f0       	breq	.+2      	; 0x123c <M_PORT_voidInit+0xdc>
    123a:	5c c0       	rjmp	.+184    	; 0x12f4 <M_PORT_voidInit+0x194>
				{
					/* Set the output direction by set the bits in DDRA register */
					SET_BIT(DDRA_REG,Local_u8Pin);
    123c:	aa e3       	ldi	r26, 0x3A	; 58
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	ea e3       	ldi	r30, 0x3A	; 58
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <M_PORT_voidInit+0xf8>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	2a 95       	dec	r18
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <M_PORT_voidInit+0xf4>
    125c:	84 2b       	or	r24, r20
    125e:	8c 93       	st	X, r24
					/* Set the Initial Value in PORTA register */
					if(ConfigPtr[Local_u8Counter].InitialValue == PORT_HIGH)
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9c 01       	movw	r18, r24
    1268:	22 0f       	add	r18, r18
    126a:	33 1f       	adc	r19, r19
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	8c 81       	ldd	r24, Y+4	; 0x04
    1272:	9d 81       	ldd	r25, Y+5	; 0x05
    1274:	fc 01       	movw	r30, r24
    1276:	e2 0f       	add	r30, r18
    1278:	f3 1f       	adc	r31, r19
    127a:	81 81       	ldd	r24, Z+1	; 0x01
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	a1 f4       	brne	.+40     	; 0x12a8 <M_PORT_voidInit+0x148>
					{
						SET_BIT(PORTA_REG,Local_u8Pin);
    1280:	ab e3       	ldi	r26, 0x3B	; 59
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	eb e3       	ldi	r30, 0x3B	; 59
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <M_PORT_voidInit+0x13e>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <M_PORT_voidInit+0x13a>
    12a2:	84 2b       	or	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	23 c3       	rjmp	.+1606   	; 0x18ee <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InitialValue == PORT_LOW)
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9c 01       	movw	r18, r24
    12b0:	22 0f       	add	r18, r18
    12b2:	33 1f       	adc	r19, r19
    12b4:	22 0f       	add	r18, r18
    12b6:	33 1f       	adc	r19, r19
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	9d 81       	ldd	r25, Y+5	; 0x05
    12bc:	fc 01       	movw	r30, r24
    12be:	e2 0f       	add	r30, r18
    12c0:	f3 1f       	adc	r31, r19
    12c2:	81 81       	ldd	r24, Z+1	; 0x01
    12c4:	88 23       	and	r24, r24
    12c6:	09 f0       	breq	.+2      	; 0x12ca <M_PORT_voidInit+0x16a>
    12c8:	12 c3       	rjmp	.+1572   	; 0x18ee <M_PORT_voidInit+0x78e>
					{
						CLR_BIT(PORTA_REG,Local_u8Pin);
    12ca:	ab e3       	ldi	r26, 0x3B	; 59
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	eb e3       	ldi	r30, 0x3B	; 59
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <M_PORT_voidInit+0x188>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <M_PORT_voidInit+0x184>
    12ec:	80 95       	com	r24
    12ee:	84 23       	and	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	fd c2       	rjmp	.+1530   	; 0x18ee <M_PORT_voidInit+0x78e>
					else
					{
						/* Error */
					}
				}
				else if(ConfigPtr[Local_u8Counter].PinDirection == PORT_INPUT)
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	9c 01       	movw	r18, r24
    12fc:	22 0f       	add	r18, r18
    12fe:	33 1f       	adc	r19, r19
    1300:	22 0f       	add	r18, r18
    1302:	33 1f       	adc	r19, r19
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	fc 01       	movw	r30, r24
    130a:	e2 0f       	add	r30, r18
    130c:	f3 1f       	adc	r31, r19
    130e:	82 81       	ldd	r24, Z+2	; 0x02
    1310:	88 23       	and	r24, r24
    1312:	09 f0       	breq	.+2      	; 0x1316 <M_PORT_voidInit+0x1b6>
    1314:	ec c2       	rjmp	.+1496   	; 0x18ee <M_PORT_voidInit+0x78e>
				{
					/* Set the input direction by clear the bits in DDRA register */
					CLR_BIT(DDRA_REG,Local_u8Pin);
    1316:	aa e3       	ldi	r26, 0x3A	; 58
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	ea e3       	ldi	r30, 0x3A	; 58
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	48 2f       	mov	r20, r24
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <M_PORT_voidInit+0x1d2>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	2a 95       	dec	r18
    1334:	e2 f7       	brpl	.-8      	; 0x132e <M_PORT_voidInit+0x1ce>
    1336:	80 95       	com	r24
    1338:	84 23       	and	r24, r20
    133a:	8c 93       	st	X, r24
					/* Set the internal attach in PORTA register */
					if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_FLOATING)
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9c 01       	movw	r18, r24
    1344:	22 0f       	add	r18, r18
    1346:	33 1f       	adc	r19, r19
    1348:	22 0f       	add	r18, r18
    134a:	33 1f       	adc	r19, r19
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9d 81       	ldd	r25, Y+5	; 0x05
    1350:	fc 01       	movw	r30, r24
    1352:	e2 0f       	add	r30, r18
    1354:	f3 1f       	adc	r31, r19
    1356:	83 81       	ldd	r24, Z+3	; 0x03
    1358:	88 23       	and	r24, r24
    135a:	a9 f4       	brne	.+42     	; 0x1386 <M_PORT_voidInit+0x226>
					{
						CLR_BIT(PORTA_REG,Local_u8Pin);
    135c:	ab e3       	ldi	r26, 0x3B	; 59
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	eb e3       	ldi	r30, 0x3B	; 59
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <M_PORT_voidInit+0x21a>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <M_PORT_voidInit+0x216>
    137e:	80 95       	com	r24
    1380:	84 23       	and	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	b4 c2       	rjmp	.+1384   	; 0x18ee <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_PULLUP)
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	9c 01       	movw	r18, r24
    138e:	22 0f       	add	r18, r18
    1390:	33 1f       	adc	r19, r19
    1392:	22 0f       	add	r18, r18
    1394:	33 1f       	adc	r19, r19
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	9d 81       	ldd	r25, Y+5	; 0x05
    139a:	fc 01       	movw	r30, r24
    139c:	e2 0f       	add	r30, r18
    139e:	f3 1f       	adc	r31, r19
    13a0:	83 81       	ldd	r24, Z+3	; 0x03
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <M_PORT_voidInit+0x248>
    13a6:	a3 c2       	rjmp	.+1350   	; 0x18ee <M_PORT_voidInit+0x78e>
					{
						SET_BIT(PORTA_REG,Local_u8Pin);
    13a8:	ab e3       	ldi	r26, 0x3B	; 59
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	eb e3       	ldi	r30, 0x3B	; 59
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <M_PORT_voidInit+0x266>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <M_PORT_voidInit+0x262>
    13ca:	84 2b       	or	r24, r20
    13cc:	8c 93       	st	X, r24
    13ce:	8f c2       	rjmp	.+1310   	; 0x18ee <M_PORT_voidInit+0x78e>
					/* Error */
				}
				break;
			case PORTB :
				/* Set the direction of the pin */
				if(ConfigPtr[Local_u8Counter].PinDirection == PORT_OUTPUT)
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9c 01       	movw	r18, r24
    13d8:	22 0f       	add	r18, r18
    13da:	33 1f       	adc	r19, r19
    13dc:	22 0f       	add	r18, r18
    13de:	33 1f       	adc	r19, r19
    13e0:	8c 81       	ldd	r24, Y+4	; 0x04
    13e2:	9d 81       	ldd	r25, Y+5	; 0x05
    13e4:	fc 01       	movw	r30, r24
    13e6:	e2 0f       	add	r30, r18
    13e8:	f3 1f       	adc	r31, r19
    13ea:	82 81       	ldd	r24, Z+2	; 0x02
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <M_PORT_voidInit+0x292>
    13f0:	5c c0       	rjmp	.+184    	; 0x14aa <M_PORT_voidInit+0x34a>
				{
					/* Set the output direction by set the bits in DDRB register */
					SET_BIT(DDRB_REG,Local_u8Pin);
    13f2:	a7 e3       	ldi	r26, 0x37	; 55
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e7 e3       	ldi	r30, 0x37	; 55
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 c0       	rjmp	.+4      	; 0x140e <M_PORT_voidInit+0x2ae>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	2a 95       	dec	r18
    1410:	e2 f7       	brpl	.-8      	; 0x140a <M_PORT_voidInit+0x2aa>
    1412:	84 2b       	or	r24, r20
    1414:	8c 93       	st	X, r24
					/* Set the Initial Value in PORTB register */
					if(ConfigPtr[Local_u8Counter].InitialValue == PORT_HIGH)
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	9c 01       	movw	r18, r24
    141e:	22 0f       	add	r18, r18
    1420:	33 1f       	adc	r19, r19
    1422:	22 0f       	add	r18, r18
    1424:	33 1f       	adc	r19, r19
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	9d 81       	ldd	r25, Y+5	; 0x05
    142a:	fc 01       	movw	r30, r24
    142c:	e2 0f       	add	r30, r18
    142e:	f3 1f       	adc	r31, r19
    1430:	81 81       	ldd	r24, Z+1	; 0x01
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	a1 f4       	brne	.+40     	; 0x145e <M_PORT_voidInit+0x2fe>
					{
						SET_BIT(PORTB_REG,Local_u8Pin);
    1436:	a8 e3       	ldi	r26, 0x38	; 56
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e8 e3       	ldi	r30, 0x38	; 56
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <M_PORT_voidInit+0x2f4>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <M_PORT_voidInit+0x2f0>
    1458:	84 2b       	or	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	48 c2       	rjmp	.+1168   	; 0x18ee <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InitialValue == PORT_LOW)
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	9c 01       	movw	r18, r24
    1466:	22 0f       	add	r18, r18
    1468:	33 1f       	adc	r19, r19
    146a:	22 0f       	add	r18, r18
    146c:	33 1f       	adc	r19, r19
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	9d 81       	ldd	r25, Y+5	; 0x05
    1472:	fc 01       	movw	r30, r24
    1474:	e2 0f       	add	r30, r18
    1476:	f3 1f       	adc	r31, r19
    1478:	81 81       	ldd	r24, Z+1	; 0x01
    147a:	88 23       	and	r24, r24
    147c:	09 f0       	breq	.+2      	; 0x1480 <M_PORT_voidInit+0x320>
    147e:	37 c2       	rjmp	.+1134   	; 0x18ee <M_PORT_voidInit+0x78e>
					{
						CLR_BIT(PORTB_REG,Local_u8Pin);
    1480:	a8 e3       	ldi	r26, 0x38	; 56
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e8 e3       	ldi	r30, 0x38	; 56
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <M_PORT_voidInit+0x33e>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <M_PORT_voidInit+0x33a>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	22 c2       	rjmp	.+1092   	; 0x18ee <M_PORT_voidInit+0x78e>
					else
					{
						/* Error */
					}
				}
				else if(ConfigPtr[Local_u8Counter].PinDirection == PORT_INPUT)
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9c 01       	movw	r18, r24
    14b2:	22 0f       	add	r18, r18
    14b4:	33 1f       	adc	r19, r19
    14b6:	22 0f       	add	r18, r18
    14b8:	33 1f       	adc	r19, r19
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	9d 81       	ldd	r25, Y+5	; 0x05
    14be:	fc 01       	movw	r30, r24
    14c0:	e2 0f       	add	r30, r18
    14c2:	f3 1f       	adc	r31, r19
    14c4:	82 81       	ldd	r24, Z+2	; 0x02
    14c6:	88 23       	and	r24, r24
    14c8:	09 f0       	breq	.+2      	; 0x14cc <M_PORT_voidInit+0x36c>
    14ca:	11 c2       	rjmp	.+1058   	; 0x18ee <M_PORT_voidInit+0x78e>
				{
					/* Set the input direction by clear the bits in DDRB register */
					CLR_BIT(DDRB_REG,Local_u8Pin);
    14cc:	a7 e3       	ldi	r26, 0x37	; 55
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e7 e3       	ldi	r30, 0x37	; 55
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <M_PORT_voidInit+0x388>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	2a 95       	dec	r18
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <M_PORT_voidInit+0x384>
    14ec:	80 95       	com	r24
    14ee:	84 23       	and	r24, r20
    14f0:	8c 93       	st	X, r24
					/* Set the internal attach in PORTB register */
					if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_FLOATING)
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9c 01       	movw	r18, r24
    14fa:	22 0f       	add	r18, r18
    14fc:	33 1f       	adc	r19, r19
    14fe:	22 0f       	add	r18, r18
    1500:	33 1f       	adc	r19, r19
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	9d 81       	ldd	r25, Y+5	; 0x05
    1506:	fc 01       	movw	r30, r24
    1508:	e2 0f       	add	r30, r18
    150a:	f3 1f       	adc	r31, r19
    150c:	83 81       	ldd	r24, Z+3	; 0x03
    150e:	88 23       	and	r24, r24
    1510:	a9 f4       	brne	.+42     	; 0x153c <M_PORT_voidInit+0x3dc>
					{
						CLR_BIT(PORTB_REG,Local_u8Pin);
    1512:	a8 e3       	ldi	r26, 0x38	; 56
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e8 e3       	ldi	r30, 0x38	; 56
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <M_PORT_voidInit+0x3d0>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <M_PORT_voidInit+0x3cc>
    1534:	80 95       	com	r24
    1536:	84 23       	and	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	d9 c1       	rjmp	.+946    	; 0x18ee <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_PULLUP)
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9c 01       	movw	r18, r24
    1544:	22 0f       	add	r18, r18
    1546:	33 1f       	adc	r19, r19
    1548:	22 0f       	add	r18, r18
    154a:	33 1f       	adc	r19, r19
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	9d 81       	ldd	r25, Y+5	; 0x05
    1550:	fc 01       	movw	r30, r24
    1552:	e2 0f       	add	r30, r18
    1554:	f3 1f       	adc	r31, r19
    1556:	83 81       	ldd	r24, Z+3	; 0x03
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	09 f0       	breq	.+2      	; 0x155e <M_PORT_voidInit+0x3fe>
    155c:	c8 c1       	rjmp	.+912    	; 0x18ee <M_PORT_voidInit+0x78e>
					{
						SET_BIT(PORTB_REG,Local_u8Pin);
    155e:	a8 e3       	ldi	r26, 0x38	; 56
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e8 e3       	ldi	r30, 0x38	; 56
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <M_PORT_voidInit+0x41c>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <M_PORT_voidInit+0x418>
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	b4 c1       	rjmp	.+872    	; 0x18ee <M_PORT_voidInit+0x78e>
					/* Error */
				}
				break;
			case PORTC :
				/* Set the direction of the pin */
				if(ConfigPtr[Local_u8Counter].PinDirection == PORT_OUTPUT)
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9c 01       	movw	r18, r24
    158e:	22 0f       	add	r18, r18
    1590:	33 1f       	adc	r19, r19
    1592:	22 0f       	add	r18, r18
    1594:	33 1f       	adc	r19, r19
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
    1598:	9d 81       	ldd	r25, Y+5	; 0x05
    159a:	fc 01       	movw	r30, r24
    159c:	e2 0f       	add	r30, r18
    159e:	f3 1f       	adc	r31, r19
    15a0:	82 81       	ldd	r24, Z+2	; 0x02
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <M_PORT_voidInit+0x448>
    15a6:	5c c0       	rjmp	.+184    	; 0x1660 <M_PORT_voidInit+0x500>
				{
					/* Set the output direction by set the bits in DDRC register */
					SET_BIT(DDRC_REG,Local_u8Pin);
    15a8:	a4 e3       	ldi	r26, 0x34	; 52
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e4 e3       	ldi	r30, 0x34	; 52
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <M_PORT_voidInit+0x464>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	2a 95       	dec	r18
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <M_PORT_voidInit+0x460>
    15c8:	84 2b       	or	r24, r20
    15ca:	8c 93       	st	X, r24
					/* Set the Initial Value in PORTC register */
					if(ConfigPtr[Local_u8Counter].InitialValue == PORT_HIGH)
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	9c 01       	movw	r18, r24
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	22 0f       	add	r18, r18
    15da:	33 1f       	adc	r19, r19
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	9d 81       	ldd	r25, Y+5	; 0x05
    15e0:	fc 01       	movw	r30, r24
    15e2:	e2 0f       	add	r30, r18
    15e4:	f3 1f       	adc	r31, r19
    15e6:	81 81       	ldd	r24, Z+1	; 0x01
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	a1 f4       	brne	.+40     	; 0x1614 <M_PORT_voidInit+0x4b4>
					{
						SET_BIT(PORTC_REG,Local_u8Pin);
    15ec:	a5 e3       	ldi	r26, 0x35	; 53
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e5 e3       	ldi	r30, 0x35	; 53
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	48 2f       	mov	r20, r24
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	02 2e       	mov	r0, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <M_PORT_voidInit+0x4aa>
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	0a 94       	dec	r0
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <M_PORT_voidInit+0x4a6>
    160e:	84 2b       	or	r24, r20
    1610:	8c 93       	st	X, r24
    1612:	6d c1       	rjmp	.+730    	; 0x18ee <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InitialValue == PORT_LOW)
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	88 2f       	mov	r24, r24
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	9c 01       	movw	r18, r24
    161c:	22 0f       	add	r18, r18
    161e:	33 1f       	adc	r19, r19
    1620:	22 0f       	add	r18, r18
    1622:	33 1f       	adc	r19, r19
    1624:	8c 81       	ldd	r24, Y+4	; 0x04
    1626:	9d 81       	ldd	r25, Y+5	; 0x05
    1628:	fc 01       	movw	r30, r24
    162a:	e2 0f       	add	r30, r18
    162c:	f3 1f       	adc	r31, r19
    162e:	81 81       	ldd	r24, Z+1	; 0x01
    1630:	88 23       	and	r24, r24
    1632:	09 f0       	breq	.+2      	; 0x1636 <M_PORT_voidInit+0x4d6>
    1634:	5c c1       	rjmp	.+696    	; 0x18ee <M_PORT_voidInit+0x78e>
					{
						CLR_BIT(PORTC_REG,Local_u8Pin);
    1636:	a5 e3       	ldi	r26, 0x35	; 53
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e5 e3       	ldi	r30, 0x35	; 53
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	48 2f       	mov	r20, r24
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 2e       	mov	r0, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <M_PORT_voidInit+0x4f4>
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	0a 94       	dec	r0
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <M_PORT_voidInit+0x4f0>
    1658:	80 95       	com	r24
    165a:	84 23       	and	r24, r20
    165c:	8c 93       	st	X, r24
    165e:	47 c1       	rjmp	.+654    	; 0x18ee <M_PORT_voidInit+0x78e>
					else
					{
						/* Error */
					}
				}
				else if(ConfigPtr[Local_u8Counter].PinDirection == PORT_INPUT)
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9c 01       	movw	r18, r24
    1668:	22 0f       	add	r18, r18
    166a:	33 1f       	adc	r19, r19
    166c:	22 0f       	add	r18, r18
    166e:	33 1f       	adc	r19, r19
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	9d 81       	ldd	r25, Y+5	; 0x05
    1674:	fc 01       	movw	r30, r24
    1676:	e2 0f       	add	r30, r18
    1678:	f3 1f       	adc	r31, r19
    167a:	82 81       	ldd	r24, Z+2	; 0x02
    167c:	88 23       	and	r24, r24
    167e:	09 f0       	breq	.+2      	; 0x1682 <M_PORT_voidInit+0x522>
    1680:	36 c1       	rjmp	.+620    	; 0x18ee <M_PORT_voidInit+0x78e>
				{
					/* Set the input direction by clear the bits in DDRC register */
					CLR_BIT(DDRC_REG,Local_u8Pin);
    1682:	a4 e3       	ldi	r26, 0x34	; 52
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e4 e3       	ldi	r30, 0x34	; 52
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	48 2f       	mov	r20, r24
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 c0       	rjmp	.+4      	; 0x169e <M_PORT_voidInit+0x53e>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	2a 95       	dec	r18
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <M_PORT_voidInit+0x53a>
    16a2:	80 95       	com	r24
    16a4:	84 23       	and	r24, r20
    16a6:	8c 93       	st	X, r24
					/* Set the internal attach in PORTB register */
					if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_FLOATING)
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9c 01       	movw	r18, r24
    16b0:	22 0f       	add	r18, r18
    16b2:	33 1f       	adc	r19, r19
    16b4:	22 0f       	add	r18, r18
    16b6:	33 1f       	adc	r19, r19
    16b8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ba:	9d 81       	ldd	r25, Y+5	; 0x05
    16bc:	fc 01       	movw	r30, r24
    16be:	e2 0f       	add	r30, r18
    16c0:	f3 1f       	adc	r31, r19
    16c2:	83 81       	ldd	r24, Z+3	; 0x03
    16c4:	88 23       	and	r24, r24
    16c6:	a9 f4       	brne	.+42     	; 0x16f2 <M_PORT_voidInit+0x592>
					{
						CLR_BIT(PORTC_REG,Local_u8Pin);
    16c8:	a5 e3       	ldi	r26, 0x35	; 53
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e5 e3       	ldi	r30, 0x35	; 53
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <M_PORT_voidInit+0x586>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <M_PORT_voidInit+0x582>
    16ea:	80 95       	com	r24
    16ec:	84 23       	and	r24, r20
    16ee:	8c 93       	st	X, r24
    16f0:	fe c0       	rjmp	.+508    	; 0x18ee <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_PULLUP)
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9c 01       	movw	r18, r24
    16fa:	22 0f       	add	r18, r18
    16fc:	33 1f       	adc	r19, r19
    16fe:	22 0f       	add	r18, r18
    1700:	33 1f       	adc	r19, r19
    1702:	8c 81       	ldd	r24, Y+4	; 0x04
    1704:	9d 81       	ldd	r25, Y+5	; 0x05
    1706:	fc 01       	movw	r30, r24
    1708:	e2 0f       	add	r30, r18
    170a:	f3 1f       	adc	r31, r19
    170c:	83 81       	ldd	r24, Z+3	; 0x03
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	09 f0       	breq	.+2      	; 0x1714 <M_PORT_voidInit+0x5b4>
    1712:	ed c0       	rjmp	.+474    	; 0x18ee <M_PORT_voidInit+0x78e>
					{
						SET_BIT(PORTC_REG,Local_u8Pin);
    1714:	a5 e3       	ldi	r26, 0x35	; 53
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e5 e3       	ldi	r30, 0x35	; 53
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	48 2f       	mov	r20, r24
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	02 2e       	mov	r0, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <M_PORT_voidInit+0x5d2>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	0a 94       	dec	r0
    1734:	e2 f7       	brpl	.-8      	; 0x172e <M_PORT_voidInit+0x5ce>
    1736:	84 2b       	or	r24, r20
    1738:	8c 93       	st	X, r24
    173a:	d9 c0       	rjmp	.+434    	; 0x18ee <M_PORT_voidInit+0x78e>
					/* Error */
				}
				break;
			case PORTD :
				/* Set the direction of the pin */
				if(ConfigPtr[Local_u8Counter].PinDirection == PORT_OUTPUT)
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	9c 01       	movw	r18, r24
    1744:	22 0f       	add	r18, r18
    1746:	33 1f       	adc	r19, r19
    1748:	22 0f       	add	r18, r18
    174a:	33 1f       	adc	r19, r19
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	fc 01       	movw	r30, r24
    1752:	e2 0f       	add	r30, r18
    1754:	f3 1f       	adc	r31, r19
    1756:	82 81       	ldd	r24, Z+2	; 0x02
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	09 f0       	breq	.+2      	; 0x175e <M_PORT_voidInit+0x5fe>
    175c:	5c c0       	rjmp	.+184    	; 0x1816 <M_PORT_voidInit+0x6b6>
				{
					/* Set the output direction by set the bits in DDRD register */
					SET_BIT(DDRD_REG,Local_u8Pin);
    175e:	a1 e3       	ldi	r26, 0x31	; 49
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e1 e3       	ldi	r30, 0x31	; 49
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	48 2f       	mov	r20, r24
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 c0       	rjmp	.+4      	; 0x177a <M_PORT_voidInit+0x61a>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	2a 95       	dec	r18
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <M_PORT_voidInit+0x616>
    177e:	84 2b       	or	r24, r20
    1780:	8c 93       	st	X, r24
					/* Set the Initial Value in PORTD register */
					if(ConfigPtr[Local_u8Counter].InitialValue == PORT_HIGH)
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	88 2f       	mov	r24, r24
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9c 01       	movw	r18, r24
    178a:	22 0f       	add	r18, r18
    178c:	33 1f       	adc	r19, r19
    178e:	22 0f       	add	r18, r18
    1790:	33 1f       	adc	r19, r19
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	9d 81       	ldd	r25, Y+5	; 0x05
    1796:	fc 01       	movw	r30, r24
    1798:	e2 0f       	add	r30, r18
    179a:	f3 1f       	adc	r31, r19
    179c:	81 81       	ldd	r24, Z+1	; 0x01
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	a1 f4       	brne	.+40     	; 0x17ca <M_PORT_voidInit+0x66a>
					{
						SET_BIT(PORTD_REG,Local_u8Pin);
    17a2:	a2 e3       	ldi	r26, 0x32	; 50
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e2 e3       	ldi	r30, 0x32	; 50
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <M_PORT_voidInit+0x660>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <M_PORT_voidInit+0x65c>
    17c4:	84 2b       	or	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	92 c0       	rjmp	.+292    	; 0x18ee <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InitialValue == PORT_LOW)
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	9c 01       	movw	r18, r24
    17d2:	22 0f       	add	r18, r18
    17d4:	33 1f       	adc	r19, r19
    17d6:	22 0f       	add	r18, r18
    17d8:	33 1f       	adc	r19, r19
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	9d 81       	ldd	r25, Y+5	; 0x05
    17de:	fc 01       	movw	r30, r24
    17e0:	e2 0f       	add	r30, r18
    17e2:	f3 1f       	adc	r31, r19
    17e4:	81 81       	ldd	r24, Z+1	; 0x01
    17e6:	88 23       	and	r24, r24
    17e8:	09 f0       	breq	.+2      	; 0x17ec <M_PORT_voidInit+0x68c>
    17ea:	81 c0       	rjmp	.+258    	; 0x18ee <M_PORT_voidInit+0x78e>
					{
						CLR_BIT(PORTD_REG,Local_u8Pin);
    17ec:	a2 e3       	ldi	r26, 0x32	; 50
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e2 e3       	ldi	r30, 0x32	; 50
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <M_PORT_voidInit+0x6aa>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <M_PORT_voidInit+0x6a6>
    180e:	80 95       	com	r24
    1810:	84 23       	and	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	6c c0       	rjmp	.+216    	; 0x18ee <M_PORT_voidInit+0x78e>
					else
					{
						/* Error */
					}
				}
				else if(ConfigPtr[Local_u8Counter].PinDirection == PORT_INPUT)
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	88 2f       	mov	r24, r24
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	9c 01       	movw	r18, r24
    181e:	22 0f       	add	r18, r18
    1820:	33 1f       	adc	r19, r19
    1822:	22 0f       	add	r18, r18
    1824:	33 1f       	adc	r19, r19
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
    1828:	9d 81       	ldd	r25, Y+5	; 0x05
    182a:	fc 01       	movw	r30, r24
    182c:	e2 0f       	add	r30, r18
    182e:	f3 1f       	adc	r31, r19
    1830:	82 81       	ldd	r24, Z+2	; 0x02
    1832:	88 23       	and	r24, r24
    1834:	09 f0       	breq	.+2      	; 0x1838 <M_PORT_voidInit+0x6d8>
    1836:	5b c0       	rjmp	.+182    	; 0x18ee <M_PORT_voidInit+0x78e>
				{
					/* Set the input direction by clear the bits in DDRD register */
					CLR_BIT(DDRD_REG,Local_u8Pin);
    1838:	a1 e3       	ldi	r26, 0x31	; 49
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e1 e3       	ldi	r30, 0x31	; 49
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	48 2f       	mov	r20, r24
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <M_PORT_voidInit+0x6f4>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	2a 95       	dec	r18
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <M_PORT_voidInit+0x6f0>
    1858:	80 95       	com	r24
    185a:	84 23       	and	r24, r20
    185c:	8c 93       	st	X, r24
					/* Set the internal attach in PORTD register */
					if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_FLOATING)
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9c 01       	movw	r18, r24
    1866:	22 0f       	add	r18, r18
    1868:	33 1f       	adc	r19, r19
    186a:	22 0f       	add	r18, r18
    186c:	33 1f       	adc	r19, r19
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	9d 81       	ldd	r25, Y+5	; 0x05
    1872:	fc 01       	movw	r30, r24
    1874:	e2 0f       	add	r30, r18
    1876:	f3 1f       	adc	r31, r19
    1878:	83 81       	ldd	r24, Z+3	; 0x03
    187a:	88 23       	and	r24, r24
    187c:	a9 f4       	brne	.+42     	; 0x18a8 <M_PORT_voidInit+0x748>
					{
						CLR_BIT(PORTD_REG,Local_u8Pin);
    187e:	a2 e3       	ldi	r26, 0x32	; 50
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e2 e3       	ldi	r30, 0x32	; 50
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	48 2f       	mov	r20, r24
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 2e       	mov	r0, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <M_PORT_voidInit+0x73c>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <M_PORT_voidInit+0x738>
    18a0:	80 95       	com	r24
    18a2:	84 23       	and	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	23 c0       	rjmp	.+70     	; 0x18ee <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_PULLUP)
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9c 01       	movw	r18, r24
    18b0:	22 0f       	add	r18, r18
    18b2:	33 1f       	adc	r19, r19
    18b4:	22 0f       	add	r18, r18
    18b6:	33 1f       	adc	r19, r19
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	9d 81       	ldd	r25, Y+5	; 0x05
    18bc:	fc 01       	movw	r30, r24
    18be:	e2 0f       	add	r30, r18
    18c0:	f3 1f       	adc	r31, r19
    18c2:	83 81       	ldd	r24, Z+3	; 0x03
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	99 f4       	brne	.+38     	; 0x18ee <M_PORT_voidInit+0x78e>
					{
						SET_BIT(PORTD_REG,Local_u8Pin);
    18c8:	a2 e3       	ldi	r26, 0x32	; 50
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e2 e3       	ldi	r30, 0x32	; 50
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <M_PORT_voidInit+0x786>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <M_PORT_voidInit+0x782>
    18ea:	84 2b       	or	r24, r20
    18ec:	8c 93       	st	X, r24
	if(ConfigPtr != NULL )
	{
		u8 Local_u8Pin;
		u8 Local_u8Port;
		u8 Local_u8Counter;
		for(Local_u8Counter = 0;Local_u8Counter<PORT_PINS_CONFIG_ARR_SIZE;Local_u8Counter++)
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	8f 5f       	subi	r24, 0xFF	; 255
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	89 31       	cpi	r24, 0x19	; 25
    18f8:	08 f4       	brcc	.+2      	; 0x18fc <M_PORT_voidInit+0x79c>
    18fa:	45 cc       	rjmp	.-1910   	; 0x1186 <M_PORT_voidInit+0x26>
	}
	else
	{
		/* Error */
	}
}
    18fc:	27 96       	adiw	r28, 0x07	; 7
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <M_GIE_void_EnableGlobalInterrupt>:


#include "GIE_private.h"
#include "GIE_interface.h"

void M_GIE_void_EnableGlobalInterrupt(){
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
	sei();
    1916:	78 94       	sei
}
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <M_GIE_void_DisableGlobalInterrupt>:
void M_GIE_void_DisableGlobalInterrupt(){
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62

	cli();
    1926:	f8 94       	cli
}
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <M_DIO_enGetPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_PinLevelType M_DIO_enGetPinValue(Dio_ChannelType ChannelId)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <M_DIO_enGetPinValue+0x6>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <M_DIO_enGetPinValue+0x8>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <M_DIO_enGetPinValue+0xa>
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8pin = ChannelId % 10;
    193e:	8c 81       	ldd	r24, Y+4	; 0x04
    1940:	9a e0       	ldi	r25, 0x0A	; 10
    1942:	69 2f       	mov	r22, r25
    1944:	0e 94 39 20 	call	0x4072	; 0x4072 <__udivmodqi4>
    1948:	89 2f       	mov	r24, r25
    194a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8port = ChannelId / 10;
    194c:	8c 81       	ldd	r24, Y+4	; 0x04
    194e:	9a e0       	ldi	r25, 0x0A	; 10
    1950:	69 2f       	mov	r22, r25
    1952:	0e 94 39 20 	call	0x4072	; 0x4072 <__udivmodqi4>
    1956:	8a 83       	std	Y+2, r24	; 0x02

	Dio_PinLevelType Local_levelType;
	switch(Local_u8port)
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	3e 83       	std	Y+6, r19	; 0x06
    1960:	2d 83       	std	Y+5, r18	; 0x05
    1962:	4d 81       	ldd	r20, Y+5	; 0x05
    1964:	5e 81       	ldd	r21, Y+6	; 0x06
    1966:	42 30       	cpi	r20, 0x02	; 2
    1968:	51 05       	cpc	r21, r1
    196a:	41 f1       	breq	.+80     	; 0x19bc <M_DIO_enGetPinValue+0x8e>
    196c:	8d 81       	ldd	r24, Y+5	; 0x05
    196e:	9e 81       	ldd	r25, Y+6	; 0x06
    1970:	83 30       	cpi	r24, 0x03	; 3
    1972:	91 05       	cpc	r25, r1
    1974:	34 f4       	brge	.+12     	; 0x1982 <M_DIO_enGetPinValue+0x54>
    1976:	2d 81       	ldd	r18, Y+5	; 0x05
    1978:	3e 81       	ldd	r19, Y+6	; 0x06
    197a:	21 30       	cpi	r18, 0x01	; 1
    197c:	31 05       	cpc	r19, r1
    197e:	61 f0       	breq	.+24     	; 0x1998 <M_DIO_enGetPinValue+0x6a>
    1980:	52 c0       	rjmp	.+164    	; 0x1a26 <M_DIO_enGetPinValue+0xf8>
    1982:	4d 81       	ldd	r20, Y+5	; 0x05
    1984:	5e 81       	ldd	r21, Y+6	; 0x06
    1986:	43 30       	cpi	r20, 0x03	; 3
    1988:	51 05       	cpc	r21, r1
    198a:	51 f1       	breq	.+84     	; 0x19e0 <M_DIO_enGetPinValue+0xb2>
    198c:	8d 81       	ldd	r24, Y+5	; 0x05
    198e:	9e 81       	ldd	r25, Y+6	; 0x06
    1990:	84 30       	cpi	r24, 0x04	; 4
    1992:	91 05       	cpc	r25, r1
    1994:	b9 f1       	breq	.+110    	; 0x1a04 <M_DIO_enGetPinValue+0xd6>
    1996:	47 c0       	rjmp	.+142    	; 0x1a26 <M_DIO_enGetPinValue+0xf8>
	{
		case DIO_PORTA : Local_levelType = GET_BIT( PINA_REG,Local_u8pin); break;
    1998:	e9 e3       	ldi	r30, 0x39	; 57
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	88 2f       	mov	r24, r24
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	a9 01       	movw	r20, r18
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <M_DIO_enGetPinValue+0x82>
    19ac:	55 95       	asr	r21
    19ae:	47 95       	ror	r20
    19b0:	8a 95       	dec	r24
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <M_DIO_enGetPinValue+0x7e>
    19b4:	ca 01       	movw	r24, r20
    19b6:	81 70       	andi	r24, 0x01	; 1
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	35 c0       	rjmp	.+106    	; 0x1a26 <M_DIO_enGetPinValue+0xf8>
		case DIO_PORTB : Local_levelType = GET_BIT( PINB_REG,Local_u8pin);	break;
    19bc:	e6 e3       	ldi	r30, 0x36	; 54
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	a9 01       	movw	r20, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <M_DIO_enGetPinValue+0xa6>
    19d0:	55 95       	asr	r21
    19d2:	47 95       	ror	r20
    19d4:	8a 95       	dec	r24
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <M_DIO_enGetPinValue+0xa2>
    19d8:	ca 01       	movw	r24, r20
    19da:	81 70       	andi	r24, 0x01	; 1
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	23 c0       	rjmp	.+70     	; 0x1a26 <M_DIO_enGetPinValue+0xf8>
		case DIO_PORTC : Local_levelType = GET_BIT( PINC_REG,Local_u8pin);	break;
    19e0:	e3 e3       	ldi	r30, 0x33	; 51
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a9 01       	movw	r20, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <M_DIO_enGetPinValue+0xca>
    19f4:	55 95       	asr	r21
    19f6:	47 95       	ror	r20
    19f8:	8a 95       	dec	r24
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <M_DIO_enGetPinValue+0xc6>
    19fc:	ca 01       	movw	r24, r20
    19fe:	81 70       	andi	r24, 0x01	; 1
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	11 c0       	rjmp	.+34     	; 0x1a26 <M_DIO_enGetPinValue+0xf8>
		case DIO_PORTD : Local_levelType = GET_BIT( PIND_REG,Local_u8pin); break;
    1a04:	e0 e3       	ldi	r30, 0x30	; 48
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	88 2f       	mov	r24, r24
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a9 01       	movw	r20, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <M_DIO_enGetPinValue+0xee>
    1a18:	55 95       	asr	r21
    1a1a:	47 95       	ror	r20
    1a1c:	8a 95       	dec	r24
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <M_DIO_enGetPinValue+0xea>
    1a20:	ca 01       	movw	r24, r20
    1a22:	81 70       	andi	r24, 0x01	; 1
    1a24:	89 83       	std	Y+1, r24	; 0x01
		default: break;
	}
    return Local_levelType ;
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a28:	26 96       	adiw	r28, 0x06	; 6
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <M_DIO_voidSetPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_DIO_voidSetPinValue(Dio_ChannelType ChannelId,Dio_PinLevelType Level)
{
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	28 97       	sbiw	r28, 0x08	; 8
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
    1a50:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8pin = ChannelId % 10;
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9a e0       	ldi	r25, 0x0A	; 10
    1a56:	69 2f       	mov	r22, r25
    1a58:	0e 94 39 20 	call	0x4072	; 0x4072 <__udivmodqi4>
    1a5c:	89 2f       	mov	r24, r25
    1a5e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8port = ChannelId / 10;
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9a e0       	ldi	r25, 0x0A	; 10
    1a64:	69 2f       	mov	r22, r25
    1a66:	0e 94 39 20 	call	0x4072	; 0x4072 <__udivmodqi4>
    1a6a:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    1a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <M_DIO_voidSetPinValue+0x3a>
    1a72:	70 c0       	rjmp	.+224    	; 0x1b54 <M_DIO_voidSetPinValue+0x11a>
	{
		switch(Local_u8port)
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	38 87       	std	Y+8, r19	; 0x08
    1a7c:	2f 83       	std	Y+7, r18	; 0x07
    1a7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a80:	98 85       	ldd	r25, Y+8	; 0x08
    1a82:	82 30       	cpi	r24, 0x02	; 2
    1a84:	91 05       	cpc	r25, r1
    1a86:	51 f1       	breq	.+84     	; 0x1adc <M_DIO_voidSetPinValue+0xa2>
    1a88:	2f 81       	ldd	r18, Y+7	; 0x07
    1a8a:	38 85       	ldd	r19, Y+8	; 0x08
    1a8c:	23 30       	cpi	r18, 0x03	; 3
    1a8e:	31 05       	cpc	r19, r1
    1a90:	34 f4       	brge	.+12     	; 0x1a9e <M_DIO_voidSetPinValue+0x64>
    1a92:	8f 81       	ldd	r24, Y+7	; 0x07
    1a94:	98 85       	ldd	r25, Y+8	; 0x08
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	91 05       	cpc	r25, r1
    1a9a:	61 f0       	breq	.+24     	; 0x1ab4 <M_DIO_voidSetPinValue+0x7a>
    1a9c:	d3 c0       	rjmp	.+422    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
    1a9e:	2f 81       	ldd	r18, Y+7	; 0x07
    1aa0:	38 85       	ldd	r19, Y+8	; 0x08
    1aa2:	23 30       	cpi	r18, 0x03	; 3
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	71 f1       	breq	.+92     	; 0x1b04 <M_DIO_voidSetPinValue+0xca>
    1aa8:	8f 81       	ldd	r24, Y+7	; 0x07
    1aaa:	98 85       	ldd	r25, Y+8	; 0x08
    1aac:	84 30       	cpi	r24, 0x04	; 4
    1aae:	91 05       	cpc	r25, r1
    1ab0:	e9 f1       	breq	.+122    	; 0x1b2c <M_DIO_voidSetPinValue+0xf2>
    1ab2:	c8 c0       	rjmp	.+400    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
		{
			case DIO_PORTA : SET_BIT( PORTA_REG,Local_u8pin); break;
    1ab4:	ab e3       	ldi	r26, 0x3B	; 59
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	eb e3       	ldi	r30, 0x3B	; 59
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	48 2f       	mov	r20, r24
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 2e       	mov	r0, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <M_DIO_voidSetPinValue+0x98>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	0a 94       	dec	r0
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <M_DIO_voidSetPinValue+0x94>
    1ad6:	84 2b       	or	r24, r20
    1ad8:	8c 93       	st	X, r24
    1ada:	b4 c0       	rjmp	.+360    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTB : SET_BIT( PORTB_REG,Local_u8pin); break;
    1adc:	a8 e3       	ldi	r26, 0x38	; 56
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e8 e3       	ldi	r30, 0x38	; 56
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <M_DIO_voidSetPinValue+0xc0>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <M_DIO_voidSetPinValue+0xbc>
    1afe:	84 2b       	or	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	a0 c0       	rjmp	.+320    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTC : SET_BIT( PORTC_REG,Local_u8pin); break;
    1b04:	a5 e3       	ldi	r26, 0x35	; 53
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e5 e3       	ldi	r30, 0x35	; 53
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 2e       	mov	r0, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <M_DIO_voidSetPinValue+0xe8>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <M_DIO_voidSetPinValue+0xe4>
    1b26:	84 2b       	or	r24, r20
    1b28:	8c 93       	st	X, r24
    1b2a:	8c c0       	rjmp	.+280    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTD : SET_BIT( PORTD_REG,Local_u8pin); break;
    1b2c:	a2 e3       	ldi	r26, 0x32	; 50
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e2 e3       	ldi	r30, 0x32	; 50
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	48 2f       	mov	r20, r24
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 2e       	mov	r0, r18
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <M_DIO_voidSetPinValue+0x110>
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	0a 94       	dec	r0
    1b4c:	e2 f7       	brpl	.-8      	; 0x1b46 <M_DIO_voidSetPinValue+0x10c>
    1b4e:	84 2b       	or	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	78 c0       	rjmp	.+240    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
			default: break;
		}
	}
	else if (Level == DIO_LOW)
    1b54:	8c 81       	ldd	r24, Y+4	; 0x04
    1b56:	88 23       	and	r24, r24
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <M_DIO_voidSetPinValue+0x122>
    1b5a:	74 c0       	rjmp	.+232    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
	{
		switch(Local_u8port)
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	3e 83       	std	Y+6, r19	; 0x06
    1b64:	2d 83       	std	Y+5, r18	; 0x05
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	82 30       	cpi	r24, 0x02	; 2
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	61 f1       	breq	.+88     	; 0x1bc8 <M_DIO_voidSetPinValue+0x18e>
    1b70:	2d 81       	ldd	r18, Y+5	; 0x05
    1b72:	3e 81       	ldd	r19, Y+6	; 0x06
    1b74:	23 30       	cpi	r18, 0x03	; 3
    1b76:	31 05       	cpc	r19, r1
    1b78:	34 f4       	brge	.+12     	; 0x1b86 <M_DIO_voidSetPinValue+0x14c>
    1b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	91 05       	cpc	r25, r1
    1b82:	69 f0       	breq	.+26     	; 0x1b9e <M_DIO_voidSetPinValue+0x164>
    1b84:	5f c0       	rjmp	.+190    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
    1b86:	2d 81       	ldd	r18, Y+5	; 0x05
    1b88:	3e 81       	ldd	r19, Y+6	; 0x06
    1b8a:	23 30       	cpi	r18, 0x03	; 3
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	89 f1       	breq	.+98     	; 0x1bf2 <M_DIO_voidSetPinValue+0x1b8>
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	84 30       	cpi	r24, 0x04	; 4
    1b96:	91 05       	cpc	r25, r1
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <M_DIO_voidSetPinValue+0x162>
    1b9a:	40 c0       	rjmp	.+128    	; 0x1c1c <M_DIO_voidSetPinValue+0x1e2>
    1b9c:	53 c0       	rjmp	.+166    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
		{
			case DIO_PORTA : CLR_BIT( PORTA_REG,Local_u8pin); break;
    1b9e:	ab e3       	ldi	r26, 0x3B	; 59
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	eb e3       	ldi	r30, 0x3B	; 59
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	48 2f       	mov	r20, r24
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	02 2e       	mov	r0, r18
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <M_DIO_voidSetPinValue+0x182>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	0a 94       	dec	r0
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <M_DIO_voidSetPinValue+0x17e>
    1bc0:	80 95       	com	r24
    1bc2:	84 23       	and	r24, r20
    1bc4:	8c 93       	st	X, r24
    1bc6:	3e c0       	rjmp	.+124    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTB : CLR_BIT( PORTB_REG,Local_u8pin); break;
    1bc8:	a8 e3       	ldi	r26, 0x38	; 56
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e8 e3       	ldi	r30, 0x38	; 56
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	48 2f       	mov	r20, r24
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	02 2e       	mov	r0, r18
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <M_DIO_voidSetPinValue+0x1ac>
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	0a 94       	dec	r0
    1be8:	e2 f7       	brpl	.-8      	; 0x1be2 <M_DIO_voidSetPinValue+0x1a8>
    1bea:	80 95       	com	r24
    1bec:	84 23       	and	r24, r20
    1bee:	8c 93       	st	X, r24
    1bf0:	29 c0       	rjmp	.+82     	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTC : CLR_BIT( PORTC_REG,Local_u8pin); break;
    1bf2:	a5 e3       	ldi	r26, 0x35	; 53
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e5 e3       	ldi	r30, 0x35	; 53
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	02 2e       	mov	r0, r18
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <M_DIO_voidSetPinValue+0x1d6>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	0a 94       	dec	r0
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <M_DIO_voidSetPinValue+0x1d2>
    1c14:	80 95       	com	r24
    1c16:	84 23       	and	r24, r20
    1c18:	8c 93       	st	X, r24
    1c1a:	14 c0       	rjmp	.+40     	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTD : CLR_BIT( PORTD_REG,Local_u8pin); break;
    1c1c:	a2 e3       	ldi	r26, 0x32	; 50
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e2 e3       	ldi	r30, 0x32	; 50
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	48 2f       	mov	r20, r24
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	02 2e       	mov	r0, r18
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <M_DIO_voidSetPinValue+0x200>
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	0a 94       	dec	r0
    1c3c:	e2 f7       	brpl	.-8      	; 0x1c36 <M_DIO_voidSetPinValue+0x1fc>
    1c3e:	80 95       	com	r24
    1c40:	84 23       	and	r24, r20
    1c42:	8c 93       	st	X, r24
			default: break;
		}
	}
}
    1c44:	28 96       	adiw	r28, 0x08	; 8
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <M_DIO_enGetPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_DIO_enGetPortValue(Dio_PortType PortId)
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <M_DIO_enGetPortValue+0x6>
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <M_DIO_enGetPortValue+0x8>
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_u8Reading;

	switch( PortId)
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	3c 83       	std	Y+4, r19	; 0x04
    1c6c:	2b 83       	std	Y+3, r18	; 0x03
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	82 30       	cpi	r24, 0x02	; 2
    1c74:	91 05       	cpc	r25, r1
    1c76:	d9 f0       	breq	.+54     	; 0x1cae <M_DIO_enGetPortValue+0x58>
    1c78:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7c:	23 30       	cpi	r18, 0x03	; 3
    1c7e:	31 05       	cpc	r19, r1
    1c80:	34 f4       	brge	.+12     	; 0x1c8e <M_DIO_enGetPortValue+0x38>
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	91 05       	cpc	r25, r1
    1c8a:	61 f0       	breq	.+24     	; 0x1ca4 <M_DIO_enGetPortValue+0x4e>
    1c8c:	1e c0       	rjmp	.+60     	; 0x1cca <M_DIO_enGetPortValue+0x74>
    1c8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c90:	3c 81       	ldd	r19, Y+4	; 0x04
    1c92:	23 30       	cpi	r18, 0x03	; 3
    1c94:	31 05       	cpc	r19, r1
    1c96:	81 f0       	breq	.+32     	; 0x1cb8 <M_DIO_enGetPortValue+0x62>
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9c:	84 30       	cpi	r24, 0x04	; 4
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	81 f0       	breq	.+32     	; 0x1cc2 <M_DIO_enGetPortValue+0x6c>
    1ca2:	13 c0       	rjmp	.+38     	; 0x1cca <M_DIO_enGetPortValue+0x74>
	{
		case DIO_PORTA : Local_u8Reading =  PORTA_REG; break;
    1ca4:	eb e3       	ldi	r30, 0x3B	; 59
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	0e c0       	rjmp	.+28     	; 0x1cca <M_DIO_enGetPortValue+0x74>
		case DIO_PORTB : Local_u8Reading =  PORTB_REG; break;
    1cae:	e8 e3       	ldi	r30, 0x38	; 56
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	09 c0       	rjmp	.+18     	; 0x1cca <M_DIO_enGetPortValue+0x74>
		case DIO_PORTC : Local_u8Reading =  PORTC_REG; break;
    1cb8:	e5 e3       	ldi	r30, 0x35	; 53
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	04 c0       	rjmp	.+8      	; 0x1cca <M_DIO_enGetPortValue+0x74>
		case DIO_PORTD : Local_u8Reading =  PORTD_REG; break;
    1cc2:	e2 e3       	ldi	r30, 0x32	; 50
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	89 83       	std	Y+1, r24	; 0x01
		default: break;
	}

	return Local_u8Reading;
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <M_DIO_voidSetPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_DIO_voidSetPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <M_DIO_voidSetPortValue+0x6>
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <M_DIO_voidSetPortValue+0x8>
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	3c 83       	std	Y+4, r19	; 0x04
    1cf2:	2b 83       	std	Y+3, r18	; 0x03
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	82 30       	cpi	r24, 0x02	; 2
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	d9 f0       	breq	.+54     	; 0x1d34 <M_DIO_voidSetPortValue+0x5a>
    1cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1d00:	3c 81       	ldd	r19, Y+4	; 0x04
    1d02:	23 30       	cpi	r18, 0x03	; 3
    1d04:	31 05       	cpc	r19, r1
    1d06:	34 f4       	brge	.+12     	; 0x1d14 <M_DIO_voidSetPortValue+0x3a>
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	91 05       	cpc	r25, r1
    1d10:	61 f0       	breq	.+24     	; 0x1d2a <M_DIO_voidSetPortValue+0x50>
    1d12:	1e c0       	rjmp	.+60     	; 0x1d50 <M_DIO_voidSetPortValue+0x76>
    1d14:	2b 81       	ldd	r18, Y+3	; 0x03
    1d16:	3c 81       	ldd	r19, Y+4	; 0x04
    1d18:	23 30       	cpi	r18, 0x03	; 3
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	81 f0       	breq	.+32     	; 0x1d3e <M_DIO_voidSetPortValue+0x64>
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	84 30       	cpi	r24, 0x04	; 4
    1d24:	91 05       	cpc	r25, r1
    1d26:	81 f0       	breq	.+32     	; 0x1d48 <M_DIO_voidSetPortValue+0x6e>
    1d28:	13 c0       	rjmp	.+38     	; 0x1d50 <M_DIO_voidSetPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level; break;
    1d2a:	eb e3       	ldi	r30, 0x3B	; 59
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	80 83       	st	Z, r24
    1d32:	0e c0       	rjmp	.+28     	; 0x1d50 <M_DIO_voidSetPortValue+0x76>
		case DIO_PORTB : PORTB_REG = Level; break;
    1d34:	e8 e3       	ldi	r30, 0x38	; 56
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	80 83       	st	Z, r24
    1d3c:	09 c0       	rjmp	.+18     	; 0x1d50 <M_DIO_voidSetPortValue+0x76>
		case DIO_PORTC : PORTC_REG = Level; break;
    1d3e:	e5 e3       	ldi	r30, 0x35	; 53
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	80 83       	st	Z, r24
    1d46:	04 c0       	rjmp	.+8      	; 0x1d50 <M_DIO_voidSetPortValue+0x76>
		case DIO_PORTD : PORTD_REG = Level; break;
    1d48:	e2 e3       	ldi	r30, 0x32	; 50
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	80 83       	st	Z, r24
		default: break;
	}
}
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <M_DIO_voidTogglePin>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_DIO_voidTogglePin(Dio_ChannelType channelId)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <M_DIO_voidTogglePin+0x6>
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <M_DIO_voidTogglePin+0x8>
    1d66:	0f 92       	push	r0
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8pin = channelId % 10;
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	9a e0       	ldi	r25, 0x0A	; 10
    1d72:	69 2f       	mov	r22, r25
    1d74:	0e 94 39 20 	call	0x4072	; 0x4072 <__udivmodqi4>
    1d78:	89 2f       	mov	r24, r25
    1d7a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8port = channelId/ 10;
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9a e0       	ldi	r25, 0x0A	; 10
    1d80:	69 2f       	mov	r22, r25
    1d82:	0e 94 39 20 	call	0x4072	; 0x4072 <__udivmodqi4>
    1d86:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_u8port)
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	3d 83       	std	Y+5, r19	; 0x05
    1d90:	2c 83       	std	Y+4, r18	; 0x04
    1d92:	8c 81       	ldd	r24, Y+4	; 0x04
    1d94:	9d 81       	ldd	r25, Y+5	; 0x05
    1d96:	82 30       	cpi	r24, 0x02	; 2
    1d98:	91 05       	cpc	r25, r1
    1d9a:	51 f1       	breq	.+84     	; 0x1df0 <M_DIO_voidTogglePin+0x92>
    1d9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1da0:	23 30       	cpi	r18, 0x03	; 3
    1da2:	31 05       	cpc	r19, r1
    1da4:	34 f4       	brge	.+12     	; 0x1db2 <M_DIO_voidTogglePin+0x54>
    1da6:	8c 81       	ldd	r24, Y+4	; 0x04
    1da8:	9d 81       	ldd	r25, Y+5	; 0x05
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	91 05       	cpc	r25, r1
    1dae:	61 f0       	breq	.+24     	; 0x1dc8 <M_DIO_voidTogglePin+0x6a>
    1db0:	5a c0       	rjmp	.+180    	; 0x1e66 <M_DIO_voidTogglePin+0x108>
    1db2:	2c 81       	ldd	r18, Y+4	; 0x04
    1db4:	3d 81       	ldd	r19, Y+5	; 0x05
    1db6:	23 30       	cpi	r18, 0x03	; 3
    1db8:	31 05       	cpc	r19, r1
    1dba:	71 f1       	breq	.+92     	; 0x1e18 <M_DIO_voidTogglePin+0xba>
    1dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc0:	84 30       	cpi	r24, 0x04	; 4
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	e9 f1       	breq	.+122    	; 0x1e40 <M_DIO_voidTogglePin+0xe2>
    1dc6:	4f c0       	rjmp	.+158    	; 0x1e66 <M_DIO_voidTogglePin+0x108>
	{
		case DIO_PORTA : TOG_BIT(PORTA_REG,Local_u8pin); break;
    1dc8:	ab e3       	ldi	r26, 0x3B	; 59
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	eb e3       	ldi	r30, 0x3B	; 59
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	48 2f       	mov	r20, r24
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	02 2e       	mov	r0, r18
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <M_DIO_voidTogglePin+0x88>
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	0a 94       	dec	r0
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <M_DIO_voidTogglePin+0x84>
    1dea:	84 27       	eor	r24, r20
    1dec:	8c 93       	st	X, r24
    1dee:	3b c0       	rjmp	.+118    	; 0x1e66 <M_DIO_voidTogglePin+0x108>
		case DIO_PORTB : TOG_BIT(PORTB_REG,Local_u8pin); break;
    1df0:	a8 e3       	ldi	r26, 0x38	; 56
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e8 e3       	ldi	r30, 0x38	; 56
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 2e       	mov	r0, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <M_DIO_voidTogglePin+0xb0>
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	0a 94       	dec	r0
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <M_DIO_voidTogglePin+0xac>
    1e12:	84 27       	eor	r24, r20
    1e14:	8c 93       	st	X, r24
    1e16:	27 c0       	rjmp	.+78     	; 0x1e66 <M_DIO_voidTogglePin+0x108>
		case DIO_PORTC : TOG_BIT(PORTC_REG,Local_u8pin); break;
    1e18:	a5 e3       	ldi	r26, 0x35	; 53
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e5 e3       	ldi	r30, 0x35	; 53
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	48 2f       	mov	r20, r24
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	02 2e       	mov	r0, r18
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <M_DIO_voidTogglePin+0xd8>
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	0a 94       	dec	r0
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <M_DIO_voidTogglePin+0xd4>
    1e3a:	84 27       	eor	r24, r20
    1e3c:	8c 93       	st	X, r24
    1e3e:	13 c0       	rjmp	.+38     	; 0x1e66 <M_DIO_voidTogglePin+0x108>
		case DIO_PORTD : TOG_BIT(PORTD_REG,Local_u8pin); break;
    1e40:	a2 e3       	ldi	r26, 0x32	; 50
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e2 e3       	ldi	r30, 0x32	; 50
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	48 2f       	mov	r20, r24
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	02 2e       	mov	r0, r18
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <M_DIO_voidTogglePin+0x100>
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	0a 94       	dec	r0
    1e60:	e2 f7       	brpl	.-8      	; 0x1e5a <M_DIO_voidTogglePin+0xfc>
    1e62:	84 27       	eor	r24, r20
    1e64:	8c 93       	st	X, r24
		default: break;
	}
}
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <M_ADC_void_Init>:
#include "Mcu_HW.h"
#include "BIT_MATH.h"
#include "ADC_interface.h"


void M_ADC_void_Init(ADC_config_t mADC){
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <M_ADC_void_Init+0x6>
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <M_ADC_void_Init+0x8>
    1e7e:	0f 92       	push	r0
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	49 83       	std	Y+1, r20	; 0x01
    1e86:	5a 83       	std	Y+2, r21	; 0x02
    1e88:	6b 83       	std	Y+3, r22	; 0x03
    1e8a:	7c 83       	std	Y+4, r23	; 0x04
    1e8c:	8d 83       	std	Y+5, r24	; 0x05


	//Right "0" or Left "1" Adjustment of the ADC data register
	ADMUX_REG |= (ADC_ADJUSTMENT<<ADMUX_ADLAR);
    1e8e:	a7 e2       	ldi	r26, 0x27	; 39
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e7 e2       	ldi	r30, 0x27	; 39
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	28 2f       	mov	r18, r24
    1e9a:	80 91 43 04 	lds	r24, 0x0443
    1e9e:	88 2f       	mov	r24, r24
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	82 95       	swap	r24
    1ea8:	92 95       	swap	r25
    1eaa:	90 7f       	andi	r25, 0xF0	; 240
    1eac:	98 27       	eor	r25, r24
    1eae:	80 7f       	andi	r24, 0xF0	; 240
    1eb0:	98 27       	eor	r25, r24
    1eb2:	82 2b       	or	r24, r18
    1eb4:	8c 93       	st	X, r24

	//Voltage Reference
	//ADMUX_REG &= 0x3F; //Zeroing the last 2 bits
	ADMUX_REG |= ((mADC.volt_ref)<<ADMUX_REFS0);
    1eb6:	a7 e2       	ldi	r26, 0x27	; 39
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e7 e2       	ldi	r30, 0x27	; 39
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	00 24       	eor	r0, r0
    1eca:	96 95       	lsr	r25
    1ecc:	87 95       	ror	r24
    1ece:	07 94       	ror	r0
    1ed0:	96 95       	lsr	r25
    1ed2:	87 95       	ror	r24
    1ed4:	07 94       	ror	r0
    1ed6:	98 2f       	mov	r25, r24
    1ed8:	80 2d       	mov	r24, r0
    1eda:	82 2b       	or	r24, r18
    1edc:	8c 93       	st	X, r24

	//Auto trigger enable/disable
	ADCSRA_REG |= ((mADC.auto_trigger)<<ADCSRA_ADATE);
    1ede:	a6 e2       	ldi	r26, 0x26	; 38
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e6 e2       	ldi	r30, 0x26	; 38
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	28 2f       	mov	r18, r24
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	88 2f       	mov	r24, r24
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	82 95       	swap	r24
    1ef6:	92 95       	swap	r25
    1ef8:	90 7f       	andi	r25, 0xF0	; 240
    1efa:	98 27       	eor	r25, r24
    1efc:	80 7f       	andi	r24, 0xF0	; 240
    1efe:	98 27       	eor	r25, r24
    1f00:	82 2b       	or	r24, r18
    1f02:	8c 93       	st	X, r24

	//Interrupt Enable/Disable
	ADCSRA_REG |= ((mADC.interrupt)<<ADCSRA_ADIE);
    1f04:	a6 e2       	ldi	r26, 0x26	; 38
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	e6 e2       	ldi	r30, 0x26	; 38
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	28 2f       	mov	r18, r24
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	82 2b       	or	r24, r18
    1f24:	8c 93       	st	X, r24

	//Prescaler Select
	ADCSRA_REG &= 0xF8;
    1f26:	a6 e2       	ldi	r26, 0x26	; 38
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e6 e2       	ldi	r30, 0x26	; 38
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	88 7f       	andi	r24, 0xF8	; 248
    1f32:	8c 93       	st	X, r24
	ADCSRA_REG |= ((mADC.prescaler)<<ADCSRA_ADPS0);
    1f34:	a6 e2       	ldi	r26, 0x26	; 38
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e6 e2       	ldi	r30, 0x26	; 38
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	90 81       	ld	r25, Z
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f40:	89 2b       	or	r24, r25
    1f42:	8c 93       	st	X, r24

	//Auto trigger Source
	SFIOR_REG &= 0x0F;
    1f44:	a0 e5       	ldi	r26, 0x50	; 80
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e0 e5       	ldi	r30, 0x50	; 80
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	8f 70       	andi	r24, 0x0F	; 15
    1f50:	8c 93       	st	X, r24
	SFIOR_REG |= ((mADC.auto_trigger_source)<<SFIOR_ADTS0);
    1f52:	a0 e5       	ldi	r26, 0x50	; 80
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e0 e5       	ldi	r30, 0x50	; 80
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	82 95       	swap	r24
    1f6a:	92 95       	swap	r25
    1f6c:	90 7f       	andi	r25, 0xF0	; 240
    1f6e:	98 27       	eor	r25, r24
    1f70:	80 7f       	andi	r24, 0xF0	; 240
    1f72:	98 27       	eor	r25, r24
    1f74:	82 2b       	or	r24, r18
    1f76:	8c 93       	st	X, r24

	//Finally Enable
	ADCSRA_REG |= (1<<ADCSRA_ADEN);
    1f78:	a6 e2       	ldi	r26, 0x26	; 38
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e6 e2       	ldi	r30, 0x26	; 38
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	80 68       	ori	r24, 0x80	; 128
    1f84:	8c 93       	st	X, r24


}
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <M_ADC_void_StartConversion>:

void M_ADC_void_StartConversion(){
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62

	//Start Conversion
	ADCSRA_REG |= (1<<ADCSRA_ADSC);
    1f9e:	a6 e2       	ldi	r26, 0x26	; 38
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e6 e2       	ldi	r30, 0x26	; 38
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	80 64       	ori	r24, 0x40	; 64
    1faa:	8c 93       	st	X, r24


}
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <M_ADC_void_GetDigitalValueSynchNonBlocking>:
//Polling NonBlocking (conversion is started externally)
ADC_state_code_t M_ADC_void_GetDigitalValueSynchNonBlocking(ADC_channel_t channel, u16* data){
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <M_ADC_void_GetDigitalValueSynchNonBlocking+0x6>
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <M_ADC_void_GetDigitalValueSynchNonBlocking+0x8>
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <M_ADC_void_GetDigitalValueSynchNonBlocking+0xa>
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	7b 83       	std	Y+3, r23	; 0x03
    1fc4:	6a 83       	std	Y+2, r22	; 0x02

	//Channel
	ADMUX_REG &= 0xE0;
    1fc6:	a7 e2       	ldi	r26, 0x27	; 39
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e7 e2       	ldi	r30, 0x27	; 39
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	80 7e       	andi	r24, 0xE0	; 224
    1fd2:	8c 93       	st	X, r24
	ADMUX_REG |= channel ;
    1fd4:	a7 e2       	ldi	r26, 0x27	; 39
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e7 e2       	ldi	r30, 0x27	; 39
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	90 81       	ld	r25, Z
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	89 2b       	or	r24, r25
    1fe2:	8c 93       	st	X, r24


	if((GET_BIT(ADCSRA_REG,ADCSRA_ADIF)) == 0){
    1fe4:	e6 e2       	ldi	r30, 0x26	; 38
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	82 95       	swap	r24
    1fec:	8f 70       	andi	r24, 0x0F	; 15
    1fee:	88 2f       	mov	r24, r24
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	81 70       	andi	r24, 0x01	; 1
    1ff4:	90 70       	andi	r25, 0x00	; 0
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	11 f4       	brne	.+4      	; 0x1ffe <M_ADC_void_GetDigitalValueSynchNonBlocking+0x4c>
		return ADC_FAILED;
    1ffa:	1e 82       	std	Y+6, r1	; 0x06
    1ffc:	4f c0       	rjmp	.+158    	; 0x209c <M_ADC_void_GetDigitalValueSynchNonBlocking+0xea>
	}
	else{
	ADCSRA_REG |= (1<<ADCSRA_ADIF); //clear the flag
    1ffe:	a6 e2       	ldi	r26, 0x26	; 38
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e6 e2       	ldi	r30, 0x26	; 38
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	80 61       	ori	r24, 0x10	; 16
    200a:	8c 93       	st	X, r24

	switch(ADC_ADJUSTMENT){
    200c:	80 91 43 04 	lds	r24, 0x0443
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	3d 83       	std	Y+5, r19	; 0x05
    2016:	2c 83       	std	Y+4, r18	; 0x04
    2018:	8c 81       	ldd	r24, Y+4	; 0x04
    201a:	9d 81       	ldd	r25, Y+5	; 0x05
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	11 f1       	breq	.+68     	; 0x2064 <M_ADC_void_GetDigitalValueSynchNonBlocking+0xb2>
    2020:	2c 81       	ldd	r18, Y+4	; 0x04
    2022:	3d 81       	ldd	r19, Y+5	; 0x05
    2024:	21 30       	cpi	r18, 0x01	; 1
    2026:	31 05       	cpc	r19, r1
    2028:	b9 f5       	brne	.+110    	; 0x2098 <M_ADC_void_GetDigitalValueSynchNonBlocking+0xe6>
	case ADC_LEFT_ADJUST:
		(*data) = ADCL_REG;
    202a:	e4 e2       	ldi	r30, 0x24	; 36
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	ea 81       	ldd	r30, Y+2	; 0x02
    2036:	fb 81       	ldd	r31, Y+3	; 0x03
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	80 83       	st	Z, r24
		(*data) |= ADCH_REG<<2;
    203c:	ea 81       	ldd	r30, Y+2	; 0x02
    203e:	fb 81       	ldd	r31, Y+3	; 0x03
    2040:	20 81       	ld	r18, Z
    2042:	31 81       	ldd	r19, Z+1	; 0x01
    2044:	e5 e2       	ldi	r30, 0x25	; 37
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	88 2f       	mov	r24, r24
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	82 2b       	or	r24, r18
    2058:	93 2b       	or	r25, r19
    205a:	ea 81       	ldd	r30, Y+2	; 0x02
    205c:	fb 81       	ldd	r31, Y+3	; 0x03
    205e:	91 83       	std	Z+1, r25	; 0x01
    2060:	80 83       	st	Z, r24
    2062:	1a c0       	rjmp	.+52     	; 0x2098 <M_ADC_void_GetDigitalValueSynchNonBlocking+0xe6>
		break;
	case ADC_RIGHT_ADJUST:
		(*data) = ADCL_REG;
    2064:	e4 e2       	ldi	r30, 0x24	; 36
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	88 2f       	mov	r24, r24
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	ea 81       	ldd	r30, Y+2	; 0x02
    2070:	fb 81       	ldd	r31, Y+3	; 0x03
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	80 83       	st	Z, r24
		(*data) |= (ADCH_REG<<8);
    2076:	ea 81       	ldd	r30, Y+2	; 0x02
    2078:	fb 81       	ldd	r31, Y+3	; 0x03
    207a:	20 81       	ld	r18, Z
    207c:	31 81       	ldd	r19, Z+1	; 0x01
    207e:	e5 e2       	ldi	r30, 0x25	; 37
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	98 2f       	mov	r25, r24
    208a:	88 27       	eor	r24, r24
    208c:	82 2b       	or	r24, r18
    208e:	93 2b       	or	r25, r19
    2090:	ea 81       	ldd	r30, Y+2	; 0x02
    2092:	fb 81       	ldd	r31, Y+3	; 0x03
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	80 83       	st	Z, r24
		break;
	}

	return ADC_SUCCEED;
    2098:	31 e0       	ldi	r19, 0x01	; 1
    209a:	3e 83       	std	Y+6, r19	; 0x06
    209c:	8e 81       	ldd	r24, Y+6	; 0x06

	}
}
    209e:	26 96       	adiw	r28, 0x06	; 6
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	f8 94       	cli
    20a4:	de bf       	out	0x3e, r29	; 62
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	cd bf       	out	0x3d, r28	; 61
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <M_ADC_void_GetDigitalValueAsynchCallback>:

//(conversion is started externally)
void M_ADC_void_GetDigitalValueAsynchCallback(ADC_channel_t channel, void (*localCallBack)(void)){
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <M_ADC_void_GetDigitalValueAsynchCallback+0x6>
    20b6:	0f 92       	push	r0
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	7b 83       	std	Y+3, r23	; 0x03
    20c0:	6a 83       	std	Y+2, r22	; 0x02

	//Channel
	ADMUX_REG &= 0xE0;
    20c2:	a7 e2       	ldi	r26, 0x27	; 39
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e7 e2       	ldi	r30, 0x27	; 39
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	80 7e       	andi	r24, 0xE0	; 224
    20ce:	8c 93       	st	X, r24
	ADMUX_REG |= channel ;
    20d0:	a7 e2       	ldi	r26, 0x27	; 39
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e7 e2       	ldi	r30, 0x27	; 39
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	90 81       	ld	r25, Z
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	89 2b       	or	r24, r25
    20de:	8c 93       	st	X, r24

	ADC_CallBackPTR = localCallBack;
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	9b 81       	ldd	r25, Y+3	; 0x03
    20e4:	90 93 42 04 	sts	0x0442, r25
    20e8:	80 93 41 04 	sts	0x0441, r24

}
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <__vector_16>:


ISR(ADC_vect){
    20f8:	1f 92       	push	r1
    20fa:	0f 92       	push	r0
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	0f 92       	push	r0
    2100:	11 24       	eor	r1, r1
    2102:	2f 93       	push	r18
    2104:	3f 93       	push	r19
    2106:	4f 93       	push	r20
    2108:	5f 93       	push	r21
    210a:	6f 93       	push	r22
    210c:	7f 93       	push	r23
    210e:	8f 93       	push	r24
    2110:	9f 93       	push	r25
    2112:	af 93       	push	r26
    2114:	bf 93       	push	r27
    2116:	ef 93       	push	r30
    2118:	ff 93       	push	r31
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62

	if(ADC_CallBackPTR != NULL){
    2122:	80 91 41 04 	lds	r24, 0x0441
    2126:	90 91 42 04 	lds	r25, 0x0442
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	29 f0       	breq	.+10     	; 0x2138 <__vector_16+0x40>
		ADC_CallBackPTR();
    212e:	e0 91 41 04 	lds	r30, 0x0441
    2132:	f0 91 42 04 	lds	r31, 0x0442
    2136:	09 95       	icall
	}



}
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	ff 91       	pop	r31
    213e:	ef 91       	pop	r30
    2140:	bf 91       	pop	r27
    2142:	af 91       	pop	r26
    2144:	9f 91       	pop	r25
    2146:	8f 91       	pop	r24
    2148:	7f 91       	pop	r23
    214a:	6f 91       	pop	r22
    214c:	5f 91       	pop	r21
    214e:	4f 91       	pop	r20
    2150:	3f 91       	pop	r19
    2152:	2f 91       	pop	r18
    2154:	0f 90       	pop	r0
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	0f 90       	pop	r0
    215a:	1f 90       	pop	r1
    215c:	18 95       	reti

0000215e <H_WIFI_void_WIFIInit>:
extern u8 RX_Counter_UART;
extern S_UART_config_t UART_config  ;

char buff[100];

void H_WIFI_void_WIFIInit(S_WIFI_Config_t S_WIFI_Config) {
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	c4 5a       	subi	r28, 0xA4	; 164
    2168:	d0 40       	sbci	r29, 0x00	; 0
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	fe 01       	movw	r30, r28
    2176:	e2 56       	subi	r30, 0x62	; 98
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	20 83       	st	Z, r18
    217c:	31 83       	std	Z+1, r19	; 0x01
    217e:	42 83       	std	Z+2, r20	; 0x02
    2180:	53 83       	std	Z+3, r21	; 0x03
    2182:	64 83       	std	Z+4, r22	; 0x04
    2184:	75 83       	std	Z+5, r23	; 0x05
    2186:	86 83       	std	Z+6, r24	; 0x06

	char command[100];
	M_UART_void_UARTInit(UART_config);
    2188:	80 91 c6 02 	lds	r24, 0x02C6
    218c:	90 91 c7 02 	lds	r25, 0x02C7
    2190:	a0 91 c8 02 	lds	r26, 0x02C8
    2194:	b0 91 c9 02 	lds	r27, 0x02C9
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	0e 94 50 07 	call	0xea0	; 0xea0 <M_UART_void_UARTInit>
	//_delay_ms(500);
	sprintf(command, "AT+CWMODE=%d\r\n", S_WIFI_Config.WIFI_Mode);
    21a0:	fe 01       	movw	r30, r28
    21a2:	e2 56       	subi	r30, 0x62	; 98
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	80 81       	ld	r24, Z
    21a8:	28 2f       	mov	r18, r24
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <H_WIFI_void_WIFIInit+0x50>
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <H_WIFI_void_WIFIInit+0x52>
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <H_WIFI_void_WIFIInit+0x54>
    21b2:	ed b7       	in	r30, 0x3d	; 61
    21b4:	fe b7       	in	r31, 0x3e	; 62
    21b6:	31 96       	adiw	r30, 0x01	; 1
    21b8:	ce 01       	movw	r24, r28
    21ba:	ca 96       	adiw	r24, 0x3a	; 58
    21bc:	91 83       	std	Z+1, r25	; 0x01
    21be:	80 83       	st	Z, r24
    21c0:	80 e6       	ldi	r24, 0x60	; 96
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	93 83       	std	Z+3, r25	; 0x03
    21c6:	82 83       	std	Z+2, r24	; 0x02
    21c8:	35 83       	std	Z+5, r19	; 0x05
    21ca:	24 83       	std	Z+4, r18	; 0x04
    21cc:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <sprintf>
    21d0:	8d b7       	in	r24, 0x3d	; 61
    21d2:	9e b7       	in	r25, 0x3e	; 62
    21d4:	06 96       	adiw	r24, 0x06	; 6
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	9e bf       	out	0x3e, r25	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	8d bf       	out	0x3d, r24	; 61
	WIFI_command_statue_t command_statue = H_WIFI_command_statue_t_sendData(
			command, buff, 2000);
    21e0:	ce 01       	movw	r24, r28
    21e2:	ca 96       	adiw	r24, 0x3a	; 58
    21e4:	2b ea       	ldi	r18, 0xAB	; 171
    21e6:	34 e0       	ldi	r19, 0x04	; 4
    21e8:	b9 01       	movw	r22, r18
    21ea:	40 ed       	ldi	r20, 0xD0	; 208
    21ec:	57 e0       	ldi	r21, 0x07	; 7
    21ee:	0e 94 ab 14 	call	0x2956	; 0x2956 <H_WIFI_command_statue_t_sendData>
    21f2:	89 af       	std	Y+57, r24	; 0x39
#if(WIFI_DEBUG)
	//configuar LCD here
	if (command_statue == WIFI_command_ok) {
    21f4:	89 ad       	ldd	r24, Y+57	; 0x39
    21f6:	88 23       	and	r24, r24
    21f8:	09 f0       	breq	.+2      	; 0x21fc <H_WIFI_void_WIFIInit+0x9e>
    21fa:	79 c0       	rjmp	.+242    	; 0x22ee <H_WIFI_void_WIFIInit+0x190>
		H_LCD_void_Clear();
    21fc:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI mode updated");
    2200:	8f e6       	ldi	r24, 0x6F	; 111
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <H_LCD_void_sendString>
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	aa ef       	ldi	r26, 0xFA	; 250
    220e:	b4 e4       	ldi	r27, 0x44	; 68
    2210:	8d ab       	std	Y+53, r24	; 0x35
    2212:	9e ab       	std	Y+54, r25	; 0x36
    2214:	af ab       	std	Y+55, r26	; 0x37
    2216:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2218:	6d a9       	ldd	r22, Y+53	; 0x35
    221a:	7e a9       	ldd	r23, Y+54	; 0x36
    221c:	8f a9       	ldd	r24, Y+55	; 0x37
    221e:	98 ad       	ldd	r25, Y+56	; 0x38
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	4a e7       	ldi	r20, 0x7A	; 122
    2226:	55 e4       	ldi	r21, 0x45	; 69
    2228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	89 ab       	std	Y+49, r24	; 0x31
    2232:	9a ab       	std	Y+50, r25	; 0x32
    2234:	ab ab       	std	Y+51, r26	; 0x33
    2236:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2238:	69 a9       	ldd	r22, Y+49	; 0x31
    223a:	7a a9       	ldd	r23, Y+50	; 0x32
    223c:	8b a9       	ldd	r24, Y+51	; 0x33
    223e:	9c a9       	ldd	r25, Y+52	; 0x34
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e8       	ldi	r20, 0x80	; 128
    2246:	5f e3       	ldi	r21, 0x3F	; 63
    2248:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    224c:	88 23       	and	r24, r24
    224e:	2c f4       	brge	.+10     	; 0x225a <H_WIFI_void_WIFIInit+0xfc>
		__ticks = 1;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	98 ab       	std	Y+48, r25	; 0x30
    2256:	8f a7       	std	Y+47, r24	; 0x2f
    2258:	3f c0       	rjmp	.+126    	; 0x22d8 <H_WIFI_void_WIFIInit+0x17a>
	else if (__tmp > 65535)
    225a:	69 a9       	ldd	r22, Y+49	; 0x31
    225c:	7a a9       	ldd	r23, Y+50	; 0x32
    225e:	8b a9       	ldd	r24, Y+51	; 0x33
    2260:	9c a9       	ldd	r25, Y+52	; 0x34
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	3f ef       	ldi	r19, 0xFF	; 255
    2266:	4f e7       	ldi	r20, 0x7F	; 127
    2268:	57 e4       	ldi	r21, 0x47	; 71
    226a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    226e:	18 16       	cp	r1, r24
    2270:	4c f5       	brge	.+82     	; 0x22c4 <H_WIFI_void_WIFIInit+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2272:	6d a9       	ldd	r22, Y+53	; 0x35
    2274:	7e a9       	ldd	r23, Y+54	; 0x36
    2276:	8f a9       	ldd	r24, Y+55	; 0x37
    2278:	98 ad       	ldd	r25, Y+56	; 0x38
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e2       	ldi	r20, 0x20	; 32
    2280:	51 e4       	ldi	r21, 0x41	; 65
    2282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	98 ab       	std	Y+48, r25	; 0x30
    2298:	8f a7       	std	Y+47, r24	; 0x2f
    229a:	0f c0       	rjmp	.+30     	; 0x22ba <H_WIFI_void_WIFIInit+0x15c>
    229c:	80 e9       	ldi	r24, 0x90	; 144
    229e:	91 e0       	ldi	r25, 0x01	; 1
    22a0:	9e a7       	std	Y+46, r25	; 0x2e
    22a2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    22a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <H_WIFI_void_WIFIInit+0x14a>
    22ac:	9e a7       	std	Y+46, r25	; 0x2e
    22ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    22b2:	98 a9       	ldd	r25, Y+48	; 0x30
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	98 ab       	std	Y+48, r25	; 0x30
    22b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    22bc:	98 a9       	ldd	r25, Y+48	; 0x30
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	69 f7       	brne	.-38     	; 0x229c <H_WIFI_void_WIFIInit+0x13e>
    22c2:	a1 c0       	rjmp	.+322    	; 0x2406 <H_WIFI_void_WIFIInit+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c4:	69 a9       	ldd	r22, Y+49	; 0x31
    22c6:	7a a9       	ldd	r23, Y+50	; 0x32
    22c8:	8b a9       	ldd	r24, Y+51	; 0x33
    22ca:	9c a9       	ldd	r25, Y+52	; 0x34
    22cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	98 ab       	std	Y+48, r25	; 0x30
    22d6:	8f a7       	std	Y+47, r24	; 0x2f
    22d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22da:	98 a9       	ldd	r25, Y+48	; 0x30
    22dc:	9c a7       	std	Y+44, r25	; 0x2c
    22de:	8b a7       	std	Y+43, r24	; 0x2b
    22e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <H_WIFI_void_WIFIInit+0x186>
    22e8:	9c a7       	std	Y+44, r25	; 0x2c
    22ea:	8b a7       	std	Y+43, r24	; 0x2b
    22ec:	8c c0       	rjmp	.+280    	; 0x2406 <H_WIFI_void_WIFIInit+0x2a8>
		_delay_ms(2000);
	} else if (command_statue == WIFI_command_error) {
    22ee:	89 ad       	ldd	r24, Y+57	; 0x39
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	09 f0       	breq	.+2      	; 0x22f6 <H_WIFI_void_WIFIInit+0x198>
    22f4:	7f c0       	rjmp	.+254    	; 0x23f4 <H_WIFI_void_WIFIInit+0x296>
		H_LCD_void_Clear();
    22f6:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI mode update error!");
    22fa:	81 e8       	ldi	r24, 0x81	; 129
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <H_LCD_void_sendString>
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	aa ef       	ldi	r26, 0xFA	; 250
    2308:	b4 e4       	ldi	r27, 0x44	; 68
    230a:	8f a3       	std	Y+39, r24	; 0x27
    230c:	98 a7       	std	Y+40, r25	; 0x28
    230e:	a9 a7       	std	Y+41, r26	; 0x29
    2310:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2312:	6f a1       	ldd	r22, Y+39	; 0x27
    2314:	78 a5       	ldd	r23, Y+40	; 0x28
    2316:	89 a5       	ldd	r24, Y+41	; 0x29
    2318:	9a a5       	ldd	r25, Y+42	; 0x2a
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	4a e7       	ldi	r20, 0x7A	; 122
    2320:	55 e4       	ldi	r21, 0x45	; 69
    2322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	8b a3       	std	Y+35, r24	; 0x23
    232c:	9c a3       	std	Y+36, r25	; 0x24
    232e:	ad a3       	std	Y+37, r26	; 0x25
    2330:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2332:	6b a1       	ldd	r22, Y+35	; 0x23
    2334:	7c a1       	ldd	r23, Y+36	; 0x24
    2336:	8d a1       	ldd	r24, Y+37	; 0x25
    2338:	9e a1       	ldd	r25, Y+38	; 0x26
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e8       	ldi	r20, 0x80	; 128
    2340:	5f e3       	ldi	r21, 0x3F	; 63
    2342:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2346:	88 23       	and	r24, r24
    2348:	2c f4       	brge	.+10     	; 0x2354 <H_WIFI_void_WIFIInit+0x1f6>
		__ticks = 1;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	9a a3       	std	Y+34, r25	; 0x22
    2350:	89 a3       	std	Y+33, r24	; 0x21
    2352:	3f c0       	rjmp	.+126    	; 0x23d2 <H_WIFI_void_WIFIInit+0x274>
	else if (__tmp > 65535)
    2354:	6b a1       	ldd	r22, Y+35	; 0x23
    2356:	7c a1       	ldd	r23, Y+36	; 0x24
    2358:	8d a1       	ldd	r24, Y+37	; 0x25
    235a:	9e a1       	ldd	r25, Y+38	; 0x26
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	3f ef       	ldi	r19, 0xFF	; 255
    2360:	4f e7       	ldi	r20, 0x7F	; 127
    2362:	57 e4       	ldi	r21, 0x47	; 71
    2364:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2368:	18 16       	cp	r1, r24
    236a:	4c f5       	brge	.+82     	; 0x23be <H_WIFI_void_WIFIInit+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236c:	6f a1       	ldd	r22, Y+39	; 0x27
    236e:	78 a5       	ldd	r23, Y+40	; 0x28
    2370:	89 a5       	ldd	r24, Y+41	; 0x29
    2372:	9a a5       	ldd	r25, Y+42	; 0x2a
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e2       	ldi	r20, 0x20	; 32
    237a:	51 e4       	ldi	r21, 0x41	; 65
    237c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	bc 01       	movw	r22, r24
    2386:	cd 01       	movw	r24, r26
    2388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	9a a3       	std	Y+34, r25	; 0x22
    2392:	89 a3       	std	Y+33, r24	; 0x21
    2394:	0f c0       	rjmp	.+30     	; 0x23b4 <H_WIFI_void_WIFIInit+0x256>
    2396:	80 e9       	ldi	r24, 0x90	; 144
    2398:	91 e0       	ldi	r25, 0x01	; 1
    239a:	98 a3       	std	Y+32, r25	; 0x20
    239c:	8f 8f       	std	Y+31, r24	; 0x1f
    239e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23a0:	98 a1       	ldd	r25, Y+32	; 0x20
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <H_WIFI_void_WIFIInit+0x244>
    23a6:	98 a3       	std	Y+32, r25	; 0x20
    23a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23aa:	89 a1       	ldd	r24, Y+33	; 0x21
    23ac:	9a a1       	ldd	r25, Y+34	; 0x22
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	9a a3       	std	Y+34, r25	; 0x22
    23b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b4:	89 a1       	ldd	r24, Y+33	; 0x21
    23b6:	9a a1       	ldd	r25, Y+34	; 0x22
    23b8:	00 97       	sbiw	r24, 0x00	; 0
    23ba:	69 f7       	brne	.-38     	; 0x2396 <H_WIFI_void_WIFIInit+0x238>
    23bc:	14 c0       	rjmp	.+40     	; 0x23e6 <H_WIFI_void_WIFIInit+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23be:	6b a1       	ldd	r22, Y+35	; 0x23
    23c0:	7c a1       	ldd	r23, Y+36	; 0x24
    23c2:	8d a1       	ldd	r24, Y+37	; 0x25
    23c4:	9e a1       	ldd	r25, Y+38	; 0x26
    23c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	9a a3       	std	Y+34, r25	; 0x22
    23d0:	89 a3       	std	Y+33, r24	; 0x21
    23d2:	89 a1       	ldd	r24, Y+33	; 0x21
    23d4:	9a a1       	ldd	r25, Y+34	; 0x22
    23d6:	9e 8f       	std	Y+30, r25	; 0x1e
    23d8:	8d 8f       	std	Y+29, r24	; 0x1d
    23da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <H_WIFI_void_WIFIInit+0x280>
    23e2:	9e 8f       	std	Y+30, r25	; 0x1e
    23e4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2000);
		H_LCD_void_Clear();
    23e6:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <H_LCD_void_Clear>
		H_LCD_void_sendString(buff);
    23ea:	8b ea       	ldi	r24, 0xAB	; 171
    23ec:	94 e0       	ldi	r25, 0x04	; 4
    23ee:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <H_LCD_void_sendString>
    23f2:	09 c0       	rjmp	.+18     	; 0x2406 <H_WIFI_void_WIFIInit+0x2a8>
	} else if (command_statue == WIFI_command_timeOute) {
    23f4:	89 ad       	ldd	r24, Y+57	; 0x39
    23f6:	82 30       	cpi	r24, 0x02	; 2
    23f8:	31 f4       	brne	.+12     	; 0x2406 <H_WIFI_void_WIFIInit+0x2a8>
		H_LCD_void_Clear();
    23fa:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI mode update timeout");
    23fe:	89 e9       	ldi	r24, 0x99	; 153
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <H_LCD_void_sendString>

	}
#endif

	sprintf(command, "AT+CWJAP=\"%s\",\"%s\"\r\n", S_WIFI_Config.ssid,
    2406:	fe 01       	movw	r30, r28
    2408:	e2 56       	subi	r30, 0x62	; 98
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	21 81       	ldd	r18, Z+1	; 0x01
    240e:	32 81       	ldd	r19, Z+2	; 0x02
    2410:	fe 01       	movw	r30, r28
    2412:	e2 56       	subi	r30, 0x62	; 98
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	43 81       	ldd	r20, Z+3	; 0x03
    2418:	54 81       	ldd	r21, Z+4	; 0x04
    241a:	8d b7       	in	r24, 0x3d	; 61
    241c:	9e b7       	in	r25, 0x3e	; 62
    241e:	08 97       	sbiw	r24, 0x08	; 8
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	9e bf       	out	0x3e, r25	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	8d bf       	out	0x3d, r24	; 61
    242a:	ed b7       	in	r30, 0x3d	; 61
    242c:	fe b7       	in	r31, 0x3e	; 62
    242e:	31 96       	adiw	r30, 0x01	; 1
    2430:	ce 01       	movw	r24, r28
    2432:	ca 96       	adiw	r24, 0x3a	; 58
    2434:	91 83       	std	Z+1, r25	; 0x01
    2436:	80 83       	st	Z, r24
    2438:	82 eb       	ldi	r24, 0xB2	; 178
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	93 83       	std	Z+3, r25	; 0x03
    243e:	82 83       	std	Z+2, r24	; 0x02
    2440:	35 83       	std	Z+5, r19	; 0x05
    2442:	24 83       	std	Z+4, r18	; 0x04
    2444:	57 83       	std	Z+7, r21	; 0x07
    2446:	46 83       	std	Z+6, r20	; 0x06
    2448:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <sprintf>
    244c:	8d b7       	in	r24, 0x3d	; 61
    244e:	9e b7       	in	r25, 0x3e	; 62
    2450:	08 96       	adiw	r24, 0x08	; 8
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	9e bf       	out	0x3e, r25	; 62
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	8d bf       	out	0x3d, r24	; 61
			S_WIFI_Config.password);
	command_statue = H_WIFI_command_statue_t_sendData(command, buff, 2000);
    245c:	ce 01       	movw	r24, r28
    245e:	ca 96       	adiw	r24, 0x3a	; 58
    2460:	2b ea       	ldi	r18, 0xAB	; 171
    2462:	34 e0       	ldi	r19, 0x04	; 4
    2464:	b9 01       	movw	r22, r18
    2466:	40 ed       	ldi	r20, 0xD0	; 208
    2468:	57 e0       	ldi	r21, 0x07	; 7
    246a:	0e 94 ab 14 	call	0x2956	; 0x2956 <H_WIFI_command_statue_t_sendData>
    246e:	89 af       	std	Y+57, r24	; 0x39

#if(WIFI_DEBUG)
	if (command_statue == WIFI_command_ok) {
    2470:	89 ad       	ldd	r24, Y+57	; 0x39
    2472:	88 23       	and	r24, r24
    2474:	09 f0       	breq	.+2      	; 0x2478 <H_WIFI_void_WIFIInit+0x31a>
    2476:	79 c0       	rjmp	.+242    	; 0x256a <H_WIFI_void_WIFIInit+0x40c>
		H_LCD_void_Clear();
    2478:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI SSID Pass updated");
    247c:	87 ec       	ldi	r24, 0xC7	; 199
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <H_LCD_void_sendString>
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	aa ef       	ldi	r26, 0xFA	; 250
    248a:	b4 e4       	ldi	r27, 0x44	; 68
    248c:	89 8f       	std	Y+25, r24	; 0x19
    248e:	9a 8f       	std	Y+26, r25	; 0x1a
    2490:	ab 8f       	std	Y+27, r26	; 0x1b
    2492:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2494:	69 8d       	ldd	r22, Y+25	; 0x19
    2496:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2498:	8b 8d       	ldd	r24, Y+27	; 0x1b
    249a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	4a e7       	ldi	r20, 0x7A	; 122
    24a2:	55 e4       	ldi	r21, 0x45	; 69
    24a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	8d 8b       	std	Y+21, r24	; 0x15
    24ae:	9e 8b       	std	Y+22, r25	; 0x16
    24b0:	af 8b       	std	Y+23, r26	; 0x17
    24b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24b4:	6d 89       	ldd	r22, Y+21	; 0x15
    24b6:	7e 89       	ldd	r23, Y+22	; 0x16
    24b8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ba:	98 8d       	ldd	r25, Y+24	; 0x18
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e8       	ldi	r20, 0x80	; 128
    24c2:	5f e3       	ldi	r21, 0x3F	; 63
    24c4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    24c8:	88 23       	and	r24, r24
    24ca:	2c f4       	brge	.+10     	; 0x24d6 <H_WIFI_void_WIFIInit+0x378>
		__ticks = 1;
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	9c 8b       	std	Y+20, r25	; 0x14
    24d2:	8b 8b       	std	Y+19, r24	; 0x13
    24d4:	3f c0       	rjmp	.+126    	; 0x2554 <H_WIFI_void_WIFIInit+0x3f6>
	else if (__tmp > 65535)
    24d6:	6d 89       	ldd	r22, Y+21	; 0x15
    24d8:	7e 89       	ldd	r23, Y+22	; 0x16
    24da:	8f 89       	ldd	r24, Y+23	; 0x17
    24dc:	98 8d       	ldd	r25, Y+24	; 0x18
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	3f ef       	ldi	r19, 0xFF	; 255
    24e2:	4f e7       	ldi	r20, 0x7F	; 127
    24e4:	57 e4       	ldi	r21, 0x47	; 71
    24e6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    24ea:	18 16       	cp	r1, r24
    24ec:	4c f5       	brge	.+82     	; 0x2540 <H_WIFI_void_WIFIInit+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ee:	69 8d       	ldd	r22, Y+25	; 0x19
    24f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e2       	ldi	r20, 0x20	; 32
    24fc:	51 e4       	ldi	r21, 0x41	; 65
    24fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	bc 01       	movw	r22, r24
    2508:	cd 01       	movw	r24, r26
    250a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	9c 8b       	std	Y+20, r25	; 0x14
    2514:	8b 8b       	std	Y+19, r24	; 0x13
    2516:	0f c0       	rjmp	.+30     	; 0x2536 <H_WIFI_void_WIFIInit+0x3d8>
    2518:	80 e9       	ldi	r24, 0x90	; 144
    251a:	91 e0       	ldi	r25, 0x01	; 1
    251c:	9a 8b       	std	Y+18, r25	; 0x12
    251e:	89 8b       	std	Y+17, r24	; 0x11
    2520:	89 89       	ldd	r24, Y+17	; 0x11
    2522:	9a 89       	ldd	r25, Y+18	; 0x12
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <H_WIFI_void_WIFIInit+0x3c6>
    2528:	9a 8b       	std	Y+18, r25	; 0x12
    252a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252c:	8b 89       	ldd	r24, Y+19	; 0x13
    252e:	9c 89       	ldd	r25, Y+20	; 0x14
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	9c 8b       	std	Y+20, r25	; 0x14
    2534:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2536:	8b 89       	ldd	r24, Y+19	; 0x13
    2538:	9c 89       	ldd	r25, Y+20	; 0x14
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	69 f7       	brne	.-38     	; 0x2518 <H_WIFI_void_WIFIInit+0x3ba>
    253e:	a1 c0       	rjmp	.+322    	; 0x2682 <H_WIFI_void_WIFIInit+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2540:	6d 89       	ldd	r22, Y+21	; 0x15
    2542:	7e 89       	ldd	r23, Y+22	; 0x16
    2544:	8f 89       	ldd	r24, Y+23	; 0x17
    2546:	98 8d       	ldd	r25, Y+24	; 0x18
    2548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	9c 8b       	std	Y+20, r25	; 0x14
    2552:	8b 8b       	std	Y+19, r24	; 0x13
    2554:	8b 89       	ldd	r24, Y+19	; 0x13
    2556:	9c 89       	ldd	r25, Y+20	; 0x14
    2558:	98 8b       	std	Y+16, r25	; 0x10
    255a:	8f 87       	std	Y+15, r24	; 0x0f
    255c:	8f 85       	ldd	r24, Y+15	; 0x0f
    255e:	98 89       	ldd	r25, Y+16	; 0x10
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <H_WIFI_void_WIFIInit+0x402>
    2564:	98 8b       	std	Y+16, r25	; 0x10
    2566:	8f 87       	std	Y+15, r24	; 0x0f
    2568:	8c c0       	rjmp	.+280    	; 0x2682 <H_WIFI_void_WIFIInit+0x524>
		_delay_ms(2000);
	} else if (command_statue == WIFI_command_error) {
    256a:	89 ad       	ldd	r24, Y+57	; 0x39
    256c:	81 30       	cpi	r24, 0x01	; 1
    256e:	09 f0       	breq	.+2      	; 0x2572 <H_WIFI_void_WIFIInit+0x414>
    2570:	7f c0       	rjmp	.+254    	; 0x2670 <H_WIFI_void_WIFIInit+0x512>
		H_LCD_void_Clear();
    2572:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI SSID update error!");
    2576:	8e ed       	ldi	r24, 0xDE	; 222
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <H_LCD_void_sendString>
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	aa ef       	ldi	r26, 0xFA	; 250
    2584:	b4 e4       	ldi	r27, 0x44	; 68
    2586:	8b 87       	std	Y+11, r24	; 0x0b
    2588:	9c 87       	std	Y+12, r25	; 0x0c
    258a:	ad 87       	std	Y+13, r26	; 0x0d
    258c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2590:	7c 85       	ldd	r23, Y+12	; 0x0c
    2592:	8d 85       	ldd	r24, Y+13	; 0x0d
    2594:	9e 85       	ldd	r25, Y+14	; 0x0e
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	4a e7       	ldi	r20, 0x7A	; 122
    259c:	55 e4       	ldi	r21, 0x45	; 69
    259e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	8f 83       	std	Y+7, r24	; 0x07
    25a8:	98 87       	std	Y+8, r25	; 0x08
    25aa:	a9 87       	std	Y+9, r26	; 0x09
    25ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ae:	6f 81       	ldd	r22, Y+7	; 0x07
    25b0:	78 85       	ldd	r23, Y+8	; 0x08
    25b2:	89 85       	ldd	r24, Y+9	; 0x09
    25b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e8       	ldi	r20, 0x80	; 128
    25bc:	5f e3       	ldi	r21, 0x3F	; 63
    25be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    25c2:	88 23       	and	r24, r24
    25c4:	2c f4       	brge	.+10     	; 0x25d0 <H_WIFI_void_WIFIInit+0x472>
		__ticks = 1;
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	3f c0       	rjmp	.+126    	; 0x264e <H_WIFI_void_WIFIInit+0x4f0>
	else if (__tmp > 65535)
    25d0:	6f 81       	ldd	r22, Y+7	; 0x07
    25d2:	78 85       	ldd	r23, Y+8	; 0x08
    25d4:	89 85       	ldd	r24, Y+9	; 0x09
    25d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	3f ef       	ldi	r19, 0xFF	; 255
    25dc:	4f e7       	ldi	r20, 0x7F	; 127
    25de:	57 e4       	ldi	r21, 0x47	; 71
    25e0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    25e4:	18 16       	cp	r1, r24
    25e6:	4c f5       	brge	.+82     	; 0x263a <H_WIFI_void_WIFIInit+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	40 e2       	ldi	r20, 0x20	; 32
    25f6:	51 e4       	ldi	r21, 0x41	; 65
    25f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	bc 01       	movw	r22, r24
    2602:	cd 01       	movw	r24, r26
    2604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	9e 83       	std	Y+6, r25	; 0x06
    260e:	8d 83       	std	Y+5, r24	; 0x05
    2610:	0f c0       	rjmp	.+30     	; 0x2630 <H_WIFI_void_WIFIInit+0x4d2>
    2612:	80 e9       	ldi	r24, 0x90	; 144
    2614:	91 e0       	ldi	r25, 0x01	; 1
    2616:	9c 83       	std	Y+4, r25	; 0x04
    2618:	8b 83       	std	Y+3, r24	; 0x03
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	9c 81       	ldd	r25, Y+4	; 0x04
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <H_WIFI_void_WIFIInit+0x4c0>
    2622:	9c 83       	std	Y+4, r25	; 0x04
    2624:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2626:	8d 81       	ldd	r24, Y+5	; 0x05
    2628:	9e 81       	ldd	r25, Y+6	; 0x06
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	9e 83       	std	Y+6, r25	; 0x06
    262e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	9e 81       	ldd	r25, Y+6	; 0x06
    2634:	00 97       	sbiw	r24, 0x00	; 0
    2636:	69 f7       	brne	.-38     	; 0x2612 <H_WIFI_void_WIFIInit+0x4b4>
    2638:	14 c0       	rjmp	.+40     	; 0x2662 <H_WIFI_void_WIFIInit+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263a:	6f 81       	ldd	r22, Y+7	; 0x07
    263c:	78 85       	ldd	r23, Y+8	; 0x08
    263e:	89 85       	ldd	r24, Y+9	; 0x09
    2640:	9a 85       	ldd	r25, Y+10	; 0x0a
    2642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	9e 83       	std	Y+6, r25	; 0x06
    264c:	8d 83       	std	Y+5, r24	; 0x05
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	9e 81       	ldd	r25, Y+6	; 0x06
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	9a 81       	ldd	r25, Y+2	; 0x02
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <H_WIFI_void_WIFIInit+0x4fc>
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		H_LCD_void_Clear();
    2662:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <H_LCD_void_Clear>
		H_LCD_void_sendString(buff);
    2666:	8b ea       	ldi	r24, 0xAB	; 171
    2668:	94 e0       	ldi	r25, 0x04	; 4
    266a:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <H_LCD_void_sendString>
    266e:	09 c0       	rjmp	.+18     	; 0x2682 <H_WIFI_void_WIFIInit+0x524>
	} else if (command_statue == WIFI_command_timeOute) {
    2670:	89 ad       	ldd	r24, Y+57	; 0x39
    2672:	82 30       	cpi	r24, 0x02	; 2
    2674:	31 f4       	brne	.+12     	; 0x2682 <H_WIFI_void_WIFIInit+0x524>
		H_LCD_void_Clear();
    2676:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI SSID update timeout");
    267a:	86 ef       	ldi	r24, 0xF6	; 246
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <H_LCD_void_sendString>

	}
#endif

}
    2682:	cc 55       	subi	r28, 0x5C	; 92
    2684:	df 4f       	sbci	r29, 0xFF	; 255
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <H_WIFI_void_StartTCPServer>:

void H_WIFI_void_StartTCPServer(void) {
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	6d 97       	sbiw	r28, 0x1d	; 29
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
	WIFI_command_statue_t command_statue = H_WIFI_command_statue_t_sendData(
			"AT+CIPMUX=1\r\n", buff, 2000);
    26aa:	8f e0       	ldi	r24, 0x0F	; 15
    26ac:	91 e0       	ldi	r25, 0x01	; 1
    26ae:	2b ea       	ldi	r18, 0xAB	; 171
    26b0:	34 e0       	ldi	r19, 0x04	; 4
    26b2:	b9 01       	movw	r22, r18
    26b4:	40 ed       	ldi	r20, 0xD0	; 208
    26b6:	57 e0       	ldi	r21, 0x07	; 7
    26b8:	0e 94 ab 14 	call	0x2956	; 0x2956 <H_WIFI_command_statue_t_sendData>
    26bc:	8d 8f       	std	Y+29, r24	; 0x1d
	command_statue = H_WIFI_command_statue_t_sendData("AT+CIPSERVER=1\r\n",
    26be:	8d e1       	ldi	r24, 0x1D	; 29
    26c0:	91 e0       	ldi	r25, 0x01	; 1
    26c2:	2b ea       	ldi	r18, 0xAB	; 171
    26c4:	34 e0       	ldi	r19, 0x04	; 4
    26c6:	b9 01       	movw	r22, r18
    26c8:	40 ed       	ldi	r20, 0xD0	; 208
    26ca:	57 e0       	ldi	r21, 0x07	; 7
    26cc:	0e 94 ab 14 	call	0x2956	; 0x2956 <H_WIFI_command_statue_t_sendData>
    26d0:	8d 8f       	std	Y+29, r24	; 0x1d
			buff, 2000);

#if(WIFI_DEBUG)
	if (command_statue == WIFI_command_ok) {
    26d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d4:	88 23       	and	r24, r24
    26d6:	09 f0       	breq	.+2      	; 0x26da <H_WIFI_void_StartTCPServer+0x44>
    26d8:	79 c0       	rjmp	.+242    	; 0x27cc <H_WIFI_void_StartTCPServer+0x136>
		H_LCD_void_Clear();
    26da:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <H_LCD_void_Clear>
		H_LCD_void_sendString("TCP server started");
    26de:	8e e2       	ldi	r24, 0x2E	; 46
    26e0:	91 e0       	ldi	r25, 0x01	; 1
    26e2:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <H_LCD_void_sendString>
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	aa ef       	ldi	r26, 0xFA	; 250
    26ec:	b4 e4       	ldi	r27, 0x44	; 68
    26ee:	89 8f       	std	Y+25, r24	; 0x19
    26f0:	9a 8f       	std	Y+26, r25	; 0x1a
    26f2:	ab 8f       	std	Y+27, r26	; 0x1b
    26f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f6:	69 8d       	ldd	r22, Y+25	; 0x19
    26f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	4a e7       	ldi	r20, 0x7A	; 122
    2704:	55 e4       	ldi	r21, 0x45	; 69
    2706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	8d 8b       	std	Y+21, r24	; 0x15
    2710:	9e 8b       	std	Y+22, r25	; 0x16
    2712:	af 8b       	std	Y+23, r26	; 0x17
    2714:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2716:	6d 89       	ldd	r22, Y+21	; 0x15
    2718:	7e 89       	ldd	r23, Y+22	; 0x16
    271a:	8f 89       	ldd	r24, Y+23	; 0x17
    271c:	98 8d       	ldd	r25, Y+24	; 0x18
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e8       	ldi	r20, 0x80	; 128
    2724:	5f e3       	ldi	r21, 0x3F	; 63
    2726:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    272a:	88 23       	and	r24, r24
    272c:	2c f4       	brge	.+10     	; 0x2738 <H_WIFI_void_StartTCPServer+0xa2>
		__ticks = 1;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	9c 8b       	std	Y+20, r25	; 0x14
    2734:	8b 8b       	std	Y+19, r24	; 0x13
    2736:	3f c0       	rjmp	.+126    	; 0x27b6 <H_WIFI_void_StartTCPServer+0x120>
	else if (__tmp > 65535)
    2738:	6d 89       	ldd	r22, Y+21	; 0x15
    273a:	7e 89       	ldd	r23, Y+22	; 0x16
    273c:	8f 89       	ldd	r24, Y+23	; 0x17
    273e:	98 8d       	ldd	r25, Y+24	; 0x18
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	3f ef       	ldi	r19, 0xFF	; 255
    2744:	4f e7       	ldi	r20, 0x7F	; 127
    2746:	57 e4       	ldi	r21, 0x47	; 71
    2748:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    274c:	18 16       	cp	r1, r24
    274e:	4c f5       	brge	.+82     	; 0x27a2 <H_WIFI_void_StartTCPServer+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2750:	69 8d       	ldd	r22, Y+25	; 0x19
    2752:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2754:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2756:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e2       	ldi	r20, 0x20	; 32
    275e:	51 e4       	ldi	r21, 0x41	; 65
    2760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	bc 01       	movw	r22, r24
    276a:	cd 01       	movw	r24, r26
    276c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	9c 8b       	std	Y+20, r25	; 0x14
    2776:	8b 8b       	std	Y+19, r24	; 0x13
    2778:	0f c0       	rjmp	.+30     	; 0x2798 <H_WIFI_void_StartTCPServer+0x102>
    277a:	80 e9       	ldi	r24, 0x90	; 144
    277c:	91 e0       	ldi	r25, 0x01	; 1
    277e:	9a 8b       	std	Y+18, r25	; 0x12
    2780:	89 8b       	std	Y+17, r24	; 0x11
    2782:	89 89       	ldd	r24, Y+17	; 0x11
    2784:	9a 89       	ldd	r25, Y+18	; 0x12
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	f1 f7       	brne	.-4      	; 0x2786 <H_WIFI_void_StartTCPServer+0xf0>
    278a:	9a 8b       	std	Y+18, r25	; 0x12
    278c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278e:	8b 89       	ldd	r24, Y+19	; 0x13
    2790:	9c 89       	ldd	r25, Y+20	; 0x14
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	9c 8b       	std	Y+20, r25	; 0x14
    2796:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2798:	8b 89       	ldd	r24, Y+19	; 0x13
    279a:	9c 89       	ldd	r25, Y+20	; 0x14
    279c:	00 97       	sbiw	r24, 0x00	; 0
    279e:	69 f7       	brne	.-38     	; 0x277a <H_WIFI_void_StartTCPServer+0xe4>
    27a0:	97 c0       	rjmp	.+302    	; 0x28d0 <H_WIFI_void_StartTCPServer+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a2:	6d 89       	ldd	r22, Y+21	; 0x15
    27a4:	7e 89       	ldd	r23, Y+22	; 0x16
    27a6:	8f 89       	ldd	r24, Y+23	; 0x17
    27a8:	98 8d       	ldd	r25, Y+24	; 0x18
    27aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	9c 8b       	std	Y+20, r25	; 0x14
    27b4:	8b 8b       	std	Y+19, r24	; 0x13
    27b6:	8b 89       	ldd	r24, Y+19	; 0x13
    27b8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ba:	98 8b       	std	Y+16, r25	; 0x10
    27bc:	8f 87       	std	Y+15, r24	; 0x0f
    27be:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c0:	98 89       	ldd	r25, Y+16	; 0x10
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	f1 f7       	brne	.-4      	; 0x27c2 <H_WIFI_void_StartTCPServer+0x12c>
    27c6:	98 8b       	std	Y+16, r25	; 0x10
    27c8:	8f 87       	std	Y+15, r24	; 0x0f
    27ca:	82 c0       	rjmp	.+260    	; 0x28d0 <H_WIFI_void_StartTCPServer+0x23a>
		_delay_ms(2000);
	} else if (command_statue == WIFI_command_error) {
    27cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ce:	81 30       	cpi	r24, 0x01	; 1
    27d0:	09 f0       	breq	.+2      	; 0x27d4 <H_WIFI_void_StartTCPServer+0x13e>
    27d2:	7e c0       	rjmp	.+252    	; 0x28d0 <H_WIFI_void_StartTCPServer+0x23a>
		H_LCD_void_Clear();
    27d4:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <H_LCD_void_Clear>
		H_LCD_void_sendString("TCP server failed!");
    27d8:	81 e4       	ldi	r24, 0x41	; 65
    27da:	91 e0       	ldi	r25, 0x01	; 1
    27dc:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <H_LCD_void_sendString>
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	aa ef       	ldi	r26, 0xFA	; 250
    27e6:	b4 e4       	ldi	r27, 0x44	; 68
    27e8:	8b 87       	std	Y+11, r24	; 0x0b
    27ea:	9c 87       	std	Y+12, r25	; 0x0c
    27ec:	ad 87       	std	Y+13, r26	; 0x0d
    27ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4a e7       	ldi	r20, 0x7A	; 122
    27fe:	55 e4       	ldi	r21, 0x45	; 69
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	8f 83       	std	Y+7, r24	; 0x07
    280a:	98 87       	std	Y+8, r25	; 0x08
    280c:	a9 87       	std	Y+9, r26	; 0x09
    280e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2810:	6f 81       	ldd	r22, Y+7	; 0x07
    2812:	78 85       	ldd	r23, Y+8	; 0x08
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	9a 85       	ldd	r25, Y+10	; 0x0a
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2824:	88 23       	and	r24, r24
    2826:	2c f4       	brge	.+10     	; 0x2832 <H_WIFI_void_StartTCPServer+0x19c>
		__ticks = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9e 83       	std	Y+6, r25	; 0x06
    282e:	8d 83       	std	Y+5, r24	; 0x05
    2830:	3f c0       	rjmp	.+126    	; 0x28b0 <H_WIFI_void_StartTCPServer+0x21a>
	else if (__tmp > 65535)
    2832:	6f 81       	ldd	r22, Y+7	; 0x07
    2834:	78 85       	ldd	r23, Y+8	; 0x08
    2836:	89 85       	ldd	r24, Y+9	; 0x09
    2838:	9a 85       	ldd	r25, Y+10	; 0x0a
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	3f ef       	ldi	r19, 0xFF	; 255
    283e:	4f e7       	ldi	r20, 0x7F	; 127
    2840:	57 e4       	ldi	r21, 0x47	; 71
    2842:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2846:	18 16       	cp	r1, r24
    2848:	4c f5       	brge	.+82     	; 0x289c <H_WIFI_void_StartTCPServer+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284a:	6b 85       	ldd	r22, Y+11	; 0x0b
    284c:	7c 85       	ldd	r23, Y+12	; 0x0c
    284e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2850:	9e 85       	ldd	r25, Y+14	; 0x0e
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e2       	ldi	r20, 0x20	; 32
    2858:	51 e4       	ldi	r21, 0x41	; 65
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <H_WIFI_void_StartTCPServer+0x1fc>
    2874:	80 e9       	ldi	r24, 0x90	; 144
    2876:	91 e0       	ldi	r25, 0x01	; 1
    2878:	9c 83       	std	Y+4, r25	; 0x04
    287a:	8b 83       	std	Y+3, r24	; 0x03
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	9c 81       	ldd	r25, Y+4	; 0x04
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <H_WIFI_void_StartTCPServer+0x1ea>
    2884:	9c 83       	std	Y+4, r25	; 0x04
    2886:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2888:	8d 81       	ldd	r24, Y+5	; 0x05
    288a:	9e 81       	ldd	r25, Y+6	; 0x06
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	9e 83       	std	Y+6, r25	; 0x06
    2890:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2892:	8d 81       	ldd	r24, Y+5	; 0x05
    2894:	9e 81       	ldd	r25, Y+6	; 0x06
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	69 f7       	brne	.-38     	; 0x2874 <H_WIFI_void_StartTCPServer+0x1de>
    289a:	14 c0       	rjmp	.+40     	; 0x28c4 <H_WIFI_void_StartTCPServer+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289c:	6f 81       	ldd	r22, Y+7	; 0x07
    289e:	78 85       	ldd	r23, Y+8	; 0x08
    28a0:	89 85       	ldd	r24, Y+9	; 0x09
    28a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	9e 83       	std	Y+6, r25	; 0x06
    28ae:	8d 83       	std	Y+5, r24	; 0x05
    28b0:	8d 81       	ldd	r24, Y+5	; 0x05
    28b2:	9e 81       	ldd	r25, Y+6	; 0x06
    28b4:	9a 83       	std	Y+2, r25	; 0x02
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <H_WIFI_void_StartTCPServer+0x226>
    28c0:	9a 83       	std	Y+2, r25	; 0x02
    28c2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		H_LCD_void_Clear();
    28c4:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <H_LCD_void_Clear>
		H_LCD_void_sendString(buff);
    28c8:	8b ea       	ldi	r24, 0xAB	; 171
    28ca:	94 e0       	ldi	r25, 0x04	; 4
    28cc:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <H_LCD_void_sendString>
	}
#endif
}
    28d0:	6d 96       	adiw	r28, 0x1d	; 29
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	08 95       	ret

000028e2 <H_WIFI_statue_t_cheakOk>:

WIFI_command_statue_t H_WIFI_statue_t_cheakOk(char *response) {
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <H_WIFI_statue_t_cheakOk+0x6>
    28e8:	00 d0       	rcall	.+0      	; 0x28ea <H_WIFI_statue_t_cheakOk+0x8>
    28ea:	0f 92       	push	r0
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
    28f0:	9c 83       	std	Y+4, r25	; 0x04
    28f2:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i <= UART_BUFFER_SIZE; i++) {
    28f4:	1a 82       	std	Y+2, r1	; 0x02
    28f6:	19 82       	std	Y+1, r1	; 0x01
    28f8:	1e c0       	rjmp	.+60     	; 0x2936 <H_WIFI_statue_t_cheakOk+0x54>
		if (*(response + i) == 'O')
    28fa:	29 81       	ldd	r18, Y+1	; 0x01
    28fc:	3a 81       	ldd	r19, Y+2	; 0x02
    28fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2900:	9c 81       	ldd	r25, Y+4	; 0x04
    2902:	fc 01       	movw	r30, r24
    2904:	e2 0f       	add	r30, r18
    2906:	f3 1f       	adc	r31, r19
    2908:	80 81       	ld	r24, Z
    290a:	8f 34       	cpi	r24, 0x4F	; 79
    290c:	79 f4       	brne	.+30     	; 0x292c <H_WIFI_statue_t_cheakOk+0x4a>
			if (*(response + i + 1) == 'K')
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	9c 01       	movw	r18, r24
    2914:	2f 5f       	subi	r18, 0xFF	; 255
    2916:	3f 4f       	sbci	r19, 0xFF	; 255
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	9c 81       	ldd	r25, Y+4	; 0x04
    291c:	fc 01       	movw	r30, r24
    291e:	e2 0f       	add	r30, r18
    2920:	f3 1f       	adc	r31, r19
    2922:	80 81       	ld	r24, Z
    2924:	8b 34       	cpi	r24, 0x4B	; 75
    2926:	11 f4       	brne	.+4      	; 0x292c <H_WIFI_statue_t_cheakOk+0x4a>
				return WIFI_command_ok;
    2928:	1d 82       	std	Y+5, r1	; 0x05
    292a:	0c c0       	rjmp	.+24     	; 0x2944 <H_WIFI_statue_t_cheakOk+0x62>
	}
#endif
}

WIFI_command_statue_t H_WIFI_statue_t_cheakOk(char *response) {
	for (int i = 0; i <= UART_BUFFER_SIZE; i++) {
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	9a 81       	ldd	r25, Y+2	; 0x02
    2930:	01 96       	adiw	r24, 0x01	; 1
    2932:	9a 83       	std	Y+2, r25	; 0x02
    2934:	89 83       	std	Y+1, r24	; 0x01
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	9a 81       	ldd	r25, Y+2	; 0x02
    293a:	85 36       	cpi	r24, 0x65	; 101
    293c:	91 05       	cpc	r25, r1
    293e:	ec f2       	brlt	.-70     	; 0x28fa <H_WIFI_statue_t_cheakOk+0x18>
		if (*(response + i) == 'O')
			if (*(response + i + 1) == 'K')
				return WIFI_command_ok;
	}
	return WIFI_command_error;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	8d 83       	std	Y+5, r24	; 0x05
    2944:	8d 81       	ldd	r24, Y+5	; 0x05

}
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <H_WIFI_command_statue_t_sendData>:

WIFI_command_statue_t H_WIFI_command_statue_t_sendData(char *command,
		char *response, const int timeout) {
    2956:	ef 92       	push	r14
    2958:	ff 92       	push	r15
    295a:	0f 93       	push	r16
    295c:	1f 93       	push	r17
    295e:	df 93       	push	r29
    2960:	cf 93       	push	r28
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
    2966:	2d 97       	sbiw	r28, 0x0d	; 13
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	98 87       	std	Y+8, r25	; 0x08
    2974:	8f 83       	std	Y+7, r24	; 0x07
    2976:	7a 87       	std	Y+10, r23	; 0x0a
    2978:	69 87       	std	Y+9, r22	; 0x09
    297a:	5c 87       	std	Y+12, r21	; 0x0c
    297c:	4b 87       	std	Y+11, r20	; 0x0b
	init_millis(16000000);
    297e:	60 e0       	ldi	r22, 0x00	; 0
    2980:	74 e2       	ldi	r23, 0x24	; 36
    2982:	84 ef       	ldi	r24, 0xF4	; 244
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	0e 94 e0 1e 	call	0x3dc0	; 0x3dc0 <init_millis>
	M_UART_void_UARTSendString(command);
    298a:	8f 81       	ldd	r24, Y+7	; 0x07
    298c:	98 85       	ldd	r25, Y+8	; 0x08
    298e:	0e 94 2c 08 	call	0x1058	; 0x1058 <M_UART_void_UARTSendString>
	int counter = 0;
    2992:	1e 82       	std	Y+6, r1	; 0x06
    2994:	1d 82       	std	Y+5, r1	; 0x05
	long int time = millis();
    2996:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <millis>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	89 83       	std	Y+1, r24	; 0x01
    29a0:	9a 83       	std	Y+2, r25	; 0x02
    29a2:	ab 83       	std	Y+3, r26	; 0x03
    29a4:	bc 83       	std	Y+4, r27	; 0x04
	while (1) {
		if ((time + 2000) < millis())
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	9a 81       	ldd	r25, Y+2	; 0x02
    29aa:	ab 81       	ldd	r26, Y+3	; 0x03
    29ac:	bc 81       	ldd	r27, Y+4	; 0x04
    29ae:	80 53       	subi	r24, 0x30	; 48
    29b0:	98 4f       	sbci	r25, 0xF8	; 248
    29b2:	af 4f       	sbci	r26, 0xFF	; 255
    29b4:	bf 4f       	sbci	r27, 0xFF	; 255
    29b6:	7c 01       	movw	r14, r24
    29b8:	8d 01       	movw	r16, r26
    29ba:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <millis>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	e8 16       	cp	r14, r24
    29c4:	f9 06       	cpc	r15, r25
    29c6:	0a 07       	cpc	r16, r26
    29c8:	1b 07       	cpc	r17, r27
    29ca:	00 f1       	brcs	.+64     	; 0x2a0c <H_WIFI_command_statue_t_sendData+0xb6>
    29cc:	1a c0       	rjmp	.+52     	; 0x2a02 <H_WIFI_command_statue_t_sendData+0xac>
			break;
		while (RX_Counter_UART) {
			*(response + counter) = M_UART_u8_receiveByteASynchNonBlocking();
    29ce:	2d 81       	ldd	r18, Y+5	; 0x05
    29d0:	3e 81       	ldd	r19, Y+6	; 0x06
    29d2:	89 85       	ldd	r24, Y+9	; 0x09
    29d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d6:	8c 01       	movw	r16, r24
    29d8:	02 0f       	add	r16, r18
    29da:	13 1f       	adc	r17, r19
    29dc:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <M_UART_u8_receiveByteASynchNonBlocking>
    29e0:	f8 01       	movw	r30, r16
    29e2:	80 83       	st	Z, r24
			if (*(response + counter))
    29e4:	2d 81       	ldd	r18, Y+5	; 0x05
    29e6:	3e 81       	ldd	r19, Y+6	; 0x06
    29e8:	89 85       	ldd	r24, Y+9	; 0x09
    29ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ec:	fc 01       	movw	r30, r24
    29ee:	e2 0f       	add	r30, r18
    29f0:	f3 1f       	adc	r31, r19
    29f2:	80 81       	ld	r24, Z
    29f4:	88 23       	and	r24, r24
    29f6:	29 f0       	breq	.+10     	; 0x2a02 <H_WIFI_command_statue_t_sendData+0xac>
				counter++;
    29f8:	8d 81       	ldd	r24, Y+5	; 0x05
    29fa:	9e 81       	ldd	r25, Y+6	; 0x06
    29fc:	01 96       	adiw	r24, 0x01	; 1
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
	int counter = 0;
	long int time = millis();
	while (1) {
		if ((time + 2000) < millis())
			break;
		while (RX_Counter_UART) {
    2a02:	80 91 40 04 	lds	r24, 0x0440
    2a06:	88 23       	and	r24, r24
    2a08:	11 f7       	brne	.-60     	; 0x29ce <H_WIFI_command_statue_t_sendData+0x78>
    2a0a:	cd cf       	rjmp	.-102    	; 0x29a6 <H_WIFI_command_statue_t_sendData+0x50>
			if (*(response + counter))
				counter++;
		}
	}

	*(response + counter) = 0;
    2a0c:	2d 81       	ldd	r18, Y+5	; 0x05
    2a0e:	3e 81       	ldd	r19, Y+6	; 0x06
    2a10:	89 85       	ldd	r24, Y+9	; 0x09
    2a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a14:	fc 01       	movw	r30, r24
    2a16:	e2 0f       	add	r30, r18
    2a18:	f3 1f       	adc	r31, r19
    2a1a:	10 82       	st	Z, r1
	if (counter == 0)
    2a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a20:	00 97       	sbiw	r24, 0x00	; 0
    2a22:	19 f4       	brne	.+6      	; 0x2a2a <H_WIFI_command_statue_t_sendData+0xd4>
		return WIFI_command_timeOute;
    2a24:	f2 e0       	ldi	r31, 0x02	; 2
    2a26:	fd 87       	std	Y+13, r31	; 0x0d
    2a28:	05 c0       	rjmp	.+10     	; 0x2a34 <H_WIFI_command_statue_t_sendData+0xde>
	return H_WIFI_statue_t_cheakOk(response);
    2a2a:	89 85       	ldd	r24, Y+9	; 0x09
    2a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a2e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <H_WIFI_statue_t_cheakOk>
    2a32:	8d 87       	std	Y+13, r24	; 0x0d
    2a34:	8d 85       	ldd	r24, Y+13	; 0x0d

}
    2a36:	2d 96       	adiw	r28, 0x0d	; 13
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	1f 91       	pop	r17
    2a48:	0f 91       	pop	r16
    2a4a:	ff 90       	pop	r15
    2a4c:	ef 90       	pop	r14
    2a4e:	08 95       	ret

00002a50 <H_WIFI_TCPCommand_t_TCPCommand>:

WIFI_TCPCommand_t H_WIFI_TCPCommand_t_TCPCommand(char *StrReceved) {
    2a50:	df 93       	push	r29
    2a52:	cf 93       	push	r28
    2a54:	00 d0       	rcall	.+0      	; 0x2a56 <H_WIFI_TCPCommand_t_TCPCommand+0x6>
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <H_WIFI_TCPCommand_t_TCPCommand+0x8>
    2a58:	00 d0       	rcall	.+0      	; 0x2a5a <H_WIFI_TCPCommand_t_TCPCommand+0xa>
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    2a5e:	9d 83       	std	Y+5, r25	; 0x05
    2a60:	8c 83       	std	Y+4, r24	; 0x04
	char *command;
	command = strstr(StrReceved, "REL");
    2a62:	8c 81       	ldd	r24, Y+4	; 0x04
    2a64:	9d 81       	ldd	r25, Y+5	; 0x05
    2a66:	24 e5       	ldi	r18, 0x54	; 84
    2a68:	31 e0       	ldi	r19, 0x01	; 1
    2a6a:	b9 01       	movw	r22, r18
    2a6c:	0e 94 b9 20 	call	0x4172	; 0x4172 <strstr>
    2a70:	9b 83       	std	Y+3, r25	; 0x03
    2a72:	8a 83       	std	Y+2, r24	; 0x02
	if (command != NULL) {
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	9b 81       	ldd	r25, Y+3	; 0x03
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	99 f0       	breq	.+38     	; 0x2aa2 <H_WIFI_TCPCommand_t_TCPCommand+0x52>
		u8 LEDstatues = *(command + 3) - '0';
    2a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a80:	fc 01       	movw	r30, r24
    2a82:	33 96       	adiw	r30, 0x03	; 3
    2a84:	80 81       	ld	r24, Z
    2a86:	80 53       	subi	r24, 0x30	; 48
    2a88:	89 83       	std	Y+1, r24	; 0x01
		if (LEDstatues == 0) {
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	88 23       	and	r24, r24
    2a8e:	19 f4       	brne	.+6      	; 0x2a96 <H_WIFI_TCPCommand_t_TCPCommand+0x46>


			return TCPCommand_RelayOFF;
    2a90:	82 e0       	ldi	r24, 0x02	; 2
    2a92:	8e 83       	std	Y+6, r24	; 0x06
    2a94:	07 c0       	rjmp	.+14     	; 0x2aa4 <H_WIFI_TCPCommand_t_TCPCommand+0x54>
		} else if (LEDstatues == 1) {
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	81 30       	cpi	r24, 0x01	; 1
    2a9a:	19 f4       	brne	.+6      	; 0x2aa2 <H_WIFI_TCPCommand_t_TCPCommand+0x52>


			return TCPCommand_RelayON;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	8e 83       	std	Y+6, r24	; 0x06
    2aa0:	01 c0       	rjmp	.+2      	; 0x2aa4 <H_WIFI_TCPCommand_t_TCPCommand+0x54>
		}
	}

	return TCPCommand_NULL;
    2aa2:	1e 82       	std	Y+6, r1	; 0x06
    2aa4:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2aa6:	26 96       	adiw	r28, 0x06	; 6
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <H_WIFI_ReceiveStatue_t_WIFIreceive>:



WIFI_Receive_statue_t H_WIFI_ReceiveStatue_t_WIFIreceive(char *recevBuffer)
{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	00 d0       	rcall	.+0      	; 0x2abe <H_WIFI_ReceiveStatue_t_WIFIreceive+0x6>
    2abe:	0f 92       	push	r0
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
    2ac4:	9a 83       	std	Y+2, r25	; 0x02
    2ac6:	89 83       	std	Y+1, r24	; 0x01
	if(M_UART_void_UARTAvalepale() > 0)
    2ac8:	0e 94 47 07 	call	0xe8e	; 0xe8e <M_UART_void_UARTAvalepale>
    2acc:	88 23       	and	r24, r24
    2ace:	31 f0       	breq	.+12     	; 0x2adc <H_WIFI_ReceiveStatue_t_WIFIreceive+0x24>
	{
		M_UART_void_ReceiveString(recevBuffer);
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad4:	0e 94 74 08 	call	0x10e8	; 0x10e8 <M_UART_void_ReceiveString>
		return WIFI_Data_Receved;
    2ad8:	1b 82       	std	Y+3, r1	; 0x03
    2ada:	02 c0       	rjmp	.+4      	; 0x2ae0 <H_WIFI_ReceiveStatue_t_WIFIreceive+0x28>
	}
	return WIFI_NO_data_receved;
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	8b 83       	std	Y+3, r24	; 0x03
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	cf 91       	pop	r28
    2aea:	df 91       	pop	r29
    2aec:	08 95       	ret

00002aee <H_LM35_void_Init>:
extern ADC_config_t LM35_ADC_config_struct;


#define LM35_NUM_OF_SAMPLES	40

void H_LM35_void_Init(){
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
	M_ADC_void_Init(LM35_ADC_config_struct);
    2af6:	40 91 b3 02 	lds	r20, 0x02B3
    2afa:	50 91 b4 02 	lds	r21, 0x02B4
    2afe:	60 91 b5 02 	lds	r22, 0x02B5
    2b02:	70 91 b6 02 	lds	r23, 0x02B6
    2b06:	80 91 b7 02 	lds	r24, 0x02B7
    2b0a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <M_ADC_void_Init>
}
    2b0e:	cf 91       	pop	r28
    2b10:	df 91       	pop	r29
    2b12:	08 95       	ret

00002b14 <H_LM35_u16_ReadTemprature>:

u16 H_LM35_u16_ReadTemprature(ADC_channel_t channel){
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
    2b1c:	c3 55       	subi	r28, 0x53	; 83
    2b1e:	d0 40       	sbci	r29, 0x00	; 0
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
    2b2a:	fe 01       	movw	r30, r28
    2b2c:	ef 5a       	subi	r30, 0xAF	; 175
    2b2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b30:	80 83       	st	Z, r24
*/

	f64 analog_volt;
	f64 tempreture;
	u16 ADC_result;
	u8 state= ADC_FAILED;
    2b32:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 readings[LM35_NUM_OF_SAMPLES];
	int i, j;

	//Taking samples
	for(i= 0; i< LM35_NUM_OF_SAMPLES ; i++){
    2b34:	1d 8e       	std	Y+29, r1	; 0x1d
    2b36:	1c 8e       	std	Y+28, r1	; 0x1c
    2b38:	df c0       	rjmp	.+446    	; 0x2cf8 <H_LM35_u16_ReadTemprature+0x1e4>
		M_ADC_void_StartConversion();
    2b3a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <M_ADC_void_StartConversion>
    2b3e:	0b c0       	rjmp	.+22     	; 0x2b56 <H_LM35_u16_ReadTemprature+0x42>

		while(state == ADC_FAILED){
			state = M_ADC_void_GetDigitalValueSynchNonBlocking(channel, &ADC_result);
    2b40:	fe 01       	movw	r30, r28
    2b42:	ef 5a       	subi	r30, 0xAF	; 175
    2b44:	ff 4f       	sbci	r31, 0xFF	; 255
    2b46:	9e 01       	movw	r18, r28
    2b48:	29 5d       	subi	r18, 0xD9	; 217
    2b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4c:	80 81       	ld	r24, Z
    2b4e:	b9 01       	movw	r22, r18
    2b50:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <M_ADC_void_GetDigitalValueSynchNonBlocking>
    2b54:	8e 8f       	std	Y+30, r24	; 0x1e

	//Taking samples
	for(i= 0; i< LM35_NUM_OF_SAMPLES ; i++){
		M_ADC_void_StartConversion();

		while(state == ADC_FAILED){
    2b56:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b58:	88 23       	and	r24, r24
    2b5a:	91 f3       	breq	.-28     	; 0x2b40 <H_LM35_u16_ReadTemprature+0x2c>
			state = M_ADC_void_GetDigitalValueSynchNonBlocking(channel, &ADC_result);
		}
		readings[i] = ADC_result;
    2b5c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2b5e:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2b60:	8f a1       	ldd	r24, Y+39	; 0x27
    2b62:	98 a5       	ldd	r25, Y+40	; 0x28
    2b64:	48 2f       	mov	r20, r24
    2b66:	ce 01       	movw	r24, r28
    2b68:	89 96       	adiw	r24, 0x29	; 41
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	e2 0f       	add	r30, r18
    2b6e:	f3 1f       	adc	r31, r19
    2b70:	40 83       	st	Z, r20
    2b72:	80 e0       	ldi	r24, 0x00	; 0
    2b74:	90 e0       	ldi	r25, 0x00	; 0
    2b76:	a8 ec       	ldi	r26, 0xC8	; 200
    2b78:	b2 e4       	ldi	r27, 0x42	; 66
    2b7a:	8d 8b       	std	Y+21, r24	; 0x15
    2b7c:	9e 8b       	std	Y+22, r25	; 0x16
    2b7e:	af 8b       	std	Y+23, r26	; 0x17
    2b80:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b82:	6d 89       	ldd	r22, Y+21	; 0x15
    2b84:	7e 89       	ldd	r23, Y+22	; 0x16
    2b86:	8f 89       	ldd	r24, Y+23	; 0x17
    2b88:	98 8d       	ldd	r25, Y+24	; 0x18
    2b8a:	2b ea       	ldi	r18, 0xAB	; 171
    2b8c:	3a ea       	ldi	r19, 0xAA	; 170
    2b8e:	4a ea       	ldi	r20, 0xAA	; 170
    2b90:	50 e4       	ldi	r21, 0x40	; 64
    2b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	89 8b       	std	Y+17, r24	; 0x11
    2b9c:	9a 8b       	std	Y+18, r25	; 0x12
    2b9e:	ab 8b       	std	Y+19, r26	; 0x13
    2ba0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2ba2:	69 89       	ldd	r22, Y+17	; 0x11
    2ba4:	7a 89       	ldd	r23, Y+18	; 0x12
    2ba6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ba8:	9c 89       	ldd	r25, Y+20	; 0x14
    2baa:	20 e0       	ldi	r18, 0x00	; 0
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	40 e8       	ldi	r20, 0x80	; 128
    2bb0:	5f e3       	ldi	r21, 0x3F	; 63
    2bb2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2bb6:	88 23       	and	r24, r24
    2bb8:	1c f4       	brge	.+6      	; 0x2bc0 <H_LM35_u16_ReadTemprature+0xac>
		__ticks = 1;
    2bba:	81 e0       	ldi	r24, 0x01	; 1
    2bbc:	88 8b       	std	Y+16, r24	; 0x10
    2bbe:	91 c0       	rjmp	.+290    	; 0x2ce2 <H_LM35_u16_ReadTemprature+0x1ce>
	else if (__tmp > 255)
    2bc0:	69 89       	ldd	r22, Y+17	; 0x11
    2bc2:	7a 89       	ldd	r23, Y+18	; 0x12
    2bc4:	8b 89       	ldd	r24, Y+19	; 0x13
    2bc6:	9c 89       	ldd	r25, Y+20	; 0x14
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	4f e7       	ldi	r20, 0x7F	; 127
    2bce:	53 e4       	ldi	r21, 0x43	; 67
    2bd0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2bd4:	18 16       	cp	r1, r24
    2bd6:	0c f0       	brlt	.+2      	; 0x2bda <H_LM35_u16_ReadTemprature+0xc6>
    2bd8:	7b c0       	rjmp	.+246    	; 0x2cd0 <H_LM35_u16_ReadTemprature+0x1bc>
	{
		_delay_ms(__us / 1000.0);
    2bda:	6d 89       	ldd	r22, Y+21	; 0x15
    2bdc:	7e 89       	ldd	r23, Y+22	; 0x16
    2bde:	8f 89       	ldd	r24, Y+23	; 0x17
    2be0:	98 8d       	ldd	r25, Y+24	; 0x18
    2be2:	20 e0       	ldi	r18, 0x00	; 0
    2be4:	30 e0       	ldi	r19, 0x00	; 0
    2be6:	4a e7       	ldi	r20, 0x7A	; 122
    2be8:	54 e4       	ldi	r21, 0x44	; 68
    2bea:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bee:	dc 01       	movw	r26, r24
    2bf0:	cb 01       	movw	r24, r22
    2bf2:	8c 87       	std	Y+12, r24	; 0x0c
    2bf4:	9d 87       	std	Y+13, r25	; 0x0d
    2bf6:	ae 87       	std	Y+14, r26	; 0x0e
    2bf8:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfa:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bfc:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bfe:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c00:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	4a e7       	ldi	r20, 0x7A	; 122
    2c08:	55 e4       	ldi	r21, 0x45	; 69
    2c0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c0e:	dc 01       	movw	r26, r24
    2c10:	cb 01       	movw	r24, r22
    2c12:	88 87       	std	Y+8, r24	; 0x08
    2c14:	99 87       	std	Y+9, r25	; 0x09
    2c16:	aa 87       	std	Y+10, r26	; 0x0a
    2c18:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c1a:	68 85       	ldd	r22, Y+8	; 0x08
    2c1c:	79 85       	ldd	r23, Y+9	; 0x09
    2c1e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c20:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c22:	20 e0       	ldi	r18, 0x00	; 0
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	40 e8       	ldi	r20, 0x80	; 128
    2c28:	5f e3       	ldi	r21, 0x3F	; 63
    2c2a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c2e:	88 23       	and	r24, r24
    2c30:	2c f4       	brge	.+10     	; 0x2c3c <H_LM35_u16_ReadTemprature+0x128>
		__ticks = 1;
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	9f 83       	std	Y+7, r25	; 0x07
    2c38:	8e 83       	std	Y+6, r24	; 0x06
    2c3a:	3f c0       	rjmp	.+126    	; 0x2cba <H_LM35_u16_ReadTemprature+0x1a6>
	else if (__tmp > 65535)
    2c3c:	68 85       	ldd	r22, Y+8	; 0x08
    2c3e:	79 85       	ldd	r23, Y+9	; 0x09
    2c40:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c42:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	3f ef       	ldi	r19, 0xFF	; 255
    2c48:	4f e7       	ldi	r20, 0x7F	; 127
    2c4a:	57 e4       	ldi	r21, 0x47	; 71
    2c4c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c50:	18 16       	cp	r1, r24
    2c52:	4c f5       	brge	.+82     	; 0x2ca6 <H_LM35_u16_ReadTemprature+0x192>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c54:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c56:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c58:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c5a:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c5c:	20 e0       	ldi	r18, 0x00	; 0
    2c5e:	30 e0       	ldi	r19, 0x00	; 0
    2c60:	40 e2       	ldi	r20, 0x20	; 32
    2c62:	51 e4       	ldi	r21, 0x41	; 65
    2c64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	cd 01       	movw	r24, r26
    2c70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	9f 83       	std	Y+7, r25	; 0x07
    2c7a:	8e 83       	std	Y+6, r24	; 0x06
    2c7c:	0f c0       	rjmp	.+30     	; 0x2c9c <H_LM35_u16_ReadTemprature+0x188>
    2c7e:	80 e9       	ldi	r24, 0x90	; 144
    2c80:	91 e0       	ldi	r25, 0x01	; 1
    2c82:	9d 83       	std	Y+5, r25	; 0x05
    2c84:	8c 83       	std	Y+4, r24	; 0x04
    2c86:	8c 81       	ldd	r24, Y+4	; 0x04
    2c88:	9d 81       	ldd	r25, Y+5	; 0x05
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <H_LM35_u16_ReadTemprature+0x176>
    2c8e:	9d 83       	std	Y+5, r25	; 0x05
    2c90:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c92:	8e 81       	ldd	r24, Y+6	; 0x06
    2c94:	9f 81       	ldd	r25, Y+7	; 0x07
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	9f 83       	std	Y+7, r25	; 0x07
    2c9a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c9e:	9f 81       	ldd	r25, Y+7	; 0x07
    2ca0:	00 97       	sbiw	r24, 0x00	; 0
    2ca2:	69 f7       	brne	.-38     	; 0x2c7e <H_LM35_u16_ReadTemprature+0x16a>
    2ca4:	24 c0       	rjmp	.+72     	; 0x2cee <H_LM35_u16_ReadTemprature+0x1da>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca6:	68 85       	ldd	r22, Y+8	; 0x08
    2ca8:	79 85       	ldd	r23, Y+9	; 0x09
    2caa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2cac:	9b 85       	ldd	r25, Y+11	; 0x0b
    2cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb2:	dc 01       	movw	r26, r24
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	9f 83       	std	Y+7, r25	; 0x07
    2cb8:	8e 83       	std	Y+6, r24	; 0x06
    2cba:	8e 81       	ldd	r24, Y+6	; 0x06
    2cbc:	9f 81       	ldd	r25, Y+7	; 0x07
    2cbe:	9b 83       	std	Y+3, r25	; 0x03
    2cc0:	8a 83       	std	Y+2, r24	; 0x02
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <H_LM35_u16_ReadTemprature+0x1b2>
    2cca:	9b 83       	std	Y+3, r25	; 0x03
    2ccc:	8a 83       	std	Y+2, r24	; 0x02
    2cce:	0f c0       	rjmp	.+30     	; 0x2cee <H_LM35_u16_ReadTemprature+0x1da>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cd0:	69 89       	ldd	r22, Y+17	; 0x11
    2cd2:	7a 89       	ldd	r23, Y+18	; 0x12
    2cd4:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd6:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	88 8b       	std	Y+16, r24	; 0x10
    2ce2:	88 89       	ldd	r24, Y+16	; 0x10
    2ce4:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2ce6:	89 81       	ldd	r24, Y+1	; 0x01
    2ce8:	8a 95       	dec	r24
    2cea:	f1 f7       	brne	.-4      	; 0x2ce8 <H_LM35_u16_ReadTemprature+0x1d4>
    2cec:	89 83       	std	Y+1, r24	; 0x01
	u8 state= ADC_FAILED;
	u8 readings[LM35_NUM_OF_SAMPLES];
	int i, j;

	//Taking samples
	for(i= 0; i< LM35_NUM_OF_SAMPLES ; i++){
    2cee:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2cf0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2cf2:	01 96       	adiw	r24, 0x01	; 1
    2cf4:	9d 8f       	std	Y+29, r25	; 0x1d
    2cf6:	8c 8f       	std	Y+28, r24	; 0x1c
    2cf8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2cfa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2cfc:	88 32       	cpi	r24, 0x28	; 40
    2cfe:	91 05       	cpc	r25, r1
    2d00:	0c f4       	brge	.+2      	; 0x2d04 <H_LM35_u16_ReadTemprature+0x1f0>
    2d02:	1b cf       	rjmp	.-458    	; 0x2b3a <H_LM35_u16_ReadTemprature+0x26>

	}

	//Sorting readings (Bubble Sort)
		u8 temp;
	    for (i = 0; i < LM35_NUM_OF_SAMPLES; i++) {
    2d04:	1d 8e       	std	Y+29, r1	; 0x1d
    2d06:	1c 8e       	std	Y+28, r1	; 0x1c
    2d08:	56 c0       	rjmp	.+172    	; 0x2db6 <H_LM35_u16_ReadTemprature+0x2a2>
	        for (j = 0; j < LM35_NUM_OF_SAMPLES-j-1; j++) {
    2d0a:	1b 8e       	std	Y+27, r1	; 0x1b
    2d0c:	1a 8e       	std	Y+26, r1	; 0x1a
    2d0e:	42 c0       	rjmp	.+132    	; 0x2d94 <H_LM35_u16_ReadTemprature+0x280>
	            if (readings[j] > readings[j+1]) {
    2d10:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2d12:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2d14:	ce 01       	movw	r24, r28
    2d16:	89 96       	adiw	r24, 0x29	; 41
    2d18:	fc 01       	movw	r30, r24
    2d1a:	e2 0f       	add	r30, r18
    2d1c:	f3 1f       	adc	r31, r19
    2d1e:	40 81       	ld	r20, Z
    2d20:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d22:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d24:	9c 01       	movw	r18, r24
    2d26:	2f 5f       	subi	r18, 0xFF	; 255
    2d28:	3f 4f       	sbci	r19, 0xFF	; 255
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	89 96       	adiw	r24, 0x29	; 41
    2d2e:	fc 01       	movw	r30, r24
    2d30:	e2 0f       	add	r30, r18
    2d32:	f3 1f       	adc	r31, r19
    2d34:	80 81       	ld	r24, Z
    2d36:	84 17       	cp	r24, r20
    2d38:	40 f5       	brcc	.+80     	; 0x2d8a <H_LM35_u16_ReadTemprature+0x276>
	                temp = readings[j];
    2d3a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2d3c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2d3e:	ce 01       	movw	r24, r28
    2d40:	89 96       	adiw	r24, 0x29	; 41
    2d42:	fc 01       	movw	r30, r24
    2d44:	e2 0f       	add	r30, r18
    2d46:	f3 1f       	adc	r31, r19
    2d48:	80 81       	ld	r24, Z
    2d4a:	89 8f       	std	Y+25, r24	; 0x19
	                readings[j] = readings[j+1];
    2d4c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2d4e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2d50:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d52:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d54:	9c 01       	movw	r18, r24
    2d56:	2f 5f       	subi	r18, 0xFF	; 255
    2d58:	3f 4f       	sbci	r19, 0xFF	; 255
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	89 96       	adiw	r24, 0x29	; 41
    2d5e:	fc 01       	movw	r30, r24
    2d60:	e2 0f       	add	r30, r18
    2d62:	f3 1f       	adc	r31, r19
    2d64:	20 81       	ld	r18, Z
    2d66:	ce 01       	movw	r24, r28
    2d68:	89 96       	adiw	r24, 0x29	; 41
    2d6a:	fc 01       	movw	r30, r24
    2d6c:	e4 0f       	add	r30, r20
    2d6e:	f5 1f       	adc	r31, r21
    2d70:	20 83       	st	Z, r18
	                readings[j+1] = temp;
    2d72:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d74:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d76:	9c 01       	movw	r18, r24
    2d78:	2f 5f       	subi	r18, 0xFF	; 255
    2d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d7c:	ce 01       	movw	r24, r28
    2d7e:	89 96       	adiw	r24, 0x29	; 41
    2d80:	fc 01       	movw	r30, r24
    2d82:	e2 0f       	add	r30, r18
    2d84:	f3 1f       	adc	r31, r19
    2d86:	89 8d       	ldd	r24, Y+25	; 0x19
    2d88:	80 83       	st	Z, r24
	}

	//Sorting readings (Bubble Sort)
		u8 temp;
	    for (i = 0; i < LM35_NUM_OF_SAMPLES; i++) {
	        for (j = 0; j < LM35_NUM_OF_SAMPLES-j-1; j++) {
    2d8a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d8c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d8e:	01 96       	adiw	r24, 0x01	; 1
    2d90:	9b 8f       	std	Y+27, r25	; 0x1b
    2d92:	8a 8f       	std	Y+26, r24	; 0x1a
    2d94:	27 e2       	ldi	r18, 0x27	; 39
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d9a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d9c:	28 1b       	sub	r18, r24
    2d9e:	39 0b       	sbc	r19, r25
    2da0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2da2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2da4:	82 17       	cp	r24, r18
    2da6:	93 07       	cpc	r25, r19
    2da8:	0c f4       	brge	.+2      	; 0x2dac <H_LM35_u16_ReadTemprature+0x298>
    2daa:	b2 cf       	rjmp	.-156    	; 0x2d10 <H_LM35_u16_ReadTemprature+0x1fc>

	}

	//Sorting readings (Bubble Sort)
		u8 temp;
	    for (i = 0; i < LM35_NUM_OF_SAMPLES; i++) {
    2dac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2db0:	01 96       	adiw	r24, 0x01	; 1
    2db2:	9d 8f       	std	Y+29, r25	; 0x1d
    2db4:	8c 8f       	std	Y+28, r24	; 0x1c
    2db6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2db8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2dba:	88 32       	cpi	r24, 0x28	; 40
    2dbc:	91 05       	cpc	r25, r1
    2dbe:	0c f4       	brge	.+2      	; 0x2dc2 <H_LM35_u16_ReadTemprature+0x2ae>
    2dc0:	a4 cf       	rjmp	.-184    	; 0x2d0a <H_LM35_u16_ReadTemprature+0x1f6>
	        }
	    }

	    // Find the median value in the window
	    if (LM35_NUM_OF_SAMPLES % 2 == 0) {
	        ADC_result = (readings[LM35_NUM_OF_SAMPLES/2] + readings[LM35_NUM_OF_SAMPLES/2-1])/2;
    2dc2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dc4:	28 2f       	mov	r18, r24
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	8c ad       	ldd	r24, Y+60	; 0x3c
    2dca:	88 2f       	mov	r24, r24
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	82 0f       	add	r24, r18
    2dd0:	93 1f       	adc	r25, r19
    2dd2:	64 96       	adiw	r28, 0x14	; 20
    2dd4:	9f af       	std	Y+63, r25	; 0x3f
    2dd6:	8e af       	std	Y+62, r24	; 0x3e
    2dd8:	64 97       	sbiw	r28, 0x14	; 20
    2dda:	64 96       	adiw	r28, 0x14	; 20
    2ddc:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dde:	9f ad       	ldd	r25, Y+63	; 0x3f
    2de0:	64 97       	sbiw	r28, 0x14	; 20
    2de2:	99 23       	and	r25, r25
    2de4:	4c f4       	brge	.+18     	; 0x2df8 <H_LM35_u16_ReadTemprature+0x2e4>
    2de6:	64 96       	adiw	r28, 0x14	; 20
    2de8:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dea:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dec:	64 97       	sbiw	r28, 0x14	; 20
    2dee:	01 96       	adiw	r24, 0x01	; 1
    2df0:	64 96       	adiw	r28, 0x14	; 20
    2df2:	9f af       	std	Y+63, r25	; 0x3f
    2df4:	8e af       	std	Y+62, r24	; 0x3e
    2df6:	64 97       	sbiw	r28, 0x14	; 20
    2df8:	64 96       	adiw	r28, 0x14	; 20
    2dfa:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dfc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dfe:	64 97       	sbiw	r28, 0x14	; 20
    2e00:	95 95       	asr	r25
    2e02:	87 95       	ror	r24
    2e04:	98 a7       	std	Y+40, r25	; 0x28
    2e06:	8f a3       	std	Y+39, r24	; 0x27
	    else {
	        ADC_result = readings[LM35_NUM_OF_SAMPLES/2];
	    }


		analog_volt = ADC_result * ((5.0*1000)/1024);  //in millieVolts
    2e08:	8f a1       	ldd	r24, Y+39	; 0x27
    2e0a:	98 a5       	ldd	r25, Y+40	; 0x28
    2e0c:	cc 01       	movw	r24, r24
    2e0e:	a0 e0       	ldi	r26, 0x00	; 0
    2e10:	b0 e0       	ldi	r27, 0x00	; 0
    2e12:	bc 01       	movw	r22, r24
    2e14:	cd 01       	movw	r24, r26
    2e16:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	bc 01       	movw	r22, r24
    2e20:	cd 01       	movw	r24, r26
    2e22:	20 e0       	ldi	r18, 0x00	; 0
    2e24:	30 e4       	ldi	r19, 0x40	; 64
    2e26:	4c e9       	ldi	r20, 0x9C	; 156
    2e28:	50 e4       	ldi	r21, 0x40	; 64
    2e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	8b a3       	std	Y+35, r24	; 0x23
    2e34:	9c a3       	std	Y+36, r25	; 0x24
    2e36:	ad a3       	std	Y+37, r26	; 0x25
    2e38:	be a3       	std	Y+38, r27	; 0x26

		if(analog_volt == (f64)550){
    2e3a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e3c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e3e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e40:	9e a1       	ldd	r25, Y+38	; 0x26
    2e42:	20 e0       	ldi	r18, 0x00	; 0
    2e44:	30 e8       	ldi	r19, 0x80	; 128
    2e46:	49 e0       	ldi	r20, 0x09	; 9
    2e48:	54 e4       	ldi	r21, 0x44	; 68
    2e4a:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2e4e:	88 23       	and	r24, r24
    2e50:	49 f4       	brne	.+18     	; 0x2e64 <H_LM35_u16_ReadTemprature+0x350>
			tempreture = 0.0;
    2e52:	80 e0       	ldi	r24, 0x00	; 0
    2e54:	90 e0       	ldi	r25, 0x00	; 0
    2e56:	a0 e0       	ldi	r26, 0x00	; 0
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	8f 8f       	std	Y+31, r24	; 0x1f
    2e5c:	98 a3       	std	Y+32, r25	; 0x20
    2e5e:	a9 a3       	std	Y+33, r26	; 0x21
    2e60:	ba a3       	std	Y+34, r27	; 0x22
    2e62:	10 c0       	rjmp	.+32     	; 0x2e84 <H_LM35_u16_ReadTemprature+0x370>

		}else {
			tempreture = analog_volt / 10.0;
    2e64:	6b a1       	ldd	r22, Y+35	; 0x23
    2e66:	7c a1       	ldd	r23, Y+36	; 0x24
    2e68:	8d a1       	ldd	r24, Y+37	; 0x25
    2e6a:	9e a1       	ldd	r25, Y+38	; 0x26
    2e6c:	20 e0       	ldi	r18, 0x00	; 0
    2e6e:	30 e0       	ldi	r19, 0x00	; 0
    2e70:	40 e2       	ldi	r20, 0x20	; 32
    2e72:	51 e4       	ldi	r21, 0x41	; 65
    2e74:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	8f 8f       	std	Y+31, r24	; 0x1f
    2e7e:	98 a3       	std	Y+32, r25	; 0x20
    2e80:	a9 a3       	std	Y+33, r26	; 0x21
    2e82:	ba a3       	std	Y+34, r27	; 0x22
		}

		//return ADC_result;
		return tempreture;
    2e84:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2e86:	78 a1       	ldd	r23, Y+32	; 0x20
    2e88:	89 a1       	ldd	r24, Y+33	; 0x21
    2e8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2e8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e90:	dc 01       	movw	r26, r24
    2e92:	cb 01       	movw	r24, r22

}
    2e94:	cd 5a       	subi	r28, 0xAD	; 173
    2e96:	df 4f       	sbci	r29, 0xFF	; 255
    2e98:	0f b6       	in	r0, 0x3f	; 63
    2e9a:	f8 94       	cli
    2e9c:	de bf       	out	0x3e, r29	; 62
    2e9e:	0f be       	out	0x3f, r0	; 63
    2ea0:	cd bf       	out	0x3d, r28	; 61
    2ea2:	cf 91       	pop	r28
    2ea4:	df 91       	pop	r29
    2ea6:	08 95       	ret

00002ea8 <H_LDR_void_Init>:
extern ADC_config_t LDR_ADC_config_struct;
/*** HOW to use
 * - You provide ADC_config_t structure with the desired ADC configurations
 *   to read LDR outputs.
 *  ***/
void H_LDR_void_Init(){
    2ea8:	df 93       	push	r29
    2eaa:	cf 93       	push	r28
    2eac:	cd b7       	in	r28, 0x3d	; 61
    2eae:	de b7       	in	r29, 0x3e	; 62
	M_ADC_void_Init(LDR_ADC_config_struct);
    2eb0:	40 91 ae 02 	lds	r20, 0x02AE
    2eb4:	50 91 af 02 	lds	r21, 0x02AF
    2eb8:	60 91 b0 02 	lds	r22, 0x02B0
    2ebc:	70 91 b1 02 	lds	r23, 0x02B1
    2ec0:	80 91 b2 02 	lds	r24, 0x02B2
    2ec4:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <M_ADC_void_Init>
}
    2ec8:	cf 91       	pop	r28
    2eca:	df 91       	pop	r29
    2ecc:	08 95       	ret

00002ece <H_LDR_u16_Read>:
 * - After initializing the ADC reading LDR through H_LDR_void_Init
 * - You provide the channel that LDR is connected to
 * - The function does a 1-shoot ADC conversion and return the voltage in millieVolts
 * - The function uses the non-blocking ADC reading function, but H_LDR_u16_Read itself
 *   blocks the code because it loops until the Reading function returns ADC_SUCCEED  ***/
u16 H_LDR_u16_Read(ADC_channel_t channel){
    2ece:	df 93       	push	r29
    2ed0:	cf 93       	push	r28
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
    2ed6:	e9 97       	sbiw	r28, 0x39	; 57
    2ed8:	0f b6       	in	r0, 0x3f	; 63
    2eda:	f8 94       	cli
    2edc:	de bf       	out	0x3e, r29	; 62
    2ede:	0f be       	out	0x3f, r0	; 63
    2ee0:	cd bf       	out	0x3d, r28	; 61
    2ee2:	89 af       	std	Y+57, r24	; 0x39

	f64 analog_volt;
	u16 ADC_result;
	u8 state = ADC_FAILED;
    2ee4:	1e 8e       	std	Y+30, r1	; 0x1e
	u16 readings[LDR_NUM_OF_SAMPLES] ;
	int i,j;

	//taking 5 readings
	for( i = 0 ; i< LDR_NUM_OF_SAMPLES ;i++){
    2ee6:	1d 8e       	std	Y+29, r1	; 0x1d
    2ee8:	1c 8e       	std	Y+28, r1	; 0x1c
    2eea:	e0 c0       	rjmp	.+448    	; 0x30ac <H_LDR_u16_Read+0x1de>

		M_ADC_void_StartConversion();
    2eec:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <M_ADC_void_StartConversion>
    2ef0:	08 c0       	rjmp	.+16     	; 0x2f02 <H_LDR_u16_Read+0x34>
		while(state == ADC_FAILED){
			state = M_ADC_void_GetDigitalValueSynchNonBlocking(channel, &ADC_result);
    2ef2:	9e 01       	movw	r18, r28
    2ef4:	2d 5d       	subi	r18, 0xDD	; 221
    2ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef8:	89 ad       	ldd	r24, Y+57	; 0x39
    2efa:	b9 01       	movw	r22, r18
    2efc:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <M_ADC_void_GetDigitalValueSynchNonBlocking>
    2f00:	8e 8f       	std	Y+30, r24	; 0x1e

	//taking 5 readings
	for( i = 0 ; i< LDR_NUM_OF_SAMPLES ;i++){

		M_ADC_void_StartConversion();
		while(state == ADC_FAILED){
    2f02:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f04:	88 23       	and	r24, r24
    2f06:	a9 f3       	breq	.-22     	; 0x2ef2 <H_LDR_u16_Read+0x24>
			state = M_ADC_void_GetDigitalValueSynchNonBlocking(channel, &ADC_result);
		}
		readings[i] = ADC_result;
    2f08:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2f0a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2f0c:	4b a1       	ldd	r20, Y+35	; 0x23
    2f0e:	5c a1       	ldd	r21, Y+36	; 0x24
    2f10:	9c 01       	movw	r18, r24
    2f12:	22 0f       	add	r18, r18
    2f14:	33 1f       	adc	r19, r19
    2f16:	ce 01       	movw	r24, r28
    2f18:	01 96       	adiw	r24, 0x01	; 1
    2f1a:	82 0f       	add	r24, r18
    2f1c:	93 1f       	adc	r25, r19
    2f1e:	fc 01       	movw	r30, r24
    2f20:	b4 96       	adiw	r30, 0x24	; 36
    2f22:	51 83       	std	Z+1, r21	; 0x01
    2f24:	40 83       	st	Z, r20
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	a8 ec       	ldi	r26, 0xC8	; 200
    2f2c:	b2 e4       	ldi	r27, 0x42	; 66
    2f2e:	8d 8b       	std	Y+21, r24	; 0x15
    2f30:	9e 8b       	std	Y+22, r25	; 0x16
    2f32:	af 8b       	std	Y+23, r26	; 0x17
    2f34:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2f36:	6d 89       	ldd	r22, Y+21	; 0x15
    2f38:	7e 89       	ldd	r23, Y+22	; 0x16
    2f3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2f3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2f3e:	2b ea       	ldi	r18, 0xAB	; 171
    2f40:	3a ea       	ldi	r19, 0xAA	; 170
    2f42:	4a ea       	ldi	r20, 0xAA	; 170
    2f44:	50 e4       	ldi	r21, 0x40	; 64
    2f46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	cb 01       	movw	r24, r22
    2f4e:	89 8b       	std	Y+17, r24	; 0x11
    2f50:	9a 8b       	std	Y+18, r25	; 0x12
    2f52:	ab 8b       	std	Y+19, r26	; 0x13
    2f54:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2f56:	69 89       	ldd	r22, Y+17	; 0x11
    2f58:	7a 89       	ldd	r23, Y+18	; 0x12
    2f5a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f5c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f5e:	20 e0       	ldi	r18, 0x00	; 0
    2f60:	30 e0       	ldi	r19, 0x00	; 0
    2f62:	40 e8       	ldi	r20, 0x80	; 128
    2f64:	5f e3       	ldi	r21, 0x3F	; 63
    2f66:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2f6a:	88 23       	and	r24, r24
    2f6c:	1c f4       	brge	.+6      	; 0x2f74 <H_LDR_u16_Read+0xa6>
		__ticks = 1;
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	88 8b       	std	Y+16, r24	; 0x10
    2f72:	91 c0       	rjmp	.+290    	; 0x3096 <H_LDR_u16_Read+0x1c8>
	else if (__tmp > 255)
    2f74:	69 89       	ldd	r22, Y+17	; 0x11
    2f76:	7a 89       	ldd	r23, Y+18	; 0x12
    2f78:	8b 89       	ldd	r24, Y+19	; 0x13
    2f7a:	9c 89       	ldd	r25, Y+20	; 0x14
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	30 e0       	ldi	r19, 0x00	; 0
    2f80:	4f e7       	ldi	r20, 0x7F	; 127
    2f82:	53 e4       	ldi	r21, 0x43	; 67
    2f84:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2f88:	18 16       	cp	r1, r24
    2f8a:	0c f0       	brlt	.+2      	; 0x2f8e <H_LDR_u16_Read+0xc0>
    2f8c:	7b c0       	rjmp	.+246    	; 0x3084 <H_LDR_u16_Read+0x1b6>
	{
		_delay_ms(__us / 1000.0);
    2f8e:	6d 89       	ldd	r22, Y+21	; 0x15
    2f90:	7e 89       	ldd	r23, Y+22	; 0x16
    2f92:	8f 89       	ldd	r24, Y+23	; 0x17
    2f94:	98 8d       	ldd	r25, Y+24	; 0x18
    2f96:	20 e0       	ldi	r18, 0x00	; 0
    2f98:	30 e0       	ldi	r19, 0x00	; 0
    2f9a:	4a e7       	ldi	r20, 0x7A	; 122
    2f9c:	54 e4       	ldi	r21, 0x44	; 68
    2f9e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	8c 87       	std	Y+12, r24	; 0x0c
    2fa8:	9d 87       	std	Y+13, r25	; 0x0d
    2faa:	ae 87       	std	Y+14, r26	; 0x0e
    2fac:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fae:	6c 85       	ldd	r22, Y+12	; 0x0c
    2fb0:	7d 85       	ldd	r23, Y+13	; 0x0d
    2fb2:	8e 85       	ldd	r24, Y+14	; 0x0e
    2fb4:	9f 85       	ldd	r25, Y+15	; 0x0f
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	30 e0       	ldi	r19, 0x00	; 0
    2fba:	4a e7       	ldi	r20, 0x7A	; 122
    2fbc:	55 e4       	ldi	r21, 0x45	; 69
    2fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	88 87       	std	Y+8, r24	; 0x08
    2fc8:	99 87       	std	Y+9, r25	; 0x09
    2fca:	aa 87       	std	Y+10, r26	; 0x0a
    2fcc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2fce:	68 85       	ldd	r22, Y+8	; 0x08
    2fd0:	79 85       	ldd	r23, Y+9	; 0x09
    2fd2:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fd4:	9b 85       	ldd	r25, Y+11	; 0x0b
    2fd6:	20 e0       	ldi	r18, 0x00	; 0
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	40 e8       	ldi	r20, 0x80	; 128
    2fdc:	5f e3       	ldi	r21, 0x3F	; 63
    2fde:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2fe2:	88 23       	and	r24, r24
    2fe4:	2c f4       	brge	.+10     	; 0x2ff0 <H_LDR_u16_Read+0x122>
		__ticks = 1;
    2fe6:	81 e0       	ldi	r24, 0x01	; 1
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	9f 83       	std	Y+7, r25	; 0x07
    2fec:	8e 83       	std	Y+6, r24	; 0x06
    2fee:	3f c0       	rjmp	.+126    	; 0x306e <H_LDR_u16_Read+0x1a0>
	else if (__tmp > 65535)
    2ff0:	68 85       	ldd	r22, Y+8	; 0x08
    2ff2:	79 85       	ldd	r23, Y+9	; 0x09
    2ff4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ff6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	3f ef       	ldi	r19, 0xFF	; 255
    2ffc:	4f e7       	ldi	r20, 0x7F	; 127
    2ffe:	57 e4       	ldi	r21, 0x47	; 71
    3000:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3004:	18 16       	cp	r1, r24
    3006:	4c f5       	brge	.+82     	; 0x305a <H_LDR_u16_Read+0x18c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3008:	6c 85       	ldd	r22, Y+12	; 0x0c
    300a:	7d 85       	ldd	r23, Y+13	; 0x0d
    300c:	8e 85       	ldd	r24, Y+14	; 0x0e
    300e:	9f 85       	ldd	r25, Y+15	; 0x0f
    3010:	20 e0       	ldi	r18, 0x00	; 0
    3012:	30 e0       	ldi	r19, 0x00	; 0
    3014:	40 e2       	ldi	r20, 0x20	; 32
    3016:	51 e4       	ldi	r21, 0x41	; 65
    3018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    301c:	dc 01       	movw	r26, r24
    301e:	cb 01       	movw	r24, r22
    3020:	bc 01       	movw	r22, r24
    3022:	cd 01       	movw	r24, r26
    3024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	9f 83       	std	Y+7, r25	; 0x07
    302e:	8e 83       	std	Y+6, r24	; 0x06
    3030:	0f c0       	rjmp	.+30     	; 0x3050 <H_LDR_u16_Read+0x182>
    3032:	80 e9       	ldi	r24, 0x90	; 144
    3034:	91 e0       	ldi	r25, 0x01	; 1
    3036:	9d 83       	std	Y+5, r25	; 0x05
    3038:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    303a:	8c 81       	ldd	r24, Y+4	; 0x04
    303c:	9d 81       	ldd	r25, Y+5	; 0x05
    303e:	01 97       	sbiw	r24, 0x01	; 1
    3040:	f1 f7       	brne	.-4      	; 0x303e <H_LDR_u16_Read+0x170>
    3042:	9d 83       	std	Y+5, r25	; 0x05
    3044:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3046:	8e 81       	ldd	r24, Y+6	; 0x06
    3048:	9f 81       	ldd	r25, Y+7	; 0x07
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	9f 83       	std	Y+7, r25	; 0x07
    304e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3050:	8e 81       	ldd	r24, Y+6	; 0x06
    3052:	9f 81       	ldd	r25, Y+7	; 0x07
    3054:	00 97       	sbiw	r24, 0x00	; 0
    3056:	69 f7       	brne	.-38     	; 0x3032 <H_LDR_u16_Read+0x164>
    3058:	24 c0       	rjmp	.+72     	; 0x30a2 <H_LDR_u16_Read+0x1d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    305a:	68 85       	ldd	r22, Y+8	; 0x08
    305c:	79 85       	ldd	r23, Y+9	; 0x09
    305e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3060:	9b 85       	ldd	r25, Y+11	; 0x0b
    3062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3066:	dc 01       	movw	r26, r24
    3068:	cb 01       	movw	r24, r22
    306a:	9f 83       	std	Y+7, r25	; 0x07
    306c:	8e 83       	std	Y+6, r24	; 0x06
    306e:	8e 81       	ldd	r24, Y+6	; 0x06
    3070:	9f 81       	ldd	r25, Y+7	; 0x07
    3072:	9b 83       	std	Y+3, r25	; 0x03
    3074:	8a 83       	std	Y+2, r24	; 0x02
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	9b 81       	ldd	r25, Y+3	; 0x03
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	f1 f7       	brne	.-4      	; 0x307a <H_LDR_u16_Read+0x1ac>
    307e:	9b 83       	std	Y+3, r25	; 0x03
    3080:	8a 83       	std	Y+2, r24	; 0x02
    3082:	0f c0       	rjmp	.+30     	; 0x30a2 <H_LDR_u16_Read+0x1d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3084:	69 89       	ldd	r22, Y+17	; 0x11
    3086:	7a 89       	ldd	r23, Y+18	; 0x12
    3088:	8b 89       	ldd	r24, Y+19	; 0x13
    308a:	9c 89       	ldd	r25, Y+20	; 0x14
    308c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	88 8b       	std	Y+16, r24	; 0x10
    3096:	88 89       	ldd	r24, Y+16	; 0x10
    3098:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	8a 95       	dec	r24
    309e:	f1 f7       	brne	.-4      	; 0x309c <H_LDR_u16_Read+0x1ce>
    30a0:	89 83       	std	Y+1, r24	; 0x01
	u8 state = ADC_FAILED;
	u16 readings[LDR_NUM_OF_SAMPLES] ;
	int i,j;

	//taking 5 readings
	for( i = 0 ; i< LDR_NUM_OF_SAMPLES ;i++){
    30a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30a4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    30a6:	01 96       	adiw	r24, 0x01	; 1
    30a8:	9d 8f       	std	Y+29, r25	; 0x1d
    30aa:	8c 8f       	std	Y+28, r24	; 0x1c
    30ac:	8c 8d       	ldd	r24, Y+28	; 0x1c
    30ae:	9d 8d       	ldd	r25, Y+29	; 0x1d
    30b0:	8a 30       	cpi	r24, 0x0A	; 10
    30b2:	91 05       	cpc	r25, r1
    30b4:	0c f4       	brge	.+2      	; 0x30b8 <H_LDR_u16_Read+0x1ea>
    30b6:	1a cf       	rjmp	.-460    	; 0x2eec <H_LDR_u16_Read+0x1e>
		_delay_us(100);
	}

	//Sorting readings (Bubble Sort)
	u8 temp;
    for (i = 0; i < LDR_NUM_OF_SAMPLES; i++) {
    30b8:	1d 8e       	std	Y+29, r1	; 0x1d
    30ba:	1c 8e       	std	Y+28, r1	; 0x1c
    30bc:	72 c0       	rjmp	.+228    	; 0x31a2 <H_LDR_u16_Read+0x2d4>
        for (j = 0; j < LDR_NUM_OF_SAMPLES-j-1; j++) {
    30be:	1b 8e       	std	Y+27, r1	; 0x1b
    30c0:	1a 8e       	std	Y+26, r1	; 0x1a
    30c2:	5e c0       	rjmp	.+188    	; 0x3180 <H_LDR_u16_Read+0x2b2>
            if (readings[j] > readings[j+1]) {
    30c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30c6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30c8:	9c 01       	movw	r18, r24
    30ca:	22 0f       	add	r18, r18
    30cc:	33 1f       	adc	r19, r19
    30ce:	ce 01       	movw	r24, r28
    30d0:	01 96       	adiw	r24, 0x01	; 1
    30d2:	82 0f       	add	r24, r18
    30d4:	93 1f       	adc	r25, r19
    30d6:	fc 01       	movw	r30, r24
    30d8:	b4 96       	adiw	r30, 0x24	; 36
    30da:	40 81       	ld	r20, Z
    30dc:	51 81       	ldd	r21, Z+1	; 0x01
    30de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    30e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    30e2:	01 96       	adiw	r24, 0x01	; 1
    30e4:	9c 01       	movw	r18, r24
    30e6:	22 0f       	add	r18, r18
    30e8:	33 1f       	adc	r19, r19
    30ea:	ce 01       	movw	r24, r28
    30ec:	01 96       	adiw	r24, 0x01	; 1
    30ee:	82 0f       	add	r24, r18
    30f0:	93 1f       	adc	r25, r19
    30f2:	fc 01       	movw	r30, r24
    30f4:	b4 96       	adiw	r30, 0x24	; 36
    30f6:	80 81       	ld	r24, Z
    30f8:	91 81       	ldd	r25, Z+1	; 0x01
    30fa:	84 17       	cp	r24, r20
    30fc:	95 07       	cpc	r25, r21
    30fe:	d8 f5       	brcc	.+118    	; 0x3176 <H_LDR_u16_Read+0x2a8>
                temp = readings[j];
    3100:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3102:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3104:	9c 01       	movw	r18, r24
    3106:	22 0f       	add	r18, r18
    3108:	33 1f       	adc	r19, r19
    310a:	ce 01       	movw	r24, r28
    310c:	01 96       	adiw	r24, 0x01	; 1
    310e:	82 0f       	add	r24, r18
    3110:	93 1f       	adc	r25, r19
    3112:	fc 01       	movw	r30, r24
    3114:	b4 96       	adiw	r30, 0x24	; 36
    3116:	80 81       	ld	r24, Z
    3118:	91 81       	ldd	r25, Z+1	; 0x01
    311a:	89 8f       	std	Y+25, r24	; 0x19
                readings[j] = readings[j+1];
    311c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    311e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3120:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3122:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3124:	01 96       	adiw	r24, 0x01	; 1
    3126:	9c 01       	movw	r18, r24
    3128:	22 0f       	add	r18, r18
    312a:	33 1f       	adc	r19, r19
    312c:	ce 01       	movw	r24, r28
    312e:	01 96       	adiw	r24, 0x01	; 1
    3130:	82 0f       	add	r24, r18
    3132:	93 1f       	adc	r25, r19
    3134:	fc 01       	movw	r30, r24
    3136:	b4 96       	adiw	r30, 0x24	; 36
    3138:	40 81       	ld	r20, Z
    313a:	51 81       	ldd	r21, Z+1	; 0x01
    313c:	9b 01       	movw	r18, r22
    313e:	22 0f       	add	r18, r18
    3140:	33 1f       	adc	r19, r19
    3142:	ce 01       	movw	r24, r28
    3144:	01 96       	adiw	r24, 0x01	; 1
    3146:	82 0f       	add	r24, r18
    3148:	93 1f       	adc	r25, r19
    314a:	fc 01       	movw	r30, r24
    314c:	b4 96       	adiw	r30, 0x24	; 36
    314e:	51 83       	std	Z+1, r21	; 0x01
    3150:	40 83       	st	Z, r20
                readings[j+1] = temp;
    3152:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3154:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3156:	9c 01       	movw	r18, r24
    3158:	2f 5f       	subi	r18, 0xFF	; 255
    315a:	3f 4f       	sbci	r19, 0xFF	; 255
    315c:	89 8d       	ldd	r24, Y+25	; 0x19
    315e:	48 2f       	mov	r20, r24
    3160:	50 e0       	ldi	r21, 0x00	; 0
    3162:	22 0f       	add	r18, r18
    3164:	33 1f       	adc	r19, r19
    3166:	ce 01       	movw	r24, r28
    3168:	01 96       	adiw	r24, 0x01	; 1
    316a:	82 0f       	add	r24, r18
    316c:	93 1f       	adc	r25, r19
    316e:	fc 01       	movw	r30, r24
    3170:	b4 96       	adiw	r30, 0x24	; 36
    3172:	51 83       	std	Z+1, r21	; 0x01
    3174:	40 83       	st	Z, r20
	}

	//Sorting readings (Bubble Sort)
	u8 temp;
    for (i = 0; i < LDR_NUM_OF_SAMPLES; i++) {
        for (j = 0; j < LDR_NUM_OF_SAMPLES-j-1; j++) {
    3176:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3178:	9b 8d       	ldd	r25, Y+27	; 0x1b
    317a:	01 96       	adiw	r24, 0x01	; 1
    317c:	9b 8f       	std	Y+27, r25	; 0x1b
    317e:	8a 8f       	std	Y+26, r24	; 0x1a
    3180:	29 e0       	ldi	r18, 0x09	; 9
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3186:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3188:	28 1b       	sub	r18, r24
    318a:	39 0b       	sbc	r19, r25
    318c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    318e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3190:	82 17       	cp	r24, r18
    3192:	93 07       	cpc	r25, r19
    3194:	0c f4       	brge	.+2      	; 0x3198 <H_LDR_u16_Read+0x2ca>
    3196:	96 cf       	rjmp	.-212    	; 0x30c4 <H_LDR_u16_Read+0x1f6>
		_delay_us(100);
	}

	//Sorting readings (Bubble Sort)
	u8 temp;
    for (i = 0; i < LDR_NUM_OF_SAMPLES; i++) {
    3198:	8c 8d       	ldd	r24, Y+28	; 0x1c
    319a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    319c:	01 96       	adiw	r24, 0x01	; 1
    319e:	9d 8f       	std	Y+29, r25	; 0x1d
    31a0:	8c 8f       	std	Y+28, r24	; 0x1c
    31a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31a4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    31a6:	8a 30       	cpi	r24, 0x0A	; 10
    31a8:	91 05       	cpc	r25, r1
    31aa:	0c f4       	brge	.+2      	; 0x31ae <H_LDR_u16_Read+0x2e0>
    31ac:	88 cf       	rjmp	.-240    	; 0x30be <H_LDR_u16_Read+0x1f0>
        }
    }

    // Find the median value in the window
    if (LDR_NUM_OF_SAMPLES % 2 == 0) {
        ADC_result = (readings[LDR_NUM_OF_SAMPLES/2] + readings[LDR_NUM_OF_SAMPLES/2-1])/2;
    31ae:	2f a5       	ldd	r18, Y+47	; 0x2f
    31b0:	38 a9       	ldd	r19, Y+48	; 0x30
    31b2:	8d a5       	ldd	r24, Y+45	; 0x2d
    31b4:	9e a5       	ldd	r25, Y+46	; 0x2e
    31b6:	82 0f       	add	r24, r18
    31b8:	93 1f       	adc	r25, r19
    31ba:	96 95       	lsr	r25
    31bc:	87 95       	ror	r24
    31be:	9c a3       	std	Y+36, r25	; 0x24
    31c0:	8b a3       	std	Y+35, r24	; 0x23
    else {
        ADC_result = readings[LDR_NUM_OF_SAMPLES/2];
    }


	analog_volt = ADC_result * (((f64)5.0*1000)/1024);  //in millieVolts
    31c2:	8b a1       	ldd	r24, Y+35	; 0x23
    31c4:	9c a1       	ldd	r25, Y+36	; 0x24
    31c6:	cc 01       	movw	r24, r24
    31c8:	a0 e0       	ldi	r26, 0x00	; 0
    31ca:	b0 e0       	ldi	r27, 0x00	; 0
    31cc:	bc 01       	movw	r22, r24
    31ce:	cd 01       	movw	r24, r26
    31d0:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    31d4:	dc 01       	movw	r26, r24
    31d6:	cb 01       	movw	r24, r22
    31d8:	bc 01       	movw	r22, r24
    31da:	cd 01       	movw	r24, r26
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e4       	ldi	r19, 0x40	; 64
    31e0:	4c e9       	ldi	r20, 0x9C	; 156
    31e2:	50 e4       	ldi	r21, 0x40	; 64
    31e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	8f 8f       	std	Y+31, r24	; 0x1f
    31ee:	98 a3       	std	Y+32, r25	; 0x20
    31f0:	a9 a3       	std	Y+33, r26	; 0x21
    31f2:	ba a3       	std	Y+34, r27	; 0x22

	return analog_volt;
    31f4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    31f6:	78 a1       	ldd	r23, Y+32	; 0x20
    31f8:	89 a1       	ldd	r24, Y+33	; 0x21
    31fa:	9a a1       	ldd	r25, Y+34	; 0x22
    31fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3200:	dc 01       	movw	r26, r24
    3202:	cb 01       	movw	r24, r22
	//return ADC_result;

}
    3204:	e9 96       	adiw	r28, 0x39	; 57
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	f8 94       	cli
    320a:	de bf       	out	0x3e, r29	; 62
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	cd bf       	out	0x3d, r28	; 61
    3210:	cf 91       	pop	r28
    3212:	df 91       	pop	r29
    3214:	08 95       	ret

00003216 <H_LCD_void_LachByte>:
#include "Dio_int.h"
#include "LCD_cfg.h"
#include "LCD_int.h"
#include "LCD_priv.h"

static void H_LCD_void_LachByte(u8 copy_u8Byte) {
    3216:	df 93       	push	r29
    3218:	cf 93       	push	r28
    321a:	0f 92       	push	r0
    321c:	cd b7       	in	r28, 0x3d	; 61
    321e:	de b7       	in	r29, 0x3e	; 62
    3220:	89 83       	std	Y+1, r24	; 0x01
#if(H_LCD_MOED == BIT4_MODE)
	H_LCD_void_LachNibble(copy_u8Byte);
    3222:	89 81       	ldd	r24, Y+1	; 0x01
    3224:	0e 94 1d 19 	call	0x323a	; 0x323a <H_LCD_void_LachNibble>
	H_LCD_void_LachNibble(copy_u8Byte << 4); //send the first niblle
    3228:	89 81       	ldd	r24, Y+1	; 0x01
    322a:	82 95       	swap	r24
    322c:	80 7f       	andi	r24, 0xF0	; 240
    322e:	0e 94 1d 19 	call	0x323a	; 0x323a <H_LCD_void_LachNibble>
	//send the second niblle
#else if(H_LCD_MOED == BIT8_MODE)

#endif
}
    3232:	0f 90       	pop	r0
    3234:	cf 91       	pop	r28
    3236:	df 91       	pop	r29
    3238:	08 95       	ret

0000323a <H_LCD_void_LachNibble>:

static void H_LCD_void_LachNibble(u8 copy_u8Nibble) {
    323a:	df 93       	push	r29
    323c:	cf 93       	push	r28
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62
    3242:	ef 97       	sbiw	r28, 0x3f	; 63
    3244:	0f b6       	in	r0, 0x3f	; 63
    3246:	f8 94       	cli
    3248:	de bf       	out	0x3e, r29	; 62
    324a:	0f be       	out	0x3f, r0	; 63
    324c:	cd bf       	out	0x3d, r28	; 61
    324e:	8f af       	std	Y+63, r24	; 0x3f
	M_DIO_voidSetPinValue(H_LCD_DB7_PIN, GET_BIT(copy_u8Nibble, 7));
    3250:	8f ad       	ldd	r24, Y+63	; 0x3f
    3252:	98 2f       	mov	r25, r24
    3254:	99 1f       	adc	r25, r25
    3256:	99 27       	eor	r25, r25
    3258:	99 1f       	adc	r25, r25
    325a:	88 e1       	ldi	r24, 0x18	; 24
    325c:	69 2f       	mov	r22, r25
    325e:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(H_LCD_DB6_PIN, GET_BIT(copy_u8Nibble, 6));
    3262:	8f ad       	ldd	r24, Y+63	; 0x3f
    3264:	82 95       	swap	r24
    3266:	86 95       	lsr	r24
    3268:	86 95       	lsr	r24
    326a:	83 70       	andi	r24, 0x03	; 3
    326c:	98 2f       	mov	r25, r24
    326e:	91 70       	andi	r25, 0x01	; 1
    3270:	86 e1       	ldi	r24, 0x16	; 22
    3272:	69 2f       	mov	r22, r25
    3274:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(H_LCD_DB5_PIN, GET_BIT(copy_u8Nibble, 5));
    3278:	8f ad       	ldd	r24, Y+63	; 0x3f
    327a:	82 95       	swap	r24
    327c:	86 95       	lsr	r24
    327e:	87 70       	andi	r24, 0x07	; 7
    3280:	98 2f       	mov	r25, r24
    3282:	91 70       	andi	r25, 0x01	; 1
    3284:	85 e1       	ldi	r24, 0x15	; 21
    3286:	69 2f       	mov	r22, r25
    3288:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(H_LCD_DB4_PIN, GET_BIT(copy_u8Nibble, 4));
    328c:	8f ad       	ldd	r24, Y+63	; 0x3f
    328e:	82 95       	swap	r24
    3290:	8f 70       	andi	r24, 0x0F	; 15
    3292:	98 2f       	mov	r25, r24
    3294:	91 70       	andi	r25, 0x01	; 1
    3296:	84 e1       	ldi	r24, 0x14	; 20
    3298:	69 2f       	mov	r22, r25
    329a:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(H_LCD_EN_PIN, DIO_LOW); // set EN to LOW
    329e:	8c e0       	ldi	r24, 0x0C	; 12
    32a0:	60 e0       	ldi	r22, 0x00	; 0
    32a2:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	a0 e2       	ldi	r26, 0x20	; 32
    32ac:	b1 e4       	ldi	r27, 0x41	; 65
    32ae:	8b af       	std	Y+59, r24	; 0x3b
    32b0:	9c af       	std	Y+60, r25	; 0x3c
    32b2:	ad af       	std	Y+61, r26	; 0x3d
    32b4:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    32b6:	6b ad       	ldd	r22, Y+59	; 0x3b
    32b8:	7c ad       	ldd	r23, Y+60	; 0x3c
    32ba:	8d ad       	ldd	r24, Y+61	; 0x3d
    32bc:	9e ad       	ldd	r25, Y+62	; 0x3e
    32be:	2b ea       	ldi	r18, 0xAB	; 171
    32c0:	3a ea       	ldi	r19, 0xAA	; 170
    32c2:	4a ea       	ldi	r20, 0xAA	; 170
    32c4:	50 e4       	ldi	r21, 0x40	; 64
    32c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	8f ab       	std	Y+55, r24	; 0x37
    32d0:	98 af       	std	Y+56, r25	; 0x38
    32d2:	a9 af       	std	Y+57, r26	; 0x39
    32d4:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    32d6:	6f a9       	ldd	r22, Y+55	; 0x37
    32d8:	78 ad       	ldd	r23, Y+56	; 0x38
    32da:	89 ad       	ldd	r24, Y+57	; 0x39
    32dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    32de:	20 e0       	ldi	r18, 0x00	; 0
    32e0:	30 e0       	ldi	r19, 0x00	; 0
    32e2:	40 e8       	ldi	r20, 0x80	; 128
    32e4:	5f e3       	ldi	r21, 0x3F	; 63
    32e6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    32ea:	88 23       	and	r24, r24
    32ec:	1c f4       	brge	.+6      	; 0x32f4 <H_LCD_void_LachNibble+0xba>
		__ticks = 1;
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	8e ab       	std	Y+54, r24	; 0x36
    32f2:	91 c0       	rjmp	.+290    	; 0x3416 <H_LCD_void_LachNibble+0x1dc>
	else if (__tmp > 255)
    32f4:	6f a9       	ldd	r22, Y+55	; 0x37
    32f6:	78 ad       	ldd	r23, Y+56	; 0x38
    32f8:	89 ad       	ldd	r24, Y+57	; 0x39
    32fa:	9a ad       	ldd	r25, Y+58	; 0x3a
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	4f e7       	ldi	r20, 0x7F	; 127
    3302:	53 e4       	ldi	r21, 0x43	; 67
    3304:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3308:	18 16       	cp	r1, r24
    330a:	0c f0       	brlt	.+2      	; 0x330e <H_LCD_void_LachNibble+0xd4>
    330c:	7b c0       	rjmp	.+246    	; 0x3404 <H_LCD_void_LachNibble+0x1ca>
	{
		_delay_ms(__us / 1000.0);
    330e:	6b ad       	ldd	r22, Y+59	; 0x3b
    3310:	7c ad       	ldd	r23, Y+60	; 0x3c
    3312:	8d ad       	ldd	r24, Y+61	; 0x3d
    3314:	9e ad       	ldd	r25, Y+62	; 0x3e
    3316:	20 e0       	ldi	r18, 0x00	; 0
    3318:	30 e0       	ldi	r19, 0x00	; 0
    331a:	4a e7       	ldi	r20, 0x7A	; 122
    331c:	54 e4       	ldi	r21, 0x44	; 68
    331e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3322:	dc 01       	movw	r26, r24
    3324:	cb 01       	movw	r24, r22
    3326:	8a ab       	std	Y+50, r24	; 0x32
    3328:	9b ab       	std	Y+51, r25	; 0x33
    332a:	ac ab       	std	Y+52, r26	; 0x34
    332c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    332e:	6a a9       	ldd	r22, Y+50	; 0x32
    3330:	7b a9       	ldd	r23, Y+51	; 0x33
    3332:	8c a9       	ldd	r24, Y+52	; 0x34
    3334:	9d a9       	ldd	r25, Y+53	; 0x35
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	4a e7       	ldi	r20, 0x7A	; 122
    333c:	55 e4       	ldi	r21, 0x45	; 69
    333e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	8e a7       	std	Y+46, r24	; 0x2e
    3348:	9f a7       	std	Y+47, r25	; 0x2f
    334a:	a8 ab       	std	Y+48, r26	; 0x30
    334c:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    334e:	6e a5       	ldd	r22, Y+46	; 0x2e
    3350:	7f a5       	ldd	r23, Y+47	; 0x2f
    3352:	88 a9       	ldd	r24, Y+48	; 0x30
    3354:	99 a9       	ldd	r25, Y+49	; 0x31
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	40 e8       	ldi	r20, 0x80	; 128
    335c:	5f e3       	ldi	r21, 0x3F	; 63
    335e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3362:	88 23       	and	r24, r24
    3364:	2c f4       	brge	.+10     	; 0x3370 <H_LCD_void_LachNibble+0x136>
		__ticks = 1;
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	9d a7       	std	Y+45, r25	; 0x2d
    336c:	8c a7       	std	Y+44, r24	; 0x2c
    336e:	3f c0       	rjmp	.+126    	; 0x33ee <H_LCD_void_LachNibble+0x1b4>
	else if (__tmp > 65535)
    3370:	6e a5       	ldd	r22, Y+46	; 0x2e
    3372:	7f a5       	ldd	r23, Y+47	; 0x2f
    3374:	88 a9       	ldd	r24, Y+48	; 0x30
    3376:	99 a9       	ldd	r25, Y+49	; 0x31
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	3f ef       	ldi	r19, 0xFF	; 255
    337c:	4f e7       	ldi	r20, 0x7F	; 127
    337e:	57 e4       	ldi	r21, 0x47	; 71
    3380:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3384:	18 16       	cp	r1, r24
    3386:	4c f5       	brge	.+82     	; 0x33da <H_LCD_void_LachNibble+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3388:	6a a9       	ldd	r22, Y+50	; 0x32
    338a:	7b a9       	ldd	r23, Y+51	; 0x33
    338c:	8c a9       	ldd	r24, Y+52	; 0x34
    338e:	9d a9       	ldd	r25, Y+53	; 0x35
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	40 e2       	ldi	r20, 0x20	; 32
    3396:	51 e4       	ldi	r21, 0x41	; 65
    3398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	bc 01       	movw	r22, r24
    33a2:	cd 01       	movw	r24, r26
    33a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	9d a7       	std	Y+45, r25	; 0x2d
    33ae:	8c a7       	std	Y+44, r24	; 0x2c
    33b0:	0f c0       	rjmp	.+30     	; 0x33d0 <H_LCD_void_LachNibble+0x196>
    33b2:	80 e9       	ldi	r24, 0x90	; 144
    33b4:	91 e0       	ldi	r25, 0x01	; 1
    33b6:	9b a7       	std	Y+43, r25	; 0x2b
    33b8:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    33ba:	8a a5       	ldd	r24, Y+42	; 0x2a
    33bc:	9b a5       	ldd	r25, Y+43	; 0x2b
    33be:	01 97       	sbiw	r24, 0x01	; 1
    33c0:	f1 f7       	brne	.-4      	; 0x33be <H_LCD_void_LachNibble+0x184>
    33c2:	9b a7       	std	Y+43, r25	; 0x2b
    33c4:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c6:	8c a5       	ldd	r24, Y+44	; 0x2c
    33c8:	9d a5       	ldd	r25, Y+45	; 0x2d
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	9d a7       	std	Y+45, r25	; 0x2d
    33ce:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d0:	8c a5       	ldd	r24, Y+44	; 0x2c
    33d2:	9d a5       	ldd	r25, Y+45	; 0x2d
    33d4:	00 97       	sbiw	r24, 0x00	; 0
    33d6:	69 f7       	brne	.-38     	; 0x33b2 <H_LCD_void_LachNibble+0x178>
    33d8:	24 c0       	rjmp	.+72     	; 0x3422 <H_LCD_void_LachNibble+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33da:	6e a5       	ldd	r22, Y+46	; 0x2e
    33dc:	7f a5       	ldd	r23, Y+47	; 0x2f
    33de:	88 a9       	ldd	r24, Y+48	; 0x30
    33e0:	99 a9       	ldd	r25, Y+49	; 0x31
    33e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	9d a7       	std	Y+45, r25	; 0x2d
    33ec:	8c a7       	std	Y+44, r24	; 0x2c
    33ee:	8c a5       	ldd	r24, Y+44	; 0x2c
    33f0:	9d a5       	ldd	r25, Y+45	; 0x2d
    33f2:	99 a7       	std	Y+41, r25	; 0x29
    33f4:	88 a7       	std	Y+40, r24	; 0x28
    33f6:	88 a5       	ldd	r24, Y+40	; 0x28
    33f8:	99 a5       	ldd	r25, Y+41	; 0x29
    33fa:	01 97       	sbiw	r24, 0x01	; 1
    33fc:	f1 f7       	brne	.-4      	; 0x33fa <H_LCD_void_LachNibble+0x1c0>
    33fe:	99 a7       	std	Y+41, r25	; 0x29
    3400:	88 a7       	std	Y+40, r24	; 0x28
    3402:	0f c0       	rjmp	.+30     	; 0x3422 <H_LCD_void_LachNibble+0x1e8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3404:	6f a9       	ldd	r22, Y+55	; 0x37
    3406:	78 ad       	ldd	r23, Y+56	; 0x38
    3408:	89 ad       	ldd	r24, Y+57	; 0x39
    340a:	9a ad       	ldd	r25, Y+58	; 0x3a
    340c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3410:	dc 01       	movw	r26, r24
    3412:	cb 01       	movw	r24, r22
    3414:	8e ab       	std	Y+54, r24	; 0x36
    3416:	8e a9       	ldd	r24, Y+54	; 0x36
    3418:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    341a:	8f a1       	ldd	r24, Y+39	; 0x27
    341c:	8a 95       	dec	r24
    341e:	f1 f7       	brne	.-4      	; 0x341c <H_LCD_void_LachNibble+0x1e2>
    3420:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(10);
	M_DIO_voidSetPinValue(H_LCD_EN_PIN, DIO_HIGH); // set EN to HIGH
    3422:	8c e0       	ldi	r24, 0x0C	; 12
    3424:	61 e0       	ldi	r22, 0x01	; 1
    3426:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	90 e0       	ldi	r25, 0x00	; 0
    342e:	a8 ec       	ldi	r26, 0xC8	; 200
    3430:	b2 e4       	ldi	r27, 0x42	; 66
    3432:	8b a3       	std	Y+35, r24	; 0x23
    3434:	9c a3       	std	Y+36, r25	; 0x24
    3436:	ad a3       	std	Y+37, r26	; 0x25
    3438:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    343a:	6b a1       	ldd	r22, Y+35	; 0x23
    343c:	7c a1       	ldd	r23, Y+36	; 0x24
    343e:	8d a1       	ldd	r24, Y+37	; 0x25
    3440:	9e a1       	ldd	r25, Y+38	; 0x26
    3442:	2b ea       	ldi	r18, 0xAB	; 171
    3444:	3a ea       	ldi	r19, 0xAA	; 170
    3446:	4a ea       	ldi	r20, 0xAA	; 170
    3448:	50 e4       	ldi	r21, 0x40	; 64
    344a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    344e:	dc 01       	movw	r26, r24
    3450:	cb 01       	movw	r24, r22
    3452:	8f 8f       	std	Y+31, r24	; 0x1f
    3454:	98 a3       	std	Y+32, r25	; 0x20
    3456:	a9 a3       	std	Y+33, r26	; 0x21
    3458:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    345a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    345c:	78 a1       	ldd	r23, Y+32	; 0x20
    345e:	89 a1       	ldd	r24, Y+33	; 0x21
    3460:	9a a1       	ldd	r25, Y+34	; 0x22
    3462:	20 e0       	ldi	r18, 0x00	; 0
    3464:	30 e0       	ldi	r19, 0x00	; 0
    3466:	40 e8       	ldi	r20, 0x80	; 128
    3468:	5f e3       	ldi	r21, 0x3F	; 63
    346a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    346e:	88 23       	and	r24, r24
    3470:	1c f4       	brge	.+6      	; 0x3478 <H_LCD_void_LachNibble+0x23e>
		__ticks = 1;
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	8e 8f       	std	Y+30, r24	; 0x1e
    3476:	91 c0       	rjmp	.+290    	; 0x359a <H_LCD_void_LachNibble+0x360>
	else if (__tmp > 255)
    3478:	6f 8d       	ldd	r22, Y+31	; 0x1f
    347a:	78 a1       	ldd	r23, Y+32	; 0x20
    347c:	89 a1       	ldd	r24, Y+33	; 0x21
    347e:	9a a1       	ldd	r25, Y+34	; 0x22
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	4f e7       	ldi	r20, 0x7F	; 127
    3486:	53 e4       	ldi	r21, 0x43	; 67
    3488:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    348c:	18 16       	cp	r1, r24
    348e:	0c f0       	brlt	.+2      	; 0x3492 <H_LCD_void_LachNibble+0x258>
    3490:	7b c0       	rjmp	.+246    	; 0x3588 <H_LCD_void_LachNibble+0x34e>
	{
		_delay_ms(__us / 1000.0);
    3492:	6b a1       	ldd	r22, Y+35	; 0x23
    3494:	7c a1       	ldd	r23, Y+36	; 0x24
    3496:	8d a1       	ldd	r24, Y+37	; 0x25
    3498:	9e a1       	ldd	r25, Y+38	; 0x26
    349a:	20 e0       	ldi	r18, 0x00	; 0
    349c:	30 e0       	ldi	r19, 0x00	; 0
    349e:	4a e7       	ldi	r20, 0x7A	; 122
    34a0:	54 e4       	ldi	r21, 0x44	; 68
    34a2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    34a6:	dc 01       	movw	r26, r24
    34a8:	cb 01       	movw	r24, r22
    34aa:	8a 8f       	std	Y+26, r24	; 0x1a
    34ac:	9b 8f       	std	Y+27, r25	; 0x1b
    34ae:	ac 8f       	std	Y+28, r26	; 0x1c
    34b0:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34b2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    34b4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    34b6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    34b8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    34ba:	20 e0       	ldi	r18, 0x00	; 0
    34bc:	30 e0       	ldi	r19, 0x00	; 0
    34be:	4a e7       	ldi	r20, 0x7A	; 122
    34c0:	55 e4       	ldi	r21, 0x45	; 69
    34c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c6:	dc 01       	movw	r26, r24
    34c8:	cb 01       	movw	r24, r22
    34ca:	8e 8b       	std	Y+22, r24	; 0x16
    34cc:	9f 8b       	std	Y+23, r25	; 0x17
    34ce:	a8 8f       	std	Y+24, r26	; 0x18
    34d0:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    34d2:	6e 89       	ldd	r22, Y+22	; 0x16
    34d4:	7f 89       	ldd	r23, Y+23	; 0x17
    34d6:	88 8d       	ldd	r24, Y+24	; 0x18
    34d8:	99 8d       	ldd	r25, Y+25	; 0x19
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	30 e0       	ldi	r19, 0x00	; 0
    34de:	40 e8       	ldi	r20, 0x80	; 128
    34e0:	5f e3       	ldi	r21, 0x3F	; 63
    34e2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    34e6:	88 23       	and	r24, r24
    34e8:	2c f4       	brge	.+10     	; 0x34f4 <H_LCD_void_LachNibble+0x2ba>
		__ticks = 1;
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	9d 8b       	std	Y+21, r25	; 0x15
    34f0:	8c 8b       	std	Y+20, r24	; 0x14
    34f2:	3f c0       	rjmp	.+126    	; 0x3572 <H_LCD_void_LachNibble+0x338>
	else if (__tmp > 65535)
    34f4:	6e 89       	ldd	r22, Y+22	; 0x16
    34f6:	7f 89       	ldd	r23, Y+23	; 0x17
    34f8:	88 8d       	ldd	r24, Y+24	; 0x18
    34fa:	99 8d       	ldd	r25, Y+25	; 0x19
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	3f ef       	ldi	r19, 0xFF	; 255
    3500:	4f e7       	ldi	r20, 0x7F	; 127
    3502:	57 e4       	ldi	r21, 0x47	; 71
    3504:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3508:	18 16       	cp	r1, r24
    350a:	4c f5       	brge	.+82     	; 0x355e <H_LCD_void_LachNibble+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    350c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    350e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3510:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3512:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3514:	20 e0       	ldi	r18, 0x00	; 0
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	40 e2       	ldi	r20, 0x20	; 32
    351a:	51 e4       	ldi	r21, 0x41	; 65
    351c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	bc 01       	movw	r22, r24
    3526:	cd 01       	movw	r24, r26
    3528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	9d 8b       	std	Y+21, r25	; 0x15
    3532:	8c 8b       	std	Y+20, r24	; 0x14
    3534:	0f c0       	rjmp	.+30     	; 0x3554 <H_LCD_void_LachNibble+0x31a>
    3536:	80 e9       	ldi	r24, 0x90	; 144
    3538:	91 e0       	ldi	r25, 0x01	; 1
    353a:	9b 8b       	std	Y+19, r25	; 0x13
    353c:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    353e:	8a 89       	ldd	r24, Y+18	; 0x12
    3540:	9b 89       	ldd	r25, Y+19	; 0x13
    3542:	01 97       	sbiw	r24, 0x01	; 1
    3544:	f1 f7       	brne	.-4      	; 0x3542 <H_LCD_void_LachNibble+0x308>
    3546:	9b 8b       	std	Y+19, r25	; 0x13
    3548:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    354a:	8c 89       	ldd	r24, Y+20	; 0x14
    354c:	9d 89       	ldd	r25, Y+21	; 0x15
    354e:	01 97       	sbiw	r24, 0x01	; 1
    3550:	9d 8b       	std	Y+21, r25	; 0x15
    3552:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3554:	8c 89       	ldd	r24, Y+20	; 0x14
    3556:	9d 89       	ldd	r25, Y+21	; 0x15
    3558:	00 97       	sbiw	r24, 0x00	; 0
    355a:	69 f7       	brne	.-38     	; 0x3536 <H_LCD_void_LachNibble+0x2fc>
    355c:	24 c0       	rjmp	.+72     	; 0x35a6 <H_LCD_void_LachNibble+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    355e:	6e 89       	ldd	r22, Y+22	; 0x16
    3560:	7f 89       	ldd	r23, Y+23	; 0x17
    3562:	88 8d       	ldd	r24, Y+24	; 0x18
    3564:	99 8d       	ldd	r25, Y+25	; 0x19
    3566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	9d 8b       	std	Y+21, r25	; 0x15
    3570:	8c 8b       	std	Y+20, r24	; 0x14
    3572:	8c 89       	ldd	r24, Y+20	; 0x14
    3574:	9d 89       	ldd	r25, Y+21	; 0x15
    3576:	99 8b       	std	Y+17, r25	; 0x11
    3578:	88 8b       	std	Y+16, r24	; 0x10
    357a:	88 89       	ldd	r24, Y+16	; 0x10
    357c:	99 89       	ldd	r25, Y+17	; 0x11
    357e:	01 97       	sbiw	r24, 0x01	; 1
    3580:	f1 f7       	brne	.-4      	; 0x357e <H_LCD_void_LachNibble+0x344>
    3582:	99 8b       	std	Y+17, r25	; 0x11
    3584:	88 8b       	std	Y+16, r24	; 0x10
    3586:	0f c0       	rjmp	.+30     	; 0x35a6 <H_LCD_void_LachNibble+0x36c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3588:	6f 8d       	ldd	r22, Y+31	; 0x1f
    358a:	78 a1       	ldd	r23, Y+32	; 0x20
    358c:	89 a1       	ldd	r24, Y+33	; 0x21
    358e:	9a a1       	ldd	r25, Y+34	; 0x22
    3590:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3594:	dc 01       	movw	r26, r24
    3596:	cb 01       	movw	r24, r22
    3598:	8e 8f       	std	Y+30, r24	; 0x1e
    359a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    359c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    359e:	8f 85       	ldd	r24, Y+15	; 0x0f
    35a0:	8a 95       	dec	r24
    35a2:	f1 f7       	brne	.-4      	; 0x35a0 <H_LCD_void_LachNibble+0x366>
    35a4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(100);
	M_DIO_voidSetPinValue(H_LCD_EN_PIN, DIO_LOW); // set EN to HIGH
    35a6:	8c e0       	ldi	r24, 0x0C	; 12
    35a8:	60 e0       	ldi	r22, 0x00	; 0
    35aa:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
    35ae:	80 e0       	ldi	r24, 0x00	; 0
    35b0:	90 e0       	ldi	r25, 0x00	; 0
    35b2:	a0 e8       	ldi	r26, 0x80	; 128
    35b4:	bf e3       	ldi	r27, 0x3F	; 63
    35b6:	8b 87       	std	Y+11, r24	; 0x0b
    35b8:	9c 87       	std	Y+12, r25	; 0x0c
    35ba:	ad 87       	std	Y+13, r26	; 0x0d
    35bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35be:	6b 85       	ldd	r22, Y+11	; 0x0b
    35c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    35c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c6:	20 e0       	ldi	r18, 0x00	; 0
    35c8:	30 e0       	ldi	r19, 0x00	; 0
    35ca:	4a e7       	ldi	r20, 0x7A	; 122
    35cc:	55 e4       	ldi	r21, 0x45	; 69
    35ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35d2:	dc 01       	movw	r26, r24
    35d4:	cb 01       	movw	r24, r22
    35d6:	8f 83       	std	Y+7, r24	; 0x07
    35d8:	98 87       	std	Y+8, r25	; 0x08
    35da:	a9 87       	std	Y+9, r26	; 0x09
    35dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35de:	6f 81       	ldd	r22, Y+7	; 0x07
    35e0:	78 85       	ldd	r23, Y+8	; 0x08
    35e2:	89 85       	ldd	r24, Y+9	; 0x09
    35e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e6:	20 e0       	ldi	r18, 0x00	; 0
    35e8:	30 e0       	ldi	r19, 0x00	; 0
    35ea:	40 e8       	ldi	r20, 0x80	; 128
    35ec:	5f e3       	ldi	r21, 0x3F	; 63
    35ee:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    35f2:	88 23       	and	r24, r24
    35f4:	2c f4       	brge	.+10     	; 0x3600 <H_LCD_void_LachNibble+0x3c6>
		__ticks = 1;
    35f6:	81 e0       	ldi	r24, 0x01	; 1
    35f8:	90 e0       	ldi	r25, 0x00	; 0
    35fa:	9e 83       	std	Y+6, r25	; 0x06
    35fc:	8d 83       	std	Y+5, r24	; 0x05
    35fe:	3f c0       	rjmp	.+126    	; 0x367e <H_LCD_void_LachNibble+0x444>
	else if (__tmp > 65535)
    3600:	6f 81       	ldd	r22, Y+7	; 0x07
    3602:	78 85       	ldd	r23, Y+8	; 0x08
    3604:	89 85       	ldd	r24, Y+9	; 0x09
    3606:	9a 85       	ldd	r25, Y+10	; 0x0a
    3608:	20 e0       	ldi	r18, 0x00	; 0
    360a:	3f ef       	ldi	r19, 0xFF	; 255
    360c:	4f e7       	ldi	r20, 0x7F	; 127
    360e:	57 e4       	ldi	r21, 0x47	; 71
    3610:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3614:	18 16       	cp	r1, r24
    3616:	4c f5       	brge	.+82     	; 0x366a <H_LCD_void_LachNibble+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3618:	6b 85       	ldd	r22, Y+11	; 0x0b
    361a:	7c 85       	ldd	r23, Y+12	; 0x0c
    361c:	8d 85       	ldd	r24, Y+13	; 0x0d
    361e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3620:	20 e0       	ldi	r18, 0x00	; 0
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	40 e2       	ldi	r20, 0x20	; 32
    3626:	51 e4       	ldi	r21, 0x41	; 65
    3628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	bc 01       	movw	r22, r24
    3632:	cd 01       	movw	r24, r26
    3634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3638:	dc 01       	movw	r26, r24
    363a:	cb 01       	movw	r24, r22
    363c:	9e 83       	std	Y+6, r25	; 0x06
    363e:	8d 83       	std	Y+5, r24	; 0x05
    3640:	0f c0       	rjmp	.+30     	; 0x3660 <H_LCD_void_LachNibble+0x426>
    3642:	80 e9       	ldi	r24, 0x90	; 144
    3644:	91 e0       	ldi	r25, 0x01	; 1
    3646:	9c 83       	std	Y+4, r25	; 0x04
    3648:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    364a:	8b 81       	ldd	r24, Y+3	; 0x03
    364c:	9c 81       	ldd	r25, Y+4	; 0x04
    364e:	01 97       	sbiw	r24, 0x01	; 1
    3650:	f1 f7       	brne	.-4      	; 0x364e <H_LCD_void_LachNibble+0x414>
    3652:	9c 83       	std	Y+4, r25	; 0x04
    3654:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3656:	8d 81       	ldd	r24, Y+5	; 0x05
    3658:	9e 81       	ldd	r25, Y+6	; 0x06
    365a:	01 97       	sbiw	r24, 0x01	; 1
    365c:	9e 83       	std	Y+6, r25	; 0x06
    365e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3660:	8d 81       	ldd	r24, Y+5	; 0x05
    3662:	9e 81       	ldd	r25, Y+6	; 0x06
    3664:	00 97       	sbiw	r24, 0x00	; 0
    3666:	69 f7       	brne	.-38     	; 0x3642 <H_LCD_void_LachNibble+0x408>
    3668:	14 c0       	rjmp	.+40     	; 0x3692 <H_LCD_void_LachNibble+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    366a:	6f 81       	ldd	r22, Y+7	; 0x07
    366c:	78 85       	ldd	r23, Y+8	; 0x08
    366e:	89 85       	ldd	r24, Y+9	; 0x09
    3670:	9a 85       	ldd	r25, Y+10	; 0x0a
    3672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3676:	dc 01       	movw	r26, r24
    3678:	cb 01       	movw	r24, r22
    367a:	9e 83       	std	Y+6, r25	; 0x06
    367c:	8d 83       	std	Y+5, r24	; 0x05
    367e:	8d 81       	ldd	r24, Y+5	; 0x05
    3680:	9e 81       	ldd	r25, Y+6	; 0x06
    3682:	9a 83       	std	Y+2, r25	; 0x02
    3684:	89 83       	std	Y+1, r24	; 0x01
    3686:	89 81       	ldd	r24, Y+1	; 0x01
    3688:	9a 81       	ldd	r25, Y+2	; 0x02
    368a:	01 97       	sbiw	r24, 0x01	; 1
    368c:	f1 f7       	brne	.-4      	; 0x368a <H_LCD_void_LachNibble+0x450>
    368e:	9a 83       	std	Y+2, r25	; 0x02
    3690:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); // wait for 1 ms
}
    3692:	ef 96       	adiw	r28, 0x3f	; 63
    3694:	0f b6       	in	r0, 0x3f	; 63
    3696:	f8 94       	cli
    3698:	de bf       	out	0x3e, r29	; 62
    369a:	0f be       	out	0x3f, r0	; 63
    369c:	cd bf       	out	0x3d, r28	; 61
    369e:	cf 91       	pop	r28
    36a0:	df 91       	pop	r29
    36a2:	08 95       	ret

000036a4 <H_LCD_void_SendCommand>:

void H_LCD_void_SendCommand(u8 copy_u8Data) {
    36a4:	df 93       	push	r29
    36a6:	cf 93       	push	r28
    36a8:	0f 92       	push	r0
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
    36ae:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_voidSetPinValue(H_LCD_RS_PIN, DIO_LOW); //set RS LOW for command mode
    36b0:	8d e0       	ldi	r24, 0x0D	; 13
    36b2:	60 e0       	ldi	r22, 0x00	; 0
    36b4:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
	H_LCD_void_LachByte(copy_u8Data);
    36b8:	89 81       	ldd	r24, Y+1	; 0x01
    36ba:	0e 94 0b 19 	call	0x3216	; 0x3216 <H_LCD_void_LachByte>

}
    36be:	0f 90       	pop	r0
    36c0:	cf 91       	pop	r28
    36c2:	df 91       	pop	r29
    36c4:	08 95       	ret

000036c6 <H_LCD_void_Clear>:

void H_LCD_void_Clear(void) {
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	cd b7       	in	r28, 0x3d	; 61
    36cc:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_SendCommand(0x01);
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <H_LCD_void_SendCommand>
}
    36d4:	cf 91       	pop	r28
    36d6:	df 91       	pop	r29
    36d8:	08 95       	ret

000036da <H_LCD_void_SendData>:

void H_LCD_void_SendData(char copy_u8Data) {
    36da:	df 93       	push	r29
    36dc:	cf 93       	push	r28
    36de:	0f 92       	push	r0
    36e0:	cd b7       	in	r28, 0x3d	; 61
    36e2:	de b7       	in	r29, 0x3e	; 62
    36e4:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_voidSetPinValue(H_LCD_RS_PIN, DIO_HIGH); //set RS HIGH for Data mode
    36e6:	8d e0       	ldi	r24, 0x0D	; 13
    36e8:	61 e0       	ldi	r22, 0x01	; 1
    36ea:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
	H_LCD_void_LachByte(copy_u8Data);
    36ee:	89 81       	ldd	r24, Y+1	; 0x01
    36f0:	0e 94 0b 19 	call	0x3216	; 0x3216 <H_LCD_void_LachByte>

}
    36f4:	0f 90       	pop	r0
    36f6:	cf 91       	pop	r28
    36f8:	df 91       	pop	r29
    36fa:	08 95       	ret

000036fc <H_LCD_void_sendString>:

void H_LCD_void_sendString(char *string) {
    36fc:	df 93       	push	r29
    36fe:	cf 93       	push	r28
    3700:	00 d0       	rcall	.+0      	; 0x3702 <H_LCD_void_sendString+0x6>
    3702:	00 d0       	rcall	.+0      	; 0x3704 <H_LCD_void_sendString+0x8>
    3704:	cd b7       	in	r28, 0x3d	; 61
    3706:	de b7       	in	r29, 0x3e	; 62
    3708:	9c 83       	std	Y+4, r25	; 0x04
    370a:	8b 83       	std	Y+3, r24	; 0x03
	static u8 stCounter =0;
	//for (char *it = string; *it; it++) {
	for(int i = 0; i < 100 ; i++){
    370c:	1a 82       	std	Y+2, r1	; 0x02
    370e:	19 82       	std	Y+1, r1	; 0x01
    3710:	19 c0       	rjmp	.+50     	; 0x3744 <H_LCD_void_sendString+0x48>
		if(*(string+i) == 0)
    3712:	29 81       	ldd	r18, Y+1	; 0x01
    3714:	3a 81       	ldd	r19, Y+2	; 0x02
    3716:	8b 81       	ldd	r24, Y+3	; 0x03
    3718:	9c 81       	ldd	r25, Y+4	; 0x04
    371a:	fc 01       	movw	r30, r24
    371c:	e2 0f       	add	r30, r18
    371e:	f3 1f       	adc	r31, r19
    3720:	80 81       	ld	r24, Z
    3722:	88 23       	and	r24, r24
    3724:	a1 f0       	breq	.+40     	; 0x374e <H_LCD_void_sendString+0x52>
			break;
		H_LCD_void_SendData(*(string+i));
    3726:	29 81       	ldd	r18, Y+1	; 0x01
    3728:	3a 81       	ldd	r19, Y+2	; 0x02
    372a:	8b 81       	ldd	r24, Y+3	; 0x03
    372c:	9c 81       	ldd	r25, Y+4	; 0x04
    372e:	fc 01       	movw	r30, r24
    3730:	e2 0f       	add	r30, r18
    3732:	f3 1f       	adc	r31, r19
    3734:	80 81       	ld	r24, Z
    3736:	0e 94 6d 1b 	call	0x36da	; 0x36da <H_LCD_void_SendData>
}

void H_LCD_void_sendString(char *string) {
	static u8 stCounter =0;
	//for (char *it = string; *it; it++) {
	for(int i = 0; i < 100 ; i++){
    373a:	89 81       	ldd	r24, Y+1	; 0x01
    373c:	9a 81       	ldd	r25, Y+2	; 0x02
    373e:	01 96       	adiw	r24, 0x01	; 1
    3740:	9a 83       	std	Y+2, r25	; 0x02
    3742:	89 83       	std	Y+1, r24	; 0x01
    3744:	89 81       	ldd	r24, Y+1	; 0x01
    3746:	9a 81       	ldd	r25, Y+2	; 0x02
    3748:	84 36       	cpi	r24, 0x64	; 100
    374a:	91 05       	cpc	r25, r1
    374c:	14 f3       	brlt	.-60     	; 0x3712 <H_LCD_void_sendString+0x16>
			stCounter = 0;
			_delay_ms(2000);
			H_LCD_void_Clear();
		}*/
	}
}
    374e:	0f 90       	pop	r0
    3750:	0f 90       	pop	r0
    3752:	0f 90       	pop	r0
    3754:	0f 90       	pop	r0
    3756:	cf 91       	pop	r28
    3758:	df 91       	pop	r29
    375a:	08 95       	ret

0000375c <H_LCD_void_sendIntNum>:

void H_LCD_void_sendIntNum(s32 copy_s32Num) {
    375c:	0f 93       	push	r16
    375e:	1f 93       	push	r17
    3760:	df 93       	push	r29
    3762:	cf 93       	push	r28
    3764:	cd b7       	in	r28, 0x3d	; 61
    3766:	de b7       	in	r29, 0x3e	; 62
    3768:	62 97       	sbiw	r28, 0x12	; 18
    376a:	0f b6       	in	r0, 0x3f	; 63
    376c:	f8 94       	cli
    376e:	de bf       	out	0x3e, r29	; 62
    3770:	0f be       	out	0x3f, r0	; 63
    3772:	cd bf       	out	0x3d, r28	; 61
    3774:	6f 87       	std	Y+15, r22	; 0x0f
    3776:	78 8b       	std	Y+16, r23	; 0x10
    3778:	89 8b       	std	Y+17, r24	; 0x11
    377a:	9a 8b       	std	Y+18, r25	; 0x12
	char buff[10];
	int n = 0;
    377c:	1c 82       	std	Y+4, r1	; 0x04
    377e:	1b 82       	std	Y+3, r1	; 0x03
    3780:	2f c0       	rjmp	.+94     	; 0x37e0 <H_LCD_void_sendIntNum+0x84>
	while (copy_s32Num) {
		buff[n] = (copy_s32Num % 10) + '0';
    3782:	0b 81       	ldd	r16, Y+3	; 0x03
    3784:	1c 81       	ldd	r17, Y+4	; 0x04
    3786:	8f 85       	ldd	r24, Y+15	; 0x0f
    3788:	98 89       	ldd	r25, Y+16	; 0x10
    378a:	a9 89       	ldd	r26, Y+17	; 0x11
    378c:	ba 89       	ldd	r27, Y+18	; 0x12
    378e:	2a e0       	ldi	r18, 0x0A	; 10
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	40 e0       	ldi	r20, 0x00	; 0
    3794:	50 e0       	ldi	r21, 0x00	; 0
    3796:	bc 01       	movw	r22, r24
    3798:	cd 01       	movw	r24, r26
    379a:	0e 94 67 20 	call	0x40ce	; 0x40ce <__divmodsi4>
    379e:	dc 01       	movw	r26, r24
    37a0:	cb 01       	movw	r24, r22
    37a2:	28 2f       	mov	r18, r24
    37a4:	20 5d       	subi	r18, 0xD0	; 208
    37a6:	ce 01       	movw	r24, r28
    37a8:	05 96       	adiw	r24, 0x05	; 5
    37aa:	fc 01       	movw	r30, r24
    37ac:	e0 0f       	add	r30, r16
    37ae:	f1 1f       	adc	r31, r17
    37b0:	20 83       	st	Z, r18
		copy_s32Num /= 10;
    37b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    37b4:	98 89       	ldd	r25, Y+16	; 0x10
    37b6:	a9 89       	ldd	r26, Y+17	; 0x11
    37b8:	ba 89       	ldd	r27, Y+18	; 0x12
    37ba:	2a e0       	ldi	r18, 0x0A	; 10
    37bc:	30 e0       	ldi	r19, 0x00	; 0
    37be:	40 e0       	ldi	r20, 0x00	; 0
    37c0:	50 e0       	ldi	r21, 0x00	; 0
    37c2:	bc 01       	movw	r22, r24
    37c4:	cd 01       	movw	r24, r26
    37c6:	0e 94 67 20 	call	0x40ce	; 0x40ce <__divmodsi4>
    37ca:	da 01       	movw	r26, r20
    37cc:	c9 01       	movw	r24, r18
    37ce:	8f 87       	std	Y+15, r24	; 0x0f
    37d0:	98 8b       	std	Y+16, r25	; 0x10
    37d2:	a9 8b       	std	Y+17, r26	; 0x11
    37d4:	ba 8b       	std	Y+18, r27	; 0x12
		n++;
    37d6:	8b 81       	ldd	r24, Y+3	; 0x03
    37d8:	9c 81       	ldd	r25, Y+4	; 0x04
    37da:	01 96       	adiw	r24, 0x01	; 1
    37dc:	9c 83       	std	Y+4, r25	; 0x04
    37de:	8b 83       	std	Y+3, r24	; 0x03
}

void H_LCD_void_sendIntNum(s32 copy_s32Num) {
	char buff[10];
	int n = 0;
	while (copy_s32Num) {
    37e0:	8f 85       	ldd	r24, Y+15	; 0x0f
    37e2:	98 89       	ldd	r25, Y+16	; 0x10
    37e4:	a9 89       	ldd	r26, Y+17	; 0x11
    37e6:	ba 89       	ldd	r27, Y+18	; 0x12
    37e8:	00 97       	sbiw	r24, 0x00	; 0
    37ea:	a1 05       	cpc	r26, r1
    37ec:	b1 05       	cpc	r27, r1
    37ee:	49 f6       	brne	.-110    	; 0x3782 <H_LCD_void_sendIntNum+0x26>
		buff[n] = (copy_s32Num % 10) + '0';
		copy_s32Num /= 10;
		n++;
	}
	buff[n] = '\0';
    37f0:	2b 81       	ldd	r18, Y+3	; 0x03
    37f2:	3c 81       	ldd	r19, Y+4	; 0x04
    37f4:	ce 01       	movw	r24, r28
    37f6:	05 96       	adiw	r24, 0x05	; 5
    37f8:	fc 01       	movw	r30, r24
    37fa:	e2 0f       	add	r30, r18
    37fc:	f3 1f       	adc	r31, r19
    37fe:	10 82       	st	Z, r1

	for (int i = n - 1; i >= 0; i--) {
    3800:	8b 81       	ldd	r24, Y+3	; 0x03
    3802:	9c 81       	ldd	r25, Y+4	; 0x04
    3804:	01 97       	sbiw	r24, 0x01	; 1
    3806:	9a 83       	std	Y+2, r25	; 0x02
    3808:	89 83       	std	Y+1, r24	; 0x01
    380a:	0f c0       	rjmp	.+30     	; 0x382a <H_LCD_void_sendIntNum+0xce>
		H_LCD_void_SendData(buff[i]);
    380c:	29 81       	ldd	r18, Y+1	; 0x01
    380e:	3a 81       	ldd	r19, Y+2	; 0x02
    3810:	ce 01       	movw	r24, r28
    3812:	05 96       	adiw	r24, 0x05	; 5
    3814:	fc 01       	movw	r30, r24
    3816:	e2 0f       	add	r30, r18
    3818:	f3 1f       	adc	r31, r19
    381a:	80 81       	ld	r24, Z
    381c:	0e 94 6d 1b 	call	0x36da	; 0x36da <H_LCD_void_SendData>
		copy_s32Num /= 10;
		n++;
	}
	buff[n] = '\0';

	for (int i = n - 1; i >= 0; i--) {
    3820:	89 81       	ldd	r24, Y+1	; 0x01
    3822:	9a 81       	ldd	r25, Y+2	; 0x02
    3824:	01 97       	sbiw	r24, 0x01	; 1
    3826:	9a 83       	std	Y+2, r25	; 0x02
    3828:	89 83       	std	Y+1, r24	; 0x01
    382a:	89 81       	ldd	r24, Y+1	; 0x01
    382c:	9a 81       	ldd	r25, Y+2	; 0x02
    382e:	99 23       	and	r25, r25
    3830:	6c f7       	brge	.-38     	; 0x380c <H_LCD_void_sendIntNum+0xb0>
		H_LCD_void_SendData(buff[i]);
	}
}
    3832:	62 96       	adiw	r28, 0x12	; 18
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	f8 94       	cli
    3838:	de bf       	out	0x3e, r29	; 62
    383a:	0f be       	out	0x3f, r0	; 63
    383c:	cd bf       	out	0x3d, r28	; 61
    383e:	cf 91       	pop	r28
    3840:	df 91       	pop	r29
    3842:	1f 91       	pop	r17
    3844:	0f 91       	pop	r16
    3846:	08 95       	ret

00003848 <H_LCD_void_Int>:

void H_LCD_void_Int(void) {
    3848:	0f 93       	push	r16
    384a:	1f 93       	push	r17
    384c:	df 93       	push	r29
    384e:	cf 93       	push	r28
    3850:	cd b7       	in	r28, 0x3d	; 61
    3852:	de b7       	in	r29, 0x3e	; 62
    3854:	c7 54       	subi	r28, 0x47	; 71
    3856:	d0 40       	sbci	r29, 0x00	; 0
    3858:	0f b6       	in	r0, 0x3f	; 63
    385a:	f8 94       	cli
    385c:	de bf       	out	0x3e, r29	; 62
    385e:	0f be       	out	0x3f, r0	; 63
    3860:	cd bf       	out	0x3d, r28	; 61
    3862:	fe 01       	movw	r30, r28
    3864:	ed 5b       	subi	r30, 0xBD	; 189
    3866:	ff 4f       	sbci	r31, 0xFF	; 255
    3868:	80 e0       	ldi	r24, 0x00	; 0
    386a:	90 e0       	ldi	r25, 0x00	; 0
    386c:	a8 e4       	ldi	r26, 0x48	; 72
    386e:	b2 e4       	ldi	r27, 0x42	; 66
    3870:	80 83       	st	Z, r24
    3872:	91 83       	std	Z+1, r25	; 0x01
    3874:	a2 83       	std	Z+2, r26	; 0x02
    3876:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3878:	8e 01       	movw	r16, r28
    387a:	01 5c       	subi	r16, 0xC1	; 193
    387c:	1f 4f       	sbci	r17, 0xFF	; 255
    387e:	fe 01       	movw	r30, r28
    3880:	ed 5b       	subi	r30, 0xBD	; 189
    3882:	ff 4f       	sbci	r31, 0xFF	; 255
    3884:	60 81       	ld	r22, Z
    3886:	71 81       	ldd	r23, Z+1	; 0x01
    3888:	82 81       	ldd	r24, Z+2	; 0x02
    388a:	93 81       	ldd	r25, Z+3	; 0x03
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	4a e7       	ldi	r20, 0x7A	; 122
    3892:	55 e4       	ldi	r21, 0x45	; 69
    3894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3898:	dc 01       	movw	r26, r24
    389a:	cb 01       	movw	r24, r22
    389c:	f8 01       	movw	r30, r16
    389e:	80 83       	st	Z, r24
    38a0:	91 83       	std	Z+1, r25	; 0x01
    38a2:	a2 83       	std	Z+2, r26	; 0x02
    38a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    38a6:	fe 01       	movw	r30, r28
    38a8:	ff 96       	adiw	r30, 0x3f	; 63
    38aa:	60 81       	ld	r22, Z
    38ac:	71 81       	ldd	r23, Z+1	; 0x01
    38ae:	82 81       	ldd	r24, Z+2	; 0x02
    38b0:	93 81       	ldd	r25, Z+3	; 0x03
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	30 e0       	ldi	r19, 0x00	; 0
    38b6:	40 e8       	ldi	r20, 0x80	; 128
    38b8:	5f e3       	ldi	r21, 0x3F	; 63
    38ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    38be:	88 23       	and	r24, r24
    38c0:	2c f4       	brge	.+10     	; 0x38cc <H_LCD_void_Int+0x84>
		__ticks = 1;
    38c2:	81 e0       	ldi	r24, 0x01	; 1
    38c4:	90 e0       	ldi	r25, 0x00	; 0
    38c6:	9e af       	std	Y+62, r25	; 0x3e
    38c8:	8d af       	std	Y+61, r24	; 0x3d
    38ca:	46 c0       	rjmp	.+140    	; 0x3958 <H_LCD_void_Int+0x110>
	else if (__tmp > 65535)
    38cc:	fe 01       	movw	r30, r28
    38ce:	ff 96       	adiw	r30, 0x3f	; 63
    38d0:	60 81       	ld	r22, Z
    38d2:	71 81       	ldd	r23, Z+1	; 0x01
    38d4:	82 81       	ldd	r24, Z+2	; 0x02
    38d6:	93 81       	ldd	r25, Z+3	; 0x03
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	3f ef       	ldi	r19, 0xFF	; 255
    38dc:	4f e7       	ldi	r20, 0x7F	; 127
    38de:	57 e4       	ldi	r21, 0x47	; 71
    38e0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    38e4:	18 16       	cp	r1, r24
    38e6:	64 f5       	brge	.+88     	; 0x3940 <H_LCD_void_Int+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38e8:	fe 01       	movw	r30, r28
    38ea:	ed 5b       	subi	r30, 0xBD	; 189
    38ec:	ff 4f       	sbci	r31, 0xFF	; 255
    38ee:	60 81       	ld	r22, Z
    38f0:	71 81       	ldd	r23, Z+1	; 0x01
    38f2:	82 81       	ldd	r24, Z+2	; 0x02
    38f4:	93 81       	ldd	r25, Z+3	; 0x03
    38f6:	20 e0       	ldi	r18, 0x00	; 0
    38f8:	30 e0       	ldi	r19, 0x00	; 0
    38fa:	40 e2       	ldi	r20, 0x20	; 32
    38fc:	51 e4       	ldi	r21, 0x41	; 65
    38fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	bc 01       	movw	r22, r24
    3908:	cd 01       	movw	r24, r26
    390a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390e:	dc 01       	movw	r26, r24
    3910:	cb 01       	movw	r24, r22
    3912:	9e af       	std	Y+62, r25	; 0x3e
    3914:	8d af       	std	Y+61, r24	; 0x3d
    3916:	0f c0       	rjmp	.+30     	; 0x3936 <H_LCD_void_Int+0xee>
    3918:	80 e9       	ldi	r24, 0x90	; 144
    391a:	91 e0       	ldi	r25, 0x01	; 1
    391c:	9c af       	std	Y+60, r25	; 0x3c
    391e:	8b af       	std	Y+59, r24	; 0x3b
    3920:	8b ad       	ldd	r24, Y+59	; 0x3b
    3922:	9c ad       	ldd	r25, Y+60	; 0x3c
    3924:	01 97       	sbiw	r24, 0x01	; 1
    3926:	f1 f7       	brne	.-4      	; 0x3924 <H_LCD_void_Int+0xdc>
    3928:	9c af       	std	Y+60, r25	; 0x3c
    392a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    392c:	8d ad       	ldd	r24, Y+61	; 0x3d
    392e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3930:	01 97       	sbiw	r24, 0x01	; 1
    3932:	9e af       	std	Y+62, r25	; 0x3e
    3934:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3936:	8d ad       	ldd	r24, Y+61	; 0x3d
    3938:	9e ad       	ldd	r25, Y+62	; 0x3e
    393a:	00 97       	sbiw	r24, 0x00	; 0
    393c:	69 f7       	brne	.-38     	; 0x3918 <H_LCD_void_Int+0xd0>
    393e:	16 c0       	rjmp	.+44     	; 0x396c <H_LCD_void_Int+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3940:	fe 01       	movw	r30, r28
    3942:	ff 96       	adiw	r30, 0x3f	; 63
    3944:	60 81       	ld	r22, Z
    3946:	71 81       	ldd	r23, Z+1	; 0x01
    3948:	82 81       	ldd	r24, Z+2	; 0x02
    394a:	93 81       	ldd	r25, Z+3	; 0x03
    394c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3950:	dc 01       	movw	r26, r24
    3952:	cb 01       	movw	r24, r22
    3954:	9e af       	std	Y+62, r25	; 0x3e
    3956:	8d af       	std	Y+61, r24	; 0x3d
    3958:	8d ad       	ldd	r24, Y+61	; 0x3d
    395a:	9e ad       	ldd	r25, Y+62	; 0x3e
    395c:	9a af       	std	Y+58, r25	; 0x3a
    395e:	89 af       	std	Y+57, r24	; 0x39
    3960:	89 ad       	ldd	r24, Y+57	; 0x39
    3962:	9a ad       	ldd	r25, Y+58	; 0x3a
    3964:	01 97       	sbiw	r24, 0x01	; 1
    3966:	f1 f7       	brne	.-4      	; 0x3964 <H_LCD_void_Int+0x11c>
    3968:	9a af       	std	Y+58, r25	; 0x3a
    396a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50); //delay for 50 ms
#if(H_LCD_MOED == BIT4_MODE)

	M_DIO_voidSetPinValue(H_LCD_EN_PIN, DIO_LOW); // set EN to LOW
    396c:	8c e0       	ldi	r24, 0x0C	; 12
    396e:	60 e0       	ldi	r22, 0x00	; 0
    3970:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(H_LCD_RS_PIN, DIO_LOW); // set RS to LOW for command mode
    3974:	8d e0       	ldi	r24, 0x0D	; 13
    3976:	60 e0       	ldi	r22, 0x00	; 0
    3978:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>

	//sending 0010 to set 4bit mode
	H_LCD_void_LachNibble(0b00100000);
    397c:	80 e2       	ldi	r24, 0x20	; 32
    397e:	0e 94 1d 19 	call	0x323a	; 0x323a <H_LCD_void_LachNibble>

	//sending 0010 to set 4bit mode
	H_LCD_void_LachNibble(0b00100000);
    3982:	80 e2       	ldi	r24, 0x20	; 32
    3984:	0e 94 1d 19 	call	0x323a	; 0x323a <H_LCD_void_LachNibble>

	//sending 0010 to set 4bit mode
	H_LCD_void_LachNibble(0b00110000); // nf
    3988:	80 e3       	ldi	r24, 0x30	; 48
    398a:	0e 94 1d 19 	call	0x323a	; 0x323a <H_LCD_void_LachNibble>
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	90 e0       	ldi	r25, 0x00	; 0
    3992:	a0 e8       	ldi	r26, 0x80	; 128
    3994:	bf e3       	ldi	r27, 0x3F	; 63
    3996:	8d ab       	std	Y+53, r24	; 0x35
    3998:	9e ab       	std	Y+54, r25	; 0x36
    399a:	af ab       	std	Y+55, r26	; 0x37
    399c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    399e:	6d a9       	ldd	r22, Y+53	; 0x35
    39a0:	7e a9       	ldd	r23, Y+54	; 0x36
    39a2:	8f a9       	ldd	r24, Y+55	; 0x37
    39a4:	98 ad       	ldd	r25, Y+56	; 0x38
    39a6:	20 e0       	ldi	r18, 0x00	; 0
    39a8:	30 e0       	ldi	r19, 0x00	; 0
    39aa:	4a e7       	ldi	r20, 0x7A	; 122
    39ac:	55 e4       	ldi	r21, 0x45	; 69
    39ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b2:	dc 01       	movw	r26, r24
    39b4:	cb 01       	movw	r24, r22
    39b6:	89 ab       	std	Y+49, r24	; 0x31
    39b8:	9a ab       	std	Y+50, r25	; 0x32
    39ba:	ab ab       	std	Y+51, r26	; 0x33
    39bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    39be:	69 a9       	ldd	r22, Y+49	; 0x31
    39c0:	7a a9       	ldd	r23, Y+50	; 0x32
    39c2:	8b a9       	ldd	r24, Y+51	; 0x33
    39c4:	9c a9       	ldd	r25, Y+52	; 0x34
    39c6:	20 e0       	ldi	r18, 0x00	; 0
    39c8:	30 e0       	ldi	r19, 0x00	; 0
    39ca:	40 e8       	ldi	r20, 0x80	; 128
    39cc:	5f e3       	ldi	r21, 0x3F	; 63
    39ce:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    39d2:	88 23       	and	r24, r24
    39d4:	2c f4       	brge	.+10     	; 0x39e0 <H_LCD_void_Int+0x198>
		__ticks = 1;
    39d6:	81 e0       	ldi	r24, 0x01	; 1
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	98 ab       	std	Y+48, r25	; 0x30
    39dc:	8f a7       	std	Y+47, r24	; 0x2f
    39de:	3f c0       	rjmp	.+126    	; 0x3a5e <H_LCD_void_Int+0x216>
	else if (__tmp > 65535)
    39e0:	69 a9       	ldd	r22, Y+49	; 0x31
    39e2:	7a a9       	ldd	r23, Y+50	; 0x32
    39e4:	8b a9       	ldd	r24, Y+51	; 0x33
    39e6:	9c a9       	ldd	r25, Y+52	; 0x34
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	3f ef       	ldi	r19, 0xFF	; 255
    39ec:	4f e7       	ldi	r20, 0x7F	; 127
    39ee:	57 e4       	ldi	r21, 0x47	; 71
    39f0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    39f4:	18 16       	cp	r1, r24
    39f6:	4c f5       	brge	.+82     	; 0x3a4a <H_LCD_void_Int+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39f8:	6d a9       	ldd	r22, Y+53	; 0x35
    39fa:	7e a9       	ldd	r23, Y+54	; 0x36
    39fc:	8f a9       	ldd	r24, Y+55	; 0x37
    39fe:	98 ad       	ldd	r25, Y+56	; 0x38
    3a00:	20 e0       	ldi	r18, 0x00	; 0
    3a02:	30 e0       	ldi	r19, 0x00	; 0
    3a04:	40 e2       	ldi	r20, 0x20	; 32
    3a06:	51 e4       	ldi	r21, 0x41	; 65
    3a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a0c:	dc 01       	movw	r26, r24
    3a0e:	cb 01       	movw	r24, r22
    3a10:	bc 01       	movw	r22, r24
    3a12:	cd 01       	movw	r24, r26
    3a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a18:	dc 01       	movw	r26, r24
    3a1a:	cb 01       	movw	r24, r22
    3a1c:	98 ab       	std	Y+48, r25	; 0x30
    3a1e:	8f a7       	std	Y+47, r24	; 0x2f
    3a20:	0f c0       	rjmp	.+30     	; 0x3a40 <H_LCD_void_Int+0x1f8>
    3a22:	80 e9       	ldi	r24, 0x90	; 144
    3a24:	91 e0       	ldi	r25, 0x01	; 1
    3a26:	9e a7       	std	Y+46, r25	; 0x2e
    3a28:	8d a7       	std	Y+45, r24	; 0x2d
    3a2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    3a2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    3a2e:	01 97       	sbiw	r24, 0x01	; 1
    3a30:	f1 f7       	brne	.-4      	; 0x3a2e <H_LCD_void_Int+0x1e6>
    3a32:	9e a7       	std	Y+46, r25	; 0x2e
    3a34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a36:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a38:	98 a9       	ldd	r25, Y+48	; 0x30
    3a3a:	01 97       	sbiw	r24, 0x01	; 1
    3a3c:	98 ab       	std	Y+48, r25	; 0x30
    3a3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a40:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a42:	98 a9       	ldd	r25, Y+48	; 0x30
    3a44:	00 97       	sbiw	r24, 0x00	; 0
    3a46:	69 f7       	brne	.-38     	; 0x3a22 <H_LCD_void_Int+0x1da>
    3a48:	14 c0       	rjmp	.+40     	; 0x3a72 <H_LCD_void_Int+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a4a:	69 a9       	ldd	r22, Y+49	; 0x31
    3a4c:	7a a9       	ldd	r23, Y+50	; 0x32
    3a4e:	8b a9       	ldd	r24, Y+51	; 0x33
    3a50:	9c a9       	ldd	r25, Y+52	; 0x34
    3a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a56:	dc 01       	movw	r26, r24
    3a58:	cb 01       	movw	r24, r22
    3a5a:	98 ab       	std	Y+48, r25	; 0x30
    3a5c:	8f a7       	std	Y+47, r24	; 0x2f
    3a5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3a60:	98 a9       	ldd	r25, Y+48	; 0x30
    3a62:	9c a7       	std	Y+44, r25	; 0x2c
    3a64:	8b a7       	std	Y+43, r24	; 0x2b
    3a66:	8b a5       	ldd	r24, Y+43	; 0x2b
    3a68:	9c a5       	ldd	r25, Y+44	; 0x2c
    3a6a:	01 97       	sbiw	r24, 0x01	; 1
    3a6c:	f1 f7       	brne	.-4      	; 0x3a6a <H_LCD_void_Int+0x222>
    3a6e:	9c a7       	std	Y+44, r25	; 0x2c
    3a70:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	//H_LCD_void_SendCommand(
	//LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);

	u8 lcd_displayparams = 0; //= LCD_CURSOROFF | LCD_BLINKOFF;
    3a72:	fe 01       	movw	r30, r28
    3a74:	e9 5b       	subi	r30, 0xB9	; 185
    3a76:	ff 4f       	sbci	r31, 0xFF	; 255
    3a78:	10 82       	st	Z, r1
	//H_LCD_void_SendCommand(LCD_DISPLAYCONTROL | lcd_displayparams);

	lcd_displayparams |= LCD_DISPLAYON;
    3a7a:	de 01       	movw	r26, r28
    3a7c:	a9 5b       	subi	r26, 0xB9	; 185
    3a7e:	bf 4f       	sbci	r27, 0xFF	; 255
    3a80:	fe 01       	movw	r30, r28
    3a82:	e9 5b       	subi	r30, 0xB9	; 185
    3a84:	ff 4f       	sbci	r31, 0xFF	; 255
    3a86:	80 81       	ld	r24, Z
    3a88:	84 60       	ori	r24, 0x04	; 4
    3a8a:	8c 93       	st	X, r24
	H_LCD_void_SendCommand(LCD_DISPLAYCONTROL | lcd_displayparams);
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	e9 5b       	subi	r30, 0xB9	; 185
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	80 81       	ld	r24, Z
    3a94:	88 60       	ori	r24, 0x08	; 8
    3a96:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <H_LCD_void_SendCommand>
    3a9a:	80 e0       	ldi	r24, 0x00	; 0
    3a9c:	90 e0       	ldi	r25, 0x00	; 0
    3a9e:	a0 e8       	ldi	r26, 0x80	; 128
    3aa0:	bf e3       	ldi	r27, 0x3F	; 63
    3aa2:	8f a3       	std	Y+39, r24	; 0x27
    3aa4:	98 a7       	std	Y+40, r25	; 0x28
    3aa6:	a9 a7       	std	Y+41, r26	; 0x29
    3aa8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aaa:	6f a1       	ldd	r22, Y+39	; 0x27
    3aac:	78 a5       	ldd	r23, Y+40	; 0x28
    3aae:	89 a5       	ldd	r24, Y+41	; 0x29
    3ab0:	9a a5       	ldd	r25, Y+42	; 0x2a
    3ab2:	20 e0       	ldi	r18, 0x00	; 0
    3ab4:	30 e0       	ldi	r19, 0x00	; 0
    3ab6:	4a e7       	ldi	r20, 0x7A	; 122
    3ab8:	55 e4       	ldi	r21, 0x45	; 69
    3aba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3abe:	dc 01       	movw	r26, r24
    3ac0:	cb 01       	movw	r24, r22
    3ac2:	8b a3       	std	Y+35, r24	; 0x23
    3ac4:	9c a3       	std	Y+36, r25	; 0x24
    3ac6:	ad a3       	std	Y+37, r26	; 0x25
    3ac8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3aca:	6b a1       	ldd	r22, Y+35	; 0x23
    3acc:	7c a1       	ldd	r23, Y+36	; 0x24
    3ace:	8d a1       	ldd	r24, Y+37	; 0x25
    3ad0:	9e a1       	ldd	r25, Y+38	; 0x26
    3ad2:	20 e0       	ldi	r18, 0x00	; 0
    3ad4:	30 e0       	ldi	r19, 0x00	; 0
    3ad6:	40 e8       	ldi	r20, 0x80	; 128
    3ad8:	5f e3       	ldi	r21, 0x3F	; 63
    3ada:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3ade:	88 23       	and	r24, r24
    3ae0:	2c f4       	brge	.+10     	; 0x3aec <H_LCD_void_Int+0x2a4>
		__ticks = 1;
    3ae2:	81 e0       	ldi	r24, 0x01	; 1
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	9a a3       	std	Y+34, r25	; 0x22
    3ae8:	89 a3       	std	Y+33, r24	; 0x21
    3aea:	3f c0       	rjmp	.+126    	; 0x3b6a <H_LCD_void_Int+0x322>
	else if (__tmp > 65535)
    3aec:	6b a1       	ldd	r22, Y+35	; 0x23
    3aee:	7c a1       	ldd	r23, Y+36	; 0x24
    3af0:	8d a1       	ldd	r24, Y+37	; 0x25
    3af2:	9e a1       	ldd	r25, Y+38	; 0x26
    3af4:	20 e0       	ldi	r18, 0x00	; 0
    3af6:	3f ef       	ldi	r19, 0xFF	; 255
    3af8:	4f e7       	ldi	r20, 0x7F	; 127
    3afa:	57 e4       	ldi	r21, 0x47	; 71
    3afc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b00:	18 16       	cp	r1, r24
    3b02:	4c f5       	brge	.+82     	; 0x3b56 <H_LCD_void_Int+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b04:	6f a1       	ldd	r22, Y+39	; 0x27
    3b06:	78 a5       	ldd	r23, Y+40	; 0x28
    3b08:	89 a5       	ldd	r24, Y+41	; 0x29
    3b0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    3b0c:	20 e0       	ldi	r18, 0x00	; 0
    3b0e:	30 e0       	ldi	r19, 0x00	; 0
    3b10:	40 e2       	ldi	r20, 0x20	; 32
    3b12:	51 e4       	ldi	r21, 0x41	; 65
    3b14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b18:	dc 01       	movw	r26, r24
    3b1a:	cb 01       	movw	r24, r22
    3b1c:	bc 01       	movw	r22, r24
    3b1e:	cd 01       	movw	r24, r26
    3b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b24:	dc 01       	movw	r26, r24
    3b26:	cb 01       	movw	r24, r22
    3b28:	9a a3       	std	Y+34, r25	; 0x22
    3b2a:	89 a3       	std	Y+33, r24	; 0x21
    3b2c:	0f c0       	rjmp	.+30     	; 0x3b4c <H_LCD_void_Int+0x304>
    3b2e:	80 e9       	ldi	r24, 0x90	; 144
    3b30:	91 e0       	ldi	r25, 0x01	; 1
    3b32:	98 a3       	std	Y+32, r25	; 0x20
    3b34:	8f 8f       	std	Y+31, r24	; 0x1f
    3b36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3b38:	98 a1       	ldd	r25, Y+32	; 0x20
    3b3a:	01 97       	sbiw	r24, 0x01	; 1
    3b3c:	f1 f7       	brne	.-4      	; 0x3b3a <H_LCD_void_Int+0x2f2>
    3b3e:	98 a3       	std	Y+32, r25	; 0x20
    3b40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b42:	89 a1       	ldd	r24, Y+33	; 0x21
    3b44:	9a a1       	ldd	r25, Y+34	; 0x22
    3b46:	01 97       	sbiw	r24, 0x01	; 1
    3b48:	9a a3       	std	Y+34, r25	; 0x22
    3b4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b4c:	89 a1       	ldd	r24, Y+33	; 0x21
    3b4e:	9a a1       	ldd	r25, Y+34	; 0x22
    3b50:	00 97       	sbiw	r24, 0x00	; 0
    3b52:	69 f7       	brne	.-38     	; 0x3b2e <H_LCD_void_Int+0x2e6>
    3b54:	14 c0       	rjmp	.+40     	; 0x3b7e <H_LCD_void_Int+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b56:	6b a1       	ldd	r22, Y+35	; 0x23
    3b58:	7c a1       	ldd	r23, Y+36	; 0x24
    3b5a:	8d a1       	ldd	r24, Y+37	; 0x25
    3b5c:	9e a1       	ldd	r25, Y+38	; 0x26
    3b5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b62:	dc 01       	movw	r26, r24
    3b64:	cb 01       	movw	r24, r22
    3b66:	9a a3       	std	Y+34, r25	; 0x22
    3b68:	89 a3       	std	Y+33, r24	; 0x21
    3b6a:	89 a1       	ldd	r24, Y+33	; 0x21
    3b6c:	9a a1       	ldd	r25, Y+34	; 0x22
    3b6e:	9e 8f       	std	Y+30, r25	; 0x1e
    3b70:	8d 8f       	std	Y+29, r24	; 0x1d
    3b72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3b74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3b76:	01 97       	sbiw	r24, 0x01	; 1
    3b78:	f1 f7       	brne	.-4      	; 0x3b76 <H_LCD_void_Int+0x32e>
    3b7a:	9e 8f       	std	Y+30, r25	; 0x1e
    3b7c:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);

	H_LCD_void_SendCommand(LCD_CLEARDISPLAY);
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <H_LCD_void_SendCommand>
    3b84:	80 e0       	ldi	r24, 0x00	; 0
    3b86:	90 e0       	ldi	r25, 0x00	; 0
    3b88:	a0 e4       	ldi	r26, 0x40	; 64
    3b8a:	b0 e4       	ldi	r27, 0x40	; 64
    3b8c:	89 8f       	std	Y+25, r24	; 0x19
    3b8e:	9a 8f       	std	Y+26, r25	; 0x1a
    3b90:	ab 8f       	std	Y+27, r26	; 0x1b
    3b92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b94:	69 8d       	ldd	r22, Y+25	; 0x19
    3b96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b9c:	20 e0       	ldi	r18, 0x00	; 0
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
    3ba0:	4a e7       	ldi	r20, 0x7A	; 122
    3ba2:	55 e4       	ldi	r21, 0x45	; 69
    3ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ba8:	dc 01       	movw	r26, r24
    3baa:	cb 01       	movw	r24, r22
    3bac:	8d 8b       	std	Y+21, r24	; 0x15
    3bae:	9e 8b       	std	Y+22, r25	; 0x16
    3bb0:	af 8b       	std	Y+23, r26	; 0x17
    3bb2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3bb4:	6d 89       	ldd	r22, Y+21	; 0x15
    3bb6:	7e 89       	ldd	r23, Y+22	; 0x16
    3bb8:	8f 89       	ldd	r24, Y+23	; 0x17
    3bba:	98 8d       	ldd	r25, Y+24	; 0x18
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	40 e8       	ldi	r20, 0x80	; 128
    3bc2:	5f e3       	ldi	r21, 0x3F	; 63
    3bc4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3bc8:	88 23       	and	r24, r24
    3bca:	2c f4       	brge	.+10     	; 0x3bd6 <H_LCD_void_Int+0x38e>
		__ticks = 1;
    3bcc:	81 e0       	ldi	r24, 0x01	; 1
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	9c 8b       	std	Y+20, r25	; 0x14
    3bd2:	8b 8b       	std	Y+19, r24	; 0x13
    3bd4:	3f c0       	rjmp	.+126    	; 0x3c54 <H_LCD_void_Int+0x40c>
	else if (__tmp > 65535)
    3bd6:	6d 89       	ldd	r22, Y+21	; 0x15
    3bd8:	7e 89       	ldd	r23, Y+22	; 0x16
    3bda:	8f 89       	ldd	r24, Y+23	; 0x17
    3bdc:	98 8d       	ldd	r25, Y+24	; 0x18
    3bde:	20 e0       	ldi	r18, 0x00	; 0
    3be0:	3f ef       	ldi	r19, 0xFF	; 255
    3be2:	4f e7       	ldi	r20, 0x7F	; 127
    3be4:	57 e4       	ldi	r21, 0x47	; 71
    3be6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3bea:	18 16       	cp	r1, r24
    3bec:	4c f5       	brge	.+82     	; 0x3c40 <H_LCD_void_Int+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bee:	69 8d       	ldd	r22, Y+25	; 0x19
    3bf0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3bf2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3bf4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bf6:	20 e0       	ldi	r18, 0x00	; 0
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	40 e2       	ldi	r20, 0x20	; 32
    3bfc:	51 e4       	ldi	r21, 0x41	; 65
    3bfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	bc 01       	movw	r22, r24
    3c08:	cd 01       	movw	r24, r26
    3c0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c0e:	dc 01       	movw	r26, r24
    3c10:	cb 01       	movw	r24, r22
    3c12:	9c 8b       	std	Y+20, r25	; 0x14
    3c14:	8b 8b       	std	Y+19, r24	; 0x13
    3c16:	0f c0       	rjmp	.+30     	; 0x3c36 <H_LCD_void_Int+0x3ee>
    3c18:	80 e9       	ldi	r24, 0x90	; 144
    3c1a:	91 e0       	ldi	r25, 0x01	; 1
    3c1c:	9a 8b       	std	Y+18, r25	; 0x12
    3c1e:	89 8b       	std	Y+17, r24	; 0x11
    3c20:	89 89       	ldd	r24, Y+17	; 0x11
    3c22:	9a 89       	ldd	r25, Y+18	; 0x12
    3c24:	01 97       	sbiw	r24, 0x01	; 1
    3c26:	f1 f7       	brne	.-4      	; 0x3c24 <H_LCD_void_Int+0x3dc>
    3c28:	9a 8b       	std	Y+18, r25	; 0x12
    3c2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c2c:	8b 89       	ldd	r24, Y+19	; 0x13
    3c2e:	9c 89       	ldd	r25, Y+20	; 0x14
    3c30:	01 97       	sbiw	r24, 0x01	; 1
    3c32:	9c 8b       	std	Y+20, r25	; 0x14
    3c34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c36:	8b 89       	ldd	r24, Y+19	; 0x13
    3c38:	9c 89       	ldd	r25, Y+20	; 0x14
    3c3a:	00 97       	sbiw	r24, 0x00	; 0
    3c3c:	69 f7       	brne	.-38     	; 0x3c18 <H_LCD_void_Int+0x3d0>
    3c3e:	14 c0       	rjmp	.+40     	; 0x3c68 <H_LCD_void_Int+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c40:	6d 89       	ldd	r22, Y+21	; 0x15
    3c42:	7e 89       	ldd	r23, Y+22	; 0x16
    3c44:	8f 89       	ldd	r24, Y+23	; 0x17
    3c46:	98 8d       	ldd	r25, Y+24	; 0x18
    3c48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c4c:	dc 01       	movw	r26, r24
    3c4e:	cb 01       	movw	r24, r22
    3c50:	9c 8b       	std	Y+20, r25	; 0x14
    3c52:	8b 8b       	std	Y+19, r24	; 0x13
    3c54:	8b 89       	ldd	r24, Y+19	; 0x13
    3c56:	9c 89       	ldd	r25, Y+20	; 0x14
    3c58:	98 8b       	std	Y+16, r25	; 0x10
    3c5a:	8f 87       	std	Y+15, r24	; 0x0f
    3c5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c5e:	98 89       	ldd	r25, Y+16	; 0x10
    3c60:	01 97       	sbiw	r24, 0x01	; 1
    3c62:	f1 f7       	brne	.-4      	; 0x3c60 <H_LCD_void_Int+0x418>
    3c64:	98 8b       	std	Y+16, r25	; 0x10
    3c66:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(3);

	H_LCD_void_SendCommand(LCD_ENTRYMODESET | LCD_ENTRYSHIFTINCREMENT);
    3c68:	86 e0       	ldi	r24, 0x06	; 6
    3c6a:	0e 94 52 1b 	call	0x36a4	; 0x36a4 <H_LCD_void_SendCommand>
    3c6e:	80 e0       	ldi	r24, 0x00	; 0
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	a0 e4       	ldi	r26, 0x40	; 64
    3c74:	b0 e4       	ldi	r27, 0x40	; 64
    3c76:	8b 87       	std	Y+11, r24	; 0x0b
    3c78:	9c 87       	std	Y+12, r25	; 0x0c
    3c7a:	ad 87       	std	Y+13, r26	; 0x0d
    3c7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c80:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c82:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c84:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c86:	20 e0       	ldi	r18, 0x00	; 0
    3c88:	30 e0       	ldi	r19, 0x00	; 0
    3c8a:	4a e7       	ldi	r20, 0x7A	; 122
    3c8c:	55 e4       	ldi	r21, 0x45	; 69
    3c8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c92:	dc 01       	movw	r26, r24
    3c94:	cb 01       	movw	r24, r22
    3c96:	8f 83       	std	Y+7, r24	; 0x07
    3c98:	98 87       	std	Y+8, r25	; 0x08
    3c9a:	a9 87       	std	Y+9, r26	; 0x09
    3c9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c9e:	6f 81       	ldd	r22, Y+7	; 0x07
    3ca0:	78 85       	ldd	r23, Y+8	; 0x08
    3ca2:	89 85       	ldd	r24, Y+9	; 0x09
    3ca4:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	30 e0       	ldi	r19, 0x00	; 0
    3caa:	40 e8       	ldi	r20, 0x80	; 128
    3cac:	5f e3       	ldi	r21, 0x3F	; 63
    3cae:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3cb2:	88 23       	and	r24, r24
    3cb4:	2c f4       	brge	.+10     	; 0x3cc0 <H_LCD_void_Int+0x478>
		__ticks = 1;
    3cb6:	81 e0       	ldi	r24, 0x01	; 1
    3cb8:	90 e0       	ldi	r25, 0x00	; 0
    3cba:	9e 83       	std	Y+6, r25	; 0x06
    3cbc:	8d 83       	std	Y+5, r24	; 0x05
    3cbe:	3f c0       	rjmp	.+126    	; 0x3d3e <H_LCD_void_Int+0x4f6>
	else if (__tmp > 65535)
    3cc0:	6f 81       	ldd	r22, Y+7	; 0x07
    3cc2:	78 85       	ldd	r23, Y+8	; 0x08
    3cc4:	89 85       	ldd	r24, Y+9	; 0x09
    3cc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cc8:	20 e0       	ldi	r18, 0x00	; 0
    3cca:	3f ef       	ldi	r19, 0xFF	; 255
    3ccc:	4f e7       	ldi	r20, 0x7F	; 127
    3cce:	57 e4       	ldi	r21, 0x47	; 71
    3cd0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3cd4:	18 16       	cp	r1, r24
    3cd6:	4c f5       	brge	.+82     	; 0x3d2a <H_LCD_void_Int+0x4e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cda:	7c 85       	ldd	r23, Y+12	; 0x0c
    3cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ce0:	20 e0       	ldi	r18, 0x00	; 0
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	40 e2       	ldi	r20, 0x20	; 32
    3ce6:	51 e4       	ldi	r21, 0x41	; 65
    3ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cec:	dc 01       	movw	r26, r24
    3cee:	cb 01       	movw	r24, r22
    3cf0:	bc 01       	movw	r22, r24
    3cf2:	cd 01       	movw	r24, r26
    3cf4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf8:	dc 01       	movw	r26, r24
    3cfa:	cb 01       	movw	r24, r22
    3cfc:	9e 83       	std	Y+6, r25	; 0x06
    3cfe:	8d 83       	std	Y+5, r24	; 0x05
    3d00:	0f c0       	rjmp	.+30     	; 0x3d20 <H_LCD_void_Int+0x4d8>
    3d02:	80 e9       	ldi	r24, 0x90	; 144
    3d04:	91 e0       	ldi	r25, 0x01	; 1
    3d06:	9c 83       	std	Y+4, r25	; 0x04
    3d08:	8b 83       	std	Y+3, r24	; 0x03
    3d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    3d0e:	01 97       	sbiw	r24, 0x01	; 1
    3d10:	f1 f7       	brne	.-4      	; 0x3d0e <H_LCD_void_Int+0x4c6>
    3d12:	9c 83       	std	Y+4, r25	; 0x04
    3d14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d16:	8d 81       	ldd	r24, Y+5	; 0x05
    3d18:	9e 81       	ldd	r25, Y+6	; 0x06
    3d1a:	01 97       	sbiw	r24, 0x01	; 1
    3d1c:	9e 83       	std	Y+6, r25	; 0x06
    3d1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d20:	8d 81       	ldd	r24, Y+5	; 0x05
    3d22:	9e 81       	ldd	r25, Y+6	; 0x06
    3d24:	00 97       	sbiw	r24, 0x00	; 0
    3d26:	69 f7       	brne	.-38     	; 0x3d02 <H_LCD_void_Int+0x4ba>
    3d28:	14 c0       	rjmp	.+40     	; 0x3d52 <H_LCD_void_Int+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d2a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d2c:	78 85       	ldd	r23, Y+8	; 0x08
    3d2e:	89 85       	ldd	r24, Y+9	; 0x09
    3d30:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d36:	dc 01       	movw	r26, r24
    3d38:	cb 01       	movw	r24, r22
    3d3a:	9e 83       	std	Y+6, r25	; 0x06
    3d3c:	8d 83       	std	Y+5, r24	; 0x05
    3d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d40:	9e 81       	ldd	r25, Y+6	; 0x06
    3d42:	9a 83       	std	Y+2, r25	; 0x02
    3d44:	89 83       	std	Y+1, r24	; 0x01
    3d46:	89 81       	ldd	r24, Y+1	; 0x01
    3d48:	9a 81       	ldd	r25, Y+2	; 0x02
    3d4a:	01 97       	sbiw	r24, 0x01	; 1
    3d4c:	f1 f7       	brne	.-4      	; 0x3d4a <H_LCD_void_Int+0x502>
    3d4e:	9a 83       	std	Y+2, r25	; 0x02
    3d50:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(3);

#endif
}
    3d52:	c9 5b       	subi	r28, 0xB9	; 185
    3d54:	df 4f       	sbci	r29, 0xFF	; 255
    3d56:	0f b6       	in	r0, 0x3f	; 63
    3d58:	f8 94       	cli
    3d5a:	de bf       	out	0x3e, r29	; 62
    3d5c:	0f be       	out	0x3f, r0	; 63
    3d5e:	cd bf       	out	0x3d, r28	; 61
    3d60:	cf 91       	pop	r28
    3d62:	df 91       	pop	r29
    3d64:	1f 91       	pop	r17
    3d66:	0f 91       	pop	r16
    3d68:	08 95       	ret

00003d6a <__vector_7>:
#include <avr/interrupt.h>
//#include "Mcu_HW.h"
#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
    3d6a:	1f 92       	push	r1
    3d6c:	0f 92       	push	r0
    3d6e:	0f b6       	in	r0, 0x3f	; 63
    3d70:	0f 92       	push	r0
    3d72:	11 24       	eor	r1, r1
    3d74:	8f 93       	push	r24
    3d76:	9f 93       	push	r25
    3d78:	af 93       	push	r26
    3d7a:	bf 93       	push	r27
    3d7c:	df 93       	push	r29
    3d7e:	cf 93       	push	r28
    3d80:	cd b7       	in	r28, 0x3d	; 61
    3d82:	de b7       	in	r29, 0x3e	; 62
  timer1_millis++;
    3d84:	80 91 0f 05 	lds	r24, 0x050F
    3d88:	90 91 10 05 	lds	r25, 0x0510
    3d8c:	a0 91 11 05 	lds	r26, 0x0511
    3d90:	b0 91 12 05 	lds	r27, 0x0512
    3d94:	01 96       	adiw	r24, 0x01	; 1
    3d96:	a1 1d       	adc	r26, r1
    3d98:	b1 1d       	adc	r27, r1
    3d9a:	80 93 0f 05 	sts	0x050F, r24
    3d9e:	90 93 10 05 	sts	0x0510, r25
    3da2:	a0 93 11 05 	sts	0x0511, r26
    3da6:	b0 93 12 05 	sts	0x0512, r27
}
    3daa:	cf 91       	pop	r28
    3dac:	df 91       	pop	r29
    3dae:	bf 91       	pop	r27
    3db0:	af 91       	pop	r26
    3db2:	9f 91       	pop	r25
    3db4:	8f 91       	pop	r24
    3db6:	0f 90       	pop	r0
    3db8:	0f be       	out	0x3f, r0	; 63
    3dba:	0f 90       	pop	r0
    3dbc:	1f 90       	pop	r1
    3dbe:	18 95       	reti

00003dc0 <init_millis>:

void init_millis(unsigned long f_cpu)
{
    3dc0:	df 93       	push	r29
    3dc2:	cf 93       	push	r28
    3dc4:	cd b7       	in	r28, 0x3d	; 61
    3dc6:	de b7       	in	r29, 0x3e	; 62
    3dc8:	28 97       	sbiw	r28, 0x08	; 8
    3dca:	0f b6       	in	r0, 0x3f	; 63
    3dcc:	f8 94       	cli
    3dce:	de bf       	out	0x3e, r29	; 62
    3dd0:	0f be       	out	0x3f, r0	; 63
    3dd2:	cd bf       	out	0x3d, r28	; 61
    3dd4:	6d 83       	std	Y+5, r22	; 0x05
    3dd6:	7e 83       	std	Y+6, r23	; 0x06
    3dd8:	8f 83       	std	Y+7, r24	; 0x07
    3dda:	98 87       	std	Y+8, r25	; 0x08
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
    3ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    3dde:	9e 81       	ldd	r25, Y+6	; 0x06
    3de0:	af 81       	ldd	r26, Y+7	; 0x07
    3de2:	b8 85       	ldd	r27, Y+8	; 0x08
    3de4:	20 e4       	ldi	r18, 0x40	; 64
    3de6:	3f e1       	ldi	r19, 0x1F	; 31
    3de8:	40 e0       	ldi	r20, 0x00	; 0
    3dea:	50 e0       	ldi	r21, 0x00	; 0
    3dec:	bc 01       	movw	r22, r24
    3dee:	cd 01       	movw	r24, r26
    3df0:	0e 94 45 20 	call	0x408a	; 0x408a <__udivmodsi4>
    3df4:	da 01       	movw	r26, r20
    3df6:	c9 01       	movw	r24, r18
    3df8:	89 83       	std	Y+1, r24	; 0x01
    3dfa:	9a 83       	std	Y+2, r25	; 0x02
    3dfc:	ab 83       	std	Y+3, r26	; 0x03
    3dfe:	bc 83       	std	Y+4, r27	; 0x04

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
    3e00:	ae e4       	ldi	r26, 0x4E	; 78
    3e02:	b0 e0       	ldi	r27, 0x00	; 0
    3e04:	ee e4       	ldi	r30, 0x4E	; 78
    3e06:	f0 e0       	ldi	r31, 0x00	; 0
    3e08:	80 81       	ld	r24, Z
    3e0a:	8a 60       	ori	r24, 0x0A	; 10
    3e0c:	8c 93       	st	X, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
    3e0e:	eb e4       	ldi	r30, 0x4B	; 75
    3e10:	f0 e0       	ldi	r31, 0x00	; 0
    3e12:	89 81       	ldd	r24, Y+1	; 0x01
    3e14:	9a 81       	ldd	r25, Y+2	; 0x02
    3e16:	ab 81       	ldd	r26, Y+3	; 0x03
    3e18:	bc 81       	ldd	r27, Y+4	; 0x04
    3e1a:	89 2f       	mov	r24, r25
    3e1c:	9a 2f       	mov	r25, r26
    3e1e:	ab 2f       	mov	r26, r27
    3e20:	bb 27       	eor	r27, r27
    3e22:	80 83       	st	Z, r24
  OCR1AL = ctc_match_overflow;
    3e24:	ea e4       	ldi	r30, 0x4A	; 74
    3e26:	f0 e0       	ldi	r31, 0x00	; 0
    3e28:	89 81       	ldd	r24, Y+1	; 0x01
    3e2a:	80 83       	st	Z, r24

  // Enable the compare match interrupt
  TIMSK |= (1 << OCIE1A);
    3e2c:	a9 e5       	ldi	r26, 0x59	; 89
    3e2e:	b0 e0       	ldi	r27, 0x00	; 0
    3e30:	e9 e5       	ldi	r30, 0x59	; 89
    3e32:	f0 e0       	ldi	r31, 0x00	; 0
    3e34:	80 81       	ld	r24, Z
    3e36:	80 61       	ori	r24, 0x10	; 16
    3e38:	8c 93       	st	X, r24

  //REMEMBER TO ENABLE GLOBAL INTERRUPTS AFTER THIS WITH sei(); !!!
}
    3e3a:	28 96       	adiw	r28, 0x08	; 8
    3e3c:	0f b6       	in	r0, 0x3f	; 63
    3e3e:	f8 94       	cli
    3e40:	de bf       	out	0x3e, r29	; 62
    3e42:	0f be       	out	0x3f, r0	; 63
    3e44:	cd bf       	out	0x3d, r28	; 61
    3e46:	cf 91       	pop	r28
    3e48:	df 91       	pop	r29
    3e4a:	08 95       	ret

00003e4c <millis>:

unsigned long millis (void)
{
    3e4c:	df 93       	push	r29
    3e4e:	cf 93       	push	r28
    3e50:	00 d0       	rcall	.+0      	; 0x3e52 <millis+0x6>
    3e52:	00 d0       	rcall	.+0      	; 0x3e54 <millis+0x8>
    3e54:	00 d0       	rcall	.+0      	; 0x3e56 <millis+0xa>
    3e56:	cd b7       	in	r28, 0x3d	; 61
    3e58:	de b7       	in	r29, 0x3e	; 62
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    3e5a:	1e 82       	std	Y+6, r1	; 0x06
    3e5c:	0e 94 55 1f 	call	0x3eaa	; 0x3eaa <__iCliRetVal>
    3e60:	89 83       	std	Y+1, r24	; 0x01
    3e62:	0d c0       	rjmp	.+26     	; 0x3e7e <millis+0x32>
    millis_return = timer1_millis;
    3e64:	80 91 0f 05 	lds	r24, 0x050F
    3e68:	90 91 10 05 	lds	r25, 0x0510
    3e6c:	a0 91 11 05 	lds	r26, 0x0511
    3e70:	b0 91 12 05 	lds	r27, 0x0512
    3e74:	8a 83       	std	Y+2, r24	; 0x02
    3e76:	9b 83       	std	Y+3, r25	; 0x03
    3e78:	ac 83       	std	Y+4, r26	; 0x04
    3e7a:	bd 83       	std	Y+5, r27	; 0x05
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    3e7c:	19 82       	std	Y+1, r1	; 0x01
    3e7e:	89 81       	ldd	r24, Y+1	; 0x01
    3e80:	88 23       	and	r24, r24
    3e82:	81 f7       	brne	.-32     	; 0x3e64 <millis+0x18>
    3e84:	ce 01       	movw	r24, r28
    3e86:	06 96       	adiw	r24, 0x06	; 6
    3e88:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <__iSeiParam>
    millis_return = timer1_millis;
  }
  return millis_return;
    3e8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3e90:	ac 81       	ldd	r26, Y+4	; 0x04
    3e92:	bd 81       	ldd	r27, Y+5	; 0x05
}
    3e94:	bc 01       	movw	r22, r24
    3e96:	cd 01       	movw	r24, r26
    3e98:	26 96       	adiw	r28, 0x06	; 6
    3e9a:	0f b6       	in	r0, 0x3f	; 63
    3e9c:	f8 94       	cli
    3e9e:	de bf       	out	0x3e, r29	; 62
    3ea0:	0f be       	out	0x3f, r0	; 63
    3ea2:	cd bf       	out	0x3d, r28	; 61
    3ea4:	cf 91       	pop	r28
    3ea6:	df 91       	pop	r29
    3ea8:	08 95       	ret

00003eaa <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    3eaa:	df 93       	push	r29
    3eac:	cf 93       	push	r28
    3eae:	cd b7       	in	r28, 0x3d	; 61
    3eb0:	de b7       	in	r29, 0x3e	; 62
    cli();
    3eb2:	f8 94       	cli
    return 1;
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
}
    3eb6:	cf 91       	pop	r28
    3eb8:	df 91       	pop	r29
    3eba:	08 95       	ret

00003ebc <__iSeiParam>:

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    3ebc:	df 93       	push	r29
    3ebe:	cf 93       	push	r28
    3ec0:	00 d0       	rcall	.+0      	; 0x3ec2 <__iSeiParam+0x6>
    3ec2:	cd b7       	in	r28, 0x3d	; 61
    3ec4:	de b7       	in	r29, 0x3e	; 62
    3ec6:	9a 83       	std	Y+2, r25	; 0x02
    3ec8:	89 83       	std	Y+1, r24	; 0x01
    sei();
    3eca:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}
    3ecc:	0f 90       	pop	r0
    3ece:	0f 90       	pop	r0
    3ed0:	cf 91       	pop	r28
    3ed2:	df 91       	pop	r29
    3ed4:	08 95       	ret

00003ed6 <APP_void_StartWIFIserver>:

extern S_WIFI_Config_t WIFI_Config;


void APP_void_StartWIFIserver(void)
{
    3ed6:	df 93       	push	r29
    3ed8:	cf 93       	push	r28
    3eda:	cd b7       	in	r28, 0x3d	; 61
    3edc:	de b7       	in	r29, 0x3e	; 62
	H_WIFI_void_WIFIInit( WIFI_Config );
    3ede:	20 91 ca 02 	lds	r18, 0x02CA
    3ee2:	30 91 cb 02 	lds	r19, 0x02CB
    3ee6:	40 91 cc 02 	lds	r20, 0x02CC
    3eea:	50 91 cd 02 	lds	r21, 0x02CD
    3eee:	60 91 ce 02 	lds	r22, 0x02CE
    3ef2:	70 91 cf 02 	lds	r23, 0x02CF
    3ef6:	80 91 d0 02 	lds	r24, 0x02D0
    3efa:	0e 94 af 10 	call	0x215e	; 0x215e <H_WIFI_void_WIFIInit>
	H_WIFI_void_StartTCPServer();
    3efe:	0e 94 4b 13 	call	0x2696	; 0x2696 <H_WIFI_void_StartTCPServer>
}
    3f02:	cf 91       	pop	r28
    3f04:	df 91       	pop	r29
    3f06:	08 95       	ret

00003f08 <APP_UpdateStatus_t_WIFIUpdate>:


APP_WIFI_UpdateStatus_t APP_UpdateStatus_t_WIFIUpdate(char *recevBuffer)
{
    3f08:	df 93       	push	r29
    3f0a:	cf 93       	push	r28
    3f0c:	00 d0       	rcall	.+0      	; 0x3f0e <APP_UpdateStatus_t_WIFIUpdate+0x6>
    3f0e:	0f 92       	push	r0
    3f10:	cd b7       	in	r28, 0x3d	; 61
    3f12:	de b7       	in	r29, 0x3e	; 62
    3f14:	9a 83       	std	Y+2, r25	; 0x02
    3f16:	89 83       	std	Y+1, r24	; 0x01
if(H_WIFI_ReceiveStatue_t_WIFIreceive(recevBuffer) == WIFI_Data_Receved)
    3f18:	89 81       	ldd	r24, Y+1	; 0x01
    3f1a:	9a 81       	ldd	r25, Y+2	; 0x02
    3f1c:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <H_WIFI_ReceiveStatue_t_WIFIreceive>
    3f20:	88 23       	and	r24, r24
    3f22:	11 f4       	brne	.+4      	; 0x3f28 <APP_UpdateStatus_t_WIFIUpdate+0x20>
{
	return APP_WIFI_Updated;
    3f24:	1b 82       	std	Y+3, r1	; 0x03
    3f26:	02 c0       	rjmp	.+4      	; 0x3f2c <APP_UpdateStatus_t_WIFIUpdate+0x24>
}
return APP_WIFI_NO_Update;
    3f28:	81 e0       	ldi	r24, 0x01	; 1
    3f2a:	8b 83       	std	Y+3, r24	; 0x03
    3f2c:	8b 81       	ldd	r24, Y+3	; 0x03

}
    3f2e:	0f 90       	pop	r0
    3f30:	0f 90       	pop	r0
    3f32:	0f 90       	pop	r0
    3f34:	cf 91       	pop	r28
    3f36:	df 91       	pop	r29
    3f38:	08 95       	ret

00003f3a <main>:

extern S_UART_config_t UART_config;
extern const Port_Configtype Port_ConfigArr[PORT_PINS_CONFIG_ARR_SIZE];
extern S_WIFI_Config_t WIFI_Config;
char buff[100];
int main() {
    3f3a:	df 93       	push	r29
    3f3c:	cf 93       	push	r28
    3f3e:	cd b7       	in	r28, 0x3d	; 61
    3f40:	de b7       	in	r29, 0x3e	; 62
    3f42:	2e 97       	sbiw	r28, 0x0e	; 14
    3f44:	0f b6       	in	r0, 0x3f	; 63
    3f46:	f8 94       	cli
    3f48:	de bf       	out	0x3e, r29	; 62
    3f4a:	0f be       	out	0x3f, r0	; 63
    3f4c:	cd bf       	out	0x3d, r28	; 61
	M_PORT_voidInit(Port_ConfigArr);
    3f4e:	81 ed       	ldi	r24, 0xD1	; 209
    3f50:	92 e0       	ldi	r25, 0x02	; 2
    3f52:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_PORT_voidInit>
	H_LCD_void_Int();
    3f56:	0e 94 24 1c 	call	0x3848	; 0x3848 <H_LCD_void_Int>
	H_LCD_void_sendString("test");
    3f5a:	84 e7       	ldi	r24, 0x74	; 116
    3f5c:	91 e0       	ldi	r25, 0x01	; 1
    3f5e:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <H_LCD_void_sendString>

	__asm__ __volatile__ ("sei" ::);
    3f62:	78 94       	sei

	APP_void_StartWIFIserver();
    3f64:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <APP_void_StartWIFIserver>
    3f68:	80 e0       	ldi	r24, 0x00	; 0
    3f6a:	90 e0       	ldi	r25, 0x00	; 0
    3f6c:	aa ef       	ldi	r26, 0xFA	; 250
    3f6e:	b4 e4       	ldi	r27, 0x44	; 68
    3f70:	8b 87       	std	Y+11, r24	; 0x0b
    3f72:	9c 87       	std	Y+12, r25	; 0x0c
    3f74:	ad 87       	std	Y+13, r26	; 0x0d
    3f76:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f80:	20 e0       	ldi	r18, 0x00	; 0
    3f82:	30 e0       	ldi	r19, 0x00	; 0
    3f84:	4a e7       	ldi	r20, 0x7A	; 122
    3f86:	55 e4       	ldi	r21, 0x45	; 69
    3f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f8c:	dc 01       	movw	r26, r24
    3f8e:	cb 01       	movw	r24, r22
    3f90:	8f 83       	std	Y+7, r24	; 0x07
    3f92:	98 87       	std	Y+8, r25	; 0x08
    3f94:	a9 87       	std	Y+9, r26	; 0x09
    3f96:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f98:	6f 81       	ldd	r22, Y+7	; 0x07
    3f9a:	78 85       	ldd	r23, Y+8	; 0x08
    3f9c:	89 85       	ldd	r24, Y+9	; 0x09
    3f9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fa0:	20 e0       	ldi	r18, 0x00	; 0
    3fa2:	30 e0       	ldi	r19, 0x00	; 0
    3fa4:	40 e8       	ldi	r20, 0x80	; 128
    3fa6:	5f e3       	ldi	r21, 0x3F	; 63
    3fa8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3fac:	88 23       	and	r24, r24
    3fae:	2c f4       	brge	.+10     	; 0x3fba <main+0x80>
		__ticks = 1;
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	90 e0       	ldi	r25, 0x00	; 0
    3fb4:	9e 83       	std	Y+6, r25	; 0x06
    3fb6:	8d 83       	std	Y+5, r24	; 0x05
    3fb8:	3f c0       	rjmp	.+126    	; 0x4038 <main+0xfe>
	else if (__tmp > 65535)
    3fba:	6f 81       	ldd	r22, Y+7	; 0x07
    3fbc:	78 85       	ldd	r23, Y+8	; 0x08
    3fbe:	89 85       	ldd	r24, Y+9	; 0x09
    3fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc2:	20 e0       	ldi	r18, 0x00	; 0
    3fc4:	3f ef       	ldi	r19, 0xFF	; 255
    3fc6:	4f e7       	ldi	r20, 0x7F	; 127
    3fc8:	57 e4       	ldi	r21, 0x47	; 71
    3fca:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3fce:	18 16       	cp	r1, r24
    3fd0:	4c f5       	brge	.+82     	; 0x4024 <main+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3fd2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3fd4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3fd6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fd8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fda:	20 e0       	ldi	r18, 0x00	; 0
    3fdc:	30 e0       	ldi	r19, 0x00	; 0
    3fde:	40 e2       	ldi	r20, 0x20	; 32
    3fe0:	51 e4       	ldi	r21, 0x41	; 65
    3fe2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fe6:	dc 01       	movw	r26, r24
    3fe8:	cb 01       	movw	r24, r22
    3fea:	bc 01       	movw	r22, r24
    3fec:	cd 01       	movw	r24, r26
    3fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff2:	dc 01       	movw	r26, r24
    3ff4:	cb 01       	movw	r24, r22
    3ff6:	9e 83       	std	Y+6, r25	; 0x06
    3ff8:	8d 83       	std	Y+5, r24	; 0x05
    3ffa:	0f c0       	rjmp	.+30     	; 0x401a <main+0xe0>
    3ffc:	80 e9       	ldi	r24, 0x90	; 144
    3ffe:	91 e0       	ldi	r25, 0x01	; 1
    4000:	9c 83       	std	Y+4, r25	; 0x04
    4002:	8b 83       	std	Y+3, r24	; 0x03
    4004:	8b 81       	ldd	r24, Y+3	; 0x03
    4006:	9c 81       	ldd	r25, Y+4	; 0x04
    4008:	01 97       	sbiw	r24, 0x01	; 1
    400a:	f1 f7       	brne	.-4      	; 0x4008 <main+0xce>
    400c:	9c 83       	std	Y+4, r25	; 0x04
    400e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4010:	8d 81       	ldd	r24, Y+5	; 0x05
    4012:	9e 81       	ldd	r25, Y+6	; 0x06
    4014:	01 97       	sbiw	r24, 0x01	; 1
    4016:	9e 83       	std	Y+6, r25	; 0x06
    4018:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    401a:	8d 81       	ldd	r24, Y+5	; 0x05
    401c:	9e 81       	ldd	r25, Y+6	; 0x06
    401e:	00 97       	sbiw	r24, 0x00	; 0
    4020:	69 f7       	brne	.-38     	; 0x3ffc <main+0xc2>
    4022:	14 c0       	rjmp	.+40     	; 0x404c <main+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4024:	6f 81       	ldd	r22, Y+7	; 0x07
    4026:	78 85       	ldd	r23, Y+8	; 0x08
    4028:	89 85       	ldd	r24, Y+9	; 0x09
    402a:	9a 85       	ldd	r25, Y+10	; 0x0a
    402c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4030:	dc 01       	movw	r26, r24
    4032:	cb 01       	movw	r24, r22
    4034:	9e 83       	std	Y+6, r25	; 0x06
    4036:	8d 83       	std	Y+5, r24	; 0x05
    4038:	8d 81       	ldd	r24, Y+5	; 0x05
    403a:	9e 81       	ldd	r25, Y+6	; 0x06
    403c:	9a 83       	std	Y+2, r25	; 0x02
    403e:	89 83       	std	Y+1, r24	; 0x01
    4040:	89 81       	ldd	r24, Y+1	; 0x01
    4042:	9a 81       	ldd	r25, Y+2	; 0x02
    4044:	01 97       	sbiw	r24, 0x01	; 1
    4046:	f1 f7       	brne	.-4      	; 0x4044 <main+0x10a>
    4048:	9a 83       	std	Y+2, r25	; 0x02
    404a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2000);
	H_LCD_void_Clear();
    404c:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <H_LCD_void_Clear>
	H_LCD_void_sendString("waiting new user");
    4050:	89 e7       	ldi	r24, 0x79	; 121
    4052:	91 e0       	ldi	r25, 0x01	; 1
    4054:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <H_LCD_void_sendString>
		//if (APP_UpdateStatus_t_WIFIUpdate(buff) == APP_WIFI_Updated){
			//H_LCD_void_Clear();
			//H_LCD_void_sendString(buff);
			//_delay_ms(2000);
		//}
		if(APP_UpdateStatus_t_WIFIUpdate(buff) == APP_WIFI_Updated)
    4058:	8b ea       	ldi	r24, 0xAB	; 171
    405a:	94 e0       	ldi	r25, 0x04	; 4
    405c:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <APP_UpdateStatus_t_WIFIUpdate>
    4060:	88 23       	and	r24, r24
    4062:	d1 f7       	brne	.-12     	; 0x4058 <main+0x11e>
		{	H_LCD_void_Clear();
    4064:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <H_LCD_void_Clear>
		//APP_UpdateStatus_t_WIFIUpdate(buff);
		H_LCD_void_sendString(buff);
    4068:	8b ea       	ldi	r24, 0xAB	; 171
    406a:	94 e0       	ldi	r25, 0x04	; 4
    406c:	0e 94 7e 1b 	call	0x36fc	; 0x36fc <H_LCD_void_sendString>
    4070:	f3 cf       	rjmp	.-26     	; 0x4058 <main+0x11e>

00004072 <__udivmodqi4>:
    4072:	99 1b       	sub	r25, r25
    4074:	79 e0       	ldi	r23, 0x09	; 9
    4076:	04 c0       	rjmp	.+8      	; 0x4080 <__udivmodqi4_ep>

00004078 <__udivmodqi4_loop>:
    4078:	99 1f       	adc	r25, r25
    407a:	96 17       	cp	r25, r22
    407c:	08 f0       	brcs	.+2      	; 0x4080 <__udivmodqi4_ep>
    407e:	96 1b       	sub	r25, r22

00004080 <__udivmodqi4_ep>:
    4080:	88 1f       	adc	r24, r24
    4082:	7a 95       	dec	r23
    4084:	c9 f7       	brne	.-14     	; 0x4078 <__udivmodqi4_loop>
    4086:	80 95       	com	r24
    4088:	08 95       	ret

0000408a <__udivmodsi4>:
    408a:	a1 e2       	ldi	r26, 0x21	; 33
    408c:	1a 2e       	mov	r1, r26
    408e:	aa 1b       	sub	r26, r26
    4090:	bb 1b       	sub	r27, r27
    4092:	fd 01       	movw	r30, r26
    4094:	0d c0       	rjmp	.+26     	; 0x40b0 <__udivmodsi4_ep>

00004096 <__udivmodsi4_loop>:
    4096:	aa 1f       	adc	r26, r26
    4098:	bb 1f       	adc	r27, r27
    409a:	ee 1f       	adc	r30, r30
    409c:	ff 1f       	adc	r31, r31
    409e:	a2 17       	cp	r26, r18
    40a0:	b3 07       	cpc	r27, r19
    40a2:	e4 07       	cpc	r30, r20
    40a4:	f5 07       	cpc	r31, r21
    40a6:	20 f0       	brcs	.+8      	; 0x40b0 <__udivmodsi4_ep>
    40a8:	a2 1b       	sub	r26, r18
    40aa:	b3 0b       	sbc	r27, r19
    40ac:	e4 0b       	sbc	r30, r20
    40ae:	f5 0b       	sbc	r31, r21

000040b0 <__udivmodsi4_ep>:
    40b0:	66 1f       	adc	r22, r22
    40b2:	77 1f       	adc	r23, r23
    40b4:	88 1f       	adc	r24, r24
    40b6:	99 1f       	adc	r25, r25
    40b8:	1a 94       	dec	r1
    40ba:	69 f7       	brne	.-38     	; 0x4096 <__udivmodsi4_loop>
    40bc:	60 95       	com	r22
    40be:	70 95       	com	r23
    40c0:	80 95       	com	r24
    40c2:	90 95       	com	r25
    40c4:	9b 01       	movw	r18, r22
    40c6:	ac 01       	movw	r20, r24
    40c8:	bd 01       	movw	r22, r26
    40ca:	cf 01       	movw	r24, r30
    40cc:	08 95       	ret

000040ce <__divmodsi4>:
    40ce:	97 fb       	bst	r25, 7
    40d0:	09 2e       	mov	r0, r25
    40d2:	05 26       	eor	r0, r21
    40d4:	0e d0       	rcall	.+28     	; 0x40f2 <__divmodsi4_neg1>
    40d6:	57 fd       	sbrc	r21, 7
    40d8:	04 d0       	rcall	.+8      	; 0x40e2 <__divmodsi4_neg2>
    40da:	d7 df       	rcall	.-82     	; 0x408a <__udivmodsi4>
    40dc:	0a d0       	rcall	.+20     	; 0x40f2 <__divmodsi4_neg1>
    40de:	00 1c       	adc	r0, r0
    40e0:	38 f4       	brcc	.+14     	; 0x40f0 <__divmodsi4_exit>

000040e2 <__divmodsi4_neg2>:
    40e2:	50 95       	com	r21
    40e4:	40 95       	com	r20
    40e6:	30 95       	com	r19
    40e8:	21 95       	neg	r18
    40ea:	3f 4f       	sbci	r19, 0xFF	; 255
    40ec:	4f 4f       	sbci	r20, 0xFF	; 255
    40ee:	5f 4f       	sbci	r21, 0xFF	; 255

000040f0 <__divmodsi4_exit>:
    40f0:	08 95       	ret

000040f2 <__divmodsi4_neg1>:
    40f2:	f6 f7       	brtc	.-4      	; 0x40f0 <__divmodsi4_exit>
    40f4:	90 95       	com	r25
    40f6:	80 95       	com	r24
    40f8:	70 95       	com	r23
    40fa:	61 95       	neg	r22
    40fc:	7f 4f       	sbci	r23, 0xFF	; 255
    40fe:	8f 4f       	sbci	r24, 0xFF	; 255
    4100:	9f 4f       	sbci	r25, 0xFF	; 255
    4102:	08 95       	ret

00004104 <__prologue_saves__>:
    4104:	2f 92       	push	r2
    4106:	3f 92       	push	r3
    4108:	4f 92       	push	r4
    410a:	5f 92       	push	r5
    410c:	6f 92       	push	r6
    410e:	7f 92       	push	r7
    4110:	8f 92       	push	r8
    4112:	9f 92       	push	r9
    4114:	af 92       	push	r10
    4116:	bf 92       	push	r11
    4118:	cf 92       	push	r12
    411a:	df 92       	push	r13
    411c:	ef 92       	push	r14
    411e:	ff 92       	push	r15
    4120:	0f 93       	push	r16
    4122:	1f 93       	push	r17
    4124:	cf 93       	push	r28
    4126:	df 93       	push	r29
    4128:	cd b7       	in	r28, 0x3d	; 61
    412a:	de b7       	in	r29, 0x3e	; 62
    412c:	ca 1b       	sub	r28, r26
    412e:	db 0b       	sbc	r29, r27
    4130:	0f b6       	in	r0, 0x3f	; 63
    4132:	f8 94       	cli
    4134:	de bf       	out	0x3e, r29	; 62
    4136:	0f be       	out	0x3f, r0	; 63
    4138:	cd bf       	out	0x3d, r28	; 61
    413a:	09 94       	ijmp

0000413c <__epilogue_restores__>:
    413c:	2a 88       	ldd	r2, Y+18	; 0x12
    413e:	39 88       	ldd	r3, Y+17	; 0x11
    4140:	48 88       	ldd	r4, Y+16	; 0x10
    4142:	5f 84       	ldd	r5, Y+15	; 0x0f
    4144:	6e 84       	ldd	r6, Y+14	; 0x0e
    4146:	7d 84       	ldd	r7, Y+13	; 0x0d
    4148:	8c 84       	ldd	r8, Y+12	; 0x0c
    414a:	9b 84       	ldd	r9, Y+11	; 0x0b
    414c:	aa 84       	ldd	r10, Y+10	; 0x0a
    414e:	b9 84       	ldd	r11, Y+9	; 0x09
    4150:	c8 84       	ldd	r12, Y+8	; 0x08
    4152:	df 80       	ldd	r13, Y+7	; 0x07
    4154:	ee 80       	ldd	r14, Y+6	; 0x06
    4156:	fd 80       	ldd	r15, Y+5	; 0x05
    4158:	0c 81       	ldd	r16, Y+4	; 0x04
    415a:	1b 81       	ldd	r17, Y+3	; 0x03
    415c:	aa 81       	ldd	r26, Y+2	; 0x02
    415e:	b9 81       	ldd	r27, Y+1	; 0x01
    4160:	ce 0f       	add	r28, r30
    4162:	d1 1d       	adc	r29, r1
    4164:	0f b6       	in	r0, 0x3f	; 63
    4166:	f8 94       	cli
    4168:	de bf       	out	0x3e, r29	; 62
    416a:	0f be       	out	0x3f, r0	; 63
    416c:	cd bf       	out	0x3d, r28	; 61
    416e:	ed 01       	movw	r28, r26
    4170:	08 95       	ret

00004172 <strstr>:
    4172:	fb 01       	movw	r30, r22
    4174:	51 91       	ld	r21, Z+
    4176:	55 23       	and	r21, r21
    4178:	a9 f0       	breq	.+42     	; 0x41a4 <strstr+0x32>
    417a:	bf 01       	movw	r22, r30
    417c:	dc 01       	movw	r26, r24
    417e:	4d 91       	ld	r20, X+
    4180:	45 17       	cp	r20, r21
    4182:	41 11       	cpse	r20, r1
    4184:	e1 f7       	brne	.-8      	; 0x417e <strstr+0xc>
    4186:	59 f4       	brne	.+22     	; 0x419e <strstr+0x2c>
    4188:	cd 01       	movw	r24, r26
    418a:	01 90       	ld	r0, Z+
    418c:	00 20       	and	r0, r0
    418e:	49 f0       	breq	.+18     	; 0x41a2 <strstr+0x30>
    4190:	4d 91       	ld	r20, X+
    4192:	40 15       	cp	r20, r0
    4194:	41 11       	cpse	r20, r1
    4196:	c9 f3       	breq	.-14     	; 0x418a <strstr+0x18>
    4198:	fb 01       	movw	r30, r22
    419a:	41 11       	cpse	r20, r1
    419c:	ef cf       	rjmp	.-34     	; 0x417c <strstr+0xa>
    419e:	81 e0       	ldi	r24, 0x01	; 1
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	01 97       	sbiw	r24, 0x01	; 1
    41a4:	08 95       	ret

000041a6 <sprintf>:
    41a6:	ae e0       	ldi	r26, 0x0E	; 14
    41a8:	b0 e0       	ldi	r27, 0x00	; 0
    41aa:	e9 ed       	ldi	r30, 0xD9	; 217
    41ac:	f0 e2       	ldi	r31, 0x20	; 32
    41ae:	0c 94 90 20 	jmp	0x4120	; 0x4120 <__prologue_saves__+0x1c>
    41b2:	0d 89       	ldd	r16, Y+21	; 0x15
    41b4:	1e 89       	ldd	r17, Y+22	; 0x16
    41b6:	86 e0       	ldi	r24, 0x06	; 6
    41b8:	8c 83       	std	Y+4, r24	; 0x04
    41ba:	1a 83       	std	Y+2, r17	; 0x02
    41bc:	09 83       	std	Y+1, r16	; 0x01
    41be:	8f ef       	ldi	r24, 0xFF	; 255
    41c0:	9f e7       	ldi	r25, 0x7F	; 127
    41c2:	9e 83       	std	Y+6, r25	; 0x06
    41c4:	8d 83       	std	Y+5, r24	; 0x05
    41c6:	9e 01       	movw	r18, r28
    41c8:	27 5e       	subi	r18, 0xE7	; 231
    41ca:	3f 4f       	sbci	r19, 0xFF	; 255
    41cc:	ce 01       	movw	r24, r28
    41ce:	01 96       	adiw	r24, 0x01	; 1
    41d0:	6f 89       	ldd	r22, Y+23	; 0x17
    41d2:	78 8d       	ldd	r23, Y+24	; 0x18
    41d4:	a9 01       	movw	r20, r18
    41d6:	0e 94 f7 20 	call	0x41ee	; 0x41ee <vfprintf>
    41da:	2f 81       	ldd	r18, Y+7	; 0x07
    41dc:	38 85       	ldd	r19, Y+8	; 0x08
    41de:	02 0f       	add	r16, r18
    41e0:	13 1f       	adc	r17, r19
    41e2:	f8 01       	movw	r30, r16
    41e4:	10 82       	st	Z, r1
    41e6:	2e 96       	adiw	r28, 0x0e	; 14
    41e8:	e4 e0       	ldi	r30, 0x04	; 4
    41ea:	0c 94 ac 20 	jmp	0x4158	; 0x4158 <__epilogue_restores__+0x1c>

000041ee <vfprintf>:
    41ee:	ab e0       	ldi	r26, 0x0B	; 11
    41f0:	b0 e0       	ldi	r27, 0x00	; 0
    41f2:	ed ef       	ldi	r30, 0xFD	; 253
    41f4:	f0 e2       	ldi	r31, 0x20	; 32
    41f6:	0c 94 82 20 	jmp	0x4104	; 0x4104 <__prologue_saves__>
    41fa:	3c 01       	movw	r6, r24
    41fc:	2b 01       	movw	r4, r22
    41fe:	5a 01       	movw	r10, r20
    4200:	fc 01       	movw	r30, r24
    4202:	17 82       	std	Z+7, r1	; 0x07
    4204:	16 82       	std	Z+6, r1	; 0x06
    4206:	83 81       	ldd	r24, Z+3	; 0x03
    4208:	81 fd       	sbrc	r24, 1
    420a:	03 c0       	rjmp	.+6      	; 0x4212 <vfprintf+0x24>
    420c:	6f ef       	ldi	r22, 0xFF	; 255
    420e:	7f ef       	ldi	r23, 0xFF	; 255
    4210:	c6 c1       	rjmp	.+908    	; 0x459e <vfprintf+0x3b0>
    4212:	9a e0       	ldi	r25, 0x0A	; 10
    4214:	89 2e       	mov	r8, r25
    4216:	1e 01       	movw	r2, r28
    4218:	08 94       	sec
    421a:	21 1c       	adc	r2, r1
    421c:	31 1c       	adc	r3, r1
    421e:	f3 01       	movw	r30, r6
    4220:	23 81       	ldd	r18, Z+3	; 0x03
    4222:	f2 01       	movw	r30, r4
    4224:	23 fd       	sbrc	r18, 3
    4226:	85 91       	lpm	r24, Z+
    4228:	23 ff       	sbrs	r18, 3
    422a:	81 91       	ld	r24, Z+
    422c:	2f 01       	movw	r4, r30
    422e:	88 23       	and	r24, r24
    4230:	09 f4       	brne	.+2      	; 0x4234 <vfprintf+0x46>
    4232:	b2 c1       	rjmp	.+868    	; 0x4598 <vfprintf+0x3aa>
    4234:	85 32       	cpi	r24, 0x25	; 37
    4236:	39 f4       	brne	.+14     	; 0x4246 <vfprintf+0x58>
    4238:	23 fd       	sbrc	r18, 3
    423a:	85 91       	lpm	r24, Z+
    423c:	23 ff       	sbrs	r18, 3
    423e:	81 91       	ld	r24, Z+
    4240:	2f 01       	movw	r4, r30
    4242:	85 32       	cpi	r24, 0x25	; 37
    4244:	29 f4       	brne	.+10     	; 0x4250 <vfprintf+0x62>
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	b3 01       	movw	r22, r6
    424a:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <fputc>
    424e:	e7 cf       	rjmp	.-50     	; 0x421e <vfprintf+0x30>
    4250:	98 2f       	mov	r25, r24
    4252:	ff 24       	eor	r15, r15
    4254:	ee 24       	eor	r14, r14
    4256:	99 24       	eor	r9, r9
    4258:	ff e1       	ldi	r31, 0x1F	; 31
    425a:	ff 15       	cp	r31, r15
    425c:	d0 f0       	brcs	.+52     	; 0x4292 <vfprintf+0xa4>
    425e:	9b 32       	cpi	r25, 0x2B	; 43
    4260:	69 f0       	breq	.+26     	; 0x427c <vfprintf+0x8e>
    4262:	9c 32       	cpi	r25, 0x2C	; 44
    4264:	28 f4       	brcc	.+10     	; 0x4270 <vfprintf+0x82>
    4266:	90 32       	cpi	r25, 0x20	; 32
    4268:	59 f0       	breq	.+22     	; 0x4280 <vfprintf+0x92>
    426a:	93 32       	cpi	r25, 0x23	; 35
    426c:	91 f4       	brne	.+36     	; 0x4292 <vfprintf+0xa4>
    426e:	0e c0       	rjmp	.+28     	; 0x428c <vfprintf+0x9e>
    4270:	9d 32       	cpi	r25, 0x2D	; 45
    4272:	49 f0       	breq	.+18     	; 0x4286 <vfprintf+0x98>
    4274:	90 33       	cpi	r25, 0x30	; 48
    4276:	69 f4       	brne	.+26     	; 0x4292 <vfprintf+0xa4>
    4278:	41 e0       	ldi	r20, 0x01	; 1
    427a:	24 c0       	rjmp	.+72     	; 0x42c4 <vfprintf+0xd6>
    427c:	52 e0       	ldi	r21, 0x02	; 2
    427e:	f5 2a       	or	r15, r21
    4280:	84 e0       	ldi	r24, 0x04	; 4
    4282:	f8 2a       	or	r15, r24
    4284:	28 c0       	rjmp	.+80     	; 0x42d6 <vfprintf+0xe8>
    4286:	98 e0       	ldi	r25, 0x08	; 8
    4288:	f9 2a       	or	r15, r25
    428a:	25 c0       	rjmp	.+74     	; 0x42d6 <vfprintf+0xe8>
    428c:	e0 e1       	ldi	r30, 0x10	; 16
    428e:	fe 2a       	or	r15, r30
    4290:	22 c0       	rjmp	.+68     	; 0x42d6 <vfprintf+0xe8>
    4292:	f7 fc       	sbrc	r15, 7
    4294:	29 c0       	rjmp	.+82     	; 0x42e8 <vfprintf+0xfa>
    4296:	89 2f       	mov	r24, r25
    4298:	80 53       	subi	r24, 0x30	; 48
    429a:	8a 30       	cpi	r24, 0x0A	; 10
    429c:	70 f4       	brcc	.+28     	; 0x42ba <vfprintf+0xcc>
    429e:	f6 fe       	sbrs	r15, 6
    42a0:	05 c0       	rjmp	.+10     	; 0x42ac <vfprintf+0xbe>
    42a2:	98 9c       	mul	r9, r8
    42a4:	90 2c       	mov	r9, r0
    42a6:	11 24       	eor	r1, r1
    42a8:	98 0e       	add	r9, r24
    42aa:	15 c0       	rjmp	.+42     	; 0x42d6 <vfprintf+0xe8>
    42ac:	e8 9c       	mul	r14, r8
    42ae:	e0 2c       	mov	r14, r0
    42b0:	11 24       	eor	r1, r1
    42b2:	e8 0e       	add	r14, r24
    42b4:	f0 e2       	ldi	r31, 0x20	; 32
    42b6:	ff 2a       	or	r15, r31
    42b8:	0e c0       	rjmp	.+28     	; 0x42d6 <vfprintf+0xe8>
    42ba:	9e 32       	cpi	r25, 0x2E	; 46
    42bc:	29 f4       	brne	.+10     	; 0x42c8 <vfprintf+0xda>
    42be:	f6 fc       	sbrc	r15, 6
    42c0:	6b c1       	rjmp	.+726    	; 0x4598 <vfprintf+0x3aa>
    42c2:	40 e4       	ldi	r20, 0x40	; 64
    42c4:	f4 2a       	or	r15, r20
    42c6:	07 c0       	rjmp	.+14     	; 0x42d6 <vfprintf+0xe8>
    42c8:	9c 36       	cpi	r25, 0x6C	; 108
    42ca:	19 f4       	brne	.+6      	; 0x42d2 <vfprintf+0xe4>
    42cc:	50 e8       	ldi	r21, 0x80	; 128
    42ce:	f5 2a       	or	r15, r21
    42d0:	02 c0       	rjmp	.+4      	; 0x42d6 <vfprintf+0xe8>
    42d2:	98 36       	cpi	r25, 0x68	; 104
    42d4:	49 f4       	brne	.+18     	; 0x42e8 <vfprintf+0xfa>
    42d6:	f2 01       	movw	r30, r4
    42d8:	23 fd       	sbrc	r18, 3
    42da:	95 91       	lpm	r25, Z+
    42dc:	23 ff       	sbrs	r18, 3
    42de:	91 91       	ld	r25, Z+
    42e0:	2f 01       	movw	r4, r30
    42e2:	99 23       	and	r25, r25
    42e4:	09 f0       	breq	.+2      	; 0x42e8 <vfprintf+0xfa>
    42e6:	b8 cf       	rjmp	.-144    	; 0x4258 <vfprintf+0x6a>
    42e8:	89 2f       	mov	r24, r25
    42ea:	85 54       	subi	r24, 0x45	; 69
    42ec:	83 30       	cpi	r24, 0x03	; 3
    42ee:	18 f0       	brcs	.+6      	; 0x42f6 <vfprintf+0x108>
    42f0:	80 52       	subi	r24, 0x20	; 32
    42f2:	83 30       	cpi	r24, 0x03	; 3
    42f4:	38 f4       	brcc	.+14     	; 0x4304 <vfprintf+0x116>
    42f6:	44 e0       	ldi	r20, 0x04	; 4
    42f8:	50 e0       	ldi	r21, 0x00	; 0
    42fa:	a4 0e       	add	r10, r20
    42fc:	b5 1e       	adc	r11, r21
    42fe:	5f e3       	ldi	r21, 0x3F	; 63
    4300:	59 83       	std	Y+1, r21	; 0x01
    4302:	0f c0       	rjmp	.+30     	; 0x4322 <vfprintf+0x134>
    4304:	93 36       	cpi	r25, 0x63	; 99
    4306:	31 f0       	breq	.+12     	; 0x4314 <vfprintf+0x126>
    4308:	93 37       	cpi	r25, 0x73	; 115
    430a:	79 f0       	breq	.+30     	; 0x432a <vfprintf+0x13c>
    430c:	93 35       	cpi	r25, 0x53	; 83
    430e:	09 f0       	breq	.+2      	; 0x4312 <vfprintf+0x124>
    4310:	56 c0       	rjmp	.+172    	; 0x43be <vfprintf+0x1d0>
    4312:	20 c0       	rjmp	.+64     	; 0x4354 <vfprintf+0x166>
    4314:	f5 01       	movw	r30, r10
    4316:	80 81       	ld	r24, Z
    4318:	89 83       	std	Y+1, r24	; 0x01
    431a:	42 e0       	ldi	r20, 0x02	; 2
    431c:	50 e0       	ldi	r21, 0x00	; 0
    431e:	a4 0e       	add	r10, r20
    4320:	b5 1e       	adc	r11, r21
    4322:	61 01       	movw	r12, r2
    4324:	01 e0       	ldi	r16, 0x01	; 1
    4326:	10 e0       	ldi	r17, 0x00	; 0
    4328:	12 c0       	rjmp	.+36     	; 0x434e <vfprintf+0x160>
    432a:	f5 01       	movw	r30, r10
    432c:	c0 80       	ld	r12, Z
    432e:	d1 80       	ldd	r13, Z+1	; 0x01
    4330:	f6 fc       	sbrc	r15, 6
    4332:	03 c0       	rjmp	.+6      	; 0x433a <vfprintf+0x14c>
    4334:	6f ef       	ldi	r22, 0xFF	; 255
    4336:	7f ef       	ldi	r23, 0xFF	; 255
    4338:	02 c0       	rjmp	.+4      	; 0x433e <vfprintf+0x150>
    433a:	69 2d       	mov	r22, r9
    433c:	70 e0       	ldi	r23, 0x00	; 0
    433e:	42 e0       	ldi	r20, 0x02	; 2
    4340:	50 e0       	ldi	r21, 0x00	; 0
    4342:	a4 0e       	add	r10, r20
    4344:	b5 1e       	adc	r11, r21
    4346:	c6 01       	movw	r24, r12
    4348:	0e 94 df 22 	call	0x45be	; 0x45be <strnlen>
    434c:	8c 01       	movw	r16, r24
    434e:	5f e7       	ldi	r21, 0x7F	; 127
    4350:	f5 22       	and	r15, r21
    4352:	14 c0       	rjmp	.+40     	; 0x437c <vfprintf+0x18e>
    4354:	f5 01       	movw	r30, r10
    4356:	c0 80       	ld	r12, Z
    4358:	d1 80       	ldd	r13, Z+1	; 0x01
    435a:	f6 fc       	sbrc	r15, 6
    435c:	03 c0       	rjmp	.+6      	; 0x4364 <vfprintf+0x176>
    435e:	6f ef       	ldi	r22, 0xFF	; 255
    4360:	7f ef       	ldi	r23, 0xFF	; 255
    4362:	02 c0       	rjmp	.+4      	; 0x4368 <vfprintf+0x17a>
    4364:	69 2d       	mov	r22, r9
    4366:	70 e0       	ldi	r23, 0x00	; 0
    4368:	42 e0       	ldi	r20, 0x02	; 2
    436a:	50 e0       	ldi	r21, 0x00	; 0
    436c:	a4 0e       	add	r10, r20
    436e:	b5 1e       	adc	r11, r21
    4370:	c6 01       	movw	r24, r12
    4372:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <strnlen_P>
    4376:	8c 01       	movw	r16, r24
    4378:	50 e8       	ldi	r21, 0x80	; 128
    437a:	f5 2a       	or	r15, r21
    437c:	f3 fe       	sbrs	r15, 3
    437e:	07 c0       	rjmp	.+14     	; 0x438e <vfprintf+0x1a0>
    4380:	1a c0       	rjmp	.+52     	; 0x43b6 <vfprintf+0x1c8>
    4382:	80 e2       	ldi	r24, 0x20	; 32
    4384:	90 e0       	ldi	r25, 0x00	; 0
    4386:	b3 01       	movw	r22, r6
    4388:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <fputc>
    438c:	ea 94       	dec	r14
    438e:	8e 2d       	mov	r24, r14
    4390:	90 e0       	ldi	r25, 0x00	; 0
    4392:	08 17       	cp	r16, r24
    4394:	19 07       	cpc	r17, r25
    4396:	a8 f3       	brcs	.-22     	; 0x4382 <vfprintf+0x194>
    4398:	0e c0       	rjmp	.+28     	; 0x43b6 <vfprintf+0x1c8>
    439a:	f6 01       	movw	r30, r12
    439c:	f7 fc       	sbrc	r15, 7
    439e:	85 91       	lpm	r24, Z+
    43a0:	f7 fe       	sbrs	r15, 7
    43a2:	81 91       	ld	r24, Z+
    43a4:	6f 01       	movw	r12, r30
    43a6:	90 e0       	ldi	r25, 0x00	; 0
    43a8:	b3 01       	movw	r22, r6
    43aa:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <fputc>
    43ae:	e1 10       	cpse	r14, r1
    43b0:	ea 94       	dec	r14
    43b2:	01 50       	subi	r16, 0x01	; 1
    43b4:	10 40       	sbci	r17, 0x00	; 0
    43b6:	01 15       	cp	r16, r1
    43b8:	11 05       	cpc	r17, r1
    43ba:	79 f7       	brne	.-34     	; 0x439a <vfprintf+0x1ac>
    43bc:	ea c0       	rjmp	.+468    	; 0x4592 <vfprintf+0x3a4>
    43be:	94 36       	cpi	r25, 0x64	; 100
    43c0:	11 f0       	breq	.+4      	; 0x43c6 <vfprintf+0x1d8>
    43c2:	99 36       	cpi	r25, 0x69	; 105
    43c4:	69 f5       	brne	.+90     	; 0x4420 <vfprintf+0x232>
    43c6:	f7 fe       	sbrs	r15, 7
    43c8:	08 c0       	rjmp	.+16     	; 0x43da <vfprintf+0x1ec>
    43ca:	f5 01       	movw	r30, r10
    43cc:	20 81       	ld	r18, Z
    43ce:	31 81       	ldd	r19, Z+1	; 0x01
    43d0:	42 81       	ldd	r20, Z+2	; 0x02
    43d2:	53 81       	ldd	r21, Z+3	; 0x03
    43d4:	84 e0       	ldi	r24, 0x04	; 4
    43d6:	90 e0       	ldi	r25, 0x00	; 0
    43d8:	0a c0       	rjmp	.+20     	; 0x43ee <vfprintf+0x200>
    43da:	f5 01       	movw	r30, r10
    43dc:	80 81       	ld	r24, Z
    43de:	91 81       	ldd	r25, Z+1	; 0x01
    43e0:	9c 01       	movw	r18, r24
    43e2:	44 27       	eor	r20, r20
    43e4:	37 fd       	sbrc	r19, 7
    43e6:	40 95       	com	r20
    43e8:	54 2f       	mov	r21, r20
    43ea:	82 e0       	ldi	r24, 0x02	; 2
    43ec:	90 e0       	ldi	r25, 0x00	; 0
    43ee:	a8 0e       	add	r10, r24
    43f0:	b9 1e       	adc	r11, r25
    43f2:	9f e6       	ldi	r25, 0x6F	; 111
    43f4:	f9 22       	and	r15, r25
    43f6:	57 ff       	sbrs	r21, 7
    43f8:	09 c0       	rjmp	.+18     	; 0x440c <vfprintf+0x21e>
    43fa:	50 95       	com	r21
    43fc:	40 95       	com	r20
    43fe:	30 95       	com	r19
    4400:	21 95       	neg	r18
    4402:	3f 4f       	sbci	r19, 0xFF	; 255
    4404:	4f 4f       	sbci	r20, 0xFF	; 255
    4406:	5f 4f       	sbci	r21, 0xFF	; 255
    4408:	e0 e8       	ldi	r30, 0x80	; 128
    440a:	fe 2a       	or	r15, r30
    440c:	ca 01       	movw	r24, r20
    440e:	b9 01       	movw	r22, r18
    4410:	a1 01       	movw	r20, r2
    4412:	2a e0       	ldi	r18, 0x0A	; 10
    4414:	30 e0       	ldi	r19, 0x00	; 0
    4416:	0e 94 16 23 	call	0x462c	; 0x462c <__ultoa_invert>
    441a:	d8 2e       	mov	r13, r24
    441c:	d2 18       	sub	r13, r2
    441e:	40 c0       	rjmp	.+128    	; 0x44a0 <vfprintf+0x2b2>
    4420:	95 37       	cpi	r25, 0x75	; 117
    4422:	29 f4       	brne	.+10     	; 0x442e <vfprintf+0x240>
    4424:	1f 2d       	mov	r17, r15
    4426:	1f 7e       	andi	r17, 0xEF	; 239
    4428:	2a e0       	ldi	r18, 0x0A	; 10
    442a:	30 e0       	ldi	r19, 0x00	; 0
    442c:	1d c0       	rjmp	.+58     	; 0x4468 <vfprintf+0x27a>
    442e:	1f 2d       	mov	r17, r15
    4430:	19 7f       	andi	r17, 0xF9	; 249
    4432:	9f 36       	cpi	r25, 0x6F	; 111
    4434:	61 f0       	breq	.+24     	; 0x444e <vfprintf+0x260>
    4436:	90 37       	cpi	r25, 0x70	; 112
    4438:	20 f4       	brcc	.+8      	; 0x4442 <vfprintf+0x254>
    443a:	98 35       	cpi	r25, 0x58	; 88
    443c:	09 f0       	breq	.+2      	; 0x4440 <vfprintf+0x252>
    443e:	ac c0       	rjmp	.+344    	; 0x4598 <vfprintf+0x3aa>
    4440:	0f c0       	rjmp	.+30     	; 0x4460 <vfprintf+0x272>
    4442:	90 37       	cpi	r25, 0x70	; 112
    4444:	39 f0       	breq	.+14     	; 0x4454 <vfprintf+0x266>
    4446:	98 37       	cpi	r25, 0x78	; 120
    4448:	09 f0       	breq	.+2      	; 0x444c <vfprintf+0x25e>
    444a:	a6 c0       	rjmp	.+332    	; 0x4598 <vfprintf+0x3aa>
    444c:	04 c0       	rjmp	.+8      	; 0x4456 <vfprintf+0x268>
    444e:	28 e0       	ldi	r18, 0x08	; 8
    4450:	30 e0       	ldi	r19, 0x00	; 0
    4452:	0a c0       	rjmp	.+20     	; 0x4468 <vfprintf+0x27a>
    4454:	10 61       	ori	r17, 0x10	; 16
    4456:	14 fd       	sbrc	r17, 4
    4458:	14 60       	ori	r17, 0x04	; 4
    445a:	20 e1       	ldi	r18, 0x10	; 16
    445c:	30 e0       	ldi	r19, 0x00	; 0
    445e:	04 c0       	rjmp	.+8      	; 0x4468 <vfprintf+0x27a>
    4460:	14 fd       	sbrc	r17, 4
    4462:	16 60       	ori	r17, 0x06	; 6
    4464:	20 e1       	ldi	r18, 0x10	; 16
    4466:	32 e0       	ldi	r19, 0x02	; 2
    4468:	17 ff       	sbrs	r17, 7
    446a:	08 c0       	rjmp	.+16     	; 0x447c <vfprintf+0x28e>
    446c:	f5 01       	movw	r30, r10
    446e:	60 81       	ld	r22, Z
    4470:	71 81       	ldd	r23, Z+1	; 0x01
    4472:	82 81       	ldd	r24, Z+2	; 0x02
    4474:	93 81       	ldd	r25, Z+3	; 0x03
    4476:	44 e0       	ldi	r20, 0x04	; 4
    4478:	50 e0       	ldi	r21, 0x00	; 0
    447a:	08 c0       	rjmp	.+16     	; 0x448c <vfprintf+0x29e>
    447c:	f5 01       	movw	r30, r10
    447e:	80 81       	ld	r24, Z
    4480:	91 81       	ldd	r25, Z+1	; 0x01
    4482:	bc 01       	movw	r22, r24
    4484:	80 e0       	ldi	r24, 0x00	; 0
    4486:	90 e0       	ldi	r25, 0x00	; 0
    4488:	42 e0       	ldi	r20, 0x02	; 2
    448a:	50 e0       	ldi	r21, 0x00	; 0
    448c:	a4 0e       	add	r10, r20
    448e:	b5 1e       	adc	r11, r21
    4490:	a1 01       	movw	r20, r2
    4492:	0e 94 16 23 	call	0x462c	; 0x462c <__ultoa_invert>
    4496:	d8 2e       	mov	r13, r24
    4498:	d2 18       	sub	r13, r2
    449a:	8f e7       	ldi	r24, 0x7F	; 127
    449c:	f8 2e       	mov	r15, r24
    449e:	f1 22       	and	r15, r17
    44a0:	f6 fe       	sbrs	r15, 6
    44a2:	0b c0       	rjmp	.+22     	; 0x44ba <vfprintf+0x2cc>
    44a4:	5e ef       	ldi	r21, 0xFE	; 254
    44a6:	f5 22       	and	r15, r21
    44a8:	d9 14       	cp	r13, r9
    44aa:	38 f4       	brcc	.+14     	; 0x44ba <vfprintf+0x2cc>
    44ac:	f4 fe       	sbrs	r15, 4
    44ae:	07 c0       	rjmp	.+14     	; 0x44be <vfprintf+0x2d0>
    44b0:	f2 fc       	sbrc	r15, 2
    44b2:	05 c0       	rjmp	.+10     	; 0x44be <vfprintf+0x2d0>
    44b4:	8f ee       	ldi	r24, 0xEF	; 239
    44b6:	f8 22       	and	r15, r24
    44b8:	02 c0       	rjmp	.+4      	; 0x44be <vfprintf+0x2d0>
    44ba:	1d 2d       	mov	r17, r13
    44bc:	01 c0       	rjmp	.+2      	; 0x44c0 <vfprintf+0x2d2>
    44be:	19 2d       	mov	r17, r9
    44c0:	f4 fe       	sbrs	r15, 4
    44c2:	0d c0       	rjmp	.+26     	; 0x44de <vfprintf+0x2f0>
    44c4:	fe 01       	movw	r30, r28
    44c6:	ed 0d       	add	r30, r13
    44c8:	f1 1d       	adc	r31, r1
    44ca:	80 81       	ld	r24, Z
    44cc:	80 33       	cpi	r24, 0x30	; 48
    44ce:	19 f4       	brne	.+6      	; 0x44d6 <vfprintf+0x2e8>
    44d0:	99 ee       	ldi	r25, 0xE9	; 233
    44d2:	f9 22       	and	r15, r25
    44d4:	08 c0       	rjmp	.+16     	; 0x44e6 <vfprintf+0x2f8>
    44d6:	1f 5f       	subi	r17, 0xFF	; 255
    44d8:	f2 fe       	sbrs	r15, 2
    44da:	05 c0       	rjmp	.+10     	; 0x44e6 <vfprintf+0x2f8>
    44dc:	03 c0       	rjmp	.+6      	; 0x44e4 <vfprintf+0x2f6>
    44de:	8f 2d       	mov	r24, r15
    44e0:	86 78       	andi	r24, 0x86	; 134
    44e2:	09 f0       	breq	.+2      	; 0x44e6 <vfprintf+0x2f8>
    44e4:	1f 5f       	subi	r17, 0xFF	; 255
    44e6:	0f 2d       	mov	r16, r15
    44e8:	f3 fc       	sbrc	r15, 3
    44ea:	14 c0       	rjmp	.+40     	; 0x4514 <vfprintf+0x326>
    44ec:	f0 fe       	sbrs	r15, 0
    44ee:	0f c0       	rjmp	.+30     	; 0x450e <vfprintf+0x320>
    44f0:	1e 15       	cp	r17, r14
    44f2:	10 f0       	brcs	.+4      	; 0x44f8 <vfprintf+0x30a>
    44f4:	9d 2c       	mov	r9, r13
    44f6:	0b c0       	rjmp	.+22     	; 0x450e <vfprintf+0x320>
    44f8:	9d 2c       	mov	r9, r13
    44fa:	9e 0c       	add	r9, r14
    44fc:	91 1a       	sub	r9, r17
    44fe:	1e 2d       	mov	r17, r14
    4500:	06 c0       	rjmp	.+12     	; 0x450e <vfprintf+0x320>
    4502:	80 e2       	ldi	r24, 0x20	; 32
    4504:	90 e0       	ldi	r25, 0x00	; 0
    4506:	b3 01       	movw	r22, r6
    4508:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <fputc>
    450c:	1f 5f       	subi	r17, 0xFF	; 255
    450e:	1e 15       	cp	r17, r14
    4510:	c0 f3       	brcs	.-16     	; 0x4502 <vfprintf+0x314>
    4512:	04 c0       	rjmp	.+8      	; 0x451c <vfprintf+0x32e>
    4514:	1e 15       	cp	r17, r14
    4516:	10 f4       	brcc	.+4      	; 0x451c <vfprintf+0x32e>
    4518:	e1 1a       	sub	r14, r17
    451a:	01 c0       	rjmp	.+2      	; 0x451e <vfprintf+0x330>
    451c:	ee 24       	eor	r14, r14
    451e:	04 ff       	sbrs	r16, 4
    4520:	0f c0       	rjmp	.+30     	; 0x4540 <vfprintf+0x352>
    4522:	80 e3       	ldi	r24, 0x30	; 48
    4524:	90 e0       	ldi	r25, 0x00	; 0
    4526:	b3 01       	movw	r22, r6
    4528:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <fputc>
    452c:	02 ff       	sbrs	r16, 2
    452e:	1d c0       	rjmp	.+58     	; 0x456a <vfprintf+0x37c>
    4530:	01 fd       	sbrc	r16, 1
    4532:	03 c0       	rjmp	.+6      	; 0x453a <vfprintf+0x34c>
    4534:	88 e7       	ldi	r24, 0x78	; 120
    4536:	90 e0       	ldi	r25, 0x00	; 0
    4538:	0e c0       	rjmp	.+28     	; 0x4556 <vfprintf+0x368>
    453a:	88 e5       	ldi	r24, 0x58	; 88
    453c:	90 e0       	ldi	r25, 0x00	; 0
    453e:	0b c0       	rjmp	.+22     	; 0x4556 <vfprintf+0x368>
    4540:	80 2f       	mov	r24, r16
    4542:	86 78       	andi	r24, 0x86	; 134
    4544:	91 f0       	breq	.+36     	; 0x456a <vfprintf+0x37c>
    4546:	01 ff       	sbrs	r16, 1
    4548:	02 c0       	rjmp	.+4      	; 0x454e <vfprintf+0x360>
    454a:	8b e2       	ldi	r24, 0x2B	; 43
    454c:	01 c0       	rjmp	.+2      	; 0x4550 <vfprintf+0x362>
    454e:	80 e2       	ldi	r24, 0x20	; 32
    4550:	f7 fc       	sbrc	r15, 7
    4552:	8d e2       	ldi	r24, 0x2D	; 45
    4554:	90 e0       	ldi	r25, 0x00	; 0
    4556:	b3 01       	movw	r22, r6
    4558:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <fputc>
    455c:	06 c0       	rjmp	.+12     	; 0x456a <vfprintf+0x37c>
    455e:	80 e3       	ldi	r24, 0x30	; 48
    4560:	90 e0       	ldi	r25, 0x00	; 0
    4562:	b3 01       	movw	r22, r6
    4564:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <fputc>
    4568:	9a 94       	dec	r9
    456a:	d9 14       	cp	r13, r9
    456c:	c0 f3       	brcs	.-16     	; 0x455e <vfprintf+0x370>
    456e:	da 94       	dec	r13
    4570:	f1 01       	movw	r30, r2
    4572:	ed 0d       	add	r30, r13
    4574:	f1 1d       	adc	r31, r1
    4576:	80 81       	ld	r24, Z
    4578:	90 e0       	ldi	r25, 0x00	; 0
    457a:	b3 01       	movw	r22, r6
    457c:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <fputc>
    4580:	dd 20       	and	r13, r13
    4582:	a9 f7       	brne	.-22     	; 0x456e <vfprintf+0x380>
    4584:	06 c0       	rjmp	.+12     	; 0x4592 <vfprintf+0x3a4>
    4586:	80 e2       	ldi	r24, 0x20	; 32
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	b3 01       	movw	r22, r6
    458c:	0e 94 ea 22 	call	0x45d4	; 0x45d4 <fputc>
    4590:	ea 94       	dec	r14
    4592:	ee 20       	and	r14, r14
    4594:	c1 f7       	brne	.-16     	; 0x4586 <vfprintf+0x398>
    4596:	43 ce       	rjmp	.-890    	; 0x421e <vfprintf+0x30>
    4598:	f3 01       	movw	r30, r6
    459a:	66 81       	ldd	r22, Z+6	; 0x06
    459c:	77 81       	ldd	r23, Z+7	; 0x07
    459e:	cb 01       	movw	r24, r22
    45a0:	2b 96       	adiw	r28, 0x0b	; 11
    45a2:	e2 e1       	ldi	r30, 0x12	; 18
    45a4:	0c 94 9e 20 	jmp	0x413c	; 0x413c <__epilogue_restores__>

000045a8 <strnlen_P>:
    45a8:	fc 01       	movw	r30, r24
    45aa:	05 90       	lpm	r0, Z+
    45ac:	61 50       	subi	r22, 0x01	; 1
    45ae:	70 40       	sbci	r23, 0x00	; 0
    45b0:	01 10       	cpse	r0, r1
    45b2:	d8 f7       	brcc	.-10     	; 0x45aa <strnlen_P+0x2>
    45b4:	80 95       	com	r24
    45b6:	90 95       	com	r25
    45b8:	8e 0f       	add	r24, r30
    45ba:	9f 1f       	adc	r25, r31
    45bc:	08 95       	ret

000045be <strnlen>:
    45be:	fc 01       	movw	r30, r24
    45c0:	61 50       	subi	r22, 0x01	; 1
    45c2:	70 40       	sbci	r23, 0x00	; 0
    45c4:	01 90       	ld	r0, Z+
    45c6:	01 10       	cpse	r0, r1
    45c8:	d8 f7       	brcc	.-10     	; 0x45c0 <strnlen+0x2>
    45ca:	80 95       	com	r24
    45cc:	90 95       	com	r25
    45ce:	8e 0f       	add	r24, r30
    45d0:	9f 1f       	adc	r25, r31
    45d2:	08 95       	ret

000045d4 <fputc>:
    45d4:	0f 93       	push	r16
    45d6:	1f 93       	push	r17
    45d8:	cf 93       	push	r28
    45da:	df 93       	push	r29
    45dc:	8c 01       	movw	r16, r24
    45de:	eb 01       	movw	r28, r22
    45e0:	8b 81       	ldd	r24, Y+3	; 0x03
    45e2:	81 ff       	sbrs	r24, 1
    45e4:	1b c0       	rjmp	.+54     	; 0x461c <fputc+0x48>
    45e6:	82 ff       	sbrs	r24, 2
    45e8:	0d c0       	rjmp	.+26     	; 0x4604 <fputc+0x30>
    45ea:	2e 81       	ldd	r18, Y+6	; 0x06
    45ec:	3f 81       	ldd	r19, Y+7	; 0x07
    45ee:	8c 81       	ldd	r24, Y+4	; 0x04
    45f0:	9d 81       	ldd	r25, Y+5	; 0x05
    45f2:	28 17       	cp	r18, r24
    45f4:	39 07       	cpc	r19, r25
    45f6:	64 f4       	brge	.+24     	; 0x4610 <fputc+0x3c>
    45f8:	e8 81       	ld	r30, Y
    45fa:	f9 81       	ldd	r31, Y+1	; 0x01
    45fc:	01 93       	st	Z+, r16
    45fe:	f9 83       	std	Y+1, r31	; 0x01
    4600:	e8 83       	st	Y, r30
    4602:	06 c0       	rjmp	.+12     	; 0x4610 <fputc+0x3c>
    4604:	e8 85       	ldd	r30, Y+8	; 0x08
    4606:	f9 85       	ldd	r31, Y+9	; 0x09
    4608:	80 2f       	mov	r24, r16
    460a:	09 95       	icall
    460c:	89 2b       	or	r24, r25
    460e:	31 f4       	brne	.+12     	; 0x461c <fputc+0x48>
    4610:	8e 81       	ldd	r24, Y+6	; 0x06
    4612:	9f 81       	ldd	r25, Y+7	; 0x07
    4614:	01 96       	adiw	r24, 0x01	; 1
    4616:	9f 83       	std	Y+7, r25	; 0x07
    4618:	8e 83       	std	Y+6, r24	; 0x06
    461a:	02 c0       	rjmp	.+4      	; 0x4620 <fputc+0x4c>
    461c:	0f ef       	ldi	r16, 0xFF	; 255
    461e:	1f ef       	ldi	r17, 0xFF	; 255
    4620:	c8 01       	movw	r24, r16
    4622:	df 91       	pop	r29
    4624:	cf 91       	pop	r28
    4626:	1f 91       	pop	r17
    4628:	0f 91       	pop	r16
    462a:	08 95       	ret

0000462c <__ultoa_invert>:
    462c:	fa 01       	movw	r30, r20
    462e:	aa 27       	eor	r26, r26
    4630:	28 30       	cpi	r18, 0x08	; 8
    4632:	51 f1       	breq	.+84     	; 0x4688 <__ultoa_invert+0x5c>
    4634:	20 31       	cpi	r18, 0x10	; 16
    4636:	81 f1       	breq	.+96     	; 0x4698 <__ultoa_invert+0x6c>
    4638:	e8 94       	clt
    463a:	6f 93       	push	r22
    463c:	6e 7f       	andi	r22, 0xFE	; 254
    463e:	6e 5f       	subi	r22, 0xFE	; 254
    4640:	7f 4f       	sbci	r23, 0xFF	; 255
    4642:	8f 4f       	sbci	r24, 0xFF	; 255
    4644:	9f 4f       	sbci	r25, 0xFF	; 255
    4646:	af 4f       	sbci	r26, 0xFF	; 255
    4648:	b1 e0       	ldi	r27, 0x01	; 1
    464a:	3e d0       	rcall	.+124    	; 0x46c8 <__ultoa_invert+0x9c>
    464c:	b4 e0       	ldi	r27, 0x04	; 4
    464e:	3c d0       	rcall	.+120    	; 0x46c8 <__ultoa_invert+0x9c>
    4650:	67 0f       	add	r22, r23
    4652:	78 1f       	adc	r23, r24
    4654:	89 1f       	adc	r24, r25
    4656:	9a 1f       	adc	r25, r26
    4658:	a1 1d       	adc	r26, r1
    465a:	68 0f       	add	r22, r24
    465c:	79 1f       	adc	r23, r25
    465e:	8a 1f       	adc	r24, r26
    4660:	91 1d       	adc	r25, r1
    4662:	a1 1d       	adc	r26, r1
    4664:	6a 0f       	add	r22, r26
    4666:	71 1d       	adc	r23, r1
    4668:	81 1d       	adc	r24, r1
    466a:	91 1d       	adc	r25, r1
    466c:	a1 1d       	adc	r26, r1
    466e:	20 d0       	rcall	.+64     	; 0x46b0 <__ultoa_invert+0x84>
    4670:	09 f4       	brne	.+2      	; 0x4674 <__ultoa_invert+0x48>
    4672:	68 94       	set
    4674:	3f 91       	pop	r19
    4676:	2a e0       	ldi	r18, 0x0A	; 10
    4678:	26 9f       	mul	r18, r22
    467a:	11 24       	eor	r1, r1
    467c:	30 19       	sub	r19, r0
    467e:	30 5d       	subi	r19, 0xD0	; 208
    4680:	31 93       	st	Z+, r19
    4682:	de f6       	brtc	.-74     	; 0x463a <__ultoa_invert+0xe>
    4684:	cf 01       	movw	r24, r30
    4686:	08 95       	ret
    4688:	46 2f       	mov	r20, r22
    468a:	47 70       	andi	r20, 0x07	; 7
    468c:	40 5d       	subi	r20, 0xD0	; 208
    468e:	41 93       	st	Z+, r20
    4690:	b3 e0       	ldi	r27, 0x03	; 3
    4692:	0f d0       	rcall	.+30     	; 0x46b2 <__ultoa_invert+0x86>
    4694:	c9 f7       	brne	.-14     	; 0x4688 <__ultoa_invert+0x5c>
    4696:	f6 cf       	rjmp	.-20     	; 0x4684 <__ultoa_invert+0x58>
    4698:	46 2f       	mov	r20, r22
    469a:	4f 70       	andi	r20, 0x0F	; 15
    469c:	40 5d       	subi	r20, 0xD0	; 208
    469e:	4a 33       	cpi	r20, 0x3A	; 58
    46a0:	18 f0       	brcs	.+6      	; 0x46a8 <__ultoa_invert+0x7c>
    46a2:	49 5d       	subi	r20, 0xD9	; 217
    46a4:	31 fd       	sbrc	r19, 1
    46a6:	40 52       	subi	r20, 0x20	; 32
    46a8:	41 93       	st	Z+, r20
    46aa:	02 d0       	rcall	.+4      	; 0x46b0 <__ultoa_invert+0x84>
    46ac:	a9 f7       	brne	.-22     	; 0x4698 <__ultoa_invert+0x6c>
    46ae:	ea cf       	rjmp	.-44     	; 0x4684 <__ultoa_invert+0x58>
    46b0:	b4 e0       	ldi	r27, 0x04	; 4
    46b2:	a6 95       	lsr	r26
    46b4:	97 95       	ror	r25
    46b6:	87 95       	ror	r24
    46b8:	77 95       	ror	r23
    46ba:	67 95       	ror	r22
    46bc:	ba 95       	dec	r27
    46be:	c9 f7       	brne	.-14     	; 0x46b2 <__ultoa_invert+0x86>
    46c0:	00 97       	sbiw	r24, 0x00	; 0
    46c2:	61 05       	cpc	r22, r1
    46c4:	71 05       	cpc	r23, r1
    46c6:	08 95       	ret
    46c8:	9b 01       	movw	r18, r22
    46ca:	ac 01       	movw	r20, r24
    46cc:	0a 2e       	mov	r0, r26
    46ce:	06 94       	lsr	r0
    46d0:	57 95       	ror	r21
    46d2:	47 95       	ror	r20
    46d4:	37 95       	ror	r19
    46d6:	27 95       	ror	r18
    46d8:	ba 95       	dec	r27
    46da:	c9 f7       	brne	.-14     	; 0x46ce <__ultoa_invert+0xa2>
    46dc:	62 0f       	add	r22, r18
    46de:	73 1f       	adc	r23, r19
    46e0:	84 1f       	adc	r24, r20
    46e2:	95 1f       	adc	r25, r21
    46e4:	a0 1d       	adc	r26, r0
    46e6:	08 95       	ret

000046e8 <_exit>:
    46e8:	f8 94       	cli

000046ea <__stop_program>:
    46ea:	ff cf       	rjmp	.-2      	; 0x46ea <__stop_program>
