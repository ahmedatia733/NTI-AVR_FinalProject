
NTI_FinalProject_ECU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000508e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000422  00800060  0000508e  00005122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000db  00800482  00800482  00005544  2**0
                  ALLOC
  3 .stab         00005d6c  00000000  00000000  00005544  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000051ce  00000000  00000000  0000b2b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  0001047e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000210  00000000  00000000  0001063e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268a  00000000  00000000  0001084e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014e0  00000000  00000000  00012ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012a9  00000000  00000000  000143b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  00015664  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fe  00000000  00000000  00015844  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009aa  00000000  00000000  00015b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000164ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 66 1f 	jmp	0x3ecc	; 0x3ecc <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 7c 10 	jmp	0x20f8	; 0x20f8 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f0 e5       	ldi	r31, 0x50	; 80
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 38       	cpi	r26, 0x82	; 130
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	a2 e8       	ldi	r26, 0x82	; 130
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 35       	cpi	r26, 0x5D	; 93
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 de 22 	call	0x45bc	; 0x45bc <main>
      8a:	0c 94 45 28 	jmp	0x508a	; 0x508a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 85 04 	call	0x90a	; 0x90a <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e6 24 	jmp	0x49cc	; 0x49cc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad eb       	ldi	r26, 0xBD	; 189
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 02 25 	jmp	0x4a04	; 0x4a04 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e6 24 	jmp	0x49cc	; 0x49cc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d eb       	ldi	r24, 0xBD	; 189
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 02 25 	jmp	0x4a04	; 0x4a04 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ee 24 	jmp	0x49dc	; 0x49dc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6d eb       	ldi	r22, 0xBD	; 189
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0a 25 	jmp	0x4a14	; 0x4a14 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f2 24 	jmp	0x49e4	; 0x49e4 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 ee 06 	call	0xddc	; 0xddc <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 0e 25 	jmp	0x4a1c	; 0x4a1c <__epilogue_restores__+0x18>

0000090a <__fixsfsi>:
     90a:	ac e0       	ldi	r26, 0x0C	; 12
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 f6 24 	jmp	0x49ec	; 0x49ec <__prologue_saves__+0x20>
     916:	69 83       	std	Y+1, r22	; 0x01
     918:	7a 83       	std	Y+2, r23	; 0x02
     91a:	8b 83       	std	Y+3, r24	; 0x03
     91c:	9c 83       	std	Y+4, r25	; 0x04
     91e:	ce 01       	movw	r24, r28
     920:	01 96       	adiw	r24, 0x01	; 1
     922:	be 01       	movw	r22, r28
     924:	6b 5f       	subi	r22, 0xFB	; 251
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	0e 94 76 06 	call	0xcec	; 0xcec <__unpack_f>
     92c:	8d 81       	ldd	r24, Y+5	; 0x05
     92e:	82 30       	cpi	r24, 0x02	; 2
     930:	61 f1       	breq	.+88     	; 0x98a <__fixsfsi+0x80>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	50 f1       	brcs	.+84     	; 0x98a <__fixsfsi+0x80>
     936:	84 30       	cpi	r24, 0x04	; 4
     938:	21 f4       	brne	.+8      	; 0x942 <__fixsfsi+0x38>
     93a:	8e 81       	ldd	r24, Y+6	; 0x06
     93c:	88 23       	and	r24, r24
     93e:	51 f1       	breq	.+84     	; 0x994 <__fixsfsi+0x8a>
     940:	2e c0       	rjmp	.+92     	; 0x99e <__fixsfsi+0x94>
     942:	2f 81       	ldd	r18, Y+7	; 0x07
     944:	38 85       	ldd	r19, Y+8	; 0x08
     946:	37 fd       	sbrc	r19, 7
     948:	20 c0       	rjmp	.+64     	; 0x98a <__fixsfsi+0x80>
     94a:	6e 81       	ldd	r22, Y+6	; 0x06
     94c:	2f 31       	cpi	r18, 0x1F	; 31
     94e:	31 05       	cpc	r19, r1
     950:	1c f0       	brlt	.+6      	; 0x958 <__fixsfsi+0x4e>
     952:	66 23       	and	r22, r22
     954:	f9 f0       	breq	.+62     	; 0x994 <__fixsfsi+0x8a>
     956:	23 c0       	rjmp	.+70     	; 0x99e <__fixsfsi+0x94>
     958:	8e e1       	ldi	r24, 0x1E	; 30
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	82 1b       	sub	r24, r18
     95e:	93 0b       	sbc	r25, r19
     960:	29 85       	ldd	r18, Y+9	; 0x09
     962:	3a 85       	ldd	r19, Y+10	; 0x0a
     964:	4b 85       	ldd	r20, Y+11	; 0x0b
     966:	5c 85       	ldd	r21, Y+12	; 0x0c
     968:	04 c0       	rjmp	.+8      	; 0x972 <__fixsfsi+0x68>
     96a:	56 95       	lsr	r21
     96c:	47 95       	ror	r20
     96e:	37 95       	ror	r19
     970:	27 95       	ror	r18
     972:	8a 95       	dec	r24
     974:	d2 f7       	brpl	.-12     	; 0x96a <__fixsfsi+0x60>
     976:	66 23       	and	r22, r22
     978:	b1 f0       	breq	.+44     	; 0x9a6 <__fixsfsi+0x9c>
     97a:	50 95       	com	r21
     97c:	40 95       	com	r20
     97e:	30 95       	com	r19
     980:	21 95       	neg	r18
     982:	3f 4f       	sbci	r19, 0xFF	; 255
     984:	4f 4f       	sbci	r20, 0xFF	; 255
     986:	5f 4f       	sbci	r21, 0xFF	; 255
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <__fixsfsi+0x9c>
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	40 e0       	ldi	r20, 0x00	; 0
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__fixsfsi+0x9c>
     994:	2f ef       	ldi	r18, 0xFF	; 255
     996:	3f ef       	ldi	r19, 0xFF	; 255
     998:	4f ef       	ldi	r20, 0xFF	; 255
     99a:	5f e7       	ldi	r21, 0x7F	; 127
     99c:	04 c0       	rjmp	.+8      	; 0x9a6 <__fixsfsi+0x9c>
     99e:	20 e0       	ldi	r18, 0x00	; 0
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	40 e0       	ldi	r20, 0x00	; 0
     9a4:	50 e8       	ldi	r21, 0x80	; 128
     9a6:	b9 01       	movw	r22, r18
     9a8:	ca 01       	movw	r24, r20
     9aa:	2c 96       	adiw	r28, 0x0c	; 12
     9ac:	e2 e0       	ldi	r30, 0x02	; 2
     9ae:	0c 94 12 25 	jmp	0x4a24	; 0x4a24 <__epilogue_restores__+0x20>

000009b2 <__floatunsisf>:
     9b2:	a8 e0       	ldi	r26, 0x08	; 8
     9b4:	b0 e0       	ldi	r27, 0x00	; 0
     9b6:	ef ed       	ldi	r30, 0xDF	; 223
     9b8:	f4 e0       	ldi	r31, 0x04	; 4
     9ba:	0c 94 ee 24 	jmp	0x49dc	; 0x49dc <__prologue_saves__+0x10>
     9be:	7b 01       	movw	r14, r22
     9c0:	8c 01       	movw	r16, r24
     9c2:	61 15       	cp	r22, r1
     9c4:	71 05       	cpc	r23, r1
     9c6:	81 05       	cpc	r24, r1
     9c8:	91 05       	cpc	r25, r1
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__floatunsisf+0x20>
     9cc:	82 e0       	ldi	r24, 0x02	; 2
     9ce:	89 83       	std	Y+1, r24	; 0x01
     9d0:	60 c0       	rjmp	.+192    	; 0xa92 <__floatunsisf+0xe0>
     9d2:	83 e0       	ldi	r24, 0x03	; 3
     9d4:	89 83       	std	Y+1, r24	; 0x01
     9d6:	8e e1       	ldi	r24, 0x1E	; 30
     9d8:	c8 2e       	mov	r12, r24
     9da:	d1 2c       	mov	r13, r1
     9dc:	dc 82       	std	Y+4, r13	; 0x04
     9de:	cb 82       	std	Y+3, r12	; 0x03
     9e0:	ed 82       	std	Y+5, r14	; 0x05
     9e2:	fe 82       	std	Y+6, r15	; 0x06
     9e4:	0f 83       	std	Y+7, r16	; 0x07
     9e6:	18 87       	std	Y+8, r17	; 0x08
     9e8:	c8 01       	movw	r24, r16
     9ea:	b7 01       	movw	r22, r14
     9ec:	0e 94 52 05 	call	0xaa4	; 0xaa4 <__clzsi2>
     9f0:	fc 01       	movw	r30, r24
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f7 ff       	sbrs	r31, 7
     9f6:	3b c0       	rjmp	.+118    	; 0xa6e <__floatunsisf+0xbc>
     9f8:	22 27       	eor	r18, r18
     9fa:	33 27       	eor	r19, r19
     9fc:	2e 1b       	sub	r18, r30
     9fe:	3f 0b       	sbc	r19, r31
     a00:	57 01       	movw	r10, r14
     a02:	68 01       	movw	r12, r16
     a04:	02 2e       	mov	r0, r18
     a06:	04 c0       	rjmp	.+8      	; 0xa10 <__floatunsisf+0x5e>
     a08:	d6 94       	lsr	r13
     a0a:	c7 94       	ror	r12
     a0c:	b7 94       	ror	r11
     a0e:	a7 94       	ror	r10
     a10:	0a 94       	dec	r0
     a12:	d2 f7       	brpl	.-12     	; 0xa08 <__floatunsisf+0x56>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	60 e0       	ldi	r22, 0x00	; 0
     a1a:	70 e0       	ldi	r23, 0x00	; 0
     a1c:	81 e0       	ldi	r24, 0x01	; 1
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	a0 e0       	ldi	r26, 0x00	; 0
     a22:	b0 e0       	ldi	r27, 0x00	; 0
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__floatunsisf+0x7c>
     a26:	88 0f       	add	r24, r24
     a28:	99 1f       	adc	r25, r25
     a2a:	aa 1f       	adc	r26, r26
     a2c:	bb 1f       	adc	r27, r27
     a2e:	2a 95       	dec	r18
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__floatunsisf+0x74>
     a32:	01 97       	sbiw	r24, 0x01	; 1
     a34:	a1 09       	sbc	r26, r1
     a36:	b1 09       	sbc	r27, r1
     a38:	8e 21       	and	r24, r14
     a3a:	9f 21       	and	r25, r15
     a3c:	a0 23       	and	r26, r16
     a3e:	b1 23       	and	r27, r17
     a40:	00 97       	sbiw	r24, 0x00	; 0
     a42:	a1 05       	cpc	r26, r1
     a44:	b1 05       	cpc	r27, r1
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatunsisf+0x9e>
     a48:	41 e0       	ldi	r20, 0x01	; 1
     a4a:	50 e0       	ldi	r21, 0x00	; 0
     a4c:	60 e0       	ldi	r22, 0x00	; 0
     a4e:	70 e0       	ldi	r23, 0x00	; 0
     a50:	4a 29       	or	r20, r10
     a52:	5b 29       	or	r21, r11
     a54:	6c 29       	or	r22, r12
     a56:	7d 29       	or	r23, r13
     a58:	4d 83       	std	Y+5, r20	; 0x05
     a5a:	5e 83       	std	Y+6, r21	; 0x06
     a5c:	6f 83       	std	Y+7, r22	; 0x07
     a5e:	78 87       	std	Y+8, r23	; 0x08
     a60:	8e e1       	ldi	r24, 0x1E	; 30
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	8e 1b       	sub	r24, r30
     a66:	9f 0b       	sbc	r25, r31
     a68:	9c 83       	std	Y+4, r25	; 0x04
     a6a:	8b 83       	std	Y+3, r24	; 0x03
     a6c:	12 c0       	rjmp	.+36     	; 0xa92 <__floatunsisf+0xe0>
     a6e:	30 97       	sbiw	r30, 0x00	; 0
     a70:	81 f0       	breq	.+32     	; 0xa92 <__floatunsisf+0xe0>
     a72:	0e 2e       	mov	r0, r30
     a74:	04 c0       	rjmp	.+8      	; 0xa7e <__floatunsisf+0xcc>
     a76:	ee 0c       	add	r14, r14
     a78:	ff 1c       	adc	r15, r15
     a7a:	00 1f       	adc	r16, r16
     a7c:	11 1f       	adc	r17, r17
     a7e:	0a 94       	dec	r0
     a80:	d2 f7       	brpl	.-12     	; 0xa76 <__floatunsisf+0xc4>
     a82:	ed 82       	std	Y+5, r14	; 0x05
     a84:	fe 82       	std	Y+6, r15	; 0x06
     a86:	0f 83       	std	Y+7, r16	; 0x07
     a88:	18 87       	std	Y+8, r17	; 0x08
     a8a:	ce 1a       	sub	r12, r30
     a8c:	df 0a       	sbc	r13, r31
     a8e:	dc 82       	std	Y+4, r13	; 0x04
     a90:	cb 82       	std	Y+3, r12	; 0x03
     a92:	1a 82       	std	Y+2, r1	; 0x02
     a94:	ce 01       	movw	r24, r28
     a96:	01 96       	adiw	r24, 0x01	; 1
     a98:	0e 94 a1 05 	call	0xb42	; 0xb42 <__pack_f>
     a9c:	28 96       	adiw	r28, 0x08	; 8
     a9e:	ea e0       	ldi	r30, 0x0A	; 10
     aa0:	0c 94 0a 25 	jmp	0x4a14	; 0x4a14 <__epilogue_restores__+0x10>

00000aa4 <__clzsi2>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	7b 01       	movw	r14, r22
     aae:	8c 01       	movw	r16, r24
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	e8 16       	cp	r14, r24
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	f8 06       	cpc	r15, r24
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	08 07       	cpc	r16, r24
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	18 07       	cpc	r17, r24
     ac0:	88 f4       	brcc	.+34     	; 0xae4 <__clzsi2+0x40>
     ac2:	8f ef       	ldi	r24, 0xFF	; 255
     ac4:	e8 16       	cp	r14, r24
     ac6:	f1 04       	cpc	r15, r1
     ac8:	01 05       	cpc	r16, r1
     aca:	11 05       	cpc	r17, r1
     acc:	31 f0       	breq	.+12     	; 0xada <__clzsi2+0x36>
     ace:	28 f0       	brcs	.+10     	; 0xada <__clzsi2+0x36>
     ad0:	88 e0       	ldi	r24, 0x08	; 8
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	a0 e0       	ldi	r26, 0x00	; 0
     ad6:	b0 e0       	ldi	r27, 0x00	; 0
     ad8:	17 c0       	rjmp	.+46     	; 0xb08 <__clzsi2+0x64>
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	a0 e0       	ldi	r26, 0x00	; 0
     ae0:	b0 e0       	ldi	r27, 0x00	; 0
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <__clzsi2+0x64>
     ae4:	80 e0       	ldi	r24, 0x00	; 0
     ae6:	e8 16       	cp	r14, r24
     ae8:	80 e0       	ldi	r24, 0x00	; 0
     aea:	f8 06       	cpc	r15, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	08 07       	cpc	r16, r24
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	18 07       	cpc	r17, r24
     af4:	28 f0       	brcs	.+10     	; 0xb00 <__clzsi2+0x5c>
     af6:	88 e1       	ldi	r24, 0x18	; 24
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	a0 e0       	ldi	r26, 0x00	; 0
     afc:	b0 e0       	ldi	r27, 0x00	; 0
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__clzsi2+0x64>
     b00:	80 e1       	ldi	r24, 0x10	; 16
     b02:	90 e0       	ldi	r25, 0x00	; 0
     b04:	a0 e0       	ldi	r26, 0x00	; 0
     b06:	b0 e0       	ldi	r27, 0x00	; 0
     b08:	20 e2       	ldi	r18, 0x20	; 32
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	28 1b       	sub	r18, r24
     b12:	39 0b       	sbc	r19, r25
     b14:	4a 0b       	sbc	r20, r26
     b16:	5b 0b       	sbc	r21, r27
     b18:	04 c0       	rjmp	.+8      	; 0xb22 <__clzsi2+0x7e>
     b1a:	16 95       	lsr	r17
     b1c:	07 95       	ror	r16
     b1e:	f7 94       	ror	r15
     b20:	e7 94       	ror	r14
     b22:	8a 95       	dec	r24
     b24:	d2 f7       	brpl	.-12     	; 0xb1a <__clzsi2+0x76>
     b26:	f7 01       	movw	r30, r14
     b28:	eb 53       	subi	r30, 0x3B	; 59
     b2a:	fe 4f       	sbci	r31, 0xFE	; 254
     b2c:	80 81       	ld	r24, Z
     b2e:	28 1b       	sub	r18, r24
     b30:	31 09       	sbc	r19, r1
     b32:	41 09       	sbc	r20, r1
     b34:	51 09       	sbc	r21, r1
     b36:	c9 01       	movw	r24, r18
     b38:	1f 91       	pop	r17
     b3a:	0f 91       	pop	r16
     b3c:	ff 90       	pop	r15
     b3e:	ef 90       	pop	r14
     b40:	08 95       	ret

00000b42 <__pack_f>:
     b42:	df 92       	push	r13
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	fc 01       	movw	r30, r24
     b4e:	e4 80       	ldd	r14, Z+4	; 0x04
     b50:	f5 80       	ldd	r15, Z+5	; 0x05
     b52:	06 81       	ldd	r16, Z+6	; 0x06
     b54:	17 81       	ldd	r17, Z+7	; 0x07
     b56:	d1 80       	ldd	r13, Z+1	; 0x01
     b58:	80 81       	ld	r24, Z
     b5a:	82 30       	cpi	r24, 0x02	; 2
     b5c:	48 f4       	brcc	.+18     	; 0xb70 <__pack_f+0x2e>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	a0 e1       	ldi	r26, 0x10	; 16
     b64:	b0 e0       	ldi	r27, 0x00	; 0
     b66:	e8 2a       	or	r14, r24
     b68:	f9 2a       	or	r15, r25
     b6a:	0a 2b       	or	r16, r26
     b6c:	1b 2b       	or	r17, r27
     b6e:	a5 c0       	rjmp	.+330    	; 0xcba <__pack_f+0x178>
     b70:	84 30       	cpi	r24, 0x04	; 4
     b72:	09 f4       	brne	.+2      	; 0xb76 <__pack_f+0x34>
     b74:	9f c0       	rjmp	.+318    	; 0xcb4 <__pack_f+0x172>
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	21 f4       	brne	.+8      	; 0xb82 <__pack_f+0x40>
     b7a:	ee 24       	eor	r14, r14
     b7c:	ff 24       	eor	r15, r15
     b7e:	87 01       	movw	r16, r14
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <__pack_f+0x4a>
     b82:	e1 14       	cp	r14, r1
     b84:	f1 04       	cpc	r15, r1
     b86:	01 05       	cpc	r16, r1
     b88:	11 05       	cpc	r17, r1
     b8a:	19 f4       	brne	.+6      	; 0xb92 <__pack_f+0x50>
     b8c:	e0 e0       	ldi	r30, 0x00	; 0
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <__pack_f+0x17c>
     b92:	62 81       	ldd	r22, Z+2	; 0x02
     b94:	73 81       	ldd	r23, Z+3	; 0x03
     b96:	9f ef       	ldi	r25, 0xFF	; 255
     b98:	62 38       	cpi	r22, 0x82	; 130
     b9a:	79 07       	cpc	r23, r25
     b9c:	0c f0       	brlt	.+2      	; 0xba0 <__pack_f+0x5e>
     b9e:	5b c0       	rjmp	.+182    	; 0xc56 <__pack_f+0x114>
     ba0:	22 e8       	ldi	r18, 0x82	; 130
     ba2:	3f ef       	ldi	r19, 0xFF	; 255
     ba4:	26 1b       	sub	r18, r22
     ba6:	37 0b       	sbc	r19, r23
     ba8:	2a 31       	cpi	r18, 0x1A	; 26
     baa:	31 05       	cpc	r19, r1
     bac:	2c f0       	brlt	.+10     	; 0xbb8 <__pack_f+0x76>
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	2a c0       	rjmp	.+84     	; 0xc0c <__pack_f+0xca>
     bb8:	b8 01       	movw	r22, r16
     bba:	a7 01       	movw	r20, r14
     bbc:	02 2e       	mov	r0, r18
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0x86>
     bc0:	76 95       	lsr	r23
     bc2:	67 95       	ror	r22
     bc4:	57 95       	ror	r21
     bc6:	47 95       	ror	r20
     bc8:	0a 94       	dec	r0
     bca:	d2 f7       	brpl	.-12     	; 0xbc0 <__pack_f+0x7e>
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	a0 e0       	ldi	r26, 0x00	; 0
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__pack_f+0x9c>
     bd6:	88 0f       	add	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	aa 1f       	adc	r26, r26
     bdc:	bb 1f       	adc	r27, r27
     bde:	2a 95       	dec	r18
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__pack_f+0x94>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	a1 09       	sbc	r26, r1
     be6:	b1 09       	sbc	r27, r1
     be8:	8e 21       	and	r24, r14
     bea:	9f 21       	and	r25, r15
     bec:	a0 23       	and	r26, r16
     bee:	b1 23       	and	r27, r17
     bf0:	00 97       	sbiw	r24, 0x00	; 0
     bf2:	a1 05       	cpc	r26, r1
     bf4:	b1 05       	cpc	r27, r1
     bf6:	21 f0       	breq	.+8      	; 0xc00 <__pack_f+0xbe>
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	a0 e0       	ldi	r26, 0x00	; 0
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	9a 01       	movw	r18, r20
     c02:	ab 01       	movw	r20, r22
     c04:	28 2b       	or	r18, r24
     c06:	39 2b       	or	r19, r25
     c08:	4a 2b       	or	r20, r26
     c0a:	5b 2b       	or	r21, r27
     c0c:	da 01       	movw	r26, r20
     c0e:	c9 01       	movw	r24, r18
     c10:	8f 77       	andi	r24, 0x7F	; 127
     c12:	90 70       	andi	r25, 0x00	; 0
     c14:	a0 70       	andi	r26, 0x00	; 0
     c16:	b0 70       	andi	r27, 0x00	; 0
     c18:	80 34       	cpi	r24, 0x40	; 64
     c1a:	91 05       	cpc	r25, r1
     c1c:	a1 05       	cpc	r26, r1
     c1e:	b1 05       	cpc	r27, r1
     c20:	39 f4       	brne	.+14     	; 0xc30 <__pack_f+0xee>
     c22:	27 ff       	sbrs	r18, 7
     c24:	09 c0       	rjmp	.+18     	; 0xc38 <__pack_f+0xf6>
     c26:	20 5c       	subi	r18, 0xC0	; 192
     c28:	3f 4f       	sbci	r19, 0xFF	; 255
     c2a:	4f 4f       	sbci	r20, 0xFF	; 255
     c2c:	5f 4f       	sbci	r21, 0xFF	; 255
     c2e:	04 c0       	rjmp	.+8      	; 0xc38 <__pack_f+0xf6>
     c30:	21 5c       	subi	r18, 0xC1	; 193
     c32:	3f 4f       	sbci	r19, 0xFF	; 255
     c34:	4f 4f       	sbci	r20, 0xFF	; 255
     c36:	5f 4f       	sbci	r21, 0xFF	; 255
     c38:	e0 e0       	ldi	r30, 0x00	; 0
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	20 30       	cpi	r18, 0x00	; 0
     c3e:	a0 e0       	ldi	r26, 0x00	; 0
     c40:	3a 07       	cpc	r19, r26
     c42:	a0 e0       	ldi	r26, 0x00	; 0
     c44:	4a 07       	cpc	r20, r26
     c46:	a0 e4       	ldi	r26, 0x40	; 64
     c48:	5a 07       	cpc	r21, r26
     c4a:	10 f0       	brcs	.+4      	; 0xc50 <__pack_f+0x10e>
     c4c:	e1 e0       	ldi	r30, 0x01	; 1
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	79 01       	movw	r14, r18
     c52:	8a 01       	movw	r16, r20
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__pack_f+0x162>
     c56:	60 38       	cpi	r22, 0x80	; 128
     c58:	71 05       	cpc	r23, r1
     c5a:	64 f5       	brge	.+88     	; 0xcb4 <__pack_f+0x172>
     c5c:	fb 01       	movw	r30, r22
     c5e:	e1 58       	subi	r30, 0x81	; 129
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	d8 01       	movw	r26, r16
     c64:	c7 01       	movw	r24, r14
     c66:	8f 77       	andi	r24, 0x7F	; 127
     c68:	90 70       	andi	r25, 0x00	; 0
     c6a:	a0 70       	andi	r26, 0x00	; 0
     c6c:	b0 70       	andi	r27, 0x00	; 0
     c6e:	80 34       	cpi	r24, 0x40	; 64
     c70:	91 05       	cpc	r25, r1
     c72:	a1 05       	cpc	r26, r1
     c74:	b1 05       	cpc	r27, r1
     c76:	39 f4       	brne	.+14     	; 0xc86 <__pack_f+0x144>
     c78:	e7 fe       	sbrs	r14, 7
     c7a:	0d c0       	rjmp	.+26     	; 0xc96 <__pack_f+0x154>
     c7c:	80 e4       	ldi	r24, 0x40	; 64
     c7e:	90 e0       	ldi	r25, 0x00	; 0
     c80:	a0 e0       	ldi	r26, 0x00	; 0
     c82:	b0 e0       	ldi	r27, 0x00	; 0
     c84:	04 c0       	rjmp	.+8      	; 0xc8e <__pack_f+0x14c>
     c86:	8f e3       	ldi	r24, 0x3F	; 63
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	a0 e0       	ldi	r26, 0x00	; 0
     c8c:	b0 e0       	ldi	r27, 0x00	; 0
     c8e:	e8 0e       	add	r14, r24
     c90:	f9 1e       	adc	r15, r25
     c92:	0a 1f       	adc	r16, r26
     c94:	1b 1f       	adc	r17, r27
     c96:	17 ff       	sbrs	r17, 7
     c98:	05 c0       	rjmp	.+10     	; 0xca4 <__pack_f+0x162>
     c9a:	16 95       	lsr	r17
     c9c:	07 95       	ror	r16
     c9e:	f7 94       	ror	r15
     ca0:	e7 94       	ror	r14
     ca2:	31 96       	adiw	r30, 0x01	; 1
     ca4:	87 e0       	ldi	r24, 0x07	; 7
     ca6:	16 95       	lsr	r17
     ca8:	07 95       	ror	r16
     caa:	f7 94       	ror	r15
     cac:	e7 94       	ror	r14
     cae:	8a 95       	dec	r24
     cb0:	d1 f7       	brne	.-12     	; 0xca6 <__pack_f+0x164>
     cb2:	05 c0       	rjmp	.+10     	; 0xcbe <__pack_f+0x17c>
     cb4:	ee 24       	eor	r14, r14
     cb6:	ff 24       	eor	r15, r15
     cb8:	87 01       	movw	r16, r14
     cba:	ef ef       	ldi	r30, 0xFF	; 255
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	6e 2f       	mov	r22, r30
     cc0:	67 95       	ror	r22
     cc2:	66 27       	eor	r22, r22
     cc4:	67 95       	ror	r22
     cc6:	90 2f       	mov	r25, r16
     cc8:	9f 77       	andi	r25, 0x7F	; 127
     cca:	d7 94       	ror	r13
     ccc:	dd 24       	eor	r13, r13
     cce:	d7 94       	ror	r13
     cd0:	8e 2f       	mov	r24, r30
     cd2:	86 95       	lsr	r24
     cd4:	49 2f       	mov	r20, r25
     cd6:	46 2b       	or	r20, r22
     cd8:	58 2f       	mov	r21, r24
     cda:	5d 29       	or	r21, r13
     cdc:	b7 01       	movw	r22, r14
     cde:	ca 01       	movw	r24, r20
     ce0:	1f 91       	pop	r17
     ce2:	0f 91       	pop	r16
     ce4:	ff 90       	pop	r15
     ce6:	ef 90       	pop	r14
     ce8:	df 90       	pop	r13
     cea:	08 95       	ret

00000cec <__unpack_f>:
     cec:	fc 01       	movw	r30, r24
     cee:	db 01       	movw	r26, r22
     cf0:	40 81       	ld	r20, Z
     cf2:	51 81       	ldd	r21, Z+1	; 0x01
     cf4:	22 81       	ldd	r18, Z+2	; 0x02
     cf6:	62 2f       	mov	r22, r18
     cf8:	6f 77       	andi	r22, 0x7F	; 127
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	22 1f       	adc	r18, r18
     cfe:	22 27       	eor	r18, r18
     d00:	22 1f       	adc	r18, r18
     d02:	93 81       	ldd	r25, Z+3	; 0x03
     d04:	89 2f       	mov	r24, r25
     d06:	88 0f       	add	r24, r24
     d08:	82 2b       	or	r24, r18
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	99 1f       	adc	r25, r25
     d10:	99 27       	eor	r25, r25
     d12:	99 1f       	adc	r25, r25
     d14:	11 96       	adiw	r26, 0x01	; 1
     d16:	9c 93       	st	X, r25
     d18:	11 97       	sbiw	r26, 0x01	; 1
     d1a:	21 15       	cp	r18, r1
     d1c:	31 05       	cpc	r19, r1
     d1e:	a9 f5       	brne	.+106    	; 0xd8a <__unpack_f+0x9e>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	11 f4       	brne	.+4      	; 0xd2e <__unpack_f+0x42>
     d2a:	82 e0       	ldi	r24, 0x02	; 2
     d2c:	37 c0       	rjmp	.+110    	; 0xd9c <__unpack_f+0xb0>
     d2e:	82 e8       	ldi	r24, 0x82	; 130
     d30:	9f ef       	ldi	r25, 0xFF	; 255
     d32:	13 96       	adiw	r26, 0x03	; 3
     d34:	9c 93       	st	X, r25
     d36:	8e 93       	st	-X, r24
     d38:	12 97       	sbiw	r26, 0x02	; 2
     d3a:	9a 01       	movw	r18, r20
     d3c:	ab 01       	movw	r20, r22
     d3e:	67 e0       	ldi	r22, 0x07	; 7
     d40:	22 0f       	add	r18, r18
     d42:	33 1f       	adc	r19, r19
     d44:	44 1f       	adc	r20, r20
     d46:	55 1f       	adc	r21, r21
     d48:	6a 95       	dec	r22
     d4a:	d1 f7       	brne	.-12     	; 0xd40 <__unpack_f+0x54>
     d4c:	83 e0       	ldi	r24, 0x03	; 3
     d4e:	8c 93       	st	X, r24
     d50:	0d c0       	rjmp	.+26     	; 0xd6c <__unpack_f+0x80>
     d52:	22 0f       	add	r18, r18
     d54:	33 1f       	adc	r19, r19
     d56:	44 1f       	adc	r20, r20
     d58:	55 1f       	adc	r21, r21
     d5a:	12 96       	adiw	r26, 0x02	; 2
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	13 97       	sbiw	r26, 0x03	; 3
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	13 96       	adiw	r26, 0x03	; 3
     d66:	9c 93       	st	X, r25
     d68:	8e 93       	st	-X, r24
     d6a:	12 97       	sbiw	r26, 0x02	; 2
     d6c:	20 30       	cpi	r18, 0x00	; 0
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	38 07       	cpc	r19, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	48 07       	cpc	r20, r24
     d76:	80 e4       	ldi	r24, 0x40	; 64
     d78:	58 07       	cpc	r21, r24
     d7a:	58 f3       	brcs	.-42     	; 0xd52 <__unpack_f+0x66>
     d7c:	14 96       	adiw	r26, 0x04	; 4
     d7e:	2d 93       	st	X+, r18
     d80:	3d 93       	st	X+, r19
     d82:	4d 93       	st	X+, r20
     d84:	5c 93       	st	X, r21
     d86:	17 97       	sbiw	r26, 0x07	; 7
     d88:	08 95       	ret
     d8a:	2f 3f       	cpi	r18, 0xFF	; 255
     d8c:	31 05       	cpc	r19, r1
     d8e:	79 f4       	brne	.+30     	; 0xdae <__unpack_f+0xc2>
     d90:	41 15       	cp	r20, r1
     d92:	51 05       	cpc	r21, r1
     d94:	61 05       	cpc	r22, r1
     d96:	71 05       	cpc	r23, r1
     d98:	19 f4       	brne	.+6      	; 0xda0 <__unpack_f+0xb4>
     d9a:	84 e0       	ldi	r24, 0x04	; 4
     d9c:	8c 93       	st	X, r24
     d9e:	08 95       	ret
     da0:	64 ff       	sbrs	r22, 4
     da2:	03 c0       	rjmp	.+6      	; 0xdaa <__unpack_f+0xbe>
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	8c 93       	st	X, r24
     da8:	12 c0       	rjmp	.+36     	; 0xdce <__unpack_f+0xe2>
     daa:	1c 92       	st	X, r1
     dac:	10 c0       	rjmp	.+32     	; 0xdce <__unpack_f+0xe2>
     dae:	2f 57       	subi	r18, 0x7F	; 127
     db0:	30 40       	sbci	r19, 0x00	; 0
     db2:	13 96       	adiw	r26, 0x03	; 3
     db4:	3c 93       	st	X, r19
     db6:	2e 93       	st	-X, r18
     db8:	12 97       	sbiw	r26, 0x02	; 2
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	8c 93       	st	X, r24
     dbe:	87 e0       	ldi	r24, 0x07	; 7
     dc0:	44 0f       	add	r20, r20
     dc2:	55 1f       	adc	r21, r21
     dc4:	66 1f       	adc	r22, r22
     dc6:	77 1f       	adc	r23, r23
     dc8:	8a 95       	dec	r24
     dca:	d1 f7       	brne	.-12     	; 0xdc0 <__unpack_f+0xd4>
     dcc:	70 64       	ori	r23, 0x40	; 64
     dce:	14 96       	adiw	r26, 0x04	; 4
     dd0:	4d 93       	st	X+, r20
     dd2:	5d 93       	st	X+, r21
     dd4:	6d 93       	st	X+, r22
     dd6:	7c 93       	st	X, r23
     dd8:	17 97       	sbiw	r26, 0x07	; 7
     dda:	08 95       	ret

00000ddc <__fpcmp_parts_f>:
     ddc:	1f 93       	push	r17
     dde:	dc 01       	movw	r26, r24
     de0:	fb 01       	movw	r30, r22
     de2:	9c 91       	ld	r25, X
     de4:	92 30       	cpi	r25, 0x02	; 2
     de6:	08 f4       	brcc	.+2      	; 0xdea <__fpcmp_parts_f+0xe>
     de8:	47 c0       	rjmp	.+142    	; 0xe78 <__fpcmp_parts_f+0x9c>
     dea:	80 81       	ld	r24, Z
     dec:	82 30       	cpi	r24, 0x02	; 2
     dee:	08 f4       	brcc	.+2      	; 0xdf2 <__fpcmp_parts_f+0x16>
     df0:	43 c0       	rjmp	.+134    	; 0xe78 <__fpcmp_parts_f+0x9c>
     df2:	94 30       	cpi	r25, 0x04	; 4
     df4:	51 f4       	brne	.+20     	; 0xe0a <__fpcmp_parts_f+0x2e>
     df6:	11 96       	adiw	r26, 0x01	; 1
     df8:	1c 91       	ld	r17, X
     dfa:	84 30       	cpi	r24, 0x04	; 4
     dfc:	99 f5       	brne	.+102    	; 0xe64 <__fpcmp_parts_f+0x88>
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2f       	mov	r22, r24
     e02:	70 e0       	ldi	r23, 0x00	; 0
     e04:	61 1b       	sub	r22, r17
     e06:	71 09       	sbc	r23, r1
     e08:	3f c0       	rjmp	.+126    	; 0xe88 <__fpcmp_parts_f+0xac>
     e0a:	84 30       	cpi	r24, 0x04	; 4
     e0c:	21 f0       	breq	.+8      	; 0xe16 <__fpcmp_parts_f+0x3a>
     e0e:	92 30       	cpi	r25, 0x02	; 2
     e10:	31 f4       	brne	.+12     	; 0xe1e <__fpcmp_parts_f+0x42>
     e12:	82 30       	cpi	r24, 0x02	; 2
     e14:	b9 f1       	breq	.+110    	; 0xe84 <__fpcmp_parts_f+0xa8>
     e16:	81 81       	ldd	r24, Z+1	; 0x01
     e18:	88 23       	and	r24, r24
     e1a:	89 f1       	breq	.+98     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e1c:	2d c0       	rjmp	.+90     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e1e:	11 96       	adiw	r26, 0x01	; 1
     e20:	1c 91       	ld	r17, X
     e22:	11 97       	sbiw	r26, 0x01	; 1
     e24:	82 30       	cpi	r24, 0x02	; 2
     e26:	f1 f0       	breq	.+60     	; 0xe64 <__fpcmp_parts_f+0x88>
     e28:	81 81       	ldd	r24, Z+1	; 0x01
     e2a:	18 17       	cp	r17, r24
     e2c:	d9 f4       	brne	.+54     	; 0xe64 <__fpcmp_parts_f+0x88>
     e2e:	12 96       	adiw	r26, 0x02	; 2
     e30:	2d 91       	ld	r18, X+
     e32:	3c 91       	ld	r19, X
     e34:	13 97       	sbiw	r26, 0x03	; 3
     e36:	82 81       	ldd	r24, Z+2	; 0x02
     e38:	93 81       	ldd	r25, Z+3	; 0x03
     e3a:	82 17       	cp	r24, r18
     e3c:	93 07       	cpc	r25, r19
     e3e:	94 f0       	brlt	.+36     	; 0xe64 <__fpcmp_parts_f+0x88>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	bc f0       	brlt	.+46     	; 0xe74 <__fpcmp_parts_f+0x98>
     e46:	14 96       	adiw	r26, 0x04	; 4
     e48:	8d 91       	ld	r24, X+
     e4a:	9d 91       	ld	r25, X+
     e4c:	0d 90       	ld	r0, X+
     e4e:	bc 91       	ld	r27, X
     e50:	a0 2d       	mov	r26, r0
     e52:	24 81       	ldd	r18, Z+4	; 0x04
     e54:	35 81       	ldd	r19, Z+5	; 0x05
     e56:	46 81       	ldd	r20, Z+6	; 0x06
     e58:	57 81       	ldd	r21, Z+7	; 0x07
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	4a 07       	cpc	r20, r26
     e60:	5b 07       	cpc	r21, r27
     e62:	18 f4       	brcc	.+6      	; 0xe6a <__fpcmp_parts_f+0x8e>
     e64:	11 23       	and	r17, r17
     e66:	41 f0       	breq	.+16     	; 0xe78 <__fpcmp_parts_f+0x9c>
     e68:	0a c0       	rjmp	.+20     	; 0xe7e <__fpcmp_parts_f+0xa2>
     e6a:	82 17       	cp	r24, r18
     e6c:	93 07       	cpc	r25, r19
     e6e:	a4 07       	cpc	r26, r20
     e70:	b5 07       	cpc	r27, r21
     e72:	40 f4       	brcc	.+16     	; 0xe84 <__fpcmp_parts_f+0xa8>
     e74:	11 23       	and	r17, r17
     e76:	19 f0       	breq	.+6      	; 0xe7e <__fpcmp_parts_f+0xa2>
     e78:	61 e0       	ldi	r22, 0x01	; 1
     e7a:	70 e0       	ldi	r23, 0x00	; 0
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <__fpcmp_parts_f+0xac>
     e7e:	6f ef       	ldi	r22, 0xFF	; 255
     e80:	7f ef       	ldi	r23, 0xFF	; 255
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <__fpcmp_parts_f+0xac>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	70 e0       	ldi	r23, 0x00	; 0
     e88:	cb 01       	movw	r24, r22
     e8a:	1f 91       	pop	r17
     e8c:	08 95       	ret

00000e8e <M_UART_void_UARTAvalepale>:

u8 RX_Counter_UART = 0; //a total count of characters in the buffer
u8 RX_Buffer_Overflow_UART; // This flag is set on USART Receiver
// buffer overflow

u8 M_UART_void_UARTAvalepale() {
     e8e:	df 93       	push	r29
     e90:	cf 93       	push	r28
     e92:	cd b7       	in	r28, 0x3d	; 61
     e94:	de b7       	in	r29, 0x3e	; 62
	return RX_Counter_UART;
     e96:	80 91 86 04 	lds	r24, 0x0486
}
     e9a:	cf 91       	pop	r28
     e9c:	df 91       	pop	r29
     e9e:	08 95       	ret

00000ea0 <M_UART_void_UARTInit>:

void M_UART_void_UARTInit(S_UART_config_t UART_config) {
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <M_UART_void_UARTInit+0x6>
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <M_UART_void_UARTInit+0x8>
     ea8:	cd b7       	in	r28, 0x3d	; 61
     eaa:	de b7       	in	r29, 0x3e	; 62
     eac:	69 83       	std	Y+1, r22	; 0x01
     eae:	7a 83       	std	Y+2, r23	; 0x02
     eb0:	8b 83       	std	Y+3, r24	; 0x03
     eb2:	9c 83       	std	Y+4, r25	; 0x04

	UCSRC_REG = 0b10000000;
     eb4:	e0 e4       	ldi	r30, 0x40	; 64
     eb6:	f0 e0       	ldi	r31, 0x00	; 0
     eb8:	80 e8       	ldi	r24, 0x80	; 128
     eba:	80 83       	st	Z, r24
	UCSRB_REG = 0b00000000;
     ebc:	ea e2       	ldi	r30, 0x2A	; 42
     ebe:	f0 e0       	ldi	r31, 0x00	; 0
     ec0:	10 82       	st	Z, r1

	UCSRC_REG |= UART_config.UART_wordLength;   // set word length
     ec2:	a0 e4       	ldi	r26, 0x40	; 64
     ec4:	b0 e0       	ldi	r27, 0x00	; 0
     ec6:	e0 e4       	ldi	r30, 0x40	; 64
     ec8:	f0 e0       	ldi	r31, 0x00	; 0
     eca:	90 81       	ld	r25, Z
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	89 2b       	or	r24, r25
     ed0:	8c 93       	st	X, r24

	UCSRC_REG |= UART_config.UART_stopBits;		//  set stop bits
     ed2:	a0 e4       	ldi	r26, 0x40	; 64
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e0 e4       	ldi	r30, 0x40	; 64
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	90 81       	ld	r25, Z
     edc:	8c 81       	ldd	r24, Y+4	; 0x04
     ede:	89 2b       	or	r24, r25
     ee0:	8c 93       	st	X, r24

	if (UART_config.UART_Parity == UART_Parity_even) {
     ee2:	8b 81       	ldd	r24, Y+3	; 0x03
     ee4:	80 32       	cpi	r24, 0x20	; 32
     ee6:	41 f4       	brne	.+16     	; 0xef8 <M_UART_void_UARTInit+0x58>

		SET_BIT(UCSRC_REG, UCSRC_UPM1);
     ee8:	a0 e4       	ldi	r26, 0x40	; 64
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e0 e4       	ldi	r30, 0x40	; 64
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	80 62       	ori	r24, 0x20	; 32
     ef4:	8c 93       	st	X, r24
     ef6:	11 c0       	rjmp	.+34     	; 0xf1a <M_UART_void_UARTInit+0x7a>

	} else if (UART_config.UART_Parity == UART_Parity_odd) {
     ef8:	8b 81       	ldd	r24, Y+3	; 0x03
     efa:	80 33       	cpi	r24, 0x30	; 48
     efc:	71 f4       	brne	.+28     	; 0xf1a <M_UART_void_UARTInit+0x7a>
		SET_BIT(UCSRC_REG, UCSRC_UPM0);
     efe:	a0 e4       	ldi	r26, 0x40	; 64
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e0 e4       	ldi	r30, 0x40	; 64
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 61       	ori	r24, 0x10	; 16
     f0a:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UPM1);
     f0c:	a0 e4       	ldi	r26, 0x40	; 64
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e0 e4       	ldi	r30, 0x40	; 64
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	80 62       	ori	r24, 0x20	; 32
     f18:	8c 93       	st	X, r24
	}

	UBRRL_REG = UART_config.UART_BaudRate; //set baudRate
     f1a:	e9 e2       	ldi	r30, 0x29	; 41
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	89 81       	ldd	r24, Y+1	; 0x01
     f20:	80 83       	st	Z, r24

	SET_BIT(UCSRB_REG, UCSRB_TXEN); // enable UART TX
     f22:	aa e2       	ldi	r26, 0x2A	; 42
     f24:	b0 e0       	ldi	r27, 0x00	; 0
     f26:	ea e2       	ldi	r30, 0x2A	; 42
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	80 81       	ld	r24, Z
     f2c:	88 60       	ori	r24, 0x08	; 8
     f2e:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, UCSRB_RXEN); // enable UART RX
     f30:	aa e2       	ldi	r26, 0x2A	; 42
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	ea e2       	ldi	r30, 0x2A	; 42
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	80 61       	ori	r24, 0x10	; 16
     f3c:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, UCSRB_RXCIE);
     f3e:	aa e2       	ldi	r26, 0x2A	; 42
     f40:	b0 e0       	ldi	r27, 0x00	; 0
     f42:	ea e2       	ldi	r30, 0x2A	; 42
     f44:	f0 e0       	ldi	r31, 0x00	; 0
     f46:	80 81       	ld	r24, Z
     f48:	80 68       	ori	r24, 0x80	; 128
     f4a:	8c 93       	st	X, r24


}
     f4c:	0f 90       	pop	r0
     f4e:	0f 90       	pop	r0
     f50:	0f 90       	pop	r0
     f52:	0f 90       	pop	r0
     f54:	cf 91       	pop	r28
     f56:	df 91       	pop	r29
     f58:	08 95       	ret

00000f5a <__vector_13>:

ISR(USART_RXC_vect) {
     f5a:	1f 92       	push	r1
     f5c:	0f 92       	push	r0
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	0f 92       	push	r0
     f62:	11 24       	eor	r1, r1
     f64:	8f 93       	push	r24
     f66:	9f 93       	push	r25
     f68:	ef 93       	push	r30
     f6a:	ff 93       	push	r31
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	0f 92       	push	r0
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62

	u8 rx_byte;

	rx_byte = UDR_REG;
     f76:	ec e2       	ldi	r30, 0x2C	; 44
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	89 83       	std	Y+1, r24	; 0x01
	Rx_Buffer_UART[RX_Wr_Index_UART] = rx_byte;  //s put received char in buffer
     f7e:	80 91 84 04 	lds	r24, 0x0484
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	fc 01       	movw	r30, r24
     f88:	e4 57       	subi	r30, 0x74	; 116
     f8a:	fb 4f       	sbci	r31, 0xFB	; 251
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	80 83       	st	Z, r24
	if (++RX_Wr_Index_UART > UART_BUFFER_SIZE)
     f90:	80 91 84 04 	lds	r24, 0x0484
     f94:	8f 5f       	subi	r24, 0xFF	; 255
     f96:	80 93 84 04 	sts	0x0484, r24
     f9a:	80 91 84 04 	lds	r24, 0x0484
     f9e:	85 36       	cpi	r24, 0x65	; 101
     fa0:	10 f0       	brcs	.+4      	; 0xfa6 <__vector_13+0x4c>
		RX_Wr_Index_UART = 0;
     fa2:	10 92 84 04 	sts	0x0484, r1
	if (++RX_Counter_UART > UART_BUFFER_SIZE) // keep a character count
     fa6:	80 91 86 04 	lds	r24, 0x0486
     faa:	8f 5f       	subi	r24, 0xFF	; 255
     fac:	80 93 86 04 	sts	0x0486, r24
     fb0:	80 91 86 04 	lds	r24, 0x0486
     fb4:	85 36       	cpi	r24, 0x65	; 101
     fb6:	18 f0       	brcs	.+6      	; 0xfbe <__vector_13+0x64>
	{
		RX_Counter_UART = UART_BUFFER_SIZE;  //;  if too many chars came
     fb8:	84 e6       	ldi	r24, 0x64	; 100
     fba:	80 93 86 04 	sts	0x0486, r24

	}

}
     fbe:	0f 90       	pop	r0
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	ff 91       	pop	r31
     fc6:	ef 91       	pop	r30
     fc8:	9f 91       	pop	r25
     fca:	8f 91       	pop	r24
     fcc:	0f 90       	pop	r0
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	0f 90       	pop	r0
     fd2:	1f 90       	pop	r1
     fd4:	18 95       	reti

00000fd6 <M_UART_u8_receiveByteASynchNonBlocking>:

char M_UART_u8_receiveByteASynchNonBlocking(void) {
     fd6:	df 93       	push	r29
     fd8:	cf 93       	push	r28
     fda:	0f 92       	push	r0
     fdc:	cd b7       	in	r28, 0x3d	; 61
     fde:	de b7       	in	r29, 0x3e	; 62

	char ch = Rx_Buffer_UART[RX_Rd_Index_UART];
     fe0:	80 91 85 04 	lds	r24, 0x0485
     fe4:	88 2f       	mov	r24, r24
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	fc 01       	movw	r30, r24
     fea:	e4 57       	subi	r30, 0x74	; 116
     fec:	fb 4f       	sbci	r31, 0xFB	; 251
     fee:	80 81       	ld	r24, Z
     ff0:	89 83       	std	Y+1, r24	; 0x01
	if (RX_Counter_UART) {
     ff2:	80 91 86 04 	lds	r24, 0x0486
     ff6:	88 23       	and	r24, r24
     ff8:	29 f0       	breq	.+10     	; 0x1004 <M_UART_u8_receiveByteASynchNonBlocking+0x2e>
		RX_Counter_UART--;
     ffa:	80 91 86 04 	lds	r24, 0x0486
     ffe:	81 50       	subi	r24, 0x01	; 1
    1000:	80 93 86 04 	sts	0x0486, r24
	}

	if (++RX_Rd_Index_UART > UART_BUFFER_SIZE)
    1004:	80 91 85 04 	lds	r24, 0x0485
    1008:	8f 5f       	subi	r24, 0xFF	; 255
    100a:	80 93 85 04 	sts	0x0485, r24
    100e:	80 91 85 04 	lds	r24, 0x0485
    1012:	85 36       	cpi	r24, 0x65	; 101
    1014:	10 f0       	brcs	.+4      	; 0x101a <M_UART_u8_receiveByteASynchNonBlocking+0x44>
		RX_Rd_Index_UART = 0;
    1016:	10 92 85 04 	sts	0x0485, r1
	return ch;
    101a:	89 81       	ldd	r24, Y+1	; 0x01
}
    101c:	0f 90       	pop	r0
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <M_UART_void_UARTSendByte>:

void M_UART_void_UARTSendByte(u8 Byte) {
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	0f 92       	push	r0
    102a:	cd b7       	in	r28, 0x3d	; 61
    102c:	de b7       	in	r29, 0x3e	; 62
    102e:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA_REG , UCSRA_UDRE) == 0)
    1030:	eb e2       	ldi	r30, 0x2B	; 43
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	82 95       	swap	r24
    1038:	86 95       	lsr	r24
    103a:	87 70       	andi	r24, 0x07	; 7
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	81 70       	andi	r24, 0x01	; 1
    1042:	90 70       	andi	r25, 0x00	; 0
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	a1 f3       	breq	.-24     	; 0x1030 <M_UART_void_UARTSendByte+0xc>
		;
	UDR_REG = Byte;
    1048:	ec e2       	ldi	r30, 0x2C	; 44
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	89 81       	ldd	r24, Y+1	; 0x01
    104e:	80 83       	st	Z, r24
}
    1050:	0f 90       	pop	r0
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <M_UART_void_UARTSendString>:
void M_UART_void_UARTSendString(char *strPtr) {
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	00 d0       	rcall	.+0      	; 0x105e <M_UART_void_UARTSendString+0x6>
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	9a 83       	std	Y+2, r25	; 0x02
    1064:	89 83       	std	Y+1, r24	; 0x01
    1066:	0a c0       	rjmp	.+20     	; 0x107c <M_UART_void_UARTSendString+0x24>

	while (*strPtr) {
		M_UART_void_UARTSendByte(*strPtr);
    1068:	e9 81       	ldd	r30, Y+1	; 0x01
    106a:	fa 81       	ldd	r31, Y+2	; 0x02
    106c:	80 81       	ld	r24, Z
    106e:	0e 94 12 08 	call	0x1024	; 0x1024 <M_UART_void_UARTSendByte>
		strPtr++;
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	9a 81       	ldd	r25, Y+2	; 0x02
    1076:	01 96       	adiw	r24, 0x01	; 1
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01
		;
	UDR_REG = Byte;
}
void M_UART_void_UARTSendString(char *strPtr) {

	while (*strPtr) {
    107c:	e9 81       	ldd	r30, Y+1	; 0x01
    107e:	fa 81       	ldd	r31, Y+2	; 0x02
    1080:	80 81       	ld	r24, Z
    1082:	88 23       	and	r24, r24
    1084:	89 f7       	brne	.-30     	; 0x1068 <M_UART_void_UARTSendString+0x10>
		M_UART_void_UARTSendByte(*strPtr);
		strPtr++;
	}
}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <M_UART_void_UARTSendBytes>:

void M_UART_void_UARTSendBytes(u8* byteArr , u8 Arrlength)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <M_UART_void_UARTSendBytes+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <M_UART_void_UARTSendBytes+0x8>
    1098:	0f 92       	push	r0
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	9c 83       	std	Y+4, r25	; 0x04
    10a0:	8b 83       	std	Y+3, r24	; 0x03
    10a2:	6d 83       	std	Y+5, r22	; 0x05
	for(int i = 0 ; i < Arrlength ; i++ )
    10a4:	1a 82       	std	Y+2, r1	; 0x02
    10a6:	19 82       	std	Y+1, r1	; 0x01
    10a8:	0f c0       	rjmp	.+30     	; 0x10c8 <M_UART_void_UARTSendBytes+0x38>
	{
		M_UART_void_UARTSendByte(byteArr[i]);
    10aa:	29 81       	ldd	r18, Y+1	; 0x01
    10ac:	3a 81       	ldd	r19, Y+2	; 0x02
    10ae:	8b 81       	ldd	r24, Y+3	; 0x03
    10b0:	9c 81       	ldd	r25, Y+4	; 0x04
    10b2:	fc 01       	movw	r30, r24
    10b4:	e2 0f       	add	r30, r18
    10b6:	f3 1f       	adc	r31, r19
    10b8:	80 81       	ld	r24, Z
    10ba:	0e 94 12 08 	call	0x1024	; 0x1024 <M_UART_void_UARTSendByte>
	}
}

void M_UART_void_UARTSendBytes(u8* byteArr , u8 Arrlength)
{
	for(int i = 0 ; i < Arrlength ; i++ )
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	9a 83       	std	Y+2, r25	; 0x02
    10c6:	89 83       	std	Y+1, r24	; 0x01
    10c8:	8d 81       	ldd	r24, Y+5	; 0x05
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	82 17       	cp	r24, r18
    10d4:	93 07       	cpc	r25, r19
    10d6:	4c f3       	brlt	.-46     	; 0x10aa <M_UART_void_UARTSendBytes+0x1a>
	{
		M_UART_void_UARTSendByte(byteArr[i]);
	}
}
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	0f 90       	pop	r0
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <M_UART_void_ReceiveString>:

void M_UART_void_ReceiveString(char *strPtr) {
    10e8:	0f 93       	push	r16
    10ea:	1f 93       	push	r17
    10ec:	df 93       	push	r29
    10ee:	cf 93       	push	r28
    10f0:	00 d0       	rcall	.+0      	; 0x10f2 <M_UART_void_ReceiveString+0xa>
    10f2:	00 d0       	rcall	.+0      	; 0x10f4 <M_UART_void_ReceiveString+0xc>
    10f4:	cd b7       	in	r28, 0x3d	; 61
    10f6:	de b7       	in	r29, 0x3e	; 62
    10f8:	9c 83       	std	Y+4, r25	; 0x04
    10fa:	8b 83       	std	Y+3, r24	; 0x03
	//init_millis(16000000);
	int counter = 0;
    10fc:	1a 82       	std	Y+2, r1	; 0x02
    10fe:	19 82       	std	Y+1, r1	; 0x01
    1100:	1a c0       	rjmp	.+52     	; 0x1136 <M_UART_void_ReceiveString+0x4e>
	//long int time = millis();
	//while (1) {
		//if ((time + 500) < millis())
			//break;
		while (RX_Counter_UART > 0) {
			*(strPtr + counter) = M_UART_u8_receiveByteASynchNonBlocking();
    1102:	29 81       	ldd	r18, Y+1	; 0x01
    1104:	3a 81       	ldd	r19, Y+2	; 0x02
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	8c 01       	movw	r16, r24
    110c:	02 0f       	add	r16, r18
    110e:	13 1f       	adc	r17, r19
    1110:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <M_UART_u8_receiveByteASynchNonBlocking>
    1114:	f8 01       	movw	r30, r16
    1116:	80 83       	st	Z, r24
			if (*(strPtr + counter))
    1118:	29 81       	ldd	r18, Y+1	; 0x01
    111a:	3a 81       	ldd	r19, Y+2	; 0x02
    111c:	8b 81       	ldd	r24, Y+3	; 0x03
    111e:	9c 81       	ldd	r25, Y+4	; 0x04
    1120:	fc 01       	movw	r30, r24
    1122:	e2 0f       	add	r30, r18
    1124:	f3 1f       	adc	r31, r19
    1126:	80 81       	ld	r24, Z
    1128:	88 23       	and	r24, r24
    112a:	29 f0       	breq	.+10     	; 0x1136 <M_UART_void_ReceiveString+0x4e>
				counter++;
    112c:	89 81       	ldd	r24, Y+1	; 0x01
    112e:	9a 81       	ldd	r25, Y+2	; 0x02
    1130:	01 96       	adiw	r24, 0x01	; 1
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	89 83       	std	Y+1, r24	; 0x01
	int counter = 0;
	//long int time = millis();
	//while (1) {
		//if ((time + 500) < millis())
			//break;
		while (RX_Counter_UART > 0) {
    1136:	80 91 86 04 	lds	r24, 0x0486
    113a:	88 23       	and	r24, r24
    113c:	11 f7       	brne	.-60     	; 0x1102 <M_UART_void_ReceiveString+0x1a>
			if (*(strPtr + counter))
				counter++;
		}
	//}

	*(strPtr + counter) = 0;
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	9a 81       	ldd	r25, Y+2	; 0x02
    1142:	2b 81       	ldd	r18, Y+3	; 0x03
    1144:	3c 81       	ldd	r19, Y+4	; 0x04
    1146:	f9 01       	movw	r30, r18
    1148:	e8 0f       	add	r30, r24
    114a:	f9 1f       	adc	r31, r25
    114c:	10 82       	st	Z, r1

}
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	1f 91       	pop	r17
    115c:	0f 91       	pop	r16
    115e:	08 95       	ret

00001160 <M_PORT_voidInit>:
#include "BIT_MATH.h"
#include "Port_int.h"
#include "Port_cfg.h"
#include "Mcu_HW.h"
void M_PORT_voidInit(const Port_Configtype * ConfigPtr)
{
    1160:	df 93       	push	r29
    1162:	cf 93       	push	r28
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	27 97       	sbiw	r28, 0x07	; 7
    116a:	0f b6       	in	r0, 0x3f	; 63
    116c:	f8 94       	cli
    116e:	de bf       	out	0x3e, r29	; 62
    1170:	0f be       	out	0x3f, r0	; 63
    1172:	cd bf       	out	0x3d, r28	; 61
    1174:	9d 83       	std	Y+5, r25	; 0x05
    1176:	8c 83       	std	Y+4, r24	; 0x04
	/* Check the pointer is not equal NULL */
	if(ConfigPtr != NULL )
    1178:	8c 81       	ldd	r24, Y+4	; 0x04
    117a:	9d 81       	ldd	r25, Y+5	; 0x05
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	09 f4       	brne	.+2      	; 0x1182 <M_PORT_voidInit+0x22>
    1180:	bd c3       	rjmp	.+1914   	; 0x18fc <M_PORT_voidInit+0x79c>
	{
		u8 Local_u8Pin;
		u8 Local_u8Port;
		u8 Local_u8Counter;
		for(Local_u8Counter = 0;Local_u8Counter<PORT_PINS_CONFIG_ARR_SIZE;Local_u8Counter++)
    1182:	19 82       	std	Y+1, r1	; 0x01
    1184:	b7 c3       	rjmp	.+1902   	; 0x18f4 <M_PORT_voidInit+0x794>
		{
			Local_u8Pin  = ((ConfigPtr[Local_u8Counter].PinNumber)%10);
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	88 2f       	mov	r24, r24
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	9c 01       	movw	r18, r24
    118e:	22 0f       	add	r18, r18
    1190:	33 1f       	adc	r19, r19
    1192:	22 0f       	add	r18, r18
    1194:	33 1f       	adc	r19, r19
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    1198:	9d 81       	ldd	r25, Y+5	; 0x05
    119a:	fc 01       	movw	r30, r24
    119c:	e2 0f       	add	r30, r18
    119e:	f3 1f       	adc	r31, r19
    11a0:	80 81       	ld	r24, Z
    11a2:	9a e0       	ldi	r25, 0x0A	; 10
    11a4:	69 2f       	mov	r22, r25
    11a6:	0e 94 89 24 	call	0x4912	; 0x4912 <__udivmodqi4>
    11aa:	89 2f       	mov	r24, r25
    11ac:	8b 83       	std	Y+3, r24	; 0x03
			Local_u8Port = ((ConfigPtr[Local_u8Counter].PinNumber)/10);
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	88 2f       	mov	r24, r24
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9c 01       	movw	r18, r24
    11b6:	22 0f       	add	r18, r18
    11b8:	33 1f       	adc	r19, r19
    11ba:	22 0f       	add	r18, r18
    11bc:	33 1f       	adc	r19, r19
    11be:	8c 81       	ldd	r24, Y+4	; 0x04
    11c0:	9d 81       	ldd	r25, Y+5	; 0x05
    11c2:	fc 01       	movw	r30, r24
    11c4:	e2 0f       	add	r30, r18
    11c6:	f3 1f       	adc	r31, r19
    11c8:	80 81       	ld	r24, Z
    11ca:	9a e0       	ldi	r25, 0x0A	; 10
    11cc:	69 2f       	mov	r22, r25
    11ce:	0e 94 89 24 	call	0x4912	; 0x4912 <__udivmodqi4>
    11d2:	8a 83       	std	Y+2, r24	; 0x02
			switch(Local_u8Port)
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	3f 83       	std	Y+7, r19	; 0x07
    11dc:	2e 83       	std	Y+6, r18	; 0x06
    11de:	8e 81       	ldd	r24, Y+6	; 0x06
    11e0:	9f 81       	ldd	r25, Y+7	; 0x07
    11e2:	82 30       	cpi	r24, 0x02	; 2
    11e4:	91 05       	cpc	r25, r1
    11e6:	09 f4       	brne	.+2      	; 0x11ea <M_PORT_voidInit+0x8a>
    11e8:	f3 c0       	rjmp	.+486    	; 0x13d0 <M_PORT_voidInit+0x270>
    11ea:	2e 81       	ldd	r18, Y+6	; 0x06
    11ec:	3f 81       	ldd	r19, Y+7	; 0x07
    11ee:	23 30       	cpi	r18, 0x03	; 3
    11f0:	31 05       	cpc	r19, r1
    11f2:	34 f4       	brge	.+12     	; 0x1200 <M_PORT_voidInit+0xa0>
    11f4:	8e 81       	ldd	r24, Y+6	; 0x06
    11f6:	9f 81       	ldd	r25, Y+7	; 0x07
    11f8:	81 30       	cpi	r24, 0x01	; 1
    11fa:	91 05       	cpc	r25, r1
    11fc:	71 f0       	breq	.+28     	; 0x121a <M_PORT_voidInit+0xba>
    11fe:	77 c3       	rjmp	.+1774   	; 0x18ee <M_PORT_voidInit+0x78e>
    1200:	2e 81       	ldd	r18, Y+6	; 0x06
    1202:	3f 81       	ldd	r19, Y+7	; 0x07
    1204:	23 30       	cpi	r18, 0x03	; 3
    1206:	31 05       	cpc	r19, r1
    1208:	09 f4       	brne	.+2      	; 0x120c <M_PORT_voidInit+0xac>
    120a:	bd c1       	rjmp	.+890    	; 0x1586 <M_PORT_voidInit+0x426>
    120c:	8e 81       	ldd	r24, Y+6	; 0x06
    120e:	9f 81       	ldd	r25, Y+7	; 0x07
    1210:	84 30       	cpi	r24, 0x04	; 4
    1212:	91 05       	cpc	r25, r1
    1214:	09 f4       	brne	.+2      	; 0x1218 <M_PORT_voidInit+0xb8>
    1216:	92 c2       	rjmp	.+1316   	; 0x173c <M_PORT_voidInit+0x5dc>
    1218:	6a c3       	rjmp	.+1748   	; 0x18ee <M_PORT_voidInit+0x78e>
			{
			case PORTA :
				/* Set the direction of pin */
				if(ConfigPtr[Local_u8Counter].PinDirection == PORT_OUTPUT)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	88 2f       	mov	r24, r24
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	9c 01       	movw	r18, r24
    1222:	22 0f       	add	r18, r18
    1224:	33 1f       	adc	r19, r19
    1226:	22 0f       	add	r18, r18
    1228:	33 1f       	adc	r19, r19
    122a:	8c 81       	ldd	r24, Y+4	; 0x04
    122c:	9d 81       	ldd	r25, Y+5	; 0x05
    122e:	fc 01       	movw	r30, r24
    1230:	e2 0f       	add	r30, r18
    1232:	f3 1f       	adc	r31, r19
    1234:	82 81       	ldd	r24, Z+2	; 0x02
    1236:	81 30       	cpi	r24, 0x01	; 1
    1238:	09 f0       	breq	.+2      	; 0x123c <M_PORT_voidInit+0xdc>
    123a:	5c c0       	rjmp	.+184    	; 0x12f4 <M_PORT_voidInit+0x194>
				{
					/* Set the output direction by set the bits in DDRA register */
					SET_BIT(DDRA_REG,Local_u8Pin);
    123c:	aa e3       	ldi	r26, 0x3A	; 58
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	ea e3       	ldi	r30, 0x3A	; 58
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	48 2f       	mov	r20, r24
    1248:	8b 81       	ldd	r24, Y+3	; 0x03
    124a:	28 2f       	mov	r18, r24
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <M_PORT_voidInit+0xf8>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	2a 95       	dec	r18
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <M_PORT_voidInit+0xf4>
    125c:	84 2b       	or	r24, r20
    125e:	8c 93       	st	X, r24
					/* Set the Initial Value in PORTA register */
					if(ConfigPtr[Local_u8Counter].InitialValue == PORT_HIGH)
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	88 2f       	mov	r24, r24
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	9c 01       	movw	r18, r24
    1268:	22 0f       	add	r18, r18
    126a:	33 1f       	adc	r19, r19
    126c:	22 0f       	add	r18, r18
    126e:	33 1f       	adc	r19, r19
    1270:	8c 81       	ldd	r24, Y+4	; 0x04
    1272:	9d 81       	ldd	r25, Y+5	; 0x05
    1274:	fc 01       	movw	r30, r24
    1276:	e2 0f       	add	r30, r18
    1278:	f3 1f       	adc	r31, r19
    127a:	81 81       	ldd	r24, Z+1	; 0x01
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	a1 f4       	brne	.+40     	; 0x12a8 <M_PORT_voidInit+0x148>
					{
						SET_BIT(PORTA_REG,Local_u8Pin);
    1280:	ab e3       	ldi	r26, 0x3B	; 59
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	eb e3       	ldi	r30, 0x3B	; 59
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <M_PORT_voidInit+0x13e>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <M_PORT_voidInit+0x13a>
    12a2:	84 2b       	or	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	23 c3       	rjmp	.+1606   	; 0x18ee <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InitialValue == PORT_LOW)
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	88 2f       	mov	r24, r24
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9c 01       	movw	r18, r24
    12b0:	22 0f       	add	r18, r18
    12b2:	33 1f       	adc	r19, r19
    12b4:	22 0f       	add	r18, r18
    12b6:	33 1f       	adc	r19, r19
    12b8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ba:	9d 81       	ldd	r25, Y+5	; 0x05
    12bc:	fc 01       	movw	r30, r24
    12be:	e2 0f       	add	r30, r18
    12c0:	f3 1f       	adc	r31, r19
    12c2:	81 81       	ldd	r24, Z+1	; 0x01
    12c4:	88 23       	and	r24, r24
    12c6:	09 f0       	breq	.+2      	; 0x12ca <M_PORT_voidInit+0x16a>
    12c8:	12 c3       	rjmp	.+1572   	; 0x18ee <M_PORT_voidInit+0x78e>
					{
						CLR_BIT(PORTA_REG,Local_u8Pin);
    12ca:	ab e3       	ldi	r26, 0x3B	; 59
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	eb e3       	ldi	r30, 0x3B	; 59
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	28 2f       	mov	r18, r24
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	81 e0       	ldi	r24, 0x01	; 1
    12de:	90 e0       	ldi	r25, 0x00	; 0
    12e0:	02 2e       	mov	r0, r18
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <M_PORT_voidInit+0x188>
    12e4:	88 0f       	add	r24, r24
    12e6:	99 1f       	adc	r25, r25
    12e8:	0a 94       	dec	r0
    12ea:	e2 f7       	brpl	.-8      	; 0x12e4 <M_PORT_voidInit+0x184>
    12ec:	80 95       	com	r24
    12ee:	84 23       	and	r24, r20
    12f0:	8c 93       	st	X, r24
    12f2:	fd c2       	rjmp	.+1530   	; 0x18ee <M_PORT_voidInit+0x78e>
					else
					{
						/* Error */
					}
				}
				else if(ConfigPtr[Local_u8Counter].PinDirection == PORT_INPUT)
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	9c 01       	movw	r18, r24
    12fc:	22 0f       	add	r18, r18
    12fe:	33 1f       	adc	r19, r19
    1300:	22 0f       	add	r18, r18
    1302:	33 1f       	adc	r19, r19
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	fc 01       	movw	r30, r24
    130a:	e2 0f       	add	r30, r18
    130c:	f3 1f       	adc	r31, r19
    130e:	82 81       	ldd	r24, Z+2	; 0x02
    1310:	88 23       	and	r24, r24
    1312:	09 f0       	breq	.+2      	; 0x1316 <M_PORT_voidInit+0x1b6>
    1314:	ec c2       	rjmp	.+1496   	; 0x18ee <M_PORT_voidInit+0x78e>
				{
					/* Set the input direction by clear the bits in DDRA register */
					CLR_BIT(DDRA_REG,Local_u8Pin);
    1316:	aa e3       	ldi	r26, 0x3A	; 58
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	ea e3       	ldi	r30, 0x3A	; 58
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	48 2f       	mov	r20, r24
    1322:	8b 81       	ldd	r24, Y+3	; 0x03
    1324:	28 2f       	mov	r18, r24
    1326:	30 e0       	ldi	r19, 0x00	; 0
    1328:	81 e0       	ldi	r24, 0x01	; 1
    132a:	90 e0       	ldi	r25, 0x00	; 0
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <M_PORT_voidInit+0x1d2>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	2a 95       	dec	r18
    1334:	e2 f7       	brpl	.-8      	; 0x132e <M_PORT_voidInit+0x1ce>
    1336:	80 95       	com	r24
    1338:	84 23       	and	r24, r20
    133a:	8c 93       	st	X, r24
					/* Set the internal attach in PORTA register */
					if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_FLOATING)
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	9c 01       	movw	r18, r24
    1344:	22 0f       	add	r18, r18
    1346:	33 1f       	adc	r19, r19
    1348:	22 0f       	add	r18, r18
    134a:	33 1f       	adc	r19, r19
    134c:	8c 81       	ldd	r24, Y+4	; 0x04
    134e:	9d 81       	ldd	r25, Y+5	; 0x05
    1350:	fc 01       	movw	r30, r24
    1352:	e2 0f       	add	r30, r18
    1354:	f3 1f       	adc	r31, r19
    1356:	83 81       	ldd	r24, Z+3	; 0x03
    1358:	88 23       	and	r24, r24
    135a:	a9 f4       	brne	.+42     	; 0x1386 <M_PORT_voidInit+0x226>
					{
						CLR_BIT(PORTA_REG,Local_u8Pin);
    135c:	ab e3       	ldi	r26, 0x3B	; 59
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	eb e3       	ldi	r30, 0x3B	; 59
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	48 2f       	mov	r20, r24
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	28 2f       	mov	r18, r24
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 2e       	mov	r0, r18
    1374:	02 c0       	rjmp	.+4      	; 0x137a <M_PORT_voidInit+0x21a>
    1376:	88 0f       	add	r24, r24
    1378:	99 1f       	adc	r25, r25
    137a:	0a 94       	dec	r0
    137c:	e2 f7       	brpl	.-8      	; 0x1376 <M_PORT_voidInit+0x216>
    137e:	80 95       	com	r24
    1380:	84 23       	and	r24, r20
    1382:	8c 93       	st	X, r24
    1384:	b4 c2       	rjmp	.+1384   	; 0x18ee <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_PULLUP)
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	88 2f       	mov	r24, r24
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	9c 01       	movw	r18, r24
    138e:	22 0f       	add	r18, r18
    1390:	33 1f       	adc	r19, r19
    1392:	22 0f       	add	r18, r18
    1394:	33 1f       	adc	r19, r19
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	9d 81       	ldd	r25, Y+5	; 0x05
    139a:	fc 01       	movw	r30, r24
    139c:	e2 0f       	add	r30, r18
    139e:	f3 1f       	adc	r31, r19
    13a0:	83 81       	ldd	r24, Z+3	; 0x03
    13a2:	81 30       	cpi	r24, 0x01	; 1
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <M_PORT_voidInit+0x248>
    13a6:	a3 c2       	rjmp	.+1350   	; 0x18ee <M_PORT_voidInit+0x78e>
					{
						SET_BIT(PORTA_REG,Local_u8Pin);
    13a8:	ab e3       	ldi	r26, 0x3B	; 59
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	eb e3       	ldi	r30, 0x3B	; 59
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <M_PORT_voidInit+0x266>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <M_PORT_voidInit+0x262>
    13ca:	84 2b       	or	r24, r20
    13cc:	8c 93       	st	X, r24
    13ce:	8f c2       	rjmp	.+1310   	; 0x18ee <M_PORT_voidInit+0x78e>
					/* Error */
				}
				break;
			case PORTB :
				/* Set the direction of the pin */
				if(ConfigPtr[Local_u8Counter].PinDirection == PORT_OUTPUT)
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	88 2f       	mov	r24, r24
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	9c 01       	movw	r18, r24
    13d8:	22 0f       	add	r18, r18
    13da:	33 1f       	adc	r19, r19
    13dc:	22 0f       	add	r18, r18
    13de:	33 1f       	adc	r19, r19
    13e0:	8c 81       	ldd	r24, Y+4	; 0x04
    13e2:	9d 81       	ldd	r25, Y+5	; 0x05
    13e4:	fc 01       	movw	r30, r24
    13e6:	e2 0f       	add	r30, r18
    13e8:	f3 1f       	adc	r31, r19
    13ea:	82 81       	ldd	r24, Z+2	; 0x02
    13ec:	81 30       	cpi	r24, 0x01	; 1
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <M_PORT_voidInit+0x292>
    13f0:	5c c0       	rjmp	.+184    	; 0x14aa <M_PORT_voidInit+0x34a>
				{
					/* Set the output direction by set the bits in DDRB register */
					SET_BIT(DDRB_REG,Local_u8Pin);
    13f2:	a7 e3       	ldi	r26, 0x37	; 55
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e7 e3       	ldi	r30, 0x37	; 55
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	48 2f       	mov	r20, r24
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	28 2f       	mov	r18, r24
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	02 c0       	rjmp	.+4      	; 0x140e <M_PORT_voidInit+0x2ae>
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	2a 95       	dec	r18
    1410:	e2 f7       	brpl	.-8      	; 0x140a <M_PORT_voidInit+0x2aa>
    1412:	84 2b       	or	r24, r20
    1414:	8c 93       	st	X, r24
					/* Set the Initial Value in PORTB register */
					if(ConfigPtr[Local_u8Counter].InitialValue == PORT_HIGH)
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	88 2f       	mov	r24, r24
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	9c 01       	movw	r18, r24
    141e:	22 0f       	add	r18, r18
    1420:	33 1f       	adc	r19, r19
    1422:	22 0f       	add	r18, r18
    1424:	33 1f       	adc	r19, r19
    1426:	8c 81       	ldd	r24, Y+4	; 0x04
    1428:	9d 81       	ldd	r25, Y+5	; 0x05
    142a:	fc 01       	movw	r30, r24
    142c:	e2 0f       	add	r30, r18
    142e:	f3 1f       	adc	r31, r19
    1430:	81 81       	ldd	r24, Z+1	; 0x01
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	a1 f4       	brne	.+40     	; 0x145e <M_PORT_voidInit+0x2fe>
					{
						SET_BIT(PORTB_REG,Local_u8Pin);
    1436:	a8 e3       	ldi	r26, 0x38	; 56
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e8 e3       	ldi	r30, 0x38	; 56
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <M_PORT_voidInit+0x2f4>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <M_PORT_voidInit+0x2f0>
    1458:	84 2b       	or	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	48 c2       	rjmp	.+1168   	; 0x18ee <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InitialValue == PORT_LOW)
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	88 2f       	mov	r24, r24
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	9c 01       	movw	r18, r24
    1466:	22 0f       	add	r18, r18
    1468:	33 1f       	adc	r19, r19
    146a:	22 0f       	add	r18, r18
    146c:	33 1f       	adc	r19, r19
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	9d 81       	ldd	r25, Y+5	; 0x05
    1472:	fc 01       	movw	r30, r24
    1474:	e2 0f       	add	r30, r18
    1476:	f3 1f       	adc	r31, r19
    1478:	81 81       	ldd	r24, Z+1	; 0x01
    147a:	88 23       	and	r24, r24
    147c:	09 f0       	breq	.+2      	; 0x1480 <M_PORT_voidInit+0x320>
    147e:	37 c2       	rjmp	.+1134   	; 0x18ee <M_PORT_voidInit+0x78e>
					{
						CLR_BIT(PORTB_REG,Local_u8Pin);
    1480:	a8 e3       	ldi	r26, 0x38	; 56
    1482:	b0 e0       	ldi	r27, 0x00	; 0
    1484:	e8 e3       	ldi	r30, 0x38	; 56
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	80 81       	ld	r24, Z
    148a:	48 2f       	mov	r20, r24
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 2e       	mov	r0, r18
    1498:	02 c0       	rjmp	.+4      	; 0x149e <M_PORT_voidInit+0x33e>
    149a:	88 0f       	add	r24, r24
    149c:	99 1f       	adc	r25, r25
    149e:	0a 94       	dec	r0
    14a0:	e2 f7       	brpl	.-8      	; 0x149a <M_PORT_voidInit+0x33a>
    14a2:	80 95       	com	r24
    14a4:	84 23       	and	r24, r20
    14a6:	8c 93       	st	X, r24
    14a8:	22 c2       	rjmp	.+1092   	; 0x18ee <M_PORT_voidInit+0x78e>
					else
					{
						/* Error */
					}
				}
				else if(ConfigPtr[Local_u8Counter].PinDirection == PORT_INPUT)
    14aa:	89 81       	ldd	r24, Y+1	; 0x01
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	9c 01       	movw	r18, r24
    14b2:	22 0f       	add	r18, r18
    14b4:	33 1f       	adc	r19, r19
    14b6:	22 0f       	add	r18, r18
    14b8:	33 1f       	adc	r19, r19
    14ba:	8c 81       	ldd	r24, Y+4	; 0x04
    14bc:	9d 81       	ldd	r25, Y+5	; 0x05
    14be:	fc 01       	movw	r30, r24
    14c0:	e2 0f       	add	r30, r18
    14c2:	f3 1f       	adc	r31, r19
    14c4:	82 81       	ldd	r24, Z+2	; 0x02
    14c6:	88 23       	and	r24, r24
    14c8:	09 f0       	breq	.+2      	; 0x14cc <M_PORT_voidInit+0x36c>
    14ca:	11 c2       	rjmp	.+1058   	; 0x18ee <M_PORT_voidInit+0x78e>
				{
					/* Set the input direction by clear the bits in DDRB register */
					CLR_BIT(DDRB_REG,Local_u8Pin);
    14cc:	a7 e3       	ldi	r26, 0x37	; 55
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	e7 e3       	ldi	r30, 0x37	; 55
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	48 2f       	mov	r20, r24
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	28 2f       	mov	r18, r24
    14dc:	30 e0       	ldi	r19, 0x00	; 0
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	90 e0       	ldi	r25, 0x00	; 0
    14e2:	02 c0       	rjmp	.+4      	; 0x14e8 <M_PORT_voidInit+0x388>
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	2a 95       	dec	r18
    14ea:	e2 f7       	brpl	.-8      	; 0x14e4 <M_PORT_voidInit+0x384>
    14ec:	80 95       	com	r24
    14ee:	84 23       	and	r24, r20
    14f0:	8c 93       	st	X, r24
					/* Set the internal attach in PORTB register */
					if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_FLOATING)
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	88 2f       	mov	r24, r24
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9c 01       	movw	r18, r24
    14fa:	22 0f       	add	r18, r18
    14fc:	33 1f       	adc	r19, r19
    14fe:	22 0f       	add	r18, r18
    1500:	33 1f       	adc	r19, r19
    1502:	8c 81       	ldd	r24, Y+4	; 0x04
    1504:	9d 81       	ldd	r25, Y+5	; 0x05
    1506:	fc 01       	movw	r30, r24
    1508:	e2 0f       	add	r30, r18
    150a:	f3 1f       	adc	r31, r19
    150c:	83 81       	ldd	r24, Z+3	; 0x03
    150e:	88 23       	and	r24, r24
    1510:	a9 f4       	brne	.+42     	; 0x153c <M_PORT_voidInit+0x3dc>
					{
						CLR_BIT(PORTB_REG,Local_u8Pin);
    1512:	a8 e3       	ldi	r26, 0x38	; 56
    1514:	b0 e0       	ldi	r27, 0x00	; 0
    1516:	e8 e3       	ldi	r30, 0x38	; 56
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	80 81       	ld	r24, Z
    151c:	48 2f       	mov	r20, r24
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	28 2f       	mov	r18, r24
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	02 2e       	mov	r0, r18
    152a:	02 c0       	rjmp	.+4      	; 0x1530 <M_PORT_voidInit+0x3d0>
    152c:	88 0f       	add	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	0a 94       	dec	r0
    1532:	e2 f7       	brpl	.-8      	; 0x152c <M_PORT_voidInit+0x3cc>
    1534:	80 95       	com	r24
    1536:	84 23       	and	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	d9 c1       	rjmp	.+946    	; 0x18ee <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_PULLUP)
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	9c 01       	movw	r18, r24
    1544:	22 0f       	add	r18, r18
    1546:	33 1f       	adc	r19, r19
    1548:	22 0f       	add	r18, r18
    154a:	33 1f       	adc	r19, r19
    154c:	8c 81       	ldd	r24, Y+4	; 0x04
    154e:	9d 81       	ldd	r25, Y+5	; 0x05
    1550:	fc 01       	movw	r30, r24
    1552:	e2 0f       	add	r30, r18
    1554:	f3 1f       	adc	r31, r19
    1556:	83 81       	ldd	r24, Z+3	; 0x03
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	09 f0       	breq	.+2      	; 0x155e <M_PORT_voidInit+0x3fe>
    155c:	c8 c1       	rjmp	.+912    	; 0x18ee <M_PORT_voidInit+0x78e>
					{
						SET_BIT(PORTB_REG,Local_u8Pin);
    155e:	a8 e3       	ldi	r26, 0x38	; 56
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	e8 e3       	ldi	r30, 0x38	; 56
    1564:	f0 e0       	ldi	r31, 0x00	; 0
    1566:	80 81       	ld	r24, Z
    1568:	48 2f       	mov	r20, r24
    156a:	8b 81       	ldd	r24, Y+3	; 0x03
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	02 2e       	mov	r0, r18
    1576:	02 c0       	rjmp	.+4      	; 0x157c <M_PORT_voidInit+0x41c>
    1578:	88 0f       	add	r24, r24
    157a:	99 1f       	adc	r25, r25
    157c:	0a 94       	dec	r0
    157e:	e2 f7       	brpl	.-8      	; 0x1578 <M_PORT_voidInit+0x418>
    1580:	84 2b       	or	r24, r20
    1582:	8c 93       	st	X, r24
    1584:	b4 c1       	rjmp	.+872    	; 0x18ee <M_PORT_voidInit+0x78e>
					/* Error */
				}
				break;
			case PORTC :
				/* Set the direction of the pin */
				if(ConfigPtr[Local_u8Counter].PinDirection == PORT_OUTPUT)
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	9c 01       	movw	r18, r24
    158e:	22 0f       	add	r18, r18
    1590:	33 1f       	adc	r19, r19
    1592:	22 0f       	add	r18, r18
    1594:	33 1f       	adc	r19, r19
    1596:	8c 81       	ldd	r24, Y+4	; 0x04
    1598:	9d 81       	ldd	r25, Y+5	; 0x05
    159a:	fc 01       	movw	r30, r24
    159c:	e2 0f       	add	r30, r18
    159e:	f3 1f       	adc	r31, r19
    15a0:	82 81       	ldd	r24, Z+2	; 0x02
    15a2:	81 30       	cpi	r24, 0x01	; 1
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <M_PORT_voidInit+0x448>
    15a6:	5c c0       	rjmp	.+184    	; 0x1660 <M_PORT_voidInit+0x500>
				{
					/* Set the output direction by set the bits in DDRC register */
					SET_BIT(DDRC_REG,Local_u8Pin);
    15a8:	a4 e3       	ldi	r26, 0x34	; 52
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e4 e3       	ldi	r30, 0x34	; 52
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <M_PORT_voidInit+0x464>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	2a 95       	dec	r18
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <M_PORT_voidInit+0x460>
    15c8:	84 2b       	or	r24, r20
    15ca:	8c 93       	st	X, r24
					/* Set the Initial Value in PORTC register */
					if(ConfigPtr[Local_u8Counter].InitialValue == PORT_HIGH)
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	9c 01       	movw	r18, r24
    15d4:	22 0f       	add	r18, r18
    15d6:	33 1f       	adc	r19, r19
    15d8:	22 0f       	add	r18, r18
    15da:	33 1f       	adc	r19, r19
    15dc:	8c 81       	ldd	r24, Y+4	; 0x04
    15de:	9d 81       	ldd	r25, Y+5	; 0x05
    15e0:	fc 01       	movw	r30, r24
    15e2:	e2 0f       	add	r30, r18
    15e4:	f3 1f       	adc	r31, r19
    15e6:	81 81       	ldd	r24, Z+1	; 0x01
    15e8:	81 30       	cpi	r24, 0x01	; 1
    15ea:	a1 f4       	brne	.+40     	; 0x1614 <M_PORT_voidInit+0x4b4>
					{
						SET_BIT(PORTC_REG,Local_u8Pin);
    15ec:	a5 e3       	ldi	r26, 0x35	; 53
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e5 e3       	ldi	r30, 0x35	; 53
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	48 2f       	mov	r20, r24
    15f8:	8b 81       	ldd	r24, Y+3	; 0x03
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	02 2e       	mov	r0, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <M_PORT_voidInit+0x4aa>
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	0a 94       	dec	r0
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <M_PORT_voidInit+0x4a6>
    160e:	84 2b       	or	r24, r20
    1610:	8c 93       	st	X, r24
    1612:	6d c1       	rjmp	.+730    	; 0x18ee <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InitialValue == PORT_LOW)
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	88 2f       	mov	r24, r24
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	9c 01       	movw	r18, r24
    161c:	22 0f       	add	r18, r18
    161e:	33 1f       	adc	r19, r19
    1620:	22 0f       	add	r18, r18
    1622:	33 1f       	adc	r19, r19
    1624:	8c 81       	ldd	r24, Y+4	; 0x04
    1626:	9d 81       	ldd	r25, Y+5	; 0x05
    1628:	fc 01       	movw	r30, r24
    162a:	e2 0f       	add	r30, r18
    162c:	f3 1f       	adc	r31, r19
    162e:	81 81       	ldd	r24, Z+1	; 0x01
    1630:	88 23       	and	r24, r24
    1632:	09 f0       	breq	.+2      	; 0x1636 <M_PORT_voidInit+0x4d6>
    1634:	5c c1       	rjmp	.+696    	; 0x18ee <M_PORT_voidInit+0x78e>
					{
						CLR_BIT(PORTC_REG,Local_u8Pin);
    1636:	a5 e3       	ldi	r26, 0x35	; 53
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e5 e3       	ldi	r30, 0x35	; 53
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	48 2f       	mov	r20, r24
    1642:	8b 81       	ldd	r24, Y+3	; 0x03
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 2e       	mov	r0, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <M_PORT_voidInit+0x4f4>
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	0a 94       	dec	r0
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <M_PORT_voidInit+0x4f0>
    1658:	80 95       	com	r24
    165a:	84 23       	and	r24, r20
    165c:	8c 93       	st	X, r24
    165e:	47 c1       	rjmp	.+654    	; 0x18ee <M_PORT_voidInit+0x78e>
					else
					{
						/* Error */
					}
				}
				else if(ConfigPtr[Local_u8Counter].PinDirection == PORT_INPUT)
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	88 2f       	mov	r24, r24
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	9c 01       	movw	r18, r24
    1668:	22 0f       	add	r18, r18
    166a:	33 1f       	adc	r19, r19
    166c:	22 0f       	add	r18, r18
    166e:	33 1f       	adc	r19, r19
    1670:	8c 81       	ldd	r24, Y+4	; 0x04
    1672:	9d 81       	ldd	r25, Y+5	; 0x05
    1674:	fc 01       	movw	r30, r24
    1676:	e2 0f       	add	r30, r18
    1678:	f3 1f       	adc	r31, r19
    167a:	82 81       	ldd	r24, Z+2	; 0x02
    167c:	88 23       	and	r24, r24
    167e:	09 f0       	breq	.+2      	; 0x1682 <M_PORT_voidInit+0x522>
    1680:	36 c1       	rjmp	.+620    	; 0x18ee <M_PORT_voidInit+0x78e>
				{
					/* Set the input direction by clear the bits in DDRC register */
					CLR_BIT(DDRC_REG,Local_u8Pin);
    1682:	a4 e3       	ldi	r26, 0x34	; 52
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	e4 e3       	ldi	r30, 0x34	; 52
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	48 2f       	mov	r20, r24
    168e:	8b 81       	ldd	r24, Y+3	; 0x03
    1690:	28 2f       	mov	r18, r24
    1692:	30 e0       	ldi	r19, 0x00	; 0
    1694:	81 e0       	ldi	r24, 0x01	; 1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	02 c0       	rjmp	.+4      	; 0x169e <M_PORT_voidInit+0x53e>
    169a:	88 0f       	add	r24, r24
    169c:	99 1f       	adc	r25, r25
    169e:	2a 95       	dec	r18
    16a0:	e2 f7       	brpl	.-8      	; 0x169a <M_PORT_voidInit+0x53a>
    16a2:	80 95       	com	r24
    16a4:	84 23       	and	r24, r20
    16a6:	8c 93       	st	X, r24
					/* Set the internal attach in PORTB register */
					if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_FLOATING)
    16a8:	89 81       	ldd	r24, Y+1	; 0x01
    16aa:	88 2f       	mov	r24, r24
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	9c 01       	movw	r18, r24
    16b0:	22 0f       	add	r18, r18
    16b2:	33 1f       	adc	r19, r19
    16b4:	22 0f       	add	r18, r18
    16b6:	33 1f       	adc	r19, r19
    16b8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ba:	9d 81       	ldd	r25, Y+5	; 0x05
    16bc:	fc 01       	movw	r30, r24
    16be:	e2 0f       	add	r30, r18
    16c0:	f3 1f       	adc	r31, r19
    16c2:	83 81       	ldd	r24, Z+3	; 0x03
    16c4:	88 23       	and	r24, r24
    16c6:	a9 f4       	brne	.+42     	; 0x16f2 <M_PORT_voidInit+0x592>
					{
						CLR_BIT(PORTC_REG,Local_u8Pin);
    16c8:	a5 e3       	ldi	r26, 0x35	; 53
    16ca:	b0 e0       	ldi	r27, 0x00	; 0
    16cc:	e5 e3       	ldi	r30, 0x35	; 53
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	28 2f       	mov	r18, r24
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	02 2e       	mov	r0, r18
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <M_PORT_voidInit+0x586>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	0a 94       	dec	r0
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <M_PORT_voidInit+0x582>
    16ea:	80 95       	com	r24
    16ec:	84 23       	and	r24, r20
    16ee:	8c 93       	st	X, r24
    16f0:	fe c0       	rjmp	.+508    	; 0x18ee <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_PULLUP)
    16f2:	89 81       	ldd	r24, Y+1	; 0x01
    16f4:	88 2f       	mov	r24, r24
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9c 01       	movw	r18, r24
    16fa:	22 0f       	add	r18, r18
    16fc:	33 1f       	adc	r19, r19
    16fe:	22 0f       	add	r18, r18
    1700:	33 1f       	adc	r19, r19
    1702:	8c 81       	ldd	r24, Y+4	; 0x04
    1704:	9d 81       	ldd	r25, Y+5	; 0x05
    1706:	fc 01       	movw	r30, r24
    1708:	e2 0f       	add	r30, r18
    170a:	f3 1f       	adc	r31, r19
    170c:	83 81       	ldd	r24, Z+3	; 0x03
    170e:	81 30       	cpi	r24, 0x01	; 1
    1710:	09 f0       	breq	.+2      	; 0x1714 <M_PORT_voidInit+0x5b4>
    1712:	ed c0       	rjmp	.+474    	; 0x18ee <M_PORT_voidInit+0x78e>
					{
						SET_BIT(PORTC_REG,Local_u8Pin);
    1714:	a5 e3       	ldi	r26, 0x35	; 53
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e5 e3       	ldi	r30, 0x35	; 53
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	48 2f       	mov	r20, r24
    1720:	8b 81       	ldd	r24, Y+3	; 0x03
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	02 2e       	mov	r0, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <M_PORT_voidInit+0x5d2>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	0a 94       	dec	r0
    1734:	e2 f7       	brpl	.-8      	; 0x172e <M_PORT_voidInit+0x5ce>
    1736:	84 2b       	or	r24, r20
    1738:	8c 93       	st	X, r24
    173a:	d9 c0       	rjmp	.+434    	; 0x18ee <M_PORT_voidInit+0x78e>
					/* Error */
				}
				break;
			case PORTD :
				/* Set the direction of the pin */
				if(ConfigPtr[Local_u8Counter].PinDirection == PORT_OUTPUT)
    173c:	89 81       	ldd	r24, Y+1	; 0x01
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	9c 01       	movw	r18, r24
    1744:	22 0f       	add	r18, r18
    1746:	33 1f       	adc	r19, r19
    1748:	22 0f       	add	r18, r18
    174a:	33 1f       	adc	r19, r19
    174c:	8c 81       	ldd	r24, Y+4	; 0x04
    174e:	9d 81       	ldd	r25, Y+5	; 0x05
    1750:	fc 01       	movw	r30, r24
    1752:	e2 0f       	add	r30, r18
    1754:	f3 1f       	adc	r31, r19
    1756:	82 81       	ldd	r24, Z+2	; 0x02
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	09 f0       	breq	.+2      	; 0x175e <M_PORT_voidInit+0x5fe>
    175c:	5c c0       	rjmp	.+184    	; 0x1816 <M_PORT_voidInit+0x6b6>
				{
					/* Set the output direction by set the bits in DDRD register */
					SET_BIT(DDRD_REG,Local_u8Pin);
    175e:	a1 e3       	ldi	r26, 0x31	; 49
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	e1 e3       	ldi	r30, 0x31	; 49
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	48 2f       	mov	r20, r24
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 c0       	rjmp	.+4      	; 0x177a <M_PORT_voidInit+0x61a>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	2a 95       	dec	r18
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <M_PORT_voidInit+0x616>
    177e:	84 2b       	or	r24, r20
    1780:	8c 93       	st	X, r24
					/* Set the Initial Value in PORTD register */
					if(ConfigPtr[Local_u8Counter].InitialValue == PORT_HIGH)
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	88 2f       	mov	r24, r24
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	9c 01       	movw	r18, r24
    178a:	22 0f       	add	r18, r18
    178c:	33 1f       	adc	r19, r19
    178e:	22 0f       	add	r18, r18
    1790:	33 1f       	adc	r19, r19
    1792:	8c 81       	ldd	r24, Y+4	; 0x04
    1794:	9d 81       	ldd	r25, Y+5	; 0x05
    1796:	fc 01       	movw	r30, r24
    1798:	e2 0f       	add	r30, r18
    179a:	f3 1f       	adc	r31, r19
    179c:	81 81       	ldd	r24, Z+1	; 0x01
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	a1 f4       	brne	.+40     	; 0x17ca <M_PORT_voidInit+0x66a>
					{
						SET_BIT(PORTD_REG,Local_u8Pin);
    17a2:	a2 e3       	ldi	r26, 0x32	; 50
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e2 e3       	ldi	r30, 0x32	; 50
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	48 2f       	mov	r20, r24
    17ae:	8b 81       	ldd	r24, Y+3	; 0x03
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 2e       	mov	r0, r18
    17ba:	02 c0       	rjmp	.+4      	; 0x17c0 <M_PORT_voidInit+0x660>
    17bc:	88 0f       	add	r24, r24
    17be:	99 1f       	adc	r25, r25
    17c0:	0a 94       	dec	r0
    17c2:	e2 f7       	brpl	.-8      	; 0x17bc <M_PORT_voidInit+0x65c>
    17c4:	84 2b       	or	r24, r20
    17c6:	8c 93       	st	X, r24
    17c8:	92 c0       	rjmp	.+292    	; 0x18ee <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InitialValue == PORT_LOW)
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	9c 01       	movw	r18, r24
    17d2:	22 0f       	add	r18, r18
    17d4:	33 1f       	adc	r19, r19
    17d6:	22 0f       	add	r18, r18
    17d8:	33 1f       	adc	r19, r19
    17da:	8c 81       	ldd	r24, Y+4	; 0x04
    17dc:	9d 81       	ldd	r25, Y+5	; 0x05
    17de:	fc 01       	movw	r30, r24
    17e0:	e2 0f       	add	r30, r18
    17e2:	f3 1f       	adc	r31, r19
    17e4:	81 81       	ldd	r24, Z+1	; 0x01
    17e6:	88 23       	and	r24, r24
    17e8:	09 f0       	breq	.+2      	; 0x17ec <M_PORT_voidInit+0x68c>
    17ea:	81 c0       	rjmp	.+258    	; 0x18ee <M_PORT_voidInit+0x78e>
					{
						CLR_BIT(PORTD_REG,Local_u8Pin);
    17ec:	a2 e3       	ldi	r26, 0x32	; 50
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e2 e3       	ldi	r30, 0x32	; 50
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8b 81       	ldd	r24, Y+3	; 0x03
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <M_PORT_voidInit+0x6aa>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <M_PORT_voidInit+0x6a6>
    180e:	80 95       	com	r24
    1810:	84 23       	and	r24, r20
    1812:	8c 93       	st	X, r24
    1814:	6c c0       	rjmp	.+216    	; 0x18ee <M_PORT_voidInit+0x78e>
					else
					{
						/* Error */
					}
				}
				else if(ConfigPtr[Local_u8Counter].PinDirection == PORT_INPUT)
    1816:	89 81       	ldd	r24, Y+1	; 0x01
    1818:	88 2f       	mov	r24, r24
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	9c 01       	movw	r18, r24
    181e:	22 0f       	add	r18, r18
    1820:	33 1f       	adc	r19, r19
    1822:	22 0f       	add	r18, r18
    1824:	33 1f       	adc	r19, r19
    1826:	8c 81       	ldd	r24, Y+4	; 0x04
    1828:	9d 81       	ldd	r25, Y+5	; 0x05
    182a:	fc 01       	movw	r30, r24
    182c:	e2 0f       	add	r30, r18
    182e:	f3 1f       	adc	r31, r19
    1830:	82 81       	ldd	r24, Z+2	; 0x02
    1832:	88 23       	and	r24, r24
    1834:	09 f0       	breq	.+2      	; 0x1838 <M_PORT_voidInit+0x6d8>
    1836:	5b c0       	rjmp	.+182    	; 0x18ee <M_PORT_voidInit+0x78e>
				{
					/* Set the input direction by clear the bits in DDRD register */
					CLR_BIT(DDRD_REG,Local_u8Pin);
    1838:	a1 e3       	ldi	r26, 0x31	; 49
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e1 e3       	ldi	r30, 0x31	; 49
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	48 2f       	mov	r20, r24
    1844:	8b 81       	ldd	r24, Y+3	; 0x03
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <M_PORT_voidInit+0x6f4>
    1850:	88 0f       	add	r24, r24
    1852:	99 1f       	adc	r25, r25
    1854:	2a 95       	dec	r18
    1856:	e2 f7       	brpl	.-8      	; 0x1850 <M_PORT_voidInit+0x6f0>
    1858:	80 95       	com	r24
    185a:	84 23       	and	r24, r20
    185c:	8c 93       	st	X, r24
					/* Set the internal attach in PORTD register */
					if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_FLOATING)
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9c 01       	movw	r18, r24
    1866:	22 0f       	add	r18, r18
    1868:	33 1f       	adc	r19, r19
    186a:	22 0f       	add	r18, r18
    186c:	33 1f       	adc	r19, r19
    186e:	8c 81       	ldd	r24, Y+4	; 0x04
    1870:	9d 81       	ldd	r25, Y+5	; 0x05
    1872:	fc 01       	movw	r30, r24
    1874:	e2 0f       	add	r30, r18
    1876:	f3 1f       	adc	r31, r19
    1878:	83 81       	ldd	r24, Z+3	; 0x03
    187a:	88 23       	and	r24, r24
    187c:	a9 f4       	brne	.+42     	; 0x18a8 <M_PORT_voidInit+0x748>
					{
						CLR_BIT(PORTD_REG,Local_u8Pin);
    187e:	a2 e3       	ldi	r26, 0x32	; 50
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e2 e3       	ldi	r30, 0x32	; 50
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	48 2f       	mov	r20, r24
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 2e       	mov	r0, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <M_PORT_voidInit+0x73c>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <M_PORT_voidInit+0x738>
    18a0:	80 95       	com	r24
    18a2:	84 23       	and	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	23 c0       	rjmp	.+70     	; 0x18ee <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_PULLUP)
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	88 2f       	mov	r24, r24
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	9c 01       	movw	r18, r24
    18b0:	22 0f       	add	r18, r18
    18b2:	33 1f       	adc	r19, r19
    18b4:	22 0f       	add	r18, r18
    18b6:	33 1f       	adc	r19, r19
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	9d 81       	ldd	r25, Y+5	; 0x05
    18bc:	fc 01       	movw	r30, r24
    18be:	e2 0f       	add	r30, r18
    18c0:	f3 1f       	adc	r31, r19
    18c2:	83 81       	ldd	r24, Z+3	; 0x03
    18c4:	81 30       	cpi	r24, 0x01	; 1
    18c6:	99 f4       	brne	.+38     	; 0x18ee <M_PORT_voidInit+0x78e>
					{
						SET_BIT(PORTD_REG,Local_u8Pin);
    18c8:	a2 e3       	ldi	r26, 0x32	; 50
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e2 e3       	ldi	r30, 0x32	; 50
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <M_PORT_voidInit+0x786>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <M_PORT_voidInit+0x782>
    18ea:	84 2b       	or	r24, r20
    18ec:	8c 93       	st	X, r24
	if(ConfigPtr != NULL )
	{
		u8 Local_u8Pin;
		u8 Local_u8Port;
		u8 Local_u8Counter;
		for(Local_u8Counter = 0;Local_u8Counter<PORT_PINS_CONFIG_ARR_SIZE;Local_u8Counter++)
    18ee:	89 81       	ldd	r24, Y+1	; 0x01
    18f0:	8f 5f       	subi	r24, 0xFF	; 255
    18f2:	89 83       	std	Y+1, r24	; 0x01
    18f4:	89 81       	ldd	r24, Y+1	; 0x01
    18f6:	89 31       	cpi	r24, 0x19	; 25
    18f8:	08 f4       	brcc	.+2      	; 0x18fc <M_PORT_voidInit+0x79c>
    18fa:	45 cc       	rjmp	.-1910   	; 0x1186 <M_PORT_voidInit+0x26>
	}
	else
	{
		/* Error */
	}
}
    18fc:	27 96       	adiw	r28, 0x07	; 7
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <M_GIE_void_EnableGlobalInterrupt>:


#include "GIE_private.h"
#include "GIE_interface.h"

void M_GIE_void_EnableGlobalInterrupt(){
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
	sei();
    1916:	78 94       	sei
}
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <M_GIE_void_DisableGlobalInterrupt>:
void M_GIE_void_DisableGlobalInterrupt(){
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	cd b7       	in	r28, 0x3d	; 61
    1924:	de b7       	in	r29, 0x3e	; 62

	cli();
    1926:	f8 94       	cli
}
    1928:	cf 91       	pop	r28
    192a:	df 91       	pop	r29
    192c:	08 95       	ret

0000192e <M_DIO_enGetPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_PinLevelType M_DIO_enGetPinValue(Dio_ChannelType ChannelId)
{
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <M_DIO_enGetPinValue+0x6>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <M_DIO_enGetPinValue+0x8>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <M_DIO_enGetPinValue+0xa>
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8pin = ChannelId % 10;
    193e:	8c 81       	ldd	r24, Y+4	; 0x04
    1940:	9a e0       	ldi	r25, 0x0A	; 10
    1942:	69 2f       	mov	r22, r25
    1944:	0e 94 89 24 	call	0x4912	; 0x4912 <__udivmodqi4>
    1948:	89 2f       	mov	r24, r25
    194a:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8port = ChannelId / 10;
    194c:	8c 81       	ldd	r24, Y+4	; 0x04
    194e:	9a e0       	ldi	r25, 0x0A	; 10
    1950:	69 2f       	mov	r22, r25
    1952:	0e 94 89 24 	call	0x4912	; 0x4912 <__udivmodqi4>
    1956:	8a 83       	std	Y+2, r24	; 0x02

	Dio_PinLevelType Local_levelType;
	switch(Local_u8port)
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	3e 83       	std	Y+6, r19	; 0x06
    1960:	2d 83       	std	Y+5, r18	; 0x05
    1962:	4d 81       	ldd	r20, Y+5	; 0x05
    1964:	5e 81       	ldd	r21, Y+6	; 0x06
    1966:	42 30       	cpi	r20, 0x02	; 2
    1968:	51 05       	cpc	r21, r1
    196a:	41 f1       	breq	.+80     	; 0x19bc <M_DIO_enGetPinValue+0x8e>
    196c:	8d 81       	ldd	r24, Y+5	; 0x05
    196e:	9e 81       	ldd	r25, Y+6	; 0x06
    1970:	83 30       	cpi	r24, 0x03	; 3
    1972:	91 05       	cpc	r25, r1
    1974:	34 f4       	brge	.+12     	; 0x1982 <M_DIO_enGetPinValue+0x54>
    1976:	2d 81       	ldd	r18, Y+5	; 0x05
    1978:	3e 81       	ldd	r19, Y+6	; 0x06
    197a:	21 30       	cpi	r18, 0x01	; 1
    197c:	31 05       	cpc	r19, r1
    197e:	61 f0       	breq	.+24     	; 0x1998 <M_DIO_enGetPinValue+0x6a>
    1980:	52 c0       	rjmp	.+164    	; 0x1a26 <M_DIO_enGetPinValue+0xf8>
    1982:	4d 81       	ldd	r20, Y+5	; 0x05
    1984:	5e 81       	ldd	r21, Y+6	; 0x06
    1986:	43 30       	cpi	r20, 0x03	; 3
    1988:	51 05       	cpc	r21, r1
    198a:	51 f1       	breq	.+84     	; 0x19e0 <M_DIO_enGetPinValue+0xb2>
    198c:	8d 81       	ldd	r24, Y+5	; 0x05
    198e:	9e 81       	ldd	r25, Y+6	; 0x06
    1990:	84 30       	cpi	r24, 0x04	; 4
    1992:	91 05       	cpc	r25, r1
    1994:	b9 f1       	breq	.+110    	; 0x1a04 <M_DIO_enGetPinValue+0xd6>
    1996:	47 c0       	rjmp	.+142    	; 0x1a26 <M_DIO_enGetPinValue+0xf8>
	{
		case DIO_PORTA : Local_levelType = GET_BIT( PINA_REG,Local_u8pin); break;
    1998:	e9 e3       	ldi	r30, 0x39	; 57
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	88 2f       	mov	r24, r24
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	a9 01       	movw	r20, r18
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <M_DIO_enGetPinValue+0x82>
    19ac:	55 95       	asr	r21
    19ae:	47 95       	ror	r20
    19b0:	8a 95       	dec	r24
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <M_DIO_enGetPinValue+0x7e>
    19b4:	ca 01       	movw	r24, r20
    19b6:	81 70       	andi	r24, 0x01	; 1
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	35 c0       	rjmp	.+106    	; 0x1a26 <M_DIO_enGetPinValue+0xf8>
		case DIO_PORTB : Local_levelType = GET_BIT( PINB_REG,Local_u8pin);	break;
    19bc:	e6 e3       	ldi	r30, 0x36	; 54
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	88 2f       	mov	r24, r24
    19ca:	90 e0       	ldi	r25, 0x00	; 0
    19cc:	a9 01       	movw	r20, r18
    19ce:	02 c0       	rjmp	.+4      	; 0x19d4 <M_DIO_enGetPinValue+0xa6>
    19d0:	55 95       	asr	r21
    19d2:	47 95       	ror	r20
    19d4:	8a 95       	dec	r24
    19d6:	e2 f7       	brpl	.-8      	; 0x19d0 <M_DIO_enGetPinValue+0xa2>
    19d8:	ca 01       	movw	r24, r20
    19da:	81 70       	andi	r24, 0x01	; 1
    19dc:	89 83       	std	Y+1, r24	; 0x01
    19de:	23 c0       	rjmp	.+70     	; 0x1a26 <M_DIO_enGetPinValue+0xf8>
		case DIO_PORTC : Local_levelType = GET_BIT( PINC_REG,Local_u8pin);	break;
    19e0:	e3 e3       	ldi	r30, 0x33	; 51
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	80 81       	ld	r24, Z
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	8b 81       	ldd	r24, Y+3	; 0x03
    19ec:	88 2f       	mov	r24, r24
    19ee:	90 e0       	ldi	r25, 0x00	; 0
    19f0:	a9 01       	movw	r20, r18
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <M_DIO_enGetPinValue+0xca>
    19f4:	55 95       	asr	r21
    19f6:	47 95       	ror	r20
    19f8:	8a 95       	dec	r24
    19fa:	e2 f7       	brpl	.-8      	; 0x19f4 <M_DIO_enGetPinValue+0xc6>
    19fc:	ca 01       	movw	r24, r20
    19fe:	81 70       	andi	r24, 0x01	; 1
    1a00:	89 83       	std	Y+1, r24	; 0x01
    1a02:	11 c0       	rjmp	.+34     	; 0x1a26 <M_DIO_enGetPinValue+0xf8>
		case DIO_PORTD : Local_levelType = GET_BIT( PIND_REG,Local_u8pin); break;
    1a04:	e0 e3       	ldi	r30, 0x30	; 48
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a10:	88 2f       	mov	r24, r24
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	a9 01       	movw	r20, r18
    1a16:	02 c0       	rjmp	.+4      	; 0x1a1c <M_DIO_enGetPinValue+0xee>
    1a18:	55 95       	asr	r21
    1a1a:	47 95       	ror	r20
    1a1c:	8a 95       	dec	r24
    1a1e:	e2 f7       	brpl	.-8      	; 0x1a18 <M_DIO_enGetPinValue+0xea>
    1a20:	ca 01       	movw	r24, r20
    1a22:	81 70       	andi	r24, 0x01	; 1
    1a24:	89 83       	std	Y+1, r24	; 0x01
		default: break;
	}
    return Local_levelType ;
    1a26:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a28:	26 96       	adiw	r28, 0x06	; 6
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	cf 91       	pop	r28
    1a36:	df 91       	pop	r29
    1a38:	08 95       	ret

00001a3a <M_DIO_voidSetPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_DIO_voidSetPinValue(Dio_ChannelType ChannelId,Dio_PinLevelType Level)
{
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	28 97       	sbiw	r28, 0x08	; 8
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	8b 83       	std	Y+3, r24	; 0x03
    1a50:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8pin = ChannelId % 10;
    1a52:	8b 81       	ldd	r24, Y+3	; 0x03
    1a54:	9a e0       	ldi	r25, 0x0A	; 10
    1a56:	69 2f       	mov	r22, r25
    1a58:	0e 94 89 24 	call	0x4912	; 0x4912 <__udivmodqi4>
    1a5c:	89 2f       	mov	r24, r25
    1a5e:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8port = ChannelId / 10;
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9a e0       	ldi	r25, 0x0A	; 10
    1a64:	69 2f       	mov	r22, r25
    1a66:	0e 94 89 24 	call	0x4912	; 0x4912 <__udivmodqi4>
    1a6a:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    1a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6e:	81 30       	cpi	r24, 0x01	; 1
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <M_DIO_voidSetPinValue+0x3a>
    1a72:	70 c0       	rjmp	.+224    	; 0x1b54 <M_DIO_voidSetPinValue+0x11a>
	{
		switch(Local_u8port)
    1a74:	89 81       	ldd	r24, Y+1	; 0x01
    1a76:	28 2f       	mov	r18, r24
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	38 87       	std	Y+8, r19	; 0x08
    1a7c:	2f 83       	std	Y+7, r18	; 0x07
    1a7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1a80:	98 85       	ldd	r25, Y+8	; 0x08
    1a82:	82 30       	cpi	r24, 0x02	; 2
    1a84:	91 05       	cpc	r25, r1
    1a86:	51 f1       	breq	.+84     	; 0x1adc <M_DIO_voidSetPinValue+0xa2>
    1a88:	2f 81       	ldd	r18, Y+7	; 0x07
    1a8a:	38 85       	ldd	r19, Y+8	; 0x08
    1a8c:	23 30       	cpi	r18, 0x03	; 3
    1a8e:	31 05       	cpc	r19, r1
    1a90:	34 f4       	brge	.+12     	; 0x1a9e <M_DIO_voidSetPinValue+0x64>
    1a92:	8f 81       	ldd	r24, Y+7	; 0x07
    1a94:	98 85       	ldd	r25, Y+8	; 0x08
    1a96:	81 30       	cpi	r24, 0x01	; 1
    1a98:	91 05       	cpc	r25, r1
    1a9a:	61 f0       	breq	.+24     	; 0x1ab4 <M_DIO_voidSetPinValue+0x7a>
    1a9c:	d3 c0       	rjmp	.+422    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
    1a9e:	2f 81       	ldd	r18, Y+7	; 0x07
    1aa0:	38 85       	ldd	r19, Y+8	; 0x08
    1aa2:	23 30       	cpi	r18, 0x03	; 3
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	71 f1       	breq	.+92     	; 0x1b04 <M_DIO_voidSetPinValue+0xca>
    1aa8:	8f 81       	ldd	r24, Y+7	; 0x07
    1aaa:	98 85       	ldd	r25, Y+8	; 0x08
    1aac:	84 30       	cpi	r24, 0x04	; 4
    1aae:	91 05       	cpc	r25, r1
    1ab0:	e9 f1       	breq	.+122    	; 0x1b2c <M_DIO_voidSetPinValue+0xf2>
    1ab2:	c8 c0       	rjmp	.+400    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
		{
			case DIO_PORTA : SET_BIT( PORTA_REG,Local_u8pin); break;
    1ab4:	ab e3       	ldi	r26, 0x3B	; 59
    1ab6:	b0 e0       	ldi	r27, 0x00	; 0
    1ab8:	eb e3       	ldi	r30, 0x3B	; 59
    1aba:	f0 e0       	ldi	r31, 0x00	; 0
    1abc:	80 81       	ld	r24, Z
    1abe:	48 2f       	mov	r20, r24
    1ac0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac2:	28 2f       	mov	r18, r24
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	90 e0       	ldi	r25, 0x00	; 0
    1aca:	02 2e       	mov	r0, r18
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <M_DIO_voidSetPinValue+0x98>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	0a 94       	dec	r0
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <M_DIO_voidSetPinValue+0x94>
    1ad6:	84 2b       	or	r24, r20
    1ad8:	8c 93       	st	X, r24
    1ada:	b4 c0       	rjmp	.+360    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTB : SET_BIT( PORTB_REG,Local_u8pin); break;
    1adc:	a8 e3       	ldi	r26, 0x38	; 56
    1ade:	b0 e0       	ldi	r27, 0x00	; 0
    1ae0:	e8 e3       	ldi	r30, 0x38	; 56
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	48 2f       	mov	r20, r24
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	81 e0       	ldi	r24, 0x01	; 1
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	02 2e       	mov	r0, r18
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <M_DIO_voidSetPinValue+0xc0>
    1af6:	88 0f       	add	r24, r24
    1af8:	99 1f       	adc	r25, r25
    1afa:	0a 94       	dec	r0
    1afc:	e2 f7       	brpl	.-8      	; 0x1af6 <M_DIO_voidSetPinValue+0xbc>
    1afe:	84 2b       	or	r24, r20
    1b00:	8c 93       	st	X, r24
    1b02:	a0 c0       	rjmp	.+320    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTC : SET_BIT( PORTC_REG,Local_u8pin); break;
    1b04:	a5 e3       	ldi	r26, 0x35	; 53
    1b06:	b0 e0       	ldi	r27, 0x00	; 0
    1b08:	e5 e3       	ldi	r30, 0x35	; 53
    1b0a:	f0 e0       	ldi	r31, 0x00	; 0
    1b0c:	80 81       	ld	r24, Z
    1b0e:	48 2f       	mov	r20, r24
    1b10:	8a 81       	ldd	r24, Y+2	; 0x02
    1b12:	28 2f       	mov	r18, r24
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	81 e0       	ldi	r24, 0x01	; 1
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 2e       	mov	r0, r18
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <M_DIO_voidSetPinValue+0xe8>
    1b1e:	88 0f       	add	r24, r24
    1b20:	99 1f       	adc	r25, r25
    1b22:	0a 94       	dec	r0
    1b24:	e2 f7       	brpl	.-8      	; 0x1b1e <M_DIO_voidSetPinValue+0xe4>
    1b26:	84 2b       	or	r24, r20
    1b28:	8c 93       	st	X, r24
    1b2a:	8c c0       	rjmp	.+280    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTD : SET_BIT( PORTD_REG,Local_u8pin); break;
    1b2c:	a2 e3       	ldi	r26, 0x32	; 50
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e2 e3       	ldi	r30, 0x32	; 50
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	80 81       	ld	r24, Z
    1b36:	48 2f       	mov	r20, r24
    1b38:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3a:	28 2f       	mov	r18, r24
    1b3c:	30 e0       	ldi	r19, 0x00	; 0
    1b3e:	81 e0       	ldi	r24, 0x01	; 1
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	02 2e       	mov	r0, r18
    1b44:	02 c0       	rjmp	.+4      	; 0x1b4a <M_DIO_voidSetPinValue+0x110>
    1b46:	88 0f       	add	r24, r24
    1b48:	99 1f       	adc	r25, r25
    1b4a:	0a 94       	dec	r0
    1b4c:	e2 f7       	brpl	.-8      	; 0x1b46 <M_DIO_voidSetPinValue+0x10c>
    1b4e:	84 2b       	or	r24, r20
    1b50:	8c 93       	st	X, r24
    1b52:	78 c0       	rjmp	.+240    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
			default: break;
		}
	}
	else if (Level == DIO_LOW)
    1b54:	8c 81       	ldd	r24, Y+4	; 0x04
    1b56:	88 23       	and	r24, r24
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <M_DIO_voidSetPinValue+0x122>
    1b5a:	74 c0       	rjmp	.+232    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
	{
		switch(Local_u8port)
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	28 2f       	mov	r18, r24
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	3e 83       	std	Y+6, r19	; 0x06
    1b64:	2d 83       	std	Y+5, r18	; 0x05
    1b66:	8d 81       	ldd	r24, Y+5	; 0x05
    1b68:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6a:	82 30       	cpi	r24, 0x02	; 2
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	61 f1       	breq	.+88     	; 0x1bc8 <M_DIO_voidSetPinValue+0x18e>
    1b70:	2d 81       	ldd	r18, Y+5	; 0x05
    1b72:	3e 81       	ldd	r19, Y+6	; 0x06
    1b74:	23 30       	cpi	r18, 0x03	; 3
    1b76:	31 05       	cpc	r19, r1
    1b78:	34 f4       	brge	.+12     	; 0x1b86 <M_DIO_voidSetPinValue+0x14c>
    1b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b7e:	81 30       	cpi	r24, 0x01	; 1
    1b80:	91 05       	cpc	r25, r1
    1b82:	69 f0       	breq	.+26     	; 0x1b9e <M_DIO_voidSetPinValue+0x164>
    1b84:	5f c0       	rjmp	.+190    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
    1b86:	2d 81       	ldd	r18, Y+5	; 0x05
    1b88:	3e 81       	ldd	r19, Y+6	; 0x06
    1b8a:	23 30       	cpi	r18, 0x03	; 3
    1b8c:	31 05       	cpc	r19, r1
    1b8e:	89 f1       	breq	.+98     	; 0x1bf2 <M_DIO_voidSetPinValue+0x1b8>
    1b90:	8d 81       	ldd	r24, Y+5	; 0x05
    1b92:	9e 81       	ldd	r25, Y+6	; 0x06
    1b94:	84 30       	cpi	r24, 0x04	; 4
    1b96:	91 05       	cpc	r25, r1
    1b98:	09 f4       	brne	.+2      	; 0x1b9c <M_DIO_voidSetPinValue+0x162>
    1b9a:	40 c0       	rjmp	.+128    	; 0x1c1c <M_DIO_voidSetPinValue+0x1e2>
    1b9c:	53 c0       	rjmp	.+166    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
		{
			case DIO_PORTA : CLR_BIT( PORTA_REG,Local_u8pin); break;
    1b9e:	ab e3       	ldi	r26, 0x3B	; 59
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	eb e3       	ldi	r30, 0x3B	; 59
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	48 2f       	mov	r20, r24
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	02 2e       	mov	r0, r18
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <M_DIO_voidSetPinValue+0x182>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	0a 94       	dec	r0
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <M_DIO_voidSetPinValue+0x17e>
    1bc0:	80 95       	com	r24
    1bc2:	84 23       	and	r24, r20
    1bc4:	8c 93       	st	X, r24
    1bc6:	3e c0       	rjmp	.+124    	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTB : CLR_BIT( PORTB_REG,Local_u8pin); break;
    1bc8:	a8 e3       	ldi	r26, 0x38	; 56
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e8 e3       	ldi	r30, 0x38	; 56
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	48 2f       	mov	r20, r24
    1bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	02 2e       	mov	r0, r18
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <M_DIO_voidSetPinValue+0x1ac>
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	0a 94       	dec	r0
    1be8:	e2 f7       	brpl	.-8      	; 0x1be2 <M_DIO_voidSetPinValue+0x1a8>
    1bea:	80 95       	com	r24
    1bec:	84 23       	and	r24, r20
    1bee:	8c 93       	st	X, r24
    1bf0:	29 c0       	rjmp	.+82     	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTC : CLR_BIT( PORTC_REG,Local_u8pin); break;
    1bf2:	a5 e3       	ldi	r26, 0x35	; 53
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e5 e3       	ldi	r30, 0x35	; 53
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	02 2e       	mov	r0, r18
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <M_DIO_voidSetPinValue+0x1d6>
    1c0c:	88 0f       	add	r24, r24
    1c0e:	99 1f       	adc	r25, r25
    1c10:	0a 94       	dec	r0
    1c12:	e2 f7       	brpl	.-8      	; 0x1c0c <M_DIO_voidSetPinValue+0x1d2>
    1c14:	80 95       	com	r24
    1c16:	84 23       	and	r24, r20
    1c18:	8c 93       	st	X, r24
    1c1a:	14 c0       	rjmp	.+40     	; 0x1c44 <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTD : CLR_BIT( PORTD_REG,Local_u8pin); break;
    1c1c:	a2 e3       	ldi	r26, 0x32	; 50
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e2 e3       	ldi	r30, 0x32	; 50
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	48 2f       	mov	r20, r24
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	02 2e       	mov	r0, r18
    1c34:	02 c0       	rjmp	.+4      	; 0x1c3a <M_DIO_voidSetPinValue+0x200>
    1c36:	88 0f       	add	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	0a 94       	dec	r0
    1c3c:	e2 f7       	brpl	.-8      	; 0x1c36 <M_DIO_voidSetPinValue+0x1fc>
    1c3e:	80 95       	com	r24
    1c40:	84 23       	and	r24, r20
    1c42:	8c 93       	st	X, r24
			default: break;
		}
	}
}
    1c44:	28 96       	adiw	r28, 0x08	; 8
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	08 95       	ret

00001c56 <M_DIO_enGetPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_DIO_enGetPortValue(Dio_PortType PortId)
{
    1c56:	df 93       	push	r29
    1c58:	cf 93       	push	r28
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <M_DIO_enGetPortValue+0x6>
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <M_DIO_enGetPortValue+0x8>
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_u8Reading;

	switch( PortId)
    1c64:	8a 81       	ldd	r24, Y+2	; 0x02
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	3c 83       	std	Y+4, r19	; 0x04
    1c6c:	2b 83       	std	Y+3, r18	; 0x03
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	82 30       	cpi	r24, 0x02	; 2
    1c74:	91 05       	cpc	r25, r1
    1c76:	d9 f0       	breq	.+54     	; 0x1cae <M_DIO_enGetPortValue+0x58>
    1c78:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7c:	23 30       	cpi	r18, 0x03	; 3
    1c7e:	31 05       	cpc	r19, r1
    1c80:	34 f4       	brge	.+12     	; 0x1c8e <M_DIO_enGetPortValue+0x38>
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	81 30       	cpi	r24, 0x01	; 1
    1c88:	91 05       	cpc	r25, r1
    1c8a:	61 f0       	breq	.+24     	; 0x1ca4 <M_DIO_enGetPortValue+0x4e>
    1c8c:	1e c0       	rjmp	.+60     	; 0x1cca <M_DIO_enGetPortValue+0x74>
    1c8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c90:	3c 81       	ldd	r19, Y+4	; 0x04
    1c92:	23 30       	cpi	r18, 0x03	; 3
    1c94:	31 05       	cpc	r19, r1
    1c96:	81 f0       	breq	.+32     	; 0x1cb8 <M_DIO_enGetPortValue+0x62>
    1c98:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9c:	84 30       	cpi	r24, 0x04	; 4
    1c9e:	91 05       	cpc	r25, r1
    1ca0:	81 f0       	breq	.+32     	; 0x1cc2 <M_DIO_enGetPortValue+0x6c>
    1ca2:	13 c0       	rjmp	.+38     	; 0x1cca <M_DIO_enGetPortValue+0x74>
	{
		case DIO_PORTA : Local_u8Reading =  PORTA_REG; break;
    1ca4:	eb e3       	ldi	r30, 0x3B	; 59
    1ca6:	f0 e0       	ldi	r31, 0x00	; 0
    1ca8:	80 81       	ld	r24, Z
    1caa:	89 83       	std	Y+1, r24	; 0x01
    1cac:	0e c0       	rjmp	.+28     	; 0x1cca <M_DIO_enGetPortValue+0x74>
		case DIO_PORTB : Local_u8Reading =  PORTB_REG; break;
    1cae:	e8 e3       	ldi	r30, 0x38	; 56
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	09 c0       	rjmp	.+18     	; 0x1cca <M_DIO_enGetPortValue+0x74>
		case DIO_PORTC : Local_u8Reading =  PORTC_REG; break;
    1cb8:	e5 e3       	ldi	r30, 0x35	; 53
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	89 83       	std	Y+1, r24	; 0x01
    1cc0:	04 c0       	rjmp	.+8      	; 0x1cca <M_DIO_enGetPortValue+0x74>
		case DIO_PORTD : Local_u8Reading =  PORTD_REG; break;
    1cc2:	e2 e3       	ldi	r30, 0x32	; 50
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	89 83       	std	Y+1, r24	; 0x01
		default: break;
	}

	return Local_u8Reading;
    1cca:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	0f 90       	pop	r0
    1cd4:	cf 91       	pop	r28
    1cd6:	df 91       	pop	r29
    1cd8:	08 95       	ret

00001cda <M_DIO_voidSetPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_DIO_voidSetPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	00 d0       	rcall	.+0      	; 0x1ce0 <M_DIO_voidSetPortValue+0x6>
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <M_DIO_voidSetPortValue+0x8>
    1ce2:	cd b7       	in	r28, 0x3d	; 61
    1ce4:	de b7       	in	r29, 0x3e	; 62
    1ce6:	89 83       	std	Y+1, r24	; 0x01
    1ce8:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	28 2f       	mov	r18, r24
    1cee:	30 e0       	ldi	r19, 0x00	; 0
    1cf0:	3c 83       	std	Y+4, r19	; 0x04
    1cf2:	2b 83       	std	Y+3, r18	; 0x03
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf8:	82 30       	cpi	r24, 0x02	; 2
    1cfa:	91 05       	cpc	r25, r1
    1cfc:	d9 f0       	breq	.+54     	; 0x1d34 <M_DIO_voidSetPortValue+0x5a>
    1cfe:	2b 81       	ldd	r18, Y+3	; 0x03
    1d00:	3c 81       	ldd	r19, Y+4	; 0x04
    1d02:	23 30       	cpi	r18, 0x03	; 3
    1d04:	31 05       	cpc	r19, r1
    1d06:	34 f4       	brge	.+12     	; 0x1d14 <M_DIO_voidSetPortValue+0x3a>
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	91 05       	cpc	r25, r1
    1d10:	61 f0       	breq	.+24     	; 0x1d2a <M_DIO_voidSetPortValue+0x50>
    1d12:	1e c0       	rjmp	.+60     	; 0x1d50 <M_DIO_voidSetPortValue+0x76>
    1d14:	2b 81       	ldd	r18, Y+3	; 0x03
    1d16:	3c 81       	ldd	r19, Y+4	; 0x04
    1d18:	23 30       	cpi	r18, 0x03	; 3
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	81 f0       	breq	.+32     	; 0x1d3e <M_DIO_voidSetPortValue+0x64>
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	84 30       	cpi	r24, 0x04	; 4
    1d24:	91 05       	cpc	r25, r1
    1d26:	81 f0       	breq	.+32     	; 0x1d48 <M_DIO_voidSetPortValue+0x6e>
    1d28:	13 c0       	rjmp	.+38     	; 0x1d50 <M_DIO_voidSetPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level; break;
    1d2a:	eb e3       	ldi	r30, 0x3B	; 59
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	80 83       	st	Z, r24
    1d32:	0e c0       	rjmp	.+28     	; 0x1d50 <M_DIO_voidSetPortValue+0x76>
		case DIO_PORTB : PORTB_REG = Level; break;
    1d34:	e8 e3       	ldi	r30, 0x38	; 56
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3a:	80 83       	st	Z, r24
    1d3c:	09 c0       	rjmp	.+18     	; 0x1d50 <M_DIO_voidSetPortValue+0x76>
		case DIO_PORTC : PORTC_REG = Level; break;
    1d3e:	e5 e3       	ldi	r30, 0x35	; 53
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	80 83       	st	Z, r24
    1d46:	04 c0       	rjmp	.+8      	; 0x1d50 <M_DIO_voidSetPortValue+0x76>
		case DIO_PORTD : PORTD_REG = Level; break;
    1d48:	e2 e3       	ldi	r30, 0x32	; 50
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4e:	80 83       	st	Z, r24
		default: break;
	}
}
    1d50:	0f 90       	pop	r0
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	cf 91       	pop	r28
    1d5a:	df 91       	pop	r29
    1d5c:	08 95       	ret

00001d5e <M_DIO_voidTogglePin>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_DIO_voidTogglePin(Dio_ChannelType channelId)
{
    1d5e:	df 93       	push	r29
    1d60:	cf 93       	push	r28
    1d62:	00 d0       	rcall	.+0      	; 0x1d64 <M_DIO_voidTogglePin+0x6>
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <M_DIO_voidTogglePin+0x8>
    1d66:	0f 92       	push	r0
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8pin = channelId % 10;
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	9a e0       	ldi	r25, 0x0A	; 10
    1d72:	69 2f       	mov	r22, r25
    1d74:	0e 94 89 24 	call	0x4912	; 0x4912 <__udivmodqi4>
    1d78:	89 2f       	mov	r24, r25
    1d7a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8port = channelId/ 10;
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9a e0       	ldi	r25, 0x0A	; 10
    1d80:	69 2f       	mov	r22, r25
    1d82:	0e 94 89 24 	call	0x4912	; 0x4912 <__udivmodqi4>
    1d86:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_u8port)
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	3d 83       	std	Y+5, r19	; 0x05
    1d90:	2c 83       	std	Y+4, r18	; 0x04
    1d92:	8c 81       	ldd	r24, Y+4	; 0x04
    1d94:	9d 81       	ldd	r25, Y+5	; 0x05
    1d96:	82 30       	cpi	r24, 0x02	; 2
    1d98:	91 05       	cpc	r25, r1
    1d9a:	51 f1       	breq	.+84     	; 0x1df0 <M_DIO_voidTogglePin+0x92>
    1d9c:	2c 81       	ldd	r18, Y+4	; 0x04
    1d9e:	3d 81       	ldd	r19, Y+5	; 0x05
    1da0:	23 30       	cpi	r18, 0x03	; 3
    1da2:	31 05       	cpc	r19, r1
    1da4:	34 f4       	brge	.+12     	; 0x1db2 <M_DIO_voidTogglePin+0x54>
    1da6:	8c 81       	ldd	r24, Y+4	; 0x04
    1da8:	9d 81       	ldd	r25, Y+5	; 0x05
    1daa:	81 30       	cpi	r24, 0x01	; 1
    1dac:	91 05       	cpc	r25, r1
    1dae:	61 f0       	breq	.+24     	; 0x1dc8 <M_DIO_voidTogglePin+0x6a>
    1db0:	5a c0       	rjmp	.+180    	; 0x1e66 <M_DIO_voidTogglePin+0x108>
    1db2:	2c 81       	ldd	r18, Y+4	; 0x04
    1db4:	3d 81       	ldd	r19, Y+5	; 0x05
    1db6:	23 30       	cpi	r18, 0x03	; 3
    1db8:	31 05       	cpc	r19, r1
    1dba:	71 f1       	breq	.+92     	; 0x1e18 <M_DIO_voidTogglePin+0xba>
    1dbc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dbe:	9d 81       	ldd	r25, Y+5	; 0x05
    1dc0:	84 30       	cpi	r24, 0x04	; 4
    1dc2:	91 05       	cpc	r25, r1
    1dc4:	e9 f1       	breq	.+122    	; 0x1e40 <M_DIO_voidTogglePin+0xe2>
    1dc6:	4f c0       	rjmp	.+158    	; 0x1e66 <M_DIO_voidTogglePin+0x108>
	{
		case DIO_PORTA : TOG_BIT(PORTA_REG,Local_u8pin); break;
    1dc8:	ab e3       	ldi	r26, 0x3B	; 59
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	eb e3       	ldi	r30, 0x3B	; 59
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 81       	ld	r24, Z
    1dd2:	48 2f       	mov	r20, r24
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	02 2e       	mov	r0, r18
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <M_DIO_voidTogglePin+0x88>
    1de2:	88 0f       	add	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	0a 94       	dec	r0
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <M_DIO_voidTogglePin+0x84>
    1dea:	84 27       	eor	r24, r20
    1dec:	8c 93       	st	X, r24
    1dee:	3b c0       	rjmp	.+118    	; 0x1e66 <M_DIO_voidTogglePin+0x108>
		case DIO_PORTB : TOG_BIT(PORTB_REG,Local_u8pin); break;
    1df0:	a8 e3       	ldi	r26, 0x38	; 56
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e8 e3       	ldi	r30, 0x38	; 56
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	48 2f       	mov	r20, r24
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	28 2f       	mov	r18, r24
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	02 2e       	mov	r0, r18
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <M_DIO_voidTogglePin+0xb0>
    1e0a:	88 0f       	add	r24, r24
    1e0c:	99 1f       	adc	r25, r25
    1e0e:	0a 94       	dec	r0
    1e10:	e2 f7       	brpl	.-8      	; 0x1e0a <M_DIO_voidTogglePin+0xac>
    1e12:	84 27       	eor	r24, r20
    1e14:	8c 93       	st	X, r24
    1e16:	27 c0       	rjmp	.+78     	; 0x1e66 <M_DIO_voidTogglePin+0x108>
		case DIO_PORTC : TOG_BIT(PORTC_REG,Local_u8pin); break;
    1e18:	a5 e3       	ldi	r26, 0x35	; 53
    1e1a:	b0 e0       	ldi	r27, 0x00	; 0
    1e1c:	e5 e3       	ldi	r30, 0x35	; 53
    1e1e:	f0 e0       	ldi	r31, 0x00	; 0
    1e20:	80 81       	ld	r24, Z
    1e22:	48 2f       	mov	r20, r24
    1e24:	8a 81       	ldd	r24, Y+2	; 0x02
    1e26:	28 2f       	mov	r18, r24
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	90 e0       	ldi	r25, 0x00	; 0
    1e2e:	02 2e       	mov	r0, r18
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <M_DIO_voidTogglePin+0xd8>
    1e32:	88 0f       	add	r24, r24
    1e34:	99 1f       	adc	r25, r25
    1e36:	0a 94       	dec	r0
    1e38:	e2 f7       	brpl	.-8      	; 0x1e32 <M_DIO_voidTogglePin+0xd4>
    1e3a:	84 27       	eor	r24, r20
    1e3c:	8c 93       	st	X, r24
    1e3e:	13 c0       	rjmp	.+38     	; 0x1e66 <M_DIO_voidTogglePin+0x108>
		case DIO_PORTD : TOG_BIT(PORTD_REG,Local_u8pin); break;
    1e40:	a2 e3       	ldi	r26, 0x32	; 50
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e2 e3       	ldi	r30, 0x32	; 50
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	48 2f       	mov	r20, r24
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	28 2f       	mov	r18, r24
    1e50:	30 e0       	ldi	r19, 0x00	; 0
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	02 2e       	mov	r0, r18
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <M_DIO_voidTogglePin+0x100>
    1e5a:	88 0f       	add	r24, r24
    1e5c:	99 1f       	adc	r25, r25
    1e5e:	0a 94       	dec	r0
    1e60:	e2 f7       	brpl	.-8      	; 0x1e5a <M_DIO_voidTogglePin+0xfc>
    1e62:	84 27       	eor	r24, r20
    1e64:	8c 93       	st	X, r24
		default: break;
	}
}
    1e66:	0f 90       	pop	r0
    1e68:	0f 90       	pop	r0
    1e6a:	0f 90       	pop	r0
    1e6c:	0f 90       	pop	r0
    1e6e:	0f 90       	pop	r0
    1e70:	cf 91       	pop	r28
    1e72:	df 91       	pop	r29
    1e74:	08 95       	ret

00001e76 <M_ADC_void_Init>:
#include "Mcu_HW.h"
#include "BIT_MATH.h"
#include "ADC_interface.h"


void M_ADC_void_Init(ADC_config_t mADC){
    1e76:	df 93       	push	r29
    1e78:	cf 93       	push	r28
    1e7a:	00 d0       	rcall	.+0      	; 0x1e7c <M_ADC_void_Init+0x6>
    1e7c:	00 d0       	rcall	.+0      	; 0x1e7e <M_ADC_void_Init+0x8>
    1e7e:	0f 92       	push	r0
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	49 83       	std	Y+1, r20	; 0x01
    1e86:	5a 83       	std	Y+2, r21	; 0x02
    1e88:	6b 83       	std	Y+3, r22	; 0x03
    1e8a:	7c 83       	std	Y+4, r23	; 0x04
    1e8c:	8d 83       	std	Y+5, r24	; 0x05


	//Right "0" or Left "1" Adjustment of the ADC data register
	ADMUX_REG |= (ADC_ADJUSTMENT<<ADMUX_ADLAR);
    1e8e:	a7 e2       	ldi	r26, 0x27	; 39
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e7 e2       	ldi	r30, 0x27	; 39
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 81       	ld	r24, Z
    1e98:	28 2f       	mov	r18, r24
    1e9a:	80 91 89 04 	lds	r24, 0x0489
    1e9e:	88 2f       	mov	r24, r24
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	82 95       	swap	r24
    1ea8:	92 95       	swap	r25
    1eaa:	90 7f       	andi	r25, 0xF0	; 240
    1eac:	98 27       	eor	r25, r24
    1eae:	80 7f       	andi	r24, 0xF0	; 240
    1eb0:	98 27       	eor	r25, r24
    1eb2:	82 2b       	or	r24, r18
    1eb4:	8c 93       	st	X, r24

	//Voltage Reference
	//ADMUX_REG &= 0x3F; //Zeroing the last 2 bits
	ADMUX_REG |= ((mADC.volt_ref)<<ADMUX_REFS0);
    1eb6:	a7 e2       	ldi	r26, 0x27	; 39
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e7 e2       	ldi	r30, 0x27	; 39
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	28 2f       	mov	r18, r24
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01
    1ec4:	88 2f       	mov	r24, r24
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	00 24       	eor	r0, r0
    1eca:	96 95       	lsr	r25
    1ecc:	87 95       	ror	r24
    1ece:	07 94       	ror	r0
    1ed0:	96 95       	lsr	r25
    1ed2:	87 95       	ror	r24
    1ed4:	07 94       	ror	r0
    1ed6:	98 2f       	mov	r25, r24
    1ed8:	80 2d       	mov	r24, r0
    1eda:	82 2b       	or	r24, r18
    1edc:	8c 93       	st	X, r24

	//Auto trigger enable/disable
	ADCSRA_REG |= ((mADC.auto_trigger)<<ADCSRA_ADATE);
    1ede:	a6 e2       	ldi	r26, 0x26	; 38
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e6 e2       	ldi	r30, 0x26	; 38
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	28 2f       	mov	r18, r24
    1eea:	8a 81       	ldd	r24, Y+2	; 0x02
    1eec:	88 2f       	mov	r24, r24
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	88 0f       	add	r24, r24
    1ef2:	99 1f       	adc	r25, r25
    1ef4:	82 95       	swap	r24
    1ef6:	92 95       	swap	r25
    1ef8:	90 7f       	andi	r25, 0xF0	; 240
    1efa:	98 27       	eor	r25, r24
    1efc:	80 7f       	andi	r24, 0xF0	; 240
    1efe:	98 27       	eor	r25, r24
    1f00:	82 2b       	or	r24, r18
    1f02:	8c 93       	st	X, r24

	//Interrupt Enable/Disable
	ADCSRA_REG |= ((mADC.interrupt)<<ADCSRA_ADIE);
    1f04:	a6 e2       	ldi	r26, 0x26	; 38
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	e6 e2       	ldi	r30, 0x26	; 38
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	28 2f       	mov	r18, r24
    1f10:	8b 81       	ldd	r24, Y+3	; 0x03
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	88 0f       	add	r24, r24
    1f1c:	99 1f       	adc	r25, r25
    1f1e:	88 0f       	add	r24, r24
    1f20:	99 1f       	adc	r25, r25
    1f22:	82 2b       	or	r24, r18
    1f24:	8c 93       	st	X, r24

	//Prescaler Select
	ADCSRA_REG &= 0xF8;
    1f26:	a6 e2       	ldi	r26, 0x26	; 38
    1f28:	b0 e0       	ldi	r27, 0x00	; 0
    1f2a:	e6 e2       	ldi	r30, 0x26	; 38
    1f2c:	f0 e0       	ldi	r31, 0x00	; 0
    1f2e:	80 81       	ld	r24, Z
    1f30:	88 7f       	andi	r24, 0xF8	; 248
    1f32:	8c 93       	st	X, r24
	ADCSRA_REG |= ((mADC.prescaler)<<ADCSRA_ADPS0);
    1f34:	a6 e2       	ldi	r26, 0x26	; 38
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e6 e2       	ldi	r30, 0x26	; 38
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	90 81       	ld	r25, Z
    1f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f40:	89 2b       	or	r24, r25
    1f42:	8c 93       	st	X, r24

	//Auto trigger Source
	SFIOR_REG &= 0x0F;
    1f44:	a0 e5       	ldi	r26, 0x50	; 80
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e0 e5       	ldi	r30, 0x50	; 80
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	8f 70       	andi	r24, 0x0F	; 15
    1f50:	8c 93       	st	X, r24
	SFIOR_REG |= ((mADC.auto_trigger_source)<<SFIOR_ADTS0);
    1f52:	a0 e5       	ldi	r26, 0x50	; 80
    1f54:	b0 e0       	ldi	r27, 0x00	; 0
    1f56:	e0 e5       	ldi	r30, 0x50	; 80
    1f58:	f0 e0       	ldi	r31, 0x00	; 0
    1f5a:	80 81       	ld	r24, Z
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f60:	88 2f       	mov	r24, r24
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	82 95       	swap	r24
    1f6a:	92 95       	swap	r25
    1f6c:	90 7f       	andi	r25, 0xF0	; 240
    1f6e:	98 27       	eor	r25, r24
    1f70:	80 7f       	andi	r24, 0xF0	; 240
    1f72:	98 27       	eor	r25, r24
    1f74:	82 2b       	or	r24, r18
    1f76:	8c 93       	st	X, r24

	//Finally Enable
	ADCSRA_REG |= (1<<ADCSRA_ADEN);
    1f78:	a6 e2       	ldi	r26, 0x26	; 38
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e6 e2       	ldi	r30, 0x26	; 38
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	80 68       	ori	r24, 0x80	; 128
    1f84:	8c 93       	st	X, r24


}
    1f86:	0f 90       	pop	r0
    1f88:	0f 90       	pop	r0
    1f8a:	0f 90       	pop	r0
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <M_ADC_void_StartConversion>:

void M_ADC_void_StartConversion(){
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62

	//Start Conversion
	ADCSRA_REG |= (1<<ADCSRA_ADSC);
    1f9e:	a6 e2       	ldi	r26, 0x26	; 38
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e6 e2       	ldi	r30, 0x26	; 38
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	80 64       	ori	r24, 0x40	; 64
    1faa:	8c 93       	st	X, r24


}
    1fac:	cf 91       	pop	r28
    1fae:	df 91       	pop	r29
    1fb0:	08 95       	ret

00001fb2 <M_ADC_void_GetDigitalValueSynchNonBlocking>:
//Polling NonBlocking (conversion is started externally)
ADC_state_code_t M_ADC_void_GetDigitalValueSynchNonBlocking(ADC_channel_t channel, u16* data){
    1fb2:	df 93       	push	r29
    1fb4:	cf 93       	push	r28
    1fb6:	00 d0       	rcall	.+0      	; 0x1fb8 <M_ADC_void_GetDigitalValueSynchNonBlocking+0x6>
    1fb8:	00 d0       	rcall	.+0      	; 0x1fba <M_ADC_void_GetDigitalValueSynchNonBlocking+0x8>
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <M_ADC_void_GetDigitalValueSynchNonBlocking+0xa>
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	89 83       	std	Y+1, r24	; 0x01
    1fc2:	7b 83       	std	Y+3, r23	; 0x03
    1fc4:	6a 83       	std	Y+2, r22	; 0x02

	//Channel
	ADMUX_REG &= 0xE0;
    1fc6:	a7 e2       	ldi	r26, 0x27	; 39
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e7 e2       	ldi	r30, 0x27	; 39
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	80 7e       	andi	r24, 0xE0	; 224
    1fd2:	8c 93       	st	X, r24
	ADMUX_REG |= channel ;
    1fd4:	a7 e2       	ldi	r26, 0x27	; 39
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e7 e2       	ldi	r30, 0x27	; 39
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	90 81       	ld	r25, Z
    1fde:	89 81       	ldd	r24, Y+1	; 0x01
    1fe0:	89 2b       	or	r24, r25
    1fe2:	8c 93       	st	X, r24


	if((GET_BIT(ADCSRA_REG,ADCSRA_ADIF)) == 0){
    1fe4:	e6 e2       	ldi	r30, 0x26	; 38
    1fe6:	f0 e0       	ldi	r31, 0x00	; 0
    1fe8:	80 81       	ld	r24, Z
    1fea:	82 95       	swap	r24
    1fec:	8f 70       	andi	r24, 0x0F	; 15
    1fee:	88 2f       	mov	r24, r24
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	81 70       	andi	r24, 0x01	; 1
    1ff4:	90 70       	andi	r25, 0x00	; 0
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	11 f4       	brne	.+4      	; 0x1ffe <M_ADC_void_GetDigitalValueSynchNonBlocking+0x4c>
		return ADC_FAILED;
    1ffa:	1e 82       	std	Y+6, r1	; 0x06
    1ffc:	4f c0       	rjmp	.+158    	; 0x209c <M_ADC_void_GetDigitalValueSynchNonBlocking+0xea>
	}
	else{
	ADCSRA_REG |= (1<<ADCSRA_ADIF); //clear the flag
    1ffe:	a6 e2       	ldi	r26, 0x26	; 38
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e6 e2       	ldi	r30, 0x26	; 38
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	80 61       	ori	r24, 0x10	; 16
    200a:	8c 93       	st	X, r24

	switch(ADC_ADJUSTMENT){
    200c:	80 91 89 04 	lds	r24, 0x0489
    2010:	28 2f       	mov	r18, r24
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	3d 83       	std	Y+5, r19	; 0x05
    2016:	2c 83       	std	Y+4, r18	; 0x04
    2018:	8c 81       	ldd	r24, Y+4	; 0x04
    201a:	9d 81       	ldd	r25, Y+5	; 0x05
    201c:	00 97       	sbiw	r24, 0x00	; 0
    201e:	11 f1       	breq	.+68     	; 0x2064 <M_ADC_void_GetDigitalValueSynchNonBlocking+0xb2>
    2020:	2c 81       	ldd	r18, Y+4	; 0x04
    2022:	3d 81       	ldd	r19, Y+5	; 0x05
    2024:	21 30       	cpi	r18, 0x01	; 1
    2026:	31 05       	cpc	r19, r1
    2028:	b9 f5       	brne	.+110    	; 0x2098 <M_ADC_void_GetDigitalValueSynchNonBlocking+0xe6>
	case ADC_LEFT_ADJUST:
		(*data) = ADCL_REG;
    202a:	e4 e2       	ldi	r30, 0x24	; 36
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	ea 81       	ldd	r30, Y+2	; 0x02
    2036:	fb 81       	ldd	r31, Y+3	; 0x03
    2038:	91 83       	std	Z+1, r25	; 0x01
    203a:	80 83       	st	Z, r24
		(*data) |= ADCH_REG<<2;
    203c:	ea 81       	ldd	r30, Y+2	; 0x02
    203e:	fb 81       	ldd	r31, Y+3	; 0x03
    2040:	20 81       	ld	r18, Z
    2042:	31 81       	ldd	r19, Z+1	; 0x01
    2044:	e5 e2       	ldi	r30, 0x25	; 37
    2046:	f0 e0       	ldi	r31, 0x00	; 0
    2048:	80 81       	ld	r24, Z
    204a:	88 2f       	mov	r24, r24
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	88 0f       	add	r24, r24
    2050:	99 1f       	adc	r25, r25
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	82 2b       	or	r24, r18
    2058:	93 2b       	or	r25, r19
    205a:	ea 81       	ldd	r30, Y+2	; 0x02
    205c:	fb 81       	ldd	r31, Y+3	; 0x03
    205e:	91 83       	std	Z+1, r25	; 0x01
    2060:	80 83       	st	Z, r24
    2062:	1a c0       	rjmp	.+52     	; 0x2098 <M_ADC_void_GetDigitalValueSynchNonBlocking+0xe6>
		break;
	case ADC_RIGHT_ADJUST:
		(*data) = ADCL_REG;
    2064:	e4 e2       	ldi	r30, 0x24	; 36
    2066:	f0 e0       	ldi	r31, 0x00	; 0
    2068:	80 81       	ld	r24, Z
    206a:	88 2f       	mov	r24, r24
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	ea 81       	ldd	r30, Y+2	; 0x02
    2070:	fb 81       	ldd	r31, Y+3	; 0x03
    2072:	91 83       	std	Z+1, r25	; 0x01
    2074:	80 83       	st	Z, r24
		(*data) |= (ADCH_REG<<8);
    2076:	ea 81       	ldd	r30, Y+2	; 0x02
    2078:	fb 81       	ldd	r31, Y+3	; 0x03
    207a:	20 81       	ld	r18, Z
    207c:	31 81       	ldd	r19, Z+1	; 0x01
    207e:	e5 e2       	ldi	r30, 0x25	; 37
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	80 81       	ld	r24, Z
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	98 2f       	mov	r25, r24
    208a:	88 27       	eor	r24, r24
    208c:	82 2b       	or	r24, r18
    208e:	93 2b       	or	r25, r19
    2090:	ea 81       	ldd	r30, Y+2	; 0x02
    2092:	fb 81       	ldd	r31, Y+3	; 0x03
    2094:	91 83       	std	Z+1, r25	; 0x01
    2096:	80 83       	st	Z, r24
		break;
	}

	return ADC_SUCCEED;
    2098:	31 e0       	ldi	r19, 0x01	; 1
    209a:	3e 83       	std	Y+6, r19	; 0x06
    209c:	8e 81       	ldd	r24, Y+6	; 0x06

	}
}
    209e:	26 96       	adiw	r28, 0x06	; 6
    20a0:	0f b6       	in	r0, 0x3f	; 63
    20a2:	f8 94       	cli
    20a4:	de bf       	out	0x3e, r29	; 62
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	cd bf       	out	0x3d, r28	; 61
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	08 95       	ret

000020b0 <M_ADC_void_GetDigitalValueAsynchCallback>:

//(conversion is started externally)
void M_ADC_void_GetDigitalValueAsynchCallback(ADC_channel_t channel, void (*localCallBack)(void)){
    20b0:	df 93       	push	r29
    20b2:	cf 93       	push	r28
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <M_ADC_void_GetDigitalValueAsynchCallback+0x6>
    20b6:	0f 92       	push	r0
    20b8:	cd b7       	in	r28, 0x3d	; 61
    20ba:	de b7       	in	r29, 0x3e	; 62
    20bc:	89 83       	std	Y+1, r24	; 0x01
    20be:	7b 83       	std	Y+3, r23	; 0x03
    20c0:	6a 83       	std	Y+2, r22	; 0x02

	//Channel
	ADMUX_REG &= 0xE0;
    20c2:	a7 e2       	ldi	r26, 0x27	; 39
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e7 e2       	ldi	r30, 0x27	; 39
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 81       	ld	r24, Z
    20cc:	80 7e       	andi	r24, 0xE0	; 224
    20ce:	8c 93       	st	X, r24
	ADMUX_REG |= channel ;
    20d0:	a7 e2       	ldi	r26, 0x27	; 39
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e7 e2       	ldi	r30, 0x27	; 39
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	90 81       	ld	r25, Z
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	89 2b       	or	r24, r25
    20de:	8c 93       	st	X, r24

	ADC_CallBackPTR = localCallBack;
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	9b 81       	ldd	r25, Y+3	; 0x03
    20e4:	90 93 88 04 	sts	0x0488, r25
    20e8:	80 93 87 04 	sts	0x0487, r24

}
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	08 95       	ret

000020f8 <__vector_16>:


ISR(ADC_vect){
    20f8:	1f 92       	push	r1
    20fa:	0f 92       	push	r0
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	0f 92       	push	r0
    2100:	11 24       	eor	r1, r1
    2102:	2f 93       	push	r18
    2104:	3f 93       	push	r19
    2106:	4f 93       	push	r20
    2108:	5f 93       	push	r21
    210a:	6f 93       	push	r22
    210c:	7f 93       	push	r23
    210e:	8f 93       	push	r24
    2110:	9f 93       	push	r25
    2112:	af 93       	push	r26
    2114:	bf 93       	push	r27
    2116:	ef 93       	push	r30
    2118:	ff 93       	push	r31
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	cd b7       	in	r28, 0x3d	; 61
    2120:	de b7       	in	r29, 0x3e	; 62

	if(ADC_CallBackPTR != NULL){
    2122:	80 91 87 04 	lds	r24, 0x0487
    2126:	90 91 88 04 	lds	r25, 0x0488
    212a:	00 97       	sbiw	r24, 0x00	; 0
    212c:	29 f0       	breq	.+10     	; 0x2138 <__vector_16+0x40>
		ADC_CallBackPTR();
    212e:	e0 91 87 04 	lds	r30, 0x0487
    2132:	f0 91 88 04 	lds	r31, 0x0488
    2136:	09 95       	icall
	}



}
    2138:	cf 91       	pop	r28
    213a:	df 91       	pop	r29
    213c:	ff 91       	pop	r31
    213e:	ef 91       	pop	r30
    2140:	bf 91       	pop	r27
    2142:	af 91       	pop	r26
    2144:	9f 91       	pop	r25
    2146:	8f 91       	pop	r24
    2148:	7f 91       	pop	r23
    214a:	6f 91       	pop	r22
    214c:	5f 91       	pop	r21
    214e:	4f 91       	pop	r20
    2150:	3f 91       	pop	r19
    2152:	2f 91       	pop	r18
    2154:	0f 90       	pop	r0
    2156:	0f be       	out	0x3f, r0	; 63
    2158:	0f 90       	pop	r0
    215a:	1f 90       	pop	r1
    215c:	18 95       	reti

0000215e <H_WIFI_void_WIFIInit>:
extern u8 RX_Counter_UART;
extern S_UART_config_t UART_config  ;

char buff[100];

void H_WIFI_void_WIFIInit(S_WIFI_Config_t S_WIFI_Config) {
    215e:	df 93       	push	r29
    2160:	cf 93       	push	r28
    2162:	cd b7       	in	r28, 0x3d	; 61
    2164:	de b7       	in	r29, 0x3e	; 62
    2166:	c4 5a       	subi	r28, 0xA4	; 164
    2168:	d0 40       	sbci	r29, 0x00	; 0
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	fe 01       	movw	r30, r28
    2176:	e2 56       	subi	r30, 0x62	; 98
    2178:	ff 4f       	sbci	r31, 0xFF	; 255
    217a:	20 83       	st	Z, r18
    217c:	31 83       	std	Z+1, r19	; 0x01
    217e:	42 83       	std	Z+2, r20	; 0x02
    2180:	53 83       	std	Z+3, r21	; 0x03
    2182:	64 83       	std	Z+4, r22	; 0x04
    2184:	75 83       	std	Z+5, r23	; 0x05
    2186:	86 83       	std	Z+6, r24	; 0x06

	char command[100];
	M_UART_void_UARTInit(UART_config);
    2188:	80 91 f9 02 	lds	r24, 0x02F9
    218c:	90 91 fa 02 	lds	r25, 0x02FA
    2190:	a0 91 fb 02 	lds	r26, 0x02FB
    2194:	b0 91 fc 02 	lds	r27, 0x02FC
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	0e 94 50 07 	call	0xea0	; 0xea0 <M_UART_void_UARTInit>
	//_delay_ms(500);
	sprintf(command, "AT+CWMODE=%d\r\n", S_WIFI_Config.WIFI_Mode);
    21a0:	fe 01       	movw	r30, r28
    21a2:	e2 56       	subi	r30, 0x62	; 98
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	80 81       	ld	r24, Z
    21a8:	28 2f       	mov	r18, r24
    21aa:	30 e0       	ldi	r19, 0x00	; 0
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <H_WIFI_void_WIFIInit+0x50>
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <H_WIFI_void_WIFIInit+0x52>
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <H_WIFI_void_WIFIInit+0x54>
    21b2:	ed b7       	in	r30, 0x3d	; 61
    21b4:	fe b7       	in	r31, 0x3e	; 62
    21b6:	31 96       	adiw	r30, 0x01	; 1
    21b8:	ce 01       	movw	r24, r28
    21ba:	ca 96       	adiw	r24, 0x3a	; 58
    21bc:	91 83       	std	Z+1, r25	; 0x01
    21be:	80 83       	st	Z, r24
    21c0:	80 e6       	ldi	r24, 0x60	; 96
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	93 83       	std	Z+3, r25	; 0x03
    21c6:	82 83       	std	Z+2, r24	; 0x02
    21c8:	35 83       	std	Z+5, r19	; 0x05
    21ca:	24 83       	std	Z+4, r18	; 0x04
    21cc:	0e 94 94 25 	call	0x4b28	; 0x4b28 <sprintf>
    21d0:	8d b7       	in	r24, 0x3d	; 61
    21d2:	9e b7       	in	r25, 0x3e	; 62
    21d4:	06 96       	adiw	r24, 0x06	; 6
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	9e bf       	out	0x3e, r25	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	8d bf       	out	0x3d, r24	; 61
	WIFI_command_statue_t command_statue = H_WIFI_command_statue_t_sendData(
			command, buff, 2000);
    21e0:	ce 01       	movw	r24, r28
    21e2:	ca 96       	adiw	r24, 0x3a	; 58
    21e4:	21 ef       	ldi	r18, 0xF1	; 241
    21e6:	34 e0       	ldi	r19, 0x04	; 4
    21e8:	b9 01       	movw	r22, r18
    21ea:	40 ed       	ldi	r20, 0xD0	; 208
    21ec:	57 e0       	ldi	r21, 0x07	; 7
    21ee:	0e 94 ab 14 	call	0x2956	; 0x2956 <H_WIFI_command_statue_t_sendData>
    21f2:	89 af       	std	Y+57, r24	; 0x39
#if(WIFI_DEBUG)
	//configuar LCD here
	if (command_statue == WIFI_command_ok) {
    21f4:	89 ad       	ldd	r24, Y+57	; 0x39
    21f6:	88 23       	and	r24, r24
    21f8:	09 f0       	breq	.+2      	; 0x21fc <H_WIFI_void_WIFIInit+0x9e>
    21fa:	79 c0       	rjmp	.+242    	; 0x22ee <H_WIFI_void_WIFIInit+0x190>
		H_LCD_void_Clear();
    21fc:	0e 94 14 1c 	call	0x3828	; 0x3828 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI mode updated");
    2200:	8f e6       	ldi	r24, 0x6F	; 111
    2202:	90 e0       	ldi	r25, 0x00	; 0
    2204:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>
    2208:	80 e0       	ldi	r24, 0x00	; 0
    220a:	90 e0       	ldi	r25, 0x00	; 0
    220c:	aa ef       	ldi	r26, 0xFA	; 250
    220e:	b4 e4       	ldi	r27, 0x44	; 68
    2210:	8d ab       	std	Y+53, r24	; 0x35
    2212:	9e ab       	std	Y+54, r25	; 0x36
    2214:	af ab       	std	Y+55, r26	; 0x37
    2216:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2218:	6d a9       	ldd	r22, Y+53	; 0x35
    221a:	7e a9       	ldd	r23, Y+54	; 0x36
    221c:	8f a9       	ldd	r24, Y+55	; 0x37
    221e:	98 ad       	ldd	r25, Y+56	; 0x38
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	4a e7       	ldi	r20, 0x7A	; 122
    2226:	55 e4       	ldi	r21, 0x45	; 69
    2228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	89 ab       	std	Y+49, r24	; 0x31
    2232:	9a ab       	std	Y+50, r25	; 0x32
    2234:	ab ab       	std	Y+51, r26	; 0x33
    2236:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2238:	69 a9       	ldd	r22, Y+49	; 0x31
    223a:	7a a9       	ldd	r23, Y+50	; 0x32
    223c:	8b a9       	ldd	r24, Y+51	; 0x33
    223e:	9c a9       	ldd	r25, Y+52	; 0x34
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e8       	ldi	r20, 0x80	; 128
    2246:	5f e3       	ldi	r21, 0x3F	; 63
    2248:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    224c:	88 23       	and	r24, r24
    224e:	2c f4       	brge	.+10     	; 0x225a <H_WIFI_void_WIFIInit+0xfc>
		__ticks = 1;
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	98 ab       	std	Y+48, r25	; 0x30
    2256:	8f a7       	std	Y+47, r24	; 0x2f
    2258:	3f c0       	rjmp	.+126    	; 0x22d8 <H_WIFI_void_WIFIInit+0x17a>
	else if (__tmp > 65535)
    225a:	69 a9       	ldd	r22, Y+49	; 0x31
    225c:	7a a9       	ldd	r23, Y+50	; 0x32
    225e:	8b a9       	ldd	r24, Y+51	; 0x33
    2260:	9c a9       	ldd	r25, Y+52	; 0x34
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	3f ef       	ldi	r19, 0xFF	; 255
    2266:	4f e7       	ldi	r20, 0x7F	; 127
    2268:	57 e4       	ldi	r21, 0x47	; 71
    226a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    226e:	18 16       	cp	r1, r24
    2270:	4c f5       	brge	.+82     	; 0x22c4 <H_WIFI_void_WIFIInit+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2272:	6d a9       	ldd	r22, Y+53	; 0x35
    2274:	7e a9       	ldd	r23, Y+54	; 0x36
    2276:	8f a9       	ldd	r24, Y+55	; 0x37
    2278:	98 ad       	ldd	r25, Y+56	; 0x38
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e2       	ldi	r20, 0x20	; 32
    2280:	51 e4       	ldi	r21, 0x41	; 65
    2282:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2286:	dc 01       	movw	r26, r24
    2288:	cb 01       	movw	r24, r22
    228a:	bc 01       	movw	r22, r24
    228c:	cd 01       	movw	r24, r26
    228e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2292:	dc 01       	movw	r26, r24
    2294:	cb 01       	movw	r24, r22
    2296:	98 ab       	std	Y+48, r25	; 0x30
    2298:	8f a7       	std	Y+47, r24	; 0x2f
    229a:	0f c0       	rjmp	.+30     	; 0x22ba <H_WIFI_void_WIFIInit+0x15c>
    229c:	80 e9       	ldi	r24, 0x90	; 144
    229e:	91 e0       	ldi	r25, 0x01	; 1
    22a0:	9e a7       	std	Y+46, r25	; 0x2e
    22a2:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22a4:	8d a5       	ldd	r24, Y+45	; 0x2d
    22a6:	9e a5       	ldd	r25, Y+46	; 0x2e
    22a8:	01 97       	sbiw	r24, 0x01	; 1
    22aa:	f1 f7       	brne	.-4      	; 0x22a8 <H_WIFI_void_WIFIInit+0x14a>
    22ac:	9e a7       	std	Y+46, r25	; 0x2e
    22ae:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    22b2:	98 a9       	ldd	r25, Y+48	; 0x30
    22b4:	01 97       	sbiw	r24, 0x01	; 1
    22b6:	98 ab       	std	Y+48, r25	; 0x30
    22b8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    22bc:	98 a9       	ldd	r25, Y+48	; 0x30
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	69 f7       	brne	.-38     	; 0x229c <H_WIFI_void_WIFIInit+0x13e>
    22c2:	a1 c0       	rjmp	.+322    	; 0x2406 <H_WIFI_void_WIFIInit+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c4:	69 a9       	ldd	r22, Y+49	; 0x31
    22c6:	7a a9       	ldd	r23, Y+50	; 0x32
    22c8:	8b a9       	ldd	r24, Y+51	; 0x33
    22ca:	9c a9       	ldd	r25, Y+52	; 0x34
    22cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	98 ab       	std	Y+48, r25	; 0x30
    22d6:	8f a7       	std	Y+47, r24	; 0x2f
    22d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22da:	98 a9       	ldd	r25, Y+48	; 0x30
    22dc:	9c a7       	std	Y+44, r25	; 0x2c
    22de:	8b a7       	std	Y+43, r24	; 0x2b
    22e0:	8b a5       	ldd	r24, Y+43	; 0x2b
    22e2:	9c a5       	ldd	r25, Y+44	; 0x2c
    22e4:	01 97       	sbiw	r24, 0x01	; 1
    22e6:	f1 f7       	brne	.-4      	; 0x22e4 <H_WIFI_void_WIFIInit+0x186>
    22e8:	9c a7       	std	Y+44, r25	; 0x2c
    22ea:	8b a7       	std	Y+43, r24	; 0x2b
    22ec:	8c c0       	rjmp	.+280    	; 0x2406 <H_WIFI_void_WIFIInit+0x2a8>
		_delay_ms(2000);
	} else if (command_statue == WIFI_command_error) {
    22ee:	89 ad       	ldd	r24, Y+57	; 0x39
    22f0:	81 30       	cpi	r24, 0x01	; 1
    22f2:	09 f0       	breq	.+2      	; 0x22f6 <H_WIFI_void_WIFIInit+0x198>
    22f4:	7f c0       	rjmp	.+254    	; 0x23f4 <H_WIFI_void_WIFIInit+0x296>
		H_LCD_void_Clear();
    22f6:	0e 94 14 1c 	call	0x3828	; 0x3828 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI mode update error!");
    22fa:	81 e8       	ldi	r24, 0x81	; 129
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>
    2302:	80 e0       	ldi	r24, 0x00	; 0
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	aa ef       	ldi	r26, 0xFA	; 250
    2308:	b4 e4       	ldi	r27, 0x44	; 68
    230a:	8f a3       	std	Y+39, r24	; 0x27
    230c:	98 a7       	std	Y+40, r25	; 0x28
    230e:	a9 a7       	std	Y+41, r26	; 0x29
    2310:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2312:	6f a1       	ldd	r22, Y+39	; 0x27
    2314:	78 a5       	ldd	r23, Y+40	; 0x28
    2316:	89 a5       	ldd	r24, Y+41	; 0x29
    2318:	9a a5       	ldd	r25, Y+42	; 0x2a
    231a:	20 e0       	ldi	r18, 0x00	; 0
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	4a e7       	ldi	r20, 0x7A	; 122
    2320:	55 e4       	ldi	r21, 0x45	; 69
    2322:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2326:	dc 01       	movw	r26, r24
    2328:	cb 01       	movw	r24, r22
    232a:	8b a3       	std	Y+35, r24	; 0x23
    232c:	9c a3       	std	Y+36, r25	; 0x24
    232e:	ad a3       	std	Y+37, r26	; 0x25
    2330:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2332:	6b a1       	ldd	r22, Y+35	; 0x23
    2334:	7c a1       	ldd	r23, Y+36	; 0x24
    2336:	8d a1       	ldd	r24, Y+37	; 0x25
    2338:	9e a1       	ldd	r25, Y+38	; 0x26
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e8       	ldi	r20, 0x80	; 128
    2340:	5f e3       	ldi	r21, 0x3F	; 63
    2342:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2346:	88 23       	and	r24, r24
    2348:	2c f4       	brge	.+10     	; 0x2354 <H_WIFI_void_WIFIInit+0x1f6>
		__ticks = 1;
    234a:	81 e0       	ldi	r24, 0x01	; 1
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	9a a3       	std	Y+34, r25	; 0x22
    2350:	89 a3       	std	Y+33, r24	; 0x21
    2352:	3f c0       	rjmp	.+126    	; 0x23d2 <H_WIFI_void_WIFIInit+0x274>
	else if (__tmp > 65535)
    2354:	6b a1       	ldd	r22, Y+35	; 0x23
    2356:	7c a1       	ldd	r23, Y+36	; 0x24
    2358:	8d a1       	ldd	r24, Y+37	; 0x25
    235a:	9e a1       	ldd	r25, Y+38	; 0x26
    235c:	20 e0       	ldi	r18, 0x00	; 0
    235e:	3f ef       	ldi	r19, 0xFF	; 255
    2360:	4f e7       	ldi	r20, 0x7F	; 127
    2362:	57 e4       	ldi	r21, 0x47	; 71
    2364:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2368:	18 16       	cp	r1, r24
    236a:	4c f5       	brge	.+82     	; 0x23be <H_WIFI_void_WIFIInit+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    236c:	6f a1       	ldd	r22, Y+39	; 0x27
    236e:	78 a5       	ldd	r23, Y+40	; 0x28
    2370:	89 a5       	ldd	r24, Y+41	; 0x29
    2372:	9a a5       	ldd	r25, Y+42	; 0x2a
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	40 e2       	ldi	r20, 0x20	; 32
    237a:	51 e4       	ldi	r21, 0x41	; 65
    237c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	bc 01       	movw	r22, r24
    2386:	cd 01       	movw	r24, r26
    2388:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	9a a3       	std	Y+34, r25	; 0x22
    2392:	89 a3       	std	Y+33, r24	; 0x21
    2394:	0f c0       	rjmp	.+30     	; 0x23b4 <H_WIFI_void_WIFIInit+0x256>
    2396:	80 e9       	ldi	r24, 0x90	; 144
    2398:	91 e0       	ldi	r25, 0x01	; 1
    239a:	98 a3       	std	Y+32, r25	; 0x20
    239c:	8f 8f       	std	Y+31, r24	; 0x1f
    239e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    23a0:	98 a1       	ldd	r25, Y+32	; 0x20
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <H_WIFI_void_WIFIInit+0x244>
    23a6:	98 a3       	std	Y+32, r25	; 0x20
    23a8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23aa:	89 a1       	ldd	r24, Y+33	; 0x21
    23ac:	9a a1       	ldd	r25, Y+34	; 0x22
    23ae:	01 97       	sbiw	r24, 0x01	; 1
    23b0:	9a a3       	std	Y+34, r25	; 0x22
    23b2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b4:	89 a1       	ldd	r24, Y+33	; 0x21
    23b6:	9a a1       	ldd	r25, Y+34	; 0x22
    23b8:	00 97       	sbiw	r24, 0x00	; 0
    23ba:	69 f7       	brne	.-38     	; 0x2396 <H_WIFI_void_WIFIInit+0x238>
    23bc:	14 c0       	rjmp	.+40     	; 0x23e6 <H_WIFI_void_WIFIInit+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23be:	6b a1       	ldd	r22, Y+35	; 0x23
    23c0:	7c a1       	ldd	r23, Y+36	; 0x24
    23c2:	8d a1       	ldd	r24, Y+37	; 0x25
    23c4:	9e a1       	ldd	r25, Y+38	; 0x26
    23c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ca:	dc 01       	movw	r26, r24
    23cc:	cb 01       	movw	r24, r22
    23ce:	9a a3       	std	Y+34, r25	; 0x22
    23d0:	89 a3       	std	Y+33, r24	; 0x21
    23d2:	89 a1       	ldd	r24, Y+33	; 0x21
    23d4:	9a a1       	ldd	r25, Y+34	; 0x22
    23d6:	9e 8f       	std	Y+30, r25	; 0x1e
    23d8:	8d 8f       	std	Y+29, r24	; 0x1d
    23da:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23dc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23de:	01 97       	sbiw	r24, 0x01	; 1
    23e0:	f1 f7       	brne	.-4      	; 0x23de <H_WIFI_void_WIFIInit+0x280>
    23e2:	9e 8f       	std	Y+30, r25	; 0x1e
    23e4:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2000);
		H_LCD_void_Clear();
    23e6:	0e 94 14 1c 	call	0x3828	; 0x3828 <H_LCD_void_Clear>
		H_LCD_void_sendString(buff);
    23ea:	81 ef       	ldi	r24, 0xF1	; 241
    23ec:	94 e0       	ldi	r25, 0x04	; 4
    23ee:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>
    23f2:	09 c0       	rjmp	.+18     	; 0x2406 <H_WIFI_void_WIFIInit+0x2a8>
	} else if (command_statue == WIFI_command_timeOute) {
    23f4:	89 ad       	ldd	r24, Y+57	; 0x39
    23f6:	82 30       	cpi	r24, 0x02	; 2
    23f8:	31 f4       	brne	.+12     	; 0x2406 <H_WIFI_void_WIFIInit+0x2a8>
		H_LCD_void_Clear();
    23fa:	0e 94 14 1c 	call	0x3828	; 0x3828 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI mode update timeout");
    23fe:	89 e9       	ldi	r24, 0x99	; 153
    2400:	90 e0       	ldi	r25, 0x00	; 0
    2402:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>

	}
#endif

	sprintf(command, "AT+CWJAP=\"%s\",\"%s\"\r\n", S_WIFI_Config.ssid,
    2406:	fe 01       	movw	r30, r28
    2408:	e2 56       	subi	r30, 0x62	; 98
    240a:	ff 4f       	sbci	r31, 0xFF	; 255
    240c:	21 81       	ldd	r18, Z+1	; 0x01
    240e:	32 81       	ldd	r19, Z+2	; 0x02
    2410:	fe 01       	movw	r30, r28
    2412:	e2 56       	subi	r30, 0x62	; 98
    2414:	ff 4f       	sbci	r31, 0xFF	; 255
    2416:	43 81       	ldd	r20, Z+3	; 0x03
    2418:	54 81       	ldd	r21, Z+4	; 0x04
    241a:	8d b7       	in	r24, 0x3d	; 61
    241c:	9e b7       	in	r25, 0x3e	; 62
    241e:	08 97       	sbiw	r24, 0x08	; 8
    2420:	0f b6       	in	r0, 0x3f	; 63
    2422:	f8 94       	cli
    2424:	9e bf       	out	0x3e, r25	; 62
    2426:	0f be       	out	0x3f, r0	; 63
    2428:	8d bf       	out	0x3d, r24	; 61
    242a:	ed b7       	in	r30, 0x3d	; 61
    242c:	fe b7       	in	r31, 0x3e	; 62
    242e:	31 96       	adiw	r30, 0x01	; 1
    2430:	ce 01       	movw	r24, r28
    2432:	ca 96       	adiw	r24, 0x3a	; 58
    2434:	91 83       	std	Z+1, r25	; 0x01
    2436:	80 83       	st	Z, r24
    2438:	82 eb       	ldi	r24, 0xB2	; 178
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	93 83       	std	Z+3, r25	; 0x03
    243e:	82 83       	std	Z+2, r24	; 0x02
    2440:	35 83       	std	Z+5, r19	; 0x05
    2442:	24 83       	std	Z+4, r18	; 0x04
    2444:	57 83       	std	Z+7, r21	; 0x07
    2446:	46 83       	std	Z+6, r20	; 0x06
    2448:	0e 94 94 25 	call	0x4b28	; 0x4b28 <sprintf>
    244c:	8d b7       	in	r24, 0x3d	; 61
    244e:	9e b7       	in	r25, 0x3e	; 62
    2450:	08 96       	adiw	r24, 0x08	; 8
    2452:	0f b6       	in	r0, 0x3f	; 63
    2454:	f8 94       	cli
    2456:	9e bf       	out	0x3e, r25	; 62
    2458:	0f be       	out	0x3f, r0	; 63
    245a:	8d bf       	out	0x3d, r24	; 61
			S_WIFI_Config.password);
	command_statue = H_WIFI_command_statue_t_sendData(command, buff, 2000);
    245c:	ce 01       	movw	r24, r28
    245e:	ca 96       	adiw	r24, 0x3a	; 58
    2460:	21 ef       	ldi	r18, 0xF1	; 241
    2462:	34 e0       	ldi	r19, 0x04	; 4
    2464:	b9 01       	movw	r22, r18
    2466:	40 ed       	ldi	r20, 0xD0	; 208
    2468:	57 e0       	ldi	r21, 0x07	; 7
    246a:	0e 94 ab 14 	call	0x2956	; 0x2956 <H_WIFI_command_statue_t_sendData>
    246e:	89 af       	std	Y+57, r24	; 0x39

#if(WIFI_DEBUG)
	if (command_statue == WIFI_command_ok) {
    2470:	89 ad       	ldd	r24, Y+57	; 0x39
    2472:	88 23       	and	r24, r24
    2474:	09 f0       	breq	.+2      	; 0x2478 <H_WIFI_void_WIFIInit+0x31a>
    2476:	79 c0       	rjmp	.+242    	; 0x256a <H_WIFI_void_WIFIInit+0x40c>
		H_LCD_void_Clear();
    2478:	0e 94 14 1c 	call	0x3828	; 0x3828 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI SSID Pass updated");
    247c:	87 ec       	ldi	r24, 0xC7	; 199
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	aa ef       	ldi	r26, 0xFA	; 250
    248a:	b4 e4       	ldi	r27, 0x44	; 68
    248c:	89 8f       	std	Y+25, r24	; 0x19
    248e:	9a 8f       	std	Y+26, r25	; 0x1a
    2490:	ab 8f       	std	Y+27, r26	; 0x1b
    2492:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2494:	69 8d       	ldd	r22, Y+25	; 0x19
    2496:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2498:	8b 8d       	ldd	r24, Y+27	; 0x1b
    249a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	4a e7       	ldi	r20, 0x7A	; 122
    24a2:	55 e4       	ldi	r21, 0x45	; 69
    24a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a8:	dc 01       	movw	r26, r24
    24aa:	cb 01       	movw	r24, r22
    24ac:	8d 8b       	std	Y+21, r24	; 0x15
    24ae:	9e 8b       	std	Y+22, r25	; 0x16
    24b0:	af 8b       	std	Y+23, r26	; 0x17
    24b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24b4:	6d 89       	ldd	r22, Y+21	; 0x15
    24b6:	7e 89       	ldd	r23, Y+22	; 0x16
    24b8:	8f 89       	ldd	r24, Y+23	; 0x17
    24ba:	98 8d       	ldd	r25, Y+24	; 0x18
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	30 e0       	ldi	r19, 0x00	; 0
    24c0:	40 e8       	ldi	r20, 0x80	; 128
    24c2:	5f e3       	ldi	r21, 0x3F	; 63
    24c4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    24c8:	88 23       	and	r24, r24
    24ca:	2c f4       	brge	.+10     	; 0x24d6 <H_WIFI_void_WIFIInit+0x378>
		__ticks = 1;
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	9c 8b       	std	Y+20, r25	; 0x14
    24d2:	8b 8b       	std	Y+19, r24	; 0x13
    24d4:	3f c0       	rjmp	.+126    	; 0x2554 <H_WIFI_void_WIFIInit+0x3f6>
	else if (__tmp > 65535)
    24d6:	6d 89       	ldd	r22, Y+21	; 0x15
    24d8:	7e 89       	ldd	r23, Y+22	; 0x16
    24da:	8f 89       	ldd	r24, Y+23	; 0x17
    24dc:	98 8d       	ldd	r25, Y+24	; 0x18
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	3f ef       	ldi	r19, 0xFF	; 255
    24e2:	4f e7       	ldi	r20, 0x7F	; 127
    24e4:	57 e4       	ldi	r21, 0x47	; 71
    24e6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    24ea:	18 16       	cp	r1, r24
    24ec:	4c f5       	brge	.+82     	; 0x2540 <H_WIFI_void_WIFIInit+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ee:	69 8d       	ldd	r22, Y+25	; 0x19
    24f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e2       	ldi	r20, 0x20	; 32
    24fc:	51 e4       	ldi	r21, 0x41	; 65
    24fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	bc 01       	movw	r22, r24
    2508:	cd 01       	movw	r24, r26
    250a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	9c 8b       	std	Y+20, r25	; 0x14
    2514:	8b 8b       	std	Y+19, r24	; 0x13
    2516:	0f c0       	rjmp	.+30     	; 0x2536 <H_WIFI_void_WIFIInit+0x3d8>
    2518:	80 e9       	ldi	r24, 0x90	; 144
    251a:	91 e0       	ldi	r25, 0x01	; 1
    251c:	9a 8b       	std	Y+18, r25	; 0x12
    251e:	89 8b       	std	Y+17, r24	; 0x11
    2520:	89 89       	ldd	r24, Y+17	; 0x11
    2522:	9a 89       	ldd	r25, Y+18	; 0x12
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	f1 f7       	brne	.-4      	; 0x2524 <H_WIFI_void_WIFIInit+0x3c6>
    2528:	9a 8b       	std	Y+18, r25	; 0x12
    252a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    252c:	8b 89       	ldd	r24, Y+19	; 0x13
    252e:	9c 89       	ldd	r25, Y+20	; 0x14
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	9c 8b       	std	Y+20, r25	; 0x14
    2534:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2536:	8b 89       	ldd	r24, Y+19	; 0x13
    2538:	9c 89       	ldd	r25, Y+20	; 0x14
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	69 f7       	brne	.-38     	; 0x2518 <H_WIFI_void_WIFIInit+0x3ba>
    253e:	a1 c0       	rjmp	.+322    	; 0x2682 <H_WIFI_void_WIFIInit+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2540:	6d 89       	ldd	r22, Y+21	; 0x15
    2542:	7e 89       	ldd	r23, Y+22	; 0x16
    2544:	8f 89       	ldd	r24, Y+23	; 0x17
    2546:	98 8d       	ldd	r25, Y+24	; 0x18
    2548:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	9c 8b       	std	Y+20, r25	; 0x14
    2552:	8b 8b       	std	Y+19, r24	; 0x13
    2554:	8b 89       	ldd	r24, Y+19	; 0x13
    2556:	9c 89       	ldd	r25, Y+20	; 0x14
    2558:	98 8b       	std	Y+16, r25	; 0x10
    255a:	8f 87       	std	Y+15, r24	; 0x0f
    255c:	8f 85       	ldd	r24, Y+15	; 0x0f
    255e:	98 89       	ldd	r25, Y+16	; 0x10
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <H_WIFI_void_WIFIInit+0x402>
    2564:	98 8b       	std	Y+16, r25	; 0x10
    2566:	8f 87       	std	Y+15, r24	; 0x0f
    2568:	8c c0       	rjmp	.+280    	; 0x2682 <H_WIFI_void_WIFIInit+0x524>
		_delay_ms(2000);
	} else if (command_statue == WIFI_command_error) {
    256a:	89 ad       	ldd	r24, Y+57	; 0x39
    256c:	81 30       	cpi	r24, 0x01	; 1
    256e:	09 f0       	breq	.+2      	; 0x2572 <H_WIFI_void_WIFIInit+0x414>
    2570:	7f c0       	rjmp	.+254    	; 0x2670 <H_WIFI_void_WIFIInit+0x512>
		H_LCD_void_Clear();
    2572:	0e 94 14 1c 	call	0x3828	; 0x3828 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI SSID update error!");
    2576:	8e ed       	ldi	r24, 0xDE	; 222
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	aa ef       	ldi	r26, 0xFA	; 250
    2584:	b4 e4       	ldi	r27, 0x44	; 68
    2586:	8b 87       	std	Y+11, r24	; 0x0b
    2588:	9c 87       	std	Y+12, r25	; 0x0c
    258a:	ad 87       	std	Y+13, r26	; 0x0d
    258c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    258e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2590:	7c 85       	ldd	r23, Y+12	; 0x0c
    2592:	8d 85       	ldd	r24, Y+13	; 0x0d
    2594:	9e 85       	ldd	r25, Y+14	; 0x0e
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	4a e7       	ldi	r20, 0x7A	; 122
    259c:	55 e4       	ldi	r21, 0x45	; 69
    259e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a2:	dc 01       	movw	r26, r24
    25a4:	cb 01       	movw	r24, r22
    25a6:	8f 83       	std	Y+7, r24	; 0x07
    25a8:	98 87       	std	Y+8, r25	; 0x08
    25aa:	a9 87       	std	Y+9, r26	; 0x09
    25ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25ae:	6f 81       	ldd	r22, Y+7	; 0x07
    25b0:	78 85       	ldd	r23, Y+8	; 0x08
    25b2:	89 85       	ldd	r24, Y+9	; 0x09
    25b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e8       	ldi	r20, 0x80	; 128
    25bc:	5f e3       	ldi	r21, 0x3F	; 63
    25be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    25c2:	88 23       	and	r24, r24
    25c4:	2c f4       	brge	.+10     	; 0x25d0 <H_WIFI_void_WIFIInit+0x472>
		__ticks = 1;
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	9e 83       	std	Y+6, r25	; 0x06
    25cc:	8d 83       	std	Y+5, r24	; 0x05
    25ce:	3f c0       	rjmp	.+126    	; 0x264e <H_WIFI_void_WIFIInit+0x4f0>
	else if (__tmp > 65535)
    25d0:	6f 81       	ldd	r22, Y+7	; 0x07
    25d2:	78 85       	ldd	r23, Y+8	; 0x08
    25d4:	89 85       	ldd	r24, Y+9	; 0x09
    25d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	3f ef       	ldi	r19, 0xFF	; 255
    25dc:	4f e7       	ldi	r20, 0x7F	; 127
    25de:	57 e4       	ldi	r21, 0x47	; 71
    25e0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    25e4:	18 16       	cp	r1, r24
    25e6:	4c f5       	brge	.+82     	; 0x263a <H_WIFI_void_WIFIInit+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    25ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    25ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f0:	20 e0       	ldi	r18, 0x00	; 0
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	40 e2       	ldi	r20, 0x20	; 32
    25f6:	51 e4       	ldi	r21, 0x41	; 65
    25f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fc:	dc 01       	movw	r26, r24
    25fe:	cb 01       	movw	r24, r22
    2600:	bc 01       	movw	r22, r24
    2602:	cd 01       	movw	r24, r26
    2604:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2608:	dc 01       	movw	r26, r24
    260a:	cb 01       	movw	r24, r22
    260c:	9e 83       	std	Y+6, r25	; 0x06
    260e:	8d 83       	std	Y+5, r24	; 0x05
    2610:	0f c0       	rjmp	.+30     	; 0x2630 <H_WIFI_void_WIFIInit+0x4d2>
    2612:	80 e9       	ldi	r24, 0x90	; 144
    2614:	91 e0       	ldi	r25, 0x01	; 1
    2616:	9c 83       	std	Y+4, r25	; 0x04
    2618:	8b 83       	std	Y+3, r24	; 0x03
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	9c 81       	ldd	r25, Y+4	; 0x04
    261e:	01 97       	sbiw	r24, 0x01	; 1
    2620:	f1 f7       	brne	.-4      	; 0x261e <H_WIFI_void_WIFIInit+0x4c0>
    2622:	9c 83       	std	Y+4, r25	; 0x04
    2624:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2626:	8d 81       	ldd	r24, Y+5	; 0x05
    2628:	9e 81       	ldd	r25, Y+6	; 0x06
    262a:	01 97       	sbiw	r24, 0x01	; 1
    262c:	9e 83       	std	Y+6, r25	; 0x06
    262e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2630:	8d 81       	ldd	r24, Y+5	; 0x05
    2632:	9e 81       	ldd	r25, Y+6	; 0x06
    2634:	00 97       	sbiw	r24, 0x00	; 0
    2636:	69 f7       	brne	.-38     	; 0x2612 <H_WIFI_void_WIFIInit+0x4b4>
    2638:	14 c0       	rjmp	.+40     	; 0x2662 <H_WIFI_void_WIFIInit+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263a:	6f 81       	ldd	r22, Y+7	; 0x07
    263c:	78 85       	ldd	r23, Y+8	; 0x08
    263e:	89 85       	ldd	r24, Y+9	; 0x09
    2640:	9a 85       	ldd	r25, Y+10	; 0x0a
    2642:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	9e 83       	std	Y+6, r25	; 0x06
    264c:	8d 83       	std	Y+5, r24	; 0x05
    264e:	8d 81       	ldd	r24, Y+5	; 0x05
    2650:	9e 81       	ldd	r25, Y+6	; 0x06
    2652:	9a 83       	std	Y+2, r25	; 0x02
    2654:	89 83       	std	Y+1, r24	; 0x01
    2656:	89 81       	ldd	r24, Y+1	; 0x01
    2658:	9a 81       	ldd	r25, Y+2	; 0x02
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	f1 f7       	brne	.-4      	; 0x265a <H_WIFI_void_WIFIInit+0x4fc>
    265e:	9a 83       	std	Y+2, r25	; 0x02
    2660:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		H_LCD_void_Clear();
    2662:	0e 94 14 1c 	call	0x3828	; 0x3828 <H_LCD_void_Clear>
		H_LCD_void_sendString(buff);
    2666:	81 ef       	ldi	r24, 0xF1	; 241
    2668:	94 e0       	ldi	r25, 0x04	; 4
    266a:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>
    266e:	09 c0       	rjmp	.+18     	; 0x2682 <H_WIFI_void_WIFIInit+0x524>
	} else if (command_statue == WIFI_command_timeOute) {
    2670:	89 ad       	ldd	r24, Y+57	; 0x39
    2672:	82 30       	cpi	r24, 0x02	; 2
    2674:	31 f4       	brne	.+12     	; 0x2682 <H_WIFI_void_WIFIInit+0x524>
		H_LCD_void_Clear();
    2676:	0e 94 14 1c 	call	0x3828	; 0x3828 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI SSID update timeout");
    267a:	86 ef       	ldi	r24, 0xF6	; 246
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>

	}
#endif

}
    2682:	cc 55       	subi	r28, 0x5C	; 92
    2684:	df 4f       	sbci	r29, 0xFF	; 255
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <H_WIFI_void_StartTCPServer>:

void H_WIFI_void_StartTCPServer(void) {
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	cd b7       	in	r28, 0x3d	; 61
    269c:	de b7       	in	r29, 0x3e	; 62
    269e:	6d 97       	sbiw	r28, 0x1d	; 29
    26a0:	0f b6       	in	r0, 0x3f	; 63
    26a2:	f8 94       	cli
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	0f be       	out	0x3f, r0	; 63
    26a8:	cd bf       	out	0x3d, r28	; 61
	WIFI_command_statue_t command_statue = H_WIFI_command_statue_t_sendData(
			"AT+CIPMUX=1\r\n", buff, 2000);
    26aa:	8f e0       	ldi	r24, 0x0F	; 15
    26ac:	91 e0       	ldi	r25, 0x01	; 1
    26ae:	21 ef       	ldi	r18, 0xF1	; 241
    26b0:	34 e0       	ldi	r19, 0x04	; 4
    26b2:	b9 01       	movw	r22, r18
    26b4:	40 ed       	ldi	r20, 0xD0	; 208
    26b6:	57 e0       	ldi	r21, 0x07	; 7
    26b8:	0e 94 ab 14 	call	0x2956	; 0x2956 <H_WIFI_command_statue_t_sendData>
    26bc:	8d 8f       	std	Y+29, r24	; 0x1d
	command_statue = H_WIFI_command_statue_t_sendData("AT+CIPSERVER=1\r\n",
    26be:	8d e1       	ldi	r24, 0x1D	; 29
    26c0:	91 e0       	ldi	r25, 0x01	; 1
    26c2:	21 ef       	ldi	r18, 0xF1	; 241
    26c4:	34 e0       	ldi	r19, 0x04	; 4
    26c6:	b9 01       	movw	r22, r18
    26c8:	40 ed       	ldi	r20, 0xD0	; 208
    26ca:	57 e0       	ldi	r21, 0x07	; 7
    26cc:	0e 94 ab 14 	call	0x2956	; 0x2956 <H_WIFI_command_statue_t_sendData>
    26d0:	8d 8f       	std	Y+29, r24	; 0x1d
			buff, 2000);

#if(WIFI_DEBUG)
	if (command_statue == WIFI_command_ok) {
    26d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d4:	88 23       	and	r24, r24
    26d6:	09 f0       	breq	.+2      	; 0x26da <H_WIFI_void_StartTCPServer+0x44>
    26d8:	79 c0       	rjmp	.+242    	; 0x27cc <H_WIFI_void_StartTCPServer+0x136>
		H_LCD_void_Clear();
    26da:	0e 94 14 1c 	call	0x3828	; 0x3828 <H_LCD_void_Clear>
		H_LCD_void_sendString("TCP server started");
    26de:	8e e2       	ldi	r24, 0x2E	; 46
    26e0:	91 e0       	ldi	r25, 0x01	; 1
    26e2:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	aa ef       	ldi	r26, 0xFA	; 250
    26ec:	b4 e4       	ldi	r27, 0x44	; 68
    26ee:	89 8f       	std	Y+25, r24	; 0x19
    26f0:	9a 8f       	std	Y+26, r25	; 0x1a
    26f2:	ab 8f       	std	Y+27, r26	; 0x1b
    26f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26f6:	69 8d       	ldd	r22, Y+25	; 0x19
    26f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	4a e7       	ldi	r20, 0x7A	; 122
    2704:	55 e4       	ldi	r21, 0x45	; 69
    2706:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	8d 8b       	std	Y+21, r24	; 0x15
    2710:	9e 8b       	std	Y+22, r25	; 0x16
    2712:	af 8b       	std	Y+23, r26	; 0x17
    2714:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2716:	6d 89       	ldd	r22, Y+21	; 0x15
    2718:	7e 89       	ldd	r23, Y+22	; 0x16
    271a:	8f 89       	ldd	r24, Y+23	; 0x17
    271c:	98 8d       	ldd	r25, Y+24	; 0x18
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e8       	ldi	r20, 0x80	; 128
    2724:	5f e3       	ldi	r21, 0x3F	; 63
    2726:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    272a:	88 23       	and	r24, r24
    272c:	2c f4       	brge	.+10     	; 0x2738 <H_WIFI_void_StartTCPServer+0xa2>
		__ticks = 1;
    272e:	81 e0       	ldi	r24, 0x01	; 1
    2730:	90 e0       	ldi	r25, 0x00	; 0
    2732:	9c 8b       	std	Y+20, r25	; 0x14
    2734:	8b 8b       	std	Y+19, r24	; 0x13
    2736:	3f c0       	rjmp	.+126    	; 0x27b6 <H_WIFI_void_StartTCPServer+0x120>
	else if (__tmp > 65535)
    2738:	6d 89       	ldd	r22, Y+21	; 0x15
    273a:	7e 89       	ldd	r23, Y+22	; 0x16
    273c:	8f 89       	ldd	r24, Y+23	; 0x17
    273e:	98 8d       	ldd	r25, Y+24	; 0x18
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	3f ef       	ldi	r19, 0xFF	; 255
    2744:	4f e7       	ldi	r20, 0x7F	; 127
    2746:	57 e4       	ldi	r21, 0x47	; 71
    2748:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    274c:	18 16       	cp	r1, r24
    274e:	4c f5       	brge	.+82     	; 0x27a2 <H_WIFI_void_StartTCPServer+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2750:	69 8d       	ldd	r22, Y+25	; 0x19
    2752:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2754:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2756:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e2       	ldi	r20, 0x20	; 32
    275e:	51 e4       	ldi	r21, 0x41	; 65
    2760:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	bc 01       	movw	r22, r24
    276a:	cd 01       	movw	r24, r26
    276c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2770:	dc 01       	movw	r26, r24
    2772:	cb 01       	movw	r24, r22
    2774:	9c 8b       	std	Y+20, r25	; 0x14
    2776:	8b 8b       	std	Y+19, r24	; 0x13
    2778:	0f c0       	rjmp	.+30     	; 0x2798 <H_WIFI_void_StartTCPServer+0x102>
    277a:	80 e9       	ldi	r24, 0x90	; 144
    277c:	91 e0       	ldi	r25, 0x01	; 1
    277e:	9a 8b       	std	Y+18, r25	; 0x12
    2780:	89 8b       	std	Y+17, r24	; 0x11
    2782:	89 89       	ldd	r24, Y+17	; 0x11
    2784:	9a 89       	ldd	r25, Y+18	; 0x12
    2786:	01 97       	sbiw	r24, 0x01	; 1
    2788:	f1 f7       	brne	.-4      	; 0x2786 <H_WIFI_void_StartTCPServer+0xf0>
    278a:	9a 8b       	std	Y+18, r25	; 0x12
    278c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    278e:	8b 89       	ldd	r24, Y+19	; 0x13
    2790:	9c 89       	ldd	r25, Y+20	; 0x14
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	9c 8b       	std	Y+20, r25	; 0x14
    2796:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2798:	8b 89       	ldd	r24, Y+19	; 0x13
    279a:	9c 89       	ldd	r25, Y+20	; 0x14
    279c:	00 97       	sbiw	r24, 0x00	; 0
    279e:	69 f7       	brne	.-38     	; 0x277a <H_WIFI_void_StartTCPServer+0xe4>
    27a0:	97 c0       	rjmp	.+302    	; 0x28d0 <H_WIFI_void_StartTCPServer+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a2:	6d 89       	ldd	r22, Y+21	; 0x15
    27a4:	7e 89       	ldd	r23, Y+22	; 0x16
    27a6:	8f 89       	ldd	r24, Y+23	; 0x17
    27a8:	98 8d       	ldd	r25, Y+24	; 0x18
    27aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	9c 8b       	std	Y+20, r25	; 0x14
    27b4:	8b 8b       	std	Y+19, r24	; 0x13
    27b6:	8b 89       	ldd	r24, Y+19	; 0x13
    27b8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ba:	98 8b       	std	Y+16, r25	; 0x10
    27bc:	8f 87       	std	Y+15, r24	; 0x0f
    27be:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c0:	98 89       	ldd	r25, Y+16	; 0x10
    27c2:	01 97       	sbiw	r24, 0x01	; 1
    27c4:	f1 f7       	brne	.-4      	; 0x27c2 <H_WIFI_void_StartTCPServer+0x12c>
    27c6:	98 8b       	std	Y+16, r25	; 0x10
    27c8:	8f 87       	std	Y+15, r24	; 0x0f
    27ca:	82 c0       	rjmp	.+260    	; 0x28d0 <H_WIFI_void_StartTCPServer+0x23a>
		_delay_ms(2000);
	} else if (command_statue == WIFI_command_error) {
    27cc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    27ce:	81 30       	cpi	r24, 0x01	; 1
    27d0:	09 f0       	breq	.+2      	; 0x27d4 <H_WIFI_void_StartTCPServer+0x13e>
    27d2:	7e c0       	rjmp	.+252    	; 0x28d0 <H_WIFI_void_StartTCPServer+0x23a>
		H_LCD_void_Clear();
    27d4:	0e 94 14 1c 	call	0x3828	; 0x3828 <H_LCD_void_Clear>
		H_LCD_void_sendString("TCP server failed!");
    27d8:	81 e4       	ldi	r24, 0x41	; 65
    27da:	91 e0       	ldi	r25, 0x01	; 1
    27dc:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	aa ef       	ldi	r26, 0xFA	; 250
    27e6:	b4 e4       	ldi	r27, 0x44	; 68
    27e8:	8b 87       	std	Y+11, r24	; 0x0b
    27ea:	9c 87       	std	Y+12, r25	; 0x0c
    27ec:	ad 87       	std	Y+13, r26	; 0x0d
    27ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	4a e7       	ldi	r20, 0x7A	; 122
    27fe:	55 e4       	ldi	r21, 0x45	; 69
    2800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	8f 83       	std	Y+7, r24	; 0x07
    280a:	98 87       	std	Y+8, r25	; 0x08
    280c:	a9 87       	std	Y+9, r26	; 0x09
    280e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2810:	6f 81       	ldd	r22, Y+7	; 0x07
    2812:	78 85       	ldd	r23, Y+8	; 0x08
    2814:	89 85       	ldd	r24, Y+9	; 0x09
    2816:	9a 85       	ldd	r25, Y+10	; 0x0a
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5f e3       	ldi	r21, 0x3F	; 63
    2820:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2824:	88 23       	and	r24, r24
    2826:	2c f4       	brge	.+10     	; 0x2832 <H_WIFI_void_StartTCPServer+0x19c>
		__ticks = 1;
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	9e 83       	std	Y+6, r25	; 0x06
    282e:	8d 83       	std	Y+5, r24	; 0x05
    2830:	3f c0       	rjmp	.+126    	; 0x28b0 <H_WIFI_void_StartTCPServer+0x21a>
	else if (__tmp > 65535)
    2832:	6f 81       	ldd	r22, Y+7	; 0x07
    2834:	78 85       	ldd	r23, Y+8	; 0x08
    2836:	89 85       	ldd	r24, Y+9	; 0x09
    2838:	9a 85       	ldd	r25, Y+10	; 0x0a
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	3f ef       	ldi	r19, 0xFF	; 255
    283e:	4f e7       	ldi	r20, 0x7F	; 127
    2840:	57 e4       	ldi	r21, 0x47	; 71
    2842:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2846:	18 16       	cp	r1, r24
    2848:	4c f5       	brge	.+82     	; 0x289c <H_WIFI_void_StartTCPServer+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284a:	6b 85       	ldd	r22, Y+11	; 0x0b
    284c:	7c 85       	ldd	r23, Y+12	; 0x0c
    284e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2850:	9e 85       	ldd	r25, Y+14	; 0x0e
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e2       	ldi	r20, 0x20	; 32
    2858:	51 e4       	ldi	r21, 0x41	; 65
    285a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    285e:	dc 01       	movw	r26, r24
    2860:	cb 01       	movw	r24, r22
    2862:	bc 01       	movw	r22, r24
    2864:	cd 01       	movw	r24, r26
    2866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	9e 83       	std	Y+6, r25	; 0x06
    2870:	8d 83       	std	Y+5, r24	; 0x05
    2872:	0f c0       	rjmp	.+30     	; 0x2892 <H_WIFI_void_StartTCPServer+0x1fc>
    2874:	80 e9       	ldi	r24, 0x90	; 144
    2876:	91 e0       	ldi	r25, 0x01	; 1
    2878:	9c 83       	std	Y+4, r25	; 0x04
    287a:	8b 83       	std	Y+3, r24	; 0x03
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	9c 81       	ldd	r25, Y+4	; 0x04
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <H_WIFI_void_StartTCPServer+0x1ea>
    2884:	9c 83       	std	Y+4, r25	; 0x04
    2886:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2888:	8d 81       	ldd	r24, Y+5	; 0x05
    288a:	9e 81       	ldd	r25, Y+6	; 0x06
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	9e 83       	std	Y+6, r25	; 0x06
    2890:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2892:	8d 81       	ldd	r24, Y+5	; 0x05
    2894:	9e 81       	ldd	r25, Y+6	; 0x06
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	69 f7       	brne	.-38     	; 0x2874 <H_WIFI_void_StartTCPServer+0x1de>
    289a:	14 c0       	rjmp	.+40     	; 0x28c4 <H_WIFI_void_StartTCPServer+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289c:	6f 81       	ldd	r22, Y+7	; 0x07
    289e:	78 85       	ldd	r23, Y+8	; 0x08
    28a0:	89 85       	ldd	r24, Y+9	; 0x09
    28a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	9e 83       	std	Y+6, r25	; 0x06
    28ae:	8d 83       	std	Y+5, r24	; 0x05
    28b0:	8d 81       	ldd	r24, Y+5	; 0x05
    28b2:	9e 81       	ldd	r25, Y+6	; 0x06
    28b4:	9a 83       	std	Y+2, r25	; 0x02
    28b6:	89 83       	std	Y+1, r24	; 0x01
    28b8:	89 81       	ldd	r24, Y+1	; 0x01
    28ba:	9a 81       	ldd	r25, Y+2	; 0x02
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	f1 f7       	brne	.-4      	; 0x28bc <H_WIFI_void_StartTCPServer+0x226>
    28c0:	9a 83       	std	Y+2, r25	; 0x02
    28c2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		H_LCD_void_Clear();
    28c4:	0e 94 14 1c 	call	0x3828	; 0x3828 <H_LCD_void_Clear>
		H_LCD_void_sendString(buff);
    28c8:	81 ef       	ldi	r24, 0xF1	; 241
    28ca:	94 e0       	ldi	r25, 0x04	; 4
    28cc:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>
	}
#endif
}
    28d0:	6d 96       	adiw	r28, 0x1d	; 29
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	de bf       	out	0x3e, r29	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	08 95       	ret

000028e2 <H_WIFI_statue_t_cheakOk>:

WIFI_command_statue_t H_WIFI_statue_t_cheakOk(char *response) {
    28e2:	df 93       	push	r29
    28e4:	cf 93       	push	r28
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <H_WIFI_statue_t_cheakOk+0x6>
    28e8:	00 d0       	rcall	.+0      	; 0x28ea <H_WIFI_statue_t_cheakOk+0x8>
    28ea:	0f 92       	push	r0
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
    28f0:	9c 83       	std	Y+4, r25	; 0x04
    28f2:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i <= UART_BUFFER_SIZE; i++) {
    28f4:	1a 82       	std	Y+2, r1	; 0x02
    28f6:	19 82       	std	Y+1, r1	; 0x01
    28f8:	1e c0       	rjmp	.+60     	; 0x2936 <H_WIFI_statue_t_cheakOk+0x54>
		if (*(response + i) == 'O')
    28fa:	29 81       	ldd	r18, Y+1	; 0x01
    28fc:	3a 81       	ldd	r19, Y+2	; 0x02
    28fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2900:	9c 81       	ldd	r25, Y+4	; 0x04
    2902:	fc 01       	movw	r30, r24
    2904:	e2 0f       	add	r30, r18
    2906:	f3 1f       	adc	r31, r19
    2908:	80 81       	ld	r24, Z
    290a:	8f 34       	cpi	r24, 0x4F	; 79
    290c:	79 f4       	brne	.+30     	; 0x292c <H_WIFI_statue_t_cheakOk+0x4a>
			if (*(response + i + 1) == 'K')
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	9c 01       	movw	r18, r24
    2914:	2f 5f       	subi	r18, 0xFF	; 255
    2916:	3f 4f       	sbci	r19, 0xFF	; 255
    2918:	8b 81       	ldd	r24, Y+3	; 0x03
    291a:	9c 81       	ldd	r25, Y+4	; 0x04
    291c:	fc 01       	movw	r30, r24
    291e:	e2 0f       	add	r30, r18
    2920:	f3 1f       	adc	r31, r19
    2922:	80 81       	ld	r24, Z
    2924:	8b 34       	cpi	r24, 0x4B	; 75
    2926:	11 f4       	brne	.+4      	; 0x292c <H_WIFI_statue_t_cheakOk+0x4a>
				return WIFI_command_ok;
    2928:	1d 82       	std	Y+5, r1	; 0x05
    292a:	0c c0       	rjmp	.+24     	; 0x2944 <H_WIFI_statue_t_cheakOk+0x62>
	}
#endif
}

WIFI_command_statue_t H_WIFI_statue_t_cheakOk(char *response) {
	for (int i = 0; i <= UART_BUFFER_SIZE; i++) {
    292c:	89 81       	ldd	r24, Y+1	; 0x01
    292e:	9a 81       	ldd	r25, Y+2	; 0x02
    2930:	01 96       	adiw	r24, 0x01	; 1
    2932:	9a 83       	std	Y+2, r25	; 0x02
    2934:	89 83       	std	Y+1, r24	; 0x01
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	9a 81       	ldd	r25, Y+2	; 0x02
    293a:	85 36       	cpi	r24, 0x65	; 101
    293c:	91 05       	cpc	r25, r1
    293e:	ec f2       	brlt	.-70     	; 0x28fa <H_WIFI_statue_t_cheakOk+0x18>
		if (*(response + i) == 'O')
			if (*(response + i + 1) == 'K')
				return WIFI_command_ok;
	}
	return WIFI_command_error;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	8d 83       	std	Y+5, r24	; 0x05
    2944:	8d 81       	ldd	r24, Y+5	; 0x05

}
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	0f 90       	pop	r0
    294c:	0f 90       	pop	r0
    294e:	0f 90       	pop	r0
    2950:	cf 91       	pop	r28
    2952:	df 91       	pop	r29
    2954:	08 95       	ret

00002956 <H_WIFI_command_statue_t_sendData>:

WIFI_command_statue_t H_WIFI_command_statue_t_sendData(char *command,
		char *response, const int timeout) {
    2956:	ef 92       	push	r14
    2958:	ff 92       	push	r15
    295a:	0f 93       	push	r16
    295c:	1f 93       	push	r17
    295e:	df 93       	push	r29
    2960:	cf 93       	push	r28
    2962:	cd b7       	in	r28, 0x3d	; 61
    2964:	de b7       	in	r29, 0x3e	; 62
    2966:	2d 97       	sbiw	r28, 0x0d	; 13
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	f8 94       	cli
    296c:	de bf       	out	0x3e, r29	; 62
    296e:	0f be       	out	0x3f, r0	; 63
    2970:	cd bf       	out	0x3d, r28	; 61
    2972:	98 87       	std	Y+8, r25	; 0x08
    2974:	8f 83       	std	Y+7, r24	; 0x07
    2976:	7a 87       	std	Y+10, r23	; 0x0a
    2978:	69 87       	std	Y+9, r22	; 0x09
    297a:	5c 87       	std	Y+12, r21	; 0x0c
    297c:	4b 87       	std	Y+11, r20	; 0x0b
	init_millis(16000000);
    297e:	60 e0       	ldi	r22, 0x00	; 0
    2980:	74 e2       	ldi	r23, 0x24	; 36
    2982:	84 ef       	ldi	r24, 0xF4	; 244
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	0e 94 91 1f 	call	0x3f22	; 0x3f22 <init_millis>
	M_UART_void_UARTSendString(command);
    298a:	8f 81       	ldd	r24, Y+7	; 0x07
    298c:	98 85       	ldd	r25, Y+8	; 0x08
    298e:	0e 94 2c 08 	call	0x1058	; 0x1058 <M_UART_void_UARTSendString>
	int counter = 0;
    2992:	1e 82       	std	Y+6, r1	; 0x06
    2994:	1d 82       	std	Y+5, r1	; 0x05
	long int time = millis();
    2996:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <millis>
    299a:	dc 01       	movw	r26, r24
    299c:	cb 01       	movw	r24, r22
    299e:	89 83       	std	Y+1, r24	; 0x01
    29a0:	9a 83       	std	Y+2, r25	; 0x02
    29a2:	ab 83       	std	Y+3, r26	; 0x03
    29a4:	bc 83       	std	Y+4, r27	; 0x04
	while (1) {
		if ((time + 2000) < millis())
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	9a 81       	ldd	r25, Y+2	; 0x02
    29aa:	ab 81       	ldd	r26, Y+3	; 0x03
    29ac:	bc 81       	ldd	r27, Y+4	; 0x04
    29ae:	80 53       	subi	r24, 0x30	; 48
    29b0:	98 4f       	sbci	r25, 0xF8	; 248
    29b2:	af 4f       	sbci	r26, 0xFF	; 255
    29b4:	bf 4f       	sbci	r27, 0xFF	; 255
    29b6:	7c 01       	movw	r14, r24
    29b8:	8d 01       	movw	r16, r26
    29ba:	0e 94 d7 1f 	call	0x3fae	; 0x3fae <millis>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	e8 16       	cp	r14, r24
    29c4:	f9 06       	cpc	r15, r25
    29c6:	0a 07       	cpc	r16, r26
    29c8:	1b 07       	cpc	r17, r27
    29ca:	00 f1       	brcs	.+64     	; 0x2a0c <H_WIFI_command_statue_t_sendData+0xb6>
    29cc:	1a c0       	rjmp	.+52     	; 0x2a02 <H_WIFI_command_statue_t_sendData+0xac>
			break;
		while (RX_Counter_UART) {
			*(response + counter) = M_UART_u8_receiveByteASynchNonBlocking();
    29ce:	2d 81       	ldd	r18, Y+5	; 0x05
    29d0:	3e 81       	ldd	r19, Y+6	; 0x06
    29d2:	89 85       	ldd	r24, Y+9	; 0x09
    29d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d6:	8c 01       	movw	r16, r24
    29d8:	02 0f       	add	r16, r18
    29da:	13 1f       	adc	r17, r19
    29dc:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <M_UART_u8_receiveByteASynchNonBlocking>
    29e0:	f8 01       	movw	r30, r16
    29e2:	80 83       	st	Z, r24
			if (*(response + counter))
    29e4:	2d 81       	ldd	r18, Y+5	; 0x05
    29e6:	3e 81       	ldd	r19, Y+6	; 0x06
    29e8:	89 85       	ldd	r24, Y+9	; 0x09
    29ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ec:	fc 01       	movw	r30, r24
    29ee:	e2 0f       	add	r30, r18
    29f0:	f3 1f       	adc	r31, r19
    29f2:	80 81       	ld	r24, Z
    29f4:	88 23       	and	r24, r24
    29f6:	29 f0       	breq	.+10     	; 0x2a02 <H_WIFI_command_statue_t_sendData+0xac>
				counter++;
    29f8:	8d 81       	ldd	r24, Y+5	; 0x05
    29fa:	9e 81       	ldd	r25, Y+6	; 0x06
    29fc:	01 96       	adiw	r24, 0x01	; 1
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
	int counter = 0;
	long int time = millis();
	while (1) {
		if ((time + 2000) < millis())
			break;
		while (RX_Counter_UART) {
    2a02:	80 91 86 04 	lds	r24, 0x0486
    2a06:	88 23       	and	r24, r24
    2a08:	11 f7       	brne	.-60     	; 0x29ce <H_WIFI_command_statue_t_sendData+0x78>
    2a0a:	cd cf       	rjmp	.-102    	; 0x29a6 <H_WIFI_command_statue_t_sendData+0x50>
			if (*(response + counter))
				counter++;
		}
	}

	*(response + counter) = 0;
    2a0c:	2d 81       	ldd	r18, Y+5	; 0x05
    2a0e:	3e 81       	ldd	r19, Y+6	; 0x06
    2a10:	89 85       	ldd	r24, Y+9	; 0x09
    2a12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a14:	fc 01       	movw	r30, r24
    2a16:	e2 0f       	add	r30, r18
    2a18:	f3 1f       	adc	r31, r19
    2a1a:	10 82       	st	Z, r1
	if (counter == 0)
    2a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a20:	00 97       	sbiw	r24, 0x00	; 0
    2a22:	19 f4       	brne	.+6      	; 0x2a2a <H_WIFI_command_statue_t_sendData+0xd4>
		return WIFI_command_timeOute;
    2a24:	f2 e0       	ldi	r31, 0x02	; 2
    2a26:	fd 87       	std	Y+13, r31	; 0x0d
    2a28:	05 c0       	rjmp	.+10     	; 0x2a34 <H_WIFI_command_statue_t_sendData+0xde>
	return H_WIFI_statue_t_cheakOk(response);
    2a2a:	89 85       	ldd	r24, Y+9	; 0x09
    2a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a2e:	0e 94 71 14 	call	0x28e2	; 0x28e2 <H_WIFI_statue_t_cheakOk>
    2a32:	8d 87       	std	Y+13, r24	; 0x0d
    2a34:	8d 85       	ldd	r24, Y+13	; 0x0d

}
    2a36:	2d 96       	adiw	r28, 0x0d	; 13
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	cf 91       	pop	r28
    2a44:	df 91       	pop	r29
    2a46:	1f 91       	pop	r17
    2a48:	0f 91       	pop	r16
    2a4a:	ff 90       	pop	r15
    2a4c:	ef 90       	pop	r14
    2a4e:	08 95       	ret

00002a50 <H_WIFI_TCPCommand_t_TCPCommand>:

WIFI_TCPCommand_t H_WIFI_TCPCommand_t_TCPCommand(char *StrReceved) {
    2a50:	df 93       	push	r29
    2a52:	cf 93       	push	r28
    2a54:	00 d0       	rcall	.+0      	; 0x2a56 <H_WIFI_TCPCommand_t_TCPCommand+0x6>
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <H_WIFI_TCPCommand_t_TCPCommand+0x8>
    2a58:	00 d0       	rcall	.+0      	; 0x2a5a <H_WIFI_TCPCommand_t_TCPCommand+0xa>
    2a5a:	cd b7       	in	r28, 0x3d	; 61
    2a5c:	de b7       	in	r29, 0x3e	; 62
    2a5e:	9d 83       	std	Y+5, r25	; 0x05
    2a60:	8c 83       	std	Y+4, r24	; 0x04
	char *command;
	command = strstr(StrReceved, "REL");
    2a62:	8c 81       	ldd	r24, Y+4	; 0x04
    2a64:	9d 81       	ldd	r25, Y+5	; 0x05
    2a66:	24 e5       	ldi	r18, 0x54	; 84
    2a68:	31 e0       	ldi	r19, 0x01	; 1
    2a6a:	b9 01       	movw	r22, r18
    2a6c:	0e 94 32 25 	call	0x4a64	; 0x4a64 <strstr>
    2a70:	9b 83       	std	Y+3, r25	; 0x03
    2a72:	8a 83       	std	Y+2, r24	; 0x02
	if (command != NULL) {
    2a74:	8a 81       	ldd	r24, Y+2	; 0x02
    2a76:	9b 81       	ldd	r25, Y+3	; 0x03
    2a78:	00 97       	sbiw	r24, 0x00	; 0
    2a7a:	99 f0       	breq	.+38     	; 0x2aa2 <H_WIFI_TCPCommand_t_TCPCommand+0x52>
		u8 LEDstatues = *(command + 3) - '0';
    2a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a80:	fc 01       	movw	r30, r24
    2a82:	33 96       	adiw	r30, 0x03	; 3
    2a84:	80 81       	ld	r24, Z
    2a86:	80 53       	subi	r24, 0x30	; 48
    2a88:	89 83       	std	Y+1, r24	; 0x01
		if (LEDstatues == 0) {
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
    2a8c:	88 23       	and	r24, r24
    2a8e:	19 f4       	brne	.+6      	; 0x2a96 <H_WIFI_TCPCommand_t_TCPCommand+0x46>


			return TCPCommand_RelayOFF;
    2a90:	82 e0       	ldi	r24, 0x02	; 2
    2a92:	8e 83       	std	Y+6, r24	; 0x06
    2a94:	07 c0       	rjmp	.+14     	; 0x2aa4 <H_WIFI_TCPCommand_t_TCPCommand+0x54>
		} else if (LEDstatues == 1) {
    2a96:	89 81       	ldd	r24, Y+1	; 0x01
    2a98:	81 30       	cpi	r24, 0x01	; 1
    2a9a:	19 f4       	brne	.+6      	; 0x2aa2 <H_WIFI_TCPCommand_t_TCPCommand+0x52>


			return TCPCommand_RelayON;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	8e 83       	std	Y+6, r24	; 0x06
    2aa0:	01 c0       	rjmp	.+2      	; 0x2aa4 <H_WIFI_TCPCommand_t_TCPCommand+0x54>
		}
	}

	return TCPCommand_NULL;
    2aa2:	1e 82       	std	Y+6, r1	; 0x06
    2aa4:	8e 81       	ldd	r24, Y+6	; 0x06
}
    2aa6:	26 96       	adiw	r28, 0x06	; 6
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	cf 91       	pop	r28
    2ab4:	df 91       	pop	r29
    2ab6:	08 95       	ret

00002ab8 <H_WIFI_ReceiveStatue_t_WIFIreceive>:



WIFI_Receive_statue_t H_WIFI_ReceiveStatue_t_WIFIreceive(char *recevBuffer)
{
    2ab8:	df 93       	push	r29
    2aba:	cf 93       	push	r28
    2abc:	00 d0       	rcall	.+0      	; 0x2abe <H_WIFI_ReceiveStatue_t_WIFIreceive+0x6>
    2abe:	0f 92       	push	r0
    2ac0:	cd b7       	in	r28, 0x3d	; 61
    2ac2:	de b7       	in	r29, 0x3e	; 62
    2ac4:	9a 83       	std	Y+2, r25	; 0x02
    2ac6:	89 83       	std	Y+1, r24	; 0x01
	if(M_UART_void_UARTAvalepale() > 0)
    2ac8:	0e 94 47 07 	call	0xe8e	; 0xe8e <M_UART_void_UARTAvalepale>
    2acc:	88 23       	and	r24, r24
    2ace:	31 f0       	breq	.+12     	; 0x2adc <H_WIFI_ReceiveStatue_t_WIFIreceive+0x24>
	{
		M_UART_void_ReceiveString(recevBuffer);
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad4:	0e 94 74 08 	call	0x10e8	; 0x10e8 <M_UART_void_ReceiveString>
		return WIFI_Data_Receved;
    2ad8:	1b 82       	std	Y+3, r1	; 0x03
    2ada:	02 c0       	rjmp	.+4      	; 0x2ae0 <H_WIFI_ReceiveStatue_t_WIFIreceive+0x28>
	}
	return WIFI_NO_data_receved;
    2adc:	81 e0       	ldi	r24, 0x01	; 1
    2ade:	8b 83       	std	Y+3, r24	; 0x03
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	cf 91       	pop	r28
    2aea:	df 91       	pop	r29
    2aec:	08 95       	ret

00002aee <H_LM35_void_Init>:
extern ADC_config_t LM35_ADC_config_struct;


#define LM35_NUM_OF_SAMPLES	40

void H_LM35_void_Init(){
    2aee:	df 93       	push	r29
    2af0:	cf 93       	push	r28
    2af2:	cd b7       	in	r28, 0x3d	; 61
    2af4:	de b7       	in	r29, 0x3e	; 62
	M_ADC_void_Init(LM35_ADC_config_struct);
    2af6:	40 91 e6 02 	lds	r20, 0x02E6
    2afa:	50 91 e7 02 	lds	r21, 0x02E7
    2afe:	60 91 e8 02 	lds	r22, 0x02E8
    2b02:	70 91 e9 02 	lds	r23, 0x02E9
    2b06:	80 91 ea 02 	lds	r24, 0x02EA
    2b0a:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <M_ADC_void_Init>
}
    2b0e:	cf 91       	pop	r28
    2b10:	df 91       	pop	r29
    2b12:	08 95       	ret

00002b14 <H_LM35_u8_ReadTemprature>:

u8 H_LM35_u8_ReadTemprature(){
    2b14:	df 93       	push	r29
    2b16:	cf 93       	push	r28
    2b18:	cd b7       	in	r28, 0x3d	; 61
    2b1a:	de b7       	in	r29, 0x3e	; 62
    2b1c:	c2 55       	subi	r28, 0x52	; 82
    2b1e:	d0 40       	sbci	r29, 0x00	; 0
    2b20:	0f b6       	in	r0, 0x3f	; 63
    2b22:	f8 94       	cli
    2b24:	de bf       	out	0x3e, r29	; 62
    2b26:	0f be       	out	0x3f, r0	; 63
    2b28:	cd bf       	out	0x3d, r28	; 61
*/

	f64 analog_volt;
	f64 tempreture;
	u16 ADC_result;
	u8 state= ADC_FAILED;
    2b2a:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 readings[LM35_NUM_OF_SAMPLES];
	int i, j;

	//Taking samples
	for(i= 0; i< LM35_NUM_OF_SAMPLES ; i++){
    2b2c:	1d 8e       	std	Y+29, r1	; 0x1d
    2b2e:	1c 8e       	std	Y+28, r1	; 0x1c
    2b30:	dc c0       	rjmp	.+440    	; 0x2cea <H_LM35_u8_ReadTemprature+0x1d6>
		M_ADC_void_StartConversion();
    2b32:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <M_ADC_void_StartConversion>
    2b36:	08 c0       	rjmp	.+16     	; 0x2b48 <H_LM35_u8_ReadTemprature+0x34>

		while(state == ADC_FAILED){
			state = M_ADC_void_GetDigitalValueSynchNonBlocking(LM35_ADC_CHANNEL, &ADC_result);
    2b38:	9e 01       	movw	r18, r28
    2b3a:	29 5d       	subi	r18, 0xD9	; 217
    2b3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	b9 01       	movw	r22, r18
    2b42:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <M_ADC_void_GetDigitalValueSynchNonBlocking>
    2b46:	8e 8f       	std	Y+30, r24	; 0x1e

	//Taking samples
	for(i= 0; i< LM35_NUM_OF_SAMPLES ; i++){
		M_ADC_void_StartConversion();

		while(state == ADC_FAILED){
    2b48:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2b4a:	88 23       	and	r24, r24
    2b4c:	a9 f3       	breq	.-22     	; 0x2b38 <H_LM35_u8_ReadTemprature+0x24>
			state = M_ADC_void_GetDigitalValueSynchNonBlocking(LM35_ADC_CHANNEL, &ADC_result);
		}
		readings[i] = ADC_result;
    2b4e:	2c 8d       	ldd	r18, Y+28	; 0x1c
    2b50:	3d 8d       	ldd	r19, Y+29	; 0x1d
    2b52:	8f a1       	ldd	r24, Y+39	; 0x27
    2b54:	98 a5       	ldd	r25, Y+40	; 0x28
    2b56:	48 2f       	mov	r20, r24
    2b58:	ce 01       	movw	r24, r28
    2b5a:	89 96       	adiw	r24, 0x29	; 41
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	e2 0f       	add	r30, r18
    2b60:	f3 1f       	adc	r31, r19
    2b62:	40 83       	st	Z, r20
    2b64:	80 e0       	ldi	r24, 0x00	; 0
    2b66:	90 e0       	ldi	r25, 0x00	; 0
    2b68:	a8 ec       	ldi	r26, 0xC8	; 200
    2b6a:	b2 e4       	ldi	r27, 0x42	; 66
    2b6c:	8d 8b       	std	Y+21, r24	; 0x15
    2b6e:	9e 8b       	std	Y+22, r25	; 0x16
    2b70:	af 8b       	std	Y+23, r26	; 0x17
    2b72:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2b74:	6d 89       	ldd	r22, Y+21	; 0x15
    2b76:	7e 89       	ldd	r23, Y+22	; 0x16
    2b78:	8f 89       	ldd	r24, Y+23	; 0x17
    2b7a:	98 8d       	ldd	r25, Y+24	; 0x18
    2b7c:	2b ea       	ldi	r18, 0xAB	; 171
    2b7e:	3a ea       	ldi	r19, 0xAA	; 170
    2b80:	4a ea       	ldi	r20, 0xAA	; 170
    2b82:	50 e4       	ldi	r21, 0x40	; 64
    2b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	89 8b       	std	Y+17, r24	; 0x11
    2b8e:	9a 8b       	std	Y+18, r25	; 0x12
    2b90:	ab 8b       	std	Y+19, r26	; 0x13
    2b92:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b94:	69 89       	ldd	r22, Y+17	; 0x11
    2b96:	7a 89       	ldd	r23, Y+18	; 0x12
    2b98:	8b 89       	ldd	r24, Y+19	; 0x13
    2b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    2b9c:	20 e0       	ldi	r18, 0x00	; 0
    2b9e:	30 e0       	ldi	r19, 0x00	; 0
    2ba0:	40 e8       	ldi	r20, 0x80	; 128
    2ba2:	5f e3       	ldi	r21, 0x3F	; 63
    2ba4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ba8:	88 23       	and	r24, r24
    2baa:	1c f4       	brge	.+6      	; 0x2bb2 <H_LM35_u8_ReadTemprature+0x9e>
		__ticks = 1;
    2bac:	81 e0       	ldi	r24, 0x01	; 1
    2bae:	88 8b       	std	Y+16, r24	; 0x10
    2bb0:	91 c0       	rjmp	.+290    	; 0x2cd4 <H_LM35_u8_ReadTemprature+0x1c0>
	else if (__tmp > 255)
    2bb2:	69 89       	ldd	r22, Y+17	; 0x11
    2bb4:	7a 89       	ldd	r23, Y+18	; 0x12
    2bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bba:	20 e0       	ldi	r18, 0x00	; 0
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	4f e7       	ldi	r20, 0x7F	; 127
    2bc0:	53 e4       	ldi	r21, 0x43	; 67
    2bc2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2bc6:	18 16       	cp	r1, r24
    2bc8:	0c f0       	brlt	.+2      	; 0x2bcc <H_LM35_u8_ReadTemprature+0xb8>
    2bca:	7b c0       	rjmp	.+246    	; 0x2cc2 <H_LM35_u8_ReadTemprature+0x1ae>
	{
		_delay_ms(__us / 1000.0);
    2bcc:	6d 89       	ldd	r22, Y+21	; 0x15
    2bce:	7e 89       	ldd	r23, Y+22	; 0x16
    2bd0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bd2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bd4:	20 e0       	ldi	r18, 0x00	; 0
    2bd6:	30 e0       	ldi	r19, 0x00	; 0
    2bd8:	4a e7       	ldi	r20, 0x7A	; 122
    2bda:	54 e4       	ldi	r21, 0x44	; 68
    2bdc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	8c 87       	std	Y+12, r24	; 0x0c
    2be6:	9d 87       	std	Y+13, r25	; 0x0d
    2be8:	ae 87       	std	Y+14, r26	; 0x0e
    2bea:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bec:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bee:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bf0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bf2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bf4:	20 e0       	ldi	r18, 0x00	; 0
    2bf6:	30 e0       	ldi	r19, 0x00	; 0
    2bf8:	4a e7       	ldi	r20, 0x7A	; 122
    2bfa:	55 e4       	ldi	r21, 0x45	; 69
    2bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c00:	dc 01       	movw	r26, r24
    2c02:	cb 01       	movw	r24, r22
    2c04:	88 87       	std	Y+8, r24	; 0x08
    2c06:	99 87       	std	Y+9, r25	; 0x09
    2c08:	aa 87       	std	Y+10, r26	; 0x0a
    2c0a:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2c0c:	68 85       	ldd	r22, Y+8	; 0x08
    2c0e:	79 85       	ldd	r23, Y+9	; 0x09
    2c10:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c12:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c14:	20 e0       	ldi	r18, 0x00	; 0
    2c16:	30 e0       	ldi	r19, 0x00	; 0
    2c18:	40 e8       	ldi	r20, 0x80	; 128
    2c1a:	5f e3       	ldi	r21, 0x3F	; 63
    2c1c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2c20:	88 23       	and	r24, r24
    2c22:	2c f4       	brge	.+10     	; 0x2c2e <H_LM35_u8_ReadTemprature+0x11a>
		__ticks = 1;
    2c24:	81 e0       	ldi	r24, 0x01	; 1
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	9f 83       	std	Y+7, r25	; 0x07
    2c2a:	8e 83       	std	Y+6, r24	; 0x06
    2c2c:	3f c0       	rjmp	.+126    	; 0x2cac <H_LM35_u8_ReadTemprature+0x198>
	else if (__tmp > 65535)
    2c2e:	68 85       	ldd	r22, Y+8	; 0x08
    2c30:	79 85       	ldd	r23, Y+9	; 0x09
    2c32:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c34:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c36:	20 e0       	ldi	r18, 0x00	; 0
    2c38:	3f ef       	ldi	r19, 0xFF	; 255
    2c3a:	4f e7       	ldi	r20, 0x7F	; 127
    2c3c:	57 e4       	ldi	r21, 0x47	; 71
    2c3e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2c42:	18 16       	cp	r1, r24
    2c44:	4c f5       	brge	.+82     	; 0x2c98 <H_LM35_u8_ReadTemprature+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c46:	6c 85       	ldd	r22, Y+12	; 0x0c
    2c48:	7d 85       	ldd	r23, Y+13	; 0x0d
    2c4a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c4c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	40 e2       	ldi	r20, 0x20	; 32
    2c54:	51 e4       	ldi	r21, 0x41	; 65
    2c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	bc 01       	movw	r22, r24
    2c60:	cd 01       	movw	r24, r26
    2c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c66:	dc 01       	movw	r26, r24
    2c68:	cb 01       	movw	r24, r22
    2c6a:	9f 83       	std	Y+7, r25	; 0x07
    2c6c:	8e 83       	std	Y+6, r24	; 0x06
    2c6e:	0f c0       	rjmp	.+30     	; 0x2c8e <H_LM35_u8_ReadTemprature+0x17a>
    2c70:	80 e9       	ldi	r24, 0x90	; 144
    2c72:	91 e0       	ldi	r25, 0x01	; 1
    2c74:	9d 83       	std	Y+5, r25	; 0x05
    2c76:	8c 83       	std	Y+4, r24	; 0x04
    2c78:	8c 81       	ldd	r24, Y+4	; 0x04
    2c7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2c7c:	01 97       	sbiw	r24, 0x01	; 1
    2c7e:	f1 f7       	brne	.-4      	; 0x2c7c <H_LM35_u8_ReadTemprature+0x168>
    2c80:	9d 83       	std	Y+5, r25	; 0x05
    2c82:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c84:	8e 81       	ldd	r24, Y+6	; 0x06
    2c86:	9f 81       	ldd	r25, Y+7	; 0x07
    2c88:	01 97       	sbiw	r24, 0x01	; 1
    2c8a:	9f 83       	std	Y+7, r25	; 0x07
    2c8c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c90:	9f 81       	ldd	r25, Y+7	; 0x07
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	69 f7       	brne	.-38     	; 0x2c70 <H_LM35_u8_ReadTemprature+0x15c>
    2c96:	24 c0       	rjmp	.+72     	; 0x2ce0 <H_LM35_u8_ReadTemprature+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c98:	68 85       	ldd	r22, Y+8	; 0x08
    2c9a:	79 85       	ldd	r23, Y+9	; 0x09
    2c9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ca0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	9f 83       	std	Y+7, r25	; 0x07
    2caa:	8e 83       	std	Y+6, r24	; 0x06
    2cac:	8e 81       	ldd	r24, Y+6	; 0x06
    2cae:	9f 81       	ldd	r25, Y+7	; 0x07
    2cb0:	9b 83       	std	Y+3, r25	; 0x03
    2cb2:	8a 83       	std	Y+2, r24	; 0x02
    2cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb6:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb8:	01 97       	sbiw	r24, 0x01	; 1
    2cba:	f1 f7       	brne	.-4      	; 0x2cb8 <H_LM35_u8_ReadTemprature+0x1a4>
    2cbc:	9b 83       	std	Y+3, r25	; 0x03
    2cbe:	8a 83       	std	Y+2, r24	; 0x02
    2cc0:	0f c0       	rjmp	.+30     	; 0x2ce0 <H_LM35_u8_ReadTemprature+0x1cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2cc2:	69 89       	ldd	r22, Y+17	; 0x11
    2cc4:	7a 89       	ldd	r23, Y+18	; 0x12
    2cc6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cc8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cce:	dc 01       	movw	r26, r24
    2cd0:	cb 01       	movw	r24, r22
    2cd2:	88 8b       	std	Y+16, r24	; 0x10
    2cd4:	88 89       	ldd	r24, Y+16	; 0x10
    2cd6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	8a 95       	dec	r24
    2cdc:	f1 f7       	brne	.-4      	; 0x2cda <H_LM35_u8_ReadTemprature+0x1c6>
    2cde:	89 83       	std	Y+1, r24	; 0x01
	u8 state= ADC_FAILED;
	u8 readings[LM35_NUM_OF_SAMPLES];
	int i, j;

	//Taking samples
	for(i= 0; i< LM35_NUM_OF_SAMPLES ; i++){
    2ce0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2ce2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2ce4:	01 96       	adiw	r24, 0x01	; 1
    2ce6:	9d 8f       	std	Y+29, r25	; 0x1d
    2ce8:	8c 8f       	std	Y+28, r24	; 0x1c
    2cea:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2cec:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2cee:	88 32       	cpi	r24, 0x28	; 40
    2cf0:	91 05       	cpc	r25, r1
    2cf2:	0c f4       	brge	.+2      	; 0x2cf6 <H_LM35_u8_ReadTemprature+0x1e2>
    2cf4:	1e cf       	rjmp	.-452    	; 0x2b32 <H_LM35_u8_ReadTemprature+0x1e>

	}

	//Sorting readings (Bubble Sort)
		u8 temp;
	    for (i = 0; i < LM35_NUM_OF_SAMPLES; i++) {
    2cf6:	1d 8e       	std	Y+29, r1	; 0x1d
    2cf8:	1c 8e       	std	Y+28, r1	; 0x1c
    2cfa:	56 c0       	rjmp	.+172    	; 0x2da8 <H_LM35_u8_ReadTemprature+0x294>
	        for (j = 0; j < LM35_NUM_OF_SAMPLES-j-1; j++) {
    2cfc:	1b 8e       	std	Y+27, r1	; 0x1b
    2cfe:	1a 8e       	std	Y+26, r1	; 0x1a
    2d00:	42 c0       	rjmp	.+132    	; 0x2d86 <H_LM35_u8_ReadTemprature+0x272>
	            if (readings[j] > readings[j+1]) {
    2d02:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2d04:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2d06:	ce 01       	movw	r24, r28
    2d08:	89 96       	adiw	r24, 0x29	; 41
    2d0a:	fc 01       	movw	r30, r24
    2d0c:	e2 0f       	add	r30, r18
    2d0e:	f3 1f       	adc	r31, r19
    2d10:	40 81       	ld	r20, Z
    2d12:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d14:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d16:	9c 01       	movw	r18, r24
    2d18:	2f 5f       	subi	r18, 0xFF	; 255
    2d1a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d1c:	ce 01       	movw	r24, r28
    2d1e:	89 96       	adiw	r24, 0x29	; 41
    2d20:	fc 01       	movw	r30, r24
    2d22:	e2 0f       	add	r30, r18
    2d24:	f3 1f       	adc	r31, r19
    2d26:	80 81       	ld	r24, Z
    2d28:	84 17       	cp	r24, r20
    2d2a:	40 f5       	brcc	.+80     	; 0x2d7c <H_LM35_u8_ReadTemprature+0x268>
	                temp = readings[j];
    2d2c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2d2e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2d30:	ce 01       	movw	r24, r28
    2d32:	89 96       	adiw	r24, 0x29	; 41
    2d34:	fc 01       	movw	r30, r24
    2d36:	e2 0f       	add	r30, r18
    2d38:	f3 1f       	adc	r31, r19
    2d3a:	80 81       	ld	r24, Z
    2d3c:	89 8f       	std	Y+25, r24	; 0x19
	                readings[j] = readings[j+1];
    2d3e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2d40:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2d42:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d44:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d46:	9c 01       	movw	r18, r24
    2d48:	2f 5f       	subi	r18, 0xFF	; 255
    2d4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2d4c:	ce 01       	movw	r24, r28
    2d4e:	89 96       	adiw	r24, 0x29	; 41
    2d50:	fc 01       	movw	r30, r24
    2d52:	e2 0f       	add	r30, r18
    2d54:	f3 1f       	adc	r31, r19
    2d56:	20 81       	ld	r18, Z
    2d58:	ce 01       	movw	r24, r28
    2d5a:	89 96       	adiw	r24, 0x29	; 41
    2d5c:	fc 01       	movw	r30, r24
    2d5e:	e4 0f       	add	r30, r20
    2d60:	f5 1f       	adc	r31, r21
    2d62:	20 83       	st	Z, r18
	                readings[j+1] = temp;
    2d64:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d66:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d68:	9c 01       	movw	r18, r24
    2d6a:	2f 5f       	subi	r18, 0xFF	; 255
    2d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d6e:	ce 01       	movw	r24, r28
    2d70:	89 96       	adiw	r24, 0x29	; 41
    2d72:	fc 01       	movw	r30, r24
    2d74:	e2 0f       	add	r30, r18
    2d76:	f3 1f       	adc	r31, r19
    2d78:	89 8d       	ldd	r24, Y+25	; 0x19
    2d7a:	80 83       	st	Z, r24
	}

	//Sorting readings (Bubble Sort)
		u8 temp;
	    for (i = 0; i < LM35_NUM_OF_SAMPLES; i++) {
	        for (j = 0; j < LM35_NUM_OF_SAMPLES-j-1; j++) {
    2d7c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d7e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d80:	01 96       	adiw	r24, 0x01	; 1
    2d82:	9b 8f       	std	Y+27, r25	; 0x1b
    2d84:	8a 8f       	std	Y+26, r24	; 0x1a
    2d86:	27 e2       	ldi	r18, 0x27	; 39
    2d88:	30 e0       	ldi	r19, 0x00	; 0
    2d8a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d8c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d8e:	28 1b       	sub	r18, r24
    2d90:	39 0b       	sbc	r19, r25
    2d92:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2d94:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d96:	82 17       	cp	r24, r18
    2d98:	93 07       	cpc	r25, r19
    2d9a:	0c f4       	brge	.+2      	; 0x2d9e <H_LM35_u8_ReadTemprature+0x28a>
    2d9c:	b2 cf       	rjmp	.-156    	; 0x2d02 <H_LM35_u8_ReadTemprature+0x1ee>

	}

	//Sorting readings (Bubble Sort)
		u8 temp;
	    for (i = 0; i < LM35_NUM_OF_SAMPLES; i++) {
    2d9e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2da0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2da2:	01 96       	adiw	r24, 0x01	; 1
    2da4:	9d 8f       	std	Y+29, r25	; 0x1d
    2da6:	8c 8f       	std	Y+28, r24	; 0x1c
    2da8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2daa:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2dac:	88 32       	cpi	r24, 0x28	; 40
    2dae:	91 05       	cpc	r25, r1
    2db0:	0c f4       	brge	.+2      	; 0x2db4 <H_LM35_u8_ReadTemprature+0x2a0>
    2db2:	a4 cf       	rjmp	.-184    	; 0x2cfc <H_LM35_u8_ReadTemprature+0x1e8>
	        }
	    }

	    // Find the median value in the window
	    if (LM35_NUM_OF_SAMPLES % 2 == 0) {
	        ADC_result = (readings[LM35_NUM_OF_SAMPLES/2] + readings[LM35_NUM_OF_SAMPLES/2-1])/2;
    2db4:	8d ad       	ldd	r24, Y+61	; 0x3d
    2db6:	28 2f       	mov	r18, r24
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	8c ad       	ldd	r24, Y+60	; 0x3c
    2dbc:	88 2f       	mov	r24, r24
    2dbe:	90 e0       	ldi	r25, 0x00	; 0
    2dc0:	82 0f       	add	r24, r18
    2dc2:	93 1f       	adc	r25, r19
    2dc4:	63 96       	adiw	r28, 0x13	; 19
    2dc6:	9f af       	std	Y+63, r25	; 0x3f
    2dc8:	8e af       	std	Y+62, r24	; 0x3e
    2dca:	63 97       	sbiw	r28, 0x13	; 19
    2dcc:	63 96       	adiw	r28, 0x13	; 19
    2dce:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dd0:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dd2:	63 97       	sbiw	r28, 0x13	; 19
    2dd4:	99 23       	and	r25, r25
    2dd6:	4c f4       	brge	.+18     	; 0x2dea <H_LM35_u8_ReadTemprature+0x2d6>
    2dd8:	63 96       	adiw	r28, 0x13	; 19
    2dda:	8e ad       	ldd	r24, Y+62	; 0x3e
    2ddc:	9f ad       	ldd	r25, Y+63	; 0x3f
    2dde:	63 97       	sbiw	r28, 0x13	; 19
    2de0:	01 96       	adiw	r24, 0x01	; 1
    2de2:	63 96       	adiw	r28, 0x13	; 19
    2de4:	9f af       	std	Y+63, r25	; 0x3f
    2de6:	8e af       	std	Y+62, r24	; 0x3e
    2de8:	63 97       	sbiw	r28, 0x13	; 19
    2dea:	63 96       	adiw	r28, 0x13	; 19
    2dec:	8e ad       	ldd	r24, Y+62	; 0x3e
    2dee:	9f ad       	ldd	r25, Y+63	; 0x3f
    2df0:	63 97       	sbiw	r28, 0x13	; 19
    2df2:	95 95       	asr	r25
    2df4:	87 95       	ror	r24
    2df6:	98 a7       	std	Y+40, r25	; 0x28
    2df8:	8f a3       	std	Y+39, r24	; 0x27
	    else {
	        ADC_result = readings[LM35_NUM_OF_SAMPLES/2];
	    }


		analog_volt = ADC_result * ((5.0*1000)/1024);  //in millieVolts
    2dfa:	8f a1       	ldd	r24, Y+39	; 0x27
    2dfc:	98 a5       	ldd	r25, Y+40	; 0x28
    2dfe:	cc 01       	movw	r24, r24
    2e00:	a0 e0       	ldi	r26, 0x00	; 0
    2e02:	b0 e0       	ldi	r27, 0x00	; 0
    2e04:	bc 01       	movw	r22, r24
    2e06:	cd 01       	movw	r24, r26
    2e08:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	bc 01       	movw	r22, r24
    2e12:	cd 01       	movw	r24, r26
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e4       	ldi	r19, 0x40	; 64
    2e18:	4c e9       	ldi	r20, 0x9C	; 156
    2e1a:	50 e4       	ldi	r21, 0x40	; 64
    2e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	8b a3       	std	Y+35, r24	; 0x23
    2e26:	9c a3       	std	Y+36, r25	; 0x24
    2e28:	ad a3       	std	Y+37, r26	; 0x25
    2e2a:	be a3       	std	Y+38, r27	; 0x26

		if(analog_volt == (f64)550){
    2e2c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e2e:	7c a1       	ldd	r23, Y+36	; 0x24
    2e30:	8d a1       	ldd	r24, Y+37	; 0x25
    2e32:	9e a1       	ldd	r25, Y+38	; 0x26
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e8       	ldi	r19, 0x80	; 128
    2e38:	49 e0       	ldi	r20, 0x09	; 9
    2e3a:	54 e4       	ldi	r21, 0x44	; 68
    2e3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    2e40:	88 23       	and	r24, r24
    2e42:	49 f4       	brne	.+18     	; 0x2e56 <H_LM35_u8_ReadTemprature+0x342>
			tempreture = 0.0;
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	90 e0       	ldi	r25, 0x00	; 0
    2e48:	a0 e0       	ldi	r26, 0x00	; 0
    2e4a:	b0 e0       	ldi	r27, 0x00	; 0
    2e4c:	8f 8f       	std	Y+31, r24	; 0x1f
    2e4e:	98 a3       	std	Y+32, r25	; 0x20
    2e50:	a9 a3       	std	Y+33, r26	; 0x21
    2e52:	ba a3       	std	Y+34, r27	; 0x22
    2e54:	10 c0       	rjmp	.+32     	; 0x2e76 <H_LM35_u8_ReadTemprature+0x362>

		}else {
			tempreture = analog_volt / 10.0;
    2e56:	6b a1       	ldd	r22, Y+35	; 0x23
    2e58:	7c a1       	ldd	r23, Y+36	; 0x24
    2e5a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e5c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	40 e2       	ldi	r20, 0x20	; 32
    2e64:	51 e4       	ldi	r21, 0x41	; 65
    2e66:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	8f 8f       	std	Y+31, r24	; 0x1f
    2e70:	98 a3       	std	Y+32, r25	; 0x20
    2e72:	a9 a3       	std	Y+33, r26	; 0x21
    2e74:	ba a3       	std	Y+34, r27	; 0x22
		}

		//return ADC_result;
		return tempreture;
    2e76:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2e78:	78 a1       	ldd	r23, Y+32	; 0x20
    2e7a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e7c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22

}
    2e86:	ce 5a       	subi	r28, 0xAE	; 174
    2e88:	df 4f       	sbci	r29, 0xFF	; 255
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	f8 94       	cli
    2e8e:	de bf       	out	0x3e, r29	; 62
    2e90:	0f be       	out	0x3f, r0	; 63
    2e92:	cd bf       	out	0x3d, r28	; 61
    2e94:	cf 91       	pop	r28
    2e96:	df 91       	pop	r29
    2e98:	08 95       	ret

00002e9a <H_LED_voidTurnOn>:




void H_LED_voidTurnOn(Led_IDtype LedId)
{
    2e9a:	df 93       	push	r29
    2e9c:	cf 93       	push	r28
    2e9e:	00 d0       	rcall	.+0      	; 0x2ea0 <H_LED_voidTurnOn+0x6>
    2ea0:	0f 92       	push	r0
    2ea2:	cd b7       	in	r28, 0x3d	; 61
    2ea4:	de b7       	in	r29, 0x3e	; 62
    2ea6:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
    2ea8:	89 81       	ldd	r24, Y+1	; 0x01
    2eaa:	28 2f       	mov	r18, r24
    2eac:	30 e0       	ldi	r19, 0x00	; 0
    2eae:	3b 83       	std	Y+3, r19	; 0x03
    2eb0:	2a 83       	std	Y+2, r18	; 0x02
    2eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2eb6:	81 30       	cpi	r24, 0x01	; 1
    2eb8:	91 05       	cpc	r25, r1
    2eba:	f9 f0       	breq	.+62     	; 0x2efa <H_LED_voidTurnOn+0x60>
    2ebc:	2a 81       	ldd	r18, Y+2	; 0x02
    2ebe:	3b 81       	ldd	r19, Y+3	; 0x03
    2ec0:	22 30       	cpi	r18, 0x02	; 2
    2ec2:	31 05       	cpc	r19, r1
    2ec4:	2c f4       	brge	.+10     	; 0x2ed0 <H_LED_voidTurnOn+0x36>
    2ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ec8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eca:	00 97       	sbiw	r24, 0x00	; 0
    2ecc:	61 f0       	breq	.+24     	; 0x2ee6 <H_LED_voidTurnOn+0x4c>
    2ece:	1e c0       	rjmp	.+60     	; 0x2f0c <H_LED_voidTurnOn+0x72>
    2ed0:	2a 81       	ldd	r18, Y+2	; 0x02
    2ed2:	3b 81       	ldd	r19, Y+3	; 0x03
    2ed4:	22 30       	cpi	r18, 0x02	; 2
    2ed6:	31 05       	cpc	r19, r1
    2ed8:	59 f0       	breq	.+22     	; 0x2ef0 <H_LED_voidTurnOn+0x56>
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ede:	83 30       	cpi	r24, 0x03	; 3
    2ee0:	91 05       	cpc	r25, r1
    2ee2:	81 f0       	breq	.+32     	; 0x2f04 <H_LED_voidTurnOn+0x6a>
    2ee4:	13 c0       	rjmp	.+38     	; 0x2f0c <H_LED_voidTurnOn+0x72>
	{
	case LED_RED :
#if LED_RED_DIRECTION == LED_ACTIVE_HIGH
		M_DIO_voidSetPinValue(LED_RED_PIN, DIO_HIGH);
    2ee6:	8b e1       	ldi	r24, 0x1B	; 27
    2ee8:	61 e0       	ldi	r22, 0x01	; 1
    2eea:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
    2eee:	0e c0       	rjmp	.+28     	; 0x2f0c <H_LED_voidTurnOn+0x72>
#error "Wrong led direction configurations"
#endif
		break;
	case LED_GREEN  :
#if LED_GREEN_DIRECTION == LED_ACTIVE_HIGH
		M_DIO_voidSetPinValue(LED_GREEN_PIN, DIO_HIGH);
    2ef0:	8e e0       	ldi	r24, 0x0E	; 14
    2ef2:	61 e0       	ldi	r22, 0x01	; 1
    2ef4:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
    2ef8:	09 c0       	rjmp	.+18     	; 0x2f0c <H_LED_voidTurnOn+0x72>
#error "Wrong led direction configurations"
#endif
		break;
	case LED_BLUE   :
#if LED_BLUE_DIRECTION == LED_ACTIVE_HIGH
		M_DIO_voidSetPinValue(LED_BLUE_PIN, DIO_HIGH);
    2efa:	8f e0       	ldi	r24, 0x0F	; 15
    2efc:	61 e0       	ldi	r22, 0x01	; 1
    2efe:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
    2f02:	04 c0       	rjmp	.+8      	; 0x2f0c <H_LED_voidTurnOn+0x72>
#error "Wrong led direction configurations"
#endif
		break;
	case LED_YELLOW :
#if LED_YELLOW_DIRECTION == LED_ACTIVE_HIGH
		M_DIO_voidSetPinValue(LED_YELLOW_PIN, DIO_HIGH);
    2f04:	80 e1       	ldi	r24, 0x10	; 16
    2f06:	61 e0       	ldi	r22, 0x01	; 1
    2f08:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
#else
#error "Wrong led direction configurations"
#endif
		break;
	}
}
    2f0c:	0f 90       	pop	r0
    2f0e:	0f 90       	pop	r0
    2f10:	0f 90       	pop	r0
    2f12:	cf 91       	pop	r28
    2f14:	df 91       	pop	r29
    2f16:	08 95       	ret

00002f18 <H_LED_voidTurnOff>:

void H_LED_voidTurnOff(Led_IDtype LedId)
{
    2f18:	df 93       	push	r29
    2f1a:	cf 93       	push	r28
    2f1c:	00 d0       	rcall	.+0      	; 0x2f1e <H_LED_voidTurnOff+0x6>
    2f1e:	0f 92       	push	r0
    2f20:	cd b7       	in	r28, 0x3d	; 61
    2f22:	de b7       	in	r29, 0x3e	; 62
    2f24:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
    2f26:	89 81       	ldd	r24, Y+1	; 0x01
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	3b 83       	std	Y+3, r19	; 0x03
    2f2e:	2a 83       	std	Y+2, r18	; 0x02
    2f30:	8a 81       	ldd	r24, Y+2	; 0x02
    2f32:	9b 81       	ldd	r25, Y+3	; 0x03
    2f34:	81 30       	cpi	r24, 0x01	; 1
    2f36:	91 05       	cpc	r25, r1
    2f38:	f9 f0       	breq	.+62     	; 0x2f78 <H_LED_voidTurnOff+0x60>
    2f3a:	2a 81       	ldd	r18, Y+2	; 0x02
    2f3c:	3b 81       	ldd	r19, Y+3	; 0x03
    2f3e:	22 30       	cpi	r18, 0x02	; 2
    2f40:	31 05       	cpc	r19, r1
    2f42:	2c f4       	brge	.+10     	; 0x2f4e <H_LED_voidTurnOff+0x36>
    2f44:	8a 81       	ldd	r24, Y+2	; 0x02
    2f46:	9b 81       	ldd	r25, Y+3	; 0x03
    2f48:	00 97       	sbiw	r24, 0x00	; 0
    2f4a:	61 f0       	breq	.+24     	; 0x2f64 <H_LED_voidTurnOff+0x4c>
    2f4c:	1e c0       	rjmp	.+60     	; 0x2f8a <H_LED_voidTurnOff+0x72>
    2f4e:	2a 81       	ldd	r18, Y+2	; 0x02
    2f50:	3b 81       	ldd	r19, Y+3	; 0x03
    2f52:	22 30       	cpi	r18, 0x02	; 2
    2f54:	31 05       	cpc	r19, r1
    2f56:	59 f0       	breq	.+22     	; 0x2f6e <H_LED_voidTurnOff+0x56>
    2f58:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5c:	83 30       	cpi	r24, 0x03	; 3
    2f5e:	91 05       	cpc	r25, r1
    2f60:	81 f0       	breq	.+32     	; 0x2f82 <H_LED_voidTurnOff+0x6a>
    2f62:	13 c0       	rjmp	.+38     	; 0x2f8a <H_LED_voidTurnOff+0x72>
	{
	case LED_RED :
#if LED_RED_DIRECTION == LED_ACTIVE_HIGH
		M_DIO_voidSetPinValue(LED_RED_PIN, DIO_LOW);
    2f64:	8b e1       	ldi	r24, 0x1B	; 27
    2f66:	60 e0       	ldi	r22, 0x00	; 0
    2f68:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
    2f6c:	0e c0       	rjmp	.+28     	; 0x2f8a <H_LED_voidTurnOff+0x72>
#error "Wrong led direction configurations"
#endif
		break;
	case LED_GREEN  :
#if LED_GREEN_DIRECTION == LED_ACTIVE_HIGH
		M_DIO_voidSetPinValue(LED_GREEN_PIN, DIO_LOW);
    2f6e:	8e e0       	ldi	r24, 0x0E	; 14
    2f70:	60 e0       	ldi	r22, 0x00	; 0
    2f72:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
    2f76:	09 c0       	rjmp	.+18     	; 0x2f8a <H_LED_voidTurnOff+0x72>
#error "Wrong led direction configurations"
#endif
		break;
	case LED_BLUE   :
#if LED_BLUE_DIRECTION == LED_ACTIVE_HIGH
		M_DIO_voidSetPinValue(LED_BLUE_PIN, DIO_LOW);
    2f78:	8f e0       	ldi	r24, 0x0F	; 15
    2f7a:	60 e0       	ldi	r22, 0x00	; 0
    2f7c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
    2f80:	04 c0       	rjmp	.+8      	; 0x2f8a <H_LED_voidTurnOff+0x72>
#error "Wrong led direction configurations"
#endif
		break;
	case LED_YELLOW :
#if LED_YELLOW_DIRECTION == LED_ACTIVE_HIGH
		M_DIO_voidSetPinValue(LED_YELLOW_PIN, DIO_LOW);
    2f82:	80 e1       	ldi	r24, 0x10	; 16
    2f84:	60 e0       	ldi	r22, 0x00	; 0
    2f86:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
#else
#error "Wrong led direction configurations"
#endif
		break;
	}
}
    2f8a:	0f 90       	pop	r0
    2f8c:	0f 90       	pop	r0
    2f8e:	0f 90       	pop	r0
    2f90:	cf 91       	pop	r28
    2f92:	df 91       	pop	r29
    2f94:	08 95       	ret

00002f96 <H_LED_voidToggle>:


void H_LED_voidToggle(Led_IDtype LedId)
{
    2f96:	df 93       	push	r29
    2f98:	cf 93       	push	r28
    2f9a:	00 d0       	rcall	.+0      	; 0x2f9c <H_LED_voidToggle+0x6>
    2f9c:	0f 92       	push	r0
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
    2fa2:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
    2fa4:	89 81       	ldd	r24, Y+1	; 0x01
    2fa6:	28 2f       	mov	r18, r24
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	3b 83       	std	Y+3, r19	; 0x03
    2fac:	2a 83       	std	Y+2, r18	; 0x02
    2fae:	8a 81       	ldd	r24, Y+2	; 0x02
    2fb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fb2:	81 30       	cpi	r24, 0x01	; 1
    2fb4:	91 05       	cpc	r25, r1
    2fb6:	e9 f0       	breq	.+58     	; 0x2ff2 <H_LED_voidToggle+0x5c>
    2fb8:	2a 81       	ldd	r18, Y+2	; 0x02
    2fba:	3b 81       	ldd	r19, Y+3	; 0x03
    2fbc:	22 30       	cpi	r18, 0x02	; 2
    2fbe:	31 05       	cpc	r19, r1
    2fc0:	2c f4       	brge	.+10     	; 0x2fcc <H_LED_voidToggle+0x36>
    2fc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc6:	00 97       	sbiw	r24, 0x00	; 0
    2fc8:	61 f0       	breq	.+24     	; 0x2fe2 <H_LED_voidToggle+0x4c>
    2fca:	1a c0       	rjmp	.+52     	; 0x3000 <H_LED_voidToggle+0x6a>
    2fcc:	2a 81       	ldd	r18, Y+2	; 0x02
    2fce:	3b 81       	ldd	r19, Y+3	; 0x03
    2fd0:	22 30       	cpi	r18, 0x02	; 2
    2fd2:	31 05       	cpc	r19, r1
    2fd4:	51 f0       	breq	.+20     	; 0x2fea <H_LED_voidToggle+0x54>
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fda:	83 30       	cpi	r24, 0x03	; 3
    2fdc:	91 05       	cpc	r25, r1
    2fde:	69 f0       	breq	.+26     	; 0x2ffa <H_LED_voidToggle+0x64>
    2fe0:	0f c0       	rjmp	.+30     	; 0x3000 <H_LED_voidToggle+0x6a>
	{
	case LED_RED :
		M_DIO_voidTogglePin(LED_RED_PIN);
    2fe2:	8b e1       	ldi	r24, 0x1B	; 27
    2fe4:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <M_DIO_voidTogglePin>
    2fe8:	0b c0       	rjmp	.+22     	; 0x3000 <H_LED_voidToggle+0x6a>
		break;
	case LED_GREEN  :
		M_DIO_voidTogglePin(LED_GREEN_PIN);
    2fea:	8e e0       	ldi	r24, 0x0E	; 14
    2fec:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <M_DIO_voidTogglePin>
    2ff0:	07 c0       	rjmp	.+14     	; 0x3000 <H_LED_voidToggle+0x6a>
		break;
	case LED_BLUE   :
		M_DIO_voidTogglePin(LED_BLUE_PIN);
    2ff2:	8f e0       	ldi	r24, 0x0F	; 15
    2ff4:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <M_DIO_voidTogglePin>
    2ff8:	03 c0       	rjmp	.+6      	; 0x3000 <H_LED_voidToggle+0x6a>
		break;
	case LED_YELLOW :
		M_DIO_voidTogglePin(LED_YELLOW_PIN);
    2ffa:	80 e1       	ldi	r24, 0x10	; 16
    2ffc:	0e 94 af 0e 	call	0x1d5e	; 0x1d5e <M_DIO_voidTogglePin>

		break;
	}
}
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <H_LDR_void_Init>:
extern ADC_config_t LDR_ADC_config_struct;
/*** HOW to use
 * - You provide ADC_config_t structure with the desired ADC configurations
 *   to read LDR outputs.
 *  ***/
void H_LDR_void_Init(){
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	cd b7       	in	r28, 0x3d	; 61
    3012:	de b7       	in	r29, 0x3e	; 62
	M_ADC_void_Init(LDR_ADC_config_struct);
    3014:	40 91 e1 02 	lds	r20, 0x02E1
    3018:	50 91 e2 02 	lds	r21, 0x02E2
    301c:	60 91 e3 02 	lds	r22, 0x02E3
    3020:	70 91 e4 02 	lds	r23, 0x02E4
    3024:	80 91 e5 02 	lds	r24, 0x02E5
    3028:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <M_ADC_void_Init>
}
    302c:	cf 91       	pop	r28
    302e:	df 91       	pop	r29
    3030:	08 95       	ret

00003032 <H_LDR_u16_Read>:
 * - After initializing the ADC reading LDR through H_LDR_void_Init
 * - You provide the channel that LDR is connected to
 * - The function does a 1-shoot ADC conversion and return the voltage in millieVolts
 * - The function uses the non-blocking ADC reading function, but H_LDR_u16_Read itself
 *   blocks the code because it loops until the Reading function returns ADC_SUCCEED  ***/
u16 H_LDR_u16_Read(){
    3032:	df 93       	push	r29
    3034:	cf 93       	push	r28
    3036:	cd b7       	in	r28, 0x3d	; 61
    3038:	de b7       	in	r29, 0x3e	; 62
    303a:	e8 97       	sbiw	r28, 0x38	; 56
    303c:	0f b6       	in	r0, 0x3f	; 63
    303e:	f8 94       	cli
    3040:	de bf       	out	0x3e, r29	; 62
    3042:	0f be       	out	0x3f, r0	; 63
    3044:	cd bf       	out	0x3d, r28	; 61

	f64 analog_volt;
	u16 ADC_result;
	u8 state = ADC_FAILED;
    3046:	1e 8e       	std	Y+30, r1	; 0x1e
	u16 readings[LDR_NUM_OF_SAMPLES] ;
	int i,j;

	//taking 5 readings
	for( i = 0 ; i< LDR_NUM_OF_SAMPLES ;i++){
    3048:	1d 8e       	std	Y+29, r1	; 0x1d
    304a:	1c 8e       	std	Y+28, r1	; 0x1c
    304c:	e0 c0       	rjmp	.+448    	; 0x320e <H_LDR_u16_Read+0x1dc>

		M_ADC_void_StartConversion();
    304e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <M_ADC_void_StartConversion>
    3052:	08 c0       	rjmp	.+16     	; 0x3064 <H_LDR_u16_Read+0x32>
		while(state == ADC_FAILED){
			state = M_ADC_void_GetDigitalValueSynchNonBlocking(LDR_ADC_CHANNEL, &ADC_result);
    3054:	9e 01       	movw	r18, r28
    3056:	2d 5d       	subi	r18, 0xDD	; 221
    3058:	3f 4f       	sbci	r19, 0xFF	; 255
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	b9 01       	movw	r22, r18
    305e:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <M_ADC_void_GetDigitalValueSynchNonBlocking>
    3062:	8e 8f       	std	Y+30, r24	; 0x1e

	//taking 5 readings
	for( i = 0 ; i< LDR_NUM_OF_SAMPLES ;i++){

		M_ADC_void_StartConversion();
		while(state == ADC_FAILED){
    3064:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3066:	88 23       	and	r24, r24
    3068:	a9 f3       	breq	.-22     	; 0x3054 <H_LDR_u16_Read+0x22>
			state = M_ADC_void_GetDigitalValueSynchNonBlocking(LDR_ADC_CHANNEL, &ADC_result);
		}
		readings[i] = ADC_result;
    306a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    306c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    306e:	4b a1       	ldd	r20, Y+35	; 0x23
    3070:	5c a1       	ldd	r21, Y+36	; 0x24
    3072:	9c 01       	movw	r18, r24
    3074:	22 0f       	add	r18, r18
    3076:	33 1f       	adc	r19, r19
    3078:	ce 01       	movw	r24, r28
    307a:	01 96       	adiw	r24, 0x01	; 1
    307c:	82 0f       	add	r24, r18
    307e:	93 1f       	adc	r25, r19
    3080:	fc 01       	movw	r30, r24
    3082:	b4 96       	adiw	r30, 0x24	; 36
    3084:	51 83       	std	Z+1, r21	; 0x01
    3086:	40 83       	st	Z, r20
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	a8 ec       	ldi	r26, 0xC8	; 200
    308e:	b2 e4       	ldi	r27, 0x42	; 66
    3090:	8d 8b       	std	Y+21, r24	; 0x15
    3092:	9e 8b       	std	Y+22, r25	; 0x16
    3094:	af 8b       	std	Y+23, r26	; 0x17
    3096:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3098:	6d 89       	ldd	r22, Y+21	; 0x15
    309a:	7e 89       	ldd	r23, Y+22	; 0x16
    309c:	8f 89       	ldd	r24, Y+23	; 0x17
    309e:	98 8d       	ldd	r25, Y+24	; 0x18
    30a0:	2b ea       	ldi	r18, 0xAB	; 171
    30a2:	3a ea       	ldi	r19, 0xAA	; 170
    30a4:	4a ea       	ldi	r20, 0xAA	; 170
    30a6:	50 e4       	ldi	r21, 0x40	; 64
    30a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30ac:	dc 01       	movw	r26, r24
    30ae:	cb 01       	movw	r24, r22
    30b0:	89 8b       	std	Y+17, r24	; 0x11
    30b2:	9a 8b       	std	Y+18, r25	; 0x12
    30b4:	ab 8b       	std	Y+19, r26	; 0x13
    30b6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    30b8:	69 89       	ldd	r22, Y+17	; 0x11
    30ba:	7a 89       	ldd	r23, Y+18	; 0x12
    30bc:	8b 89       	ldd	r24, Y+19	; 0x13
    30be:	9c 89       	ldd	r25, Y+20	; 0x14
    30c0:	20 e0       	ldi	r18, 0x00	; 0
    30c2:	30 e0       	ldi	r19, 0x00	; 0
    30c4:	40 e8       	ldi	r20, 0x80	; 128
    30c6:	5f e3       	ldi	r21, 0x3F	; 63
    30c8:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    30cc:	88 23       	and	r24, r24
    30ce:	1c f4       	brge	.+6      	; 0x30d6 <H_LDR_u16_Read+0xa4>
		__ticks = 1;
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	88 8b       	std	Y+16, r24	; 0x10
    30d4:	91 c0       	rjmp	.+290    	; 0x31f8 <H_LDR_u16_Read+0x1c6>
	else if (__tmp > 255)
    30d6:	69 89       	ldd	r22, Y+17	; 0x11
    30d8:	7a 89       	ldd	r23, Y+18	; 0x12
    30da:	8b 89       	ldd	r24, Y+19	; 0x13
    30dc:	9c 89       	ldd	r25, Y+20	; 0x14
    30de:	20 e0       	ldi	r18, 0x00	; 0
    30e0:	30 e0       	ldi	r19, 0x00	; 0
    30e2:	4f e7       	ldi	r20, 0x7F	; 127
    30e4:	53 e4       	ldi	r21, 0x43	; 67
    30e6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    30ea:	18 16       	cp	r1, r24
    30ec:	0c f0       	brlt	.+2      	; 0x30f0 <H_LDR_u16_Read+0xbe>
    30ee:	7b c0       	rjmp	.+246    	; 0x31e6 <H_LDR_u16_Read+0x1b4>
	{
		_delay_ms(__us / 1000.0);
    30f0:	6d 89       	ldd	r22, Y+21	; 0x15
    30f2:	7e 89       	ldd	r23, Y+22	; 0x16
    30f4:	8f 89       	ldd	r24, Y+23	; 0x17
    30f6:	98 8d       	ldd	r25, Y+24	; 0x18
    30f8:	20 e0       	ldi	r18, 0x00	; 0
    30fa:	30 e0       	ldi	r19, 0x00	; 0
    30fc:	4a e7       	ldi	r20, 0x7A	; 122
    30fe:	54 e4       	ldi	r21, 0x44	; 68
    3100:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3104:	dc 01       	movw	r26, r24
    3106:	cb 01       	movw	r24, r22
    3108:	8c 87       	std	Y+12, r24	; 0x0c
    310a:	9d 87       	std	Y+13, r25	; 0x0d
    310c:	ae 87       	std	Y+14, r26	; 0x0e
    310e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3110:	6c 85       	ldd	r22, Y+12	; 0x0c
    3112:	7d 85       	ldd	r23, Y+13	; 0x0d
    3114:	8e 85       	ldd	r24, Y+14	; 0x0e
    3116:	9f 85       	ldd	r25, Y+15	; 0x0f
    3118:	20 e0       	ldi	r18, 0x00	; 0
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	4a e7       	ldi	r20, 0x7A	; 122
    311e:	55 e4       	ldi	r21, 0x45	; 69
    3120:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	88 87       	std	Y+8, r24	; 0x08
    312a:	99 87       	std	Y+9, r25	; 0x09
    312c:	aa 87       	std	Y+10, r26	; 0x0a
    312e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3130:	68 85       	ldd	r22, Y+8	; 0x08
    3132:	79 85       	ldd	r23, Y+9	; 0x09
    3134:	8a 85       	ldd	r24, Y+10	; 0x0a
    3136:	9b 85       	ldd	r25, Y+11	; 0x0b
    3138:	20 e0       	ldi	r18, 0x00	; 0
    313a:	30 e0       	ldi	r19, 0x00	; 0
    313c:	40 e8       	ldi	r20, 0x80	; 128
    313e:	5f e3       	ldi	r21, 0x3F	; 63
    3140:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3144:	88 23       	and	r24, r24
    3146:	2c f4       	brge	.+10     	; 0x3152 <H_LDR_u16_Read+0x120>
		__ticks = 1;
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	9f 83       	std	Y+7, r25	; 0x07
    314e:	8e 83       	std	Y+6, r24	; 0x06
    3150:	3f c0       	rjmp	.+126    	; 0x31d0 <H_LDR_u16_Read+0x19e>
	else if (__tmp > 65535)
    3152:	68 85       	ldd	r22, Y+8	; 0x08
    3154:	79 85       	ldd	r23, Y+9	; 0x09
    3156:	8a 85       	ldd	r24, Y+10	; 0x0a
    3158:	9b 85       	ldd	r25, Y+11	; 0x0b
    315a:	20 e0       	ldi	r18, 0x00	; 0
    315c:	3f ef       	ldi	r19, 0xFF	; 255
    315e:	4f e7       	ldi	r20, 0x7F	; 127
    3160:	57 e4       	ldi	r21, 0x47	; 71
    3162:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3166:	18 16       	cp	r1, r24
    3168:	4c f5       	brge	.+82     	; 0x31bc <H_LDR_u16_Read+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    316a:	6c 85       	ldd	r22, Y+12	; 0x0c
    316c:	7d 85       	ldd	r23, Y+13	; 0x0d
    316e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3170:	9f 85       	ldd	r25, Y+15	; 0x0f
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	40 e2       	ldi	r20, 0x20	; 32
    3178:	51 e4       	ldi	r21, 0x41	; 65
    317a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    317e:	dc 01       	movw	r26, r24
    3180:	cb 01       	movw	r24, r22
    3182:	bc 01       	movw	r22, r24
    3184:	cd 01       	movw	r24, r26
    3186:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318a:	dc 01       	movw	r26, r24
    318c:	cb 01       	movw	r24, r22
    318e:	9f 83       	std	Y+7, r25	; 0x07
    3190:	8e 83       	std	Y+6, r24	; 0x06
    3192:	0f c0       	rjmp	.+30     	; 0x31b2 <H_LDR_u16_Read+0x180>
    3194:	80 e9       	ldi	r24, 0x90	; 144
    3196:	91 e0       	ldi	r25, 0x01	; 1
    3198:	9d 83       	std	Y+5, r25	; 0x05
    319a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    319c:	8c 81       	ldd	r24, Y+4	; 0x04
    319e:	9d 81       	ldd	r25, Y+5	; 0x05
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	f1 f7       	brne	.-4      	; 0x31a0 <H_LDR_u16_Read+0x16e>
    31a4:	9d 83       	std	Y+5, r25	; 0x05
    31a6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    31a8:	8e 81       	ldd	r24, Y+6	; 0x06
    31aa:	9f 81       	ldd	r25, Y+7	; 0x07
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	9f 83       	std	Y+7, r25	; 0x07
    31b0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31b2:	8e 81       	ldd	r24, Y+6	; 0x06
    31b4:	9f 81       	ldd	r25, Y+7	; 0x07
    31b6:	00 97       	sbiw	r24, 0x00	; 0
    31b8:	69 f7       	brne	.-38     	; 0x3194 <H_LDR_u16_Read+0x162>
    31ba:	24 c0       	rjmp	.+72     	; 0x3204 <H_LDR_u16_Read+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31bc:	68 85       	ldd	r22, Y+8	; 0x08
    31be:	79 85       	ldd	r23, Y+9	; 0x09
    31c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    31c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    31c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31c8:	dc 01       	movw	r26, r24
    31ca:	cb 01       	movw	r24, r22
    31cc:	9f 83       	std	Y+7, r25	; 0x07
    31ce:	8e 83       	std	Y+6, r24	; 0x06
    31d0:	8e 81       	ldd	r24, Y+6	; 0x06
    31d2:	9f 81       	ldd	r25, Y+7	; 0x07
    31d4:	9b 83       	std	Y+3, r25	; 0x03
    31d6:	8a 83       	std	Y+2, r24	; 0x02
    31d8:	8a 81       	ldd	r24, Y+2	; 0x02
    31da:	9b 81       	ldd	r25, Y+3	; 0x03
    31dc:	01 97       	sbiw	r24, 0x01	; 1
    31de:	f1 f7       	brne	.-4      	; 0x31dc <H_LDR_u16_Read+0x1aa>
    31e0:	9b 83       	std	Y+3, r25	; 0x03
    31e2:	8a 83       	std	Y+2, r24	; 0x02
    31e4:	0f c0       	rjmp	.+30     	; 0x3204 <H_LDR_u16_Read+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    31e6:	69 89       	ldd	r22, Y+17	; 0x11
    31e8:	7a 89       	ldd	r23, Y+18	; 0x12
    31ea:	8b 89       	ldd	r24, Y+19	; 0x13
    31ec:	9c 89       	ldd	r25, Y+20	; 0x14
    31ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31f2:	dc 01       	movw	r26, r24
    31f4:	cb 01       	movw	r24, r22
    31f6:	88 8b       	std	Y+16, r24	; 0x10
    31f8:	88 89       	ldd	r24, Y+16	; 0x10
    31fa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	8a 95       	dec	r24
    3200:	f1 f7       	brne	.-4      	; 0x31fe <H_LDR_u16_Read+0x1cc>
    3202:	89 83       	std	Y+1, r24	; 0x01
	u8 state = ADC_FAILED;
	u16 readings[LDR_NUM_OF_SAMPLES] ;
	int i,j;

	//taking 5 readings
	for( i = 0 ; i< LDR_NUM_OF_SAMPLES ;i++){
    3204:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3206:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3208:	01 96       	adiw	r24, 0x01	; 1
    320a:	9d 8f       	std	Y+29, r25	; 0x1d
    320c:	8c 8f       	std	Y+28, r24	; 0x1c
    320e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3210:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3212:	8a 30       	cpi	r24, 0x0A	; 10
    3214:	91 05       	cpc	r25, r1
    3216:	0c f4       	brge	.+2      	; 0x321a <H_LDR_u16_Read+0x1e8>
    3218:	1a cf       	rjmp	.-460    	; 0x304e <H_LDR_u16_Read+0x1c>
		_delay_us(100);
	}

	//Sorting readings (Bubble Sort)
	u8 temp;
    for (i = 0; i < LDR_NUM_OF_SAMPLES; i++) {
    321a:	1d 8e       	std	Y+29, r1	; 0x1d
    321c:	1c 8e       	std	Y+28, r1	; 0x1c
    321e:	72 c0       	rjmp	.+228    	; 0x3304 <H_LDR_u16_Read+0x2d2>
        for (j = 0; j < LDR_NUM_OF_SAMPLES-j-1; j++) {
    3220:	1b 8e       	std	Y+27, r1	; 0x1b
    3222:	1a 8e       	std	Y+26, r1	; 0x1a
    3224:	5e c0       	rjmp	.+188    	; 0x32e2 <H_LDR_u16_Read+0x2b0>
            if (readings[j] > readings[j+1]) {
    3226:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3228:	9b 8d       	ldd	r25, Y+27	; 0x1b
    322a:	9c 01       	movw	r18, r24
    322c:	22 0f       	add	r18, r18
    322e:	33 1f       	adc	r19, r19
    3230:	ce 01       	movw	r24, r28
    3232:	01 96       	adiw	r24, 0x01	; 1
    3234:	82 0f       	add	r24, r18
    3236:	93 1f       	adc	r25, r19
    3238:	fc 01       	movw	r30, r24
    323a:	b4 96       	adiw	r30, 0x24	; 36
    323c:	40 81       	ld	r20, Z
    323e:	51 81       	ldd	r21, Z+1	; 0x01
    3240:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3242:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3244:	01 96       	adiw	r24, 0x01	; 1
    3246:	9c 01       	movw	r18, r24
    3248:	22 0f       	add	r18, r18
    324a:	33 1f       	adc	r19, r19
    324c:	ce 01       	movw	r24, r28
    324e:	01 96       	adiw	r24, 0x01	; 1
    3250:	82 0f       	add	r24, r18
    3252:	93 1f       	adc	r25, r19
    3254:	fc 01       	movw	r30, r24
    3256:	b4 96       	adiw	r30, 0x24	; 36
    3258:	80 81       	ld	r24, Z
    325a:	91 81       	ldd	r25, Z+1	; 0x01
    325c:	84 17       	cp	r24, r20
    325e:	95 07       	cpc	r25, r21
    3260:	d8 f5       	brcc	.+118    	; 0x32d8 <H_LDR_u16_Read+0x2a6>
                temp = readings[j];
    3262:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3264:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3266:	9c 01       	movw	r18, r24
    3268:	22 0f       	add	r18, r18
    326a:	33 1f       	adc	r19, r19
    326c:	ce 01       	movw	r24, r28
    326e:	01 96       	adiw	r24, 0x01	; 1
    3270:	82 0f       	add	r24, r18
    3272:	93 1f       	adc	r25, r19
    3274:	fc 01       	movw	r30, r24
    3276:	b4 96       	adiw	r30, 0x24	; 36
    3278:	80 81       	ld	r24, Z
    327a:	91 81       	ldd	r25, Z+1	; 0x01
    327c:	89 8f       	std	Y+25, r24	; 0x19
                readings[j] = readings[j+1];
    327e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3280:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3282:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3284:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3286:	01 96       	adiw	r24, 0x01	; 1
    3288:	9c 01       	movw	r18, r24
    328a:	22 0f       	add	r18, r18
    328c:	33 1f       	adc	r19, r19
    328e:	ce 01       	movw	r24, r28
    3290:	01 96       	adiw	r24, 0x01	; 1
    3292:	82 0f       	add	r24, r18
    3294:	93 1f       	adc	r25, r19
    3296:	fc 01       	movw	r30, r24
    3298:	b4 96       	adiw	r30, 0x24	; 36
    329a:	40 81       	ld	r20, Z
    329c:	51 81       	ldd	r21, Z+1	; 0x01
    329e:	9b 01       	movw	r18, r22
    32a0:	22 0f       	add	r18, r18
    32a2:	33 1f       	adc	r19, r19
    32a4:	ce 01       	movw	r24, r28
    32a6:	01 96       	adiw	r24, 0x01	; 1
    32a8:	82 0f       	add	r24, r18
    32aa:	93 1f       	adc	r25, r19
    32ac:	fc 01       	movw	r30, r24
    32ae:	b4 96       	adiw	r30, 0x24	; 36
    32b0:	51 83       	std	Z+1, r21	; 0x01
    32b2:	40 83       	st	Z, r20
                readings[j+1] = temp;
    32b4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32b6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    32b8:	9c 01       	movw	r18, r24
    32ba:	2f 5f       	subi	r18, 0xFF	; 255
    32bc:	3f 4f       	sbci	r19, 0xFF	; 255
    32be:	89 8d       	ldd	r24, Y+25	; 0x19
    32c0:	48 2f       	mov	r20, r24
    32c2:	50 e0       	ldi	r21, 0x00	; 0
    32c4:	22 0f       	add	r18, r18
    32c6:	33 1f       	adc	r19, r19
    32c8:	ce 01       	movw	r24, r28
    32ca:	01 96       	adiw	r24, 0x01	; 1
    32cc:	82 0f       	add	r24, r18
    32ce:	93 1f       	adc	r25, r19
    32d0:	fc 01       	movw	r30, r24
    32d2:	b4 96       	adiw	r30, 0x24	; 36
    32d4:	51 83       	std	Z+1, r21	; 0x01
    32d6:	40 83       	st	Z, r20
	}

	//Sorting readings (Bubble Sort)
	u8 temp;
    for (i = 0; i < LDR_NUM_OF_SAMPLES; i++) {
        for (j = 0; j < LDR_NUM_OF_SAMPLES-j-1; j++) {
    32d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32da:	9b 8d       	ldd	r25, Y+27	; 0x1b
    32dc:	01 96       	adiw	r24, 0x01	; 1
    32de:	9b 8f       	std	Y+27, r25	; 0x1b
    32e0:	8a 8f       	std	Y+26, r24	; 0x1a
    32e2:	29 e0       	ldi	r18, 0x09	; 9
    32e4:	30 e0       	ldi	r19, 0x00	; 0
    32e6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32e8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    32ea:	28 1b       	sub	r18, r24
    32ec:	39 0b       	sbc	r19, r25
    32ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    32f0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    32f2:	82 17       	cp	r24, r18
    32f4:	93 07       	cpc	r25, r19
    32f6:	0c f4       	brge	.+2      	; 0x32fa <H_LDR_u16_Read+0x2c8>
    32f8:	96 cf       	rjmp	.-212    	; 0x3226 <H_LDR_u16_Read+0x1f4>
		_delay_us(100);
	}

	//Sorting readings (Bubble Sort)
	u8 temp;
    for (i = 0; i < LDR_NUM_OF_SAMPLES; i++) {
    32fa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32fc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    32fe:	01 96       	adiw	r24, 0x01	; 1
    3300:	9d 8f       	std	Y+29, r25	; 0x1d
    3302:	8c 8f       	std	Y+28, r24	; 0x1c
    3304:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3306:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3308:	8a 30       	cpi	r24, 0x0A	; 10
    330a:	91 05       	cpc	r25, r1
    330c:	0c f4       	brge	.+2      	; 0x3310 <H_LDR_u16_Read+0x2de>
    330e:	88 cf       	rjmp	.-240    	; 0x3220 <H_LDR_u16_Read+0x1ee>
        }
    }

    // Find the median value in the window
    if (LDR_NUM_OF_SAMPLES % 2 == 0) {
        ADC_result = (readings[LDR_NUM_OF_SAMPLES/2] + readings[LDR_NUM_OF_SAMPLES/2-1])/2;
    3310:	2f a5       	ldd	r18, Y+47	; 0x2f
    3312:	38 a9       	ldd	r19, Y+48	; 0x30
    3314:	8d a5       	ldd	r24, Y+45	; 0x2d
    3316:	9e a5       	ldd	r25, Y+46	; 0x2e
    3318:	82 0f       	add	r24, r18
    331a:	93 1f       	adc	r25, r19
    331c:	96 95       	lsr	r25
    331e:	87 95       	ror	r24
    3320:	9c a3       	std	Y+36, r25	; 0x24
    3322:	8b a3       	std	Y+35, r24	; 0x23
    else {
        ADC_result = readings[LDR_NUM_OF_SAMPLES/2];
    }


	analog_volt = ADC_result * (((f64)5.0*1000)/1024);  //in millieVolts
    3324:	8b a1       	ldd	r24, Y+35	; 0x23
    3326:	9c a1       	ldd	r25, Y+36	; 0x24
    3328:	cc 01       	movw	r24, r24
    332a:	a0 e0       	ldi	r26, 0x00	; 0
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	bc 01       	movw	r22, r24
    3330:	cd 01       	movw	r24, r26
    3332:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__floatunsisf>
    3336:	dc 01       	movw	r26, r24
    3338:	cb 01       	movw	r24, r22
    333a:	bc 01       	movw	r22, r24
    333c:	cd 01       	movw	r24, r26
    333e:	20 e0       	ldi	r18, 0x00	; 0
    3340:	30 e4       	ldi	r19, 0x40	; 64
    3342:	4c e9       	ldi	r20, 0x9C	; 156
    3344:	50 e4       	ldi	r21, 0x40	; 64
    3346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	8f 8f       	std	Y+31, r24	; 0x1f
    3350:	98 a3       	std	Y+32, r25	; 0x20
    3352:	a9 a3       	std	Y+33, r26	; 0x21
    3354:	ba a3       	std	Y+34, r27	; 0x22

	return analog_volt;
    3356:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3358:	78 a1       	ldd	r23, Y+32	; 0x20
    335a:	89 a1       	ldd	r24, Y+33	; 0x21
    335c:	9a a1       	ldd	r25, Y+34	; 0x22
    335e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3362:	dc 01       	movw	r26, r24
    3364:	cb 01       	movw	r24, r22
	//return ADC_result;

}
    3366:	e8 96       	adiw	r28, 0x38	; 56
    3368:	0f b6       	in	r0, 0x3f	; 63
    336a:	f8 94       	cli
    336c:	de bf       	out	0x3e, r29	; 62
    336e:	0f be       	out	0x3f, r0	; 63
    3370:	cd bf       	out	0x3d, r28	; 61
    3372:	cf 91       	pop	r28
    3374:	df 91       	pop	r29
    3376:	08 95       	ret

00003378 <H_LCD_void_LachByte>:
#include "Dio_int.h"
#include "LCD_cfg.h"
#include "LCD_int.h"
#include "LCD_priv.h"

static void H_LCD_void_LachByte(u8 copy_u8Byte) {
    3378:	df 93       	push	r29
    337a:	cf 93       	push	r28
    337c:	0f 92       	push	r0
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
    3382:	89 83       	std	Y+1, r24	; 0x01
#if(H_LCD_MOED == BIT4_MODE)
	H_LCD_void_LachNibble(copy_u8Byte);
    3384:	89 81       	ldd	r24, Y+1	; 0x01
    3386:	0e 94 ce 19 	call	0x339c	; 0x339c <H_LCD_void_LachNibble>
	H_LCD_void_LachNibble(copy_u8Byte << 4); //send the first niblle
    338a:	89 81       	ldd	r24, Y+1	; 0x01
    338c:	82 95       	swap	r24
    338e:	80 7f       	andi	r24, 0xF0	; 240
    3390:	0e 94 ce 19 	call	0x339c	; 0x339c <H_LCD_void_LachNibble>
	//send the second niblle
#else if(H_LCD_MOED == BIT8_MODE)

#endif
}
    3394:	0f 90       	pop	r0
    3396:	cf 91       	pop	r28
    3398:	df 91       	pop	r29
    339a:	08 95       	ret

0000339c <H_LCD_void_LachNibble>:

static void H_LCD_void_LachNibble(u8 copy_u8Nibble) {
    339c:	df 93       	push	r29
    339e:	cf 93       	push	r28
    33a0:	cd b7       	in	r28, 0x3d	; 61
    33a2:	de b7       	in	r29, 0x3e	; 62
    33a4:	ef 97       	sbiw	r28, 0x3f	; 63
    33a6:	0f b6       	in	r0, 0x3f	; 63
    33a8:	f8 94       	cli
    33aa:	de bf       	out	0x3e, r29	; 62
    33ac:	0f be       	out	0x3f, r0	; 63
    33ae:	cd bf       	out	0x3d, r28	; 61
    33b0:	8f af       	std	Y+63, r24	; 0x3f
	M_DIO_voidSetPinValue(H_LCD_DB7_PIN, GET_BIT(copy_u8Nibble, 7));
    33b2:	8f ad       	ldd	r24, Y+63	; 0x3f
    33b4:	98 2f       	mov	r25, r24
    33b6:	99 1f       	adc	r25, r25
    33b8:	99 27       	eor	r25, r25
    33ba:	99 1f       	adc	r25, r25
    33bc:	88 e1       	ldi	r24, 0x18	; 24
    33be:	69 2f       	mov	r22, r25
    33c0:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(H_LCD_DB6_PIN, GET_BIT(copy_u8Nibble, 6));
    33c4:	8f ad       	ldd	r24, Y+63	; 0x3f
    33c6:	82 95       	swap	r24
    33c8:	86 95       	lsr	r24
    33ca:	86 95       	lsr	r24
    33cc:	83 70       	andi	r24, 0x03	; 3
    33ce:	98 2f       	mov	r25, r24
    33d0:	91 70       	andi	r25, 0x01	; 1
    33d2:	86 e1       	ldi	r24, 0x16	; 22
    33d4:	69 2f       	mov	r22, r25
    33d6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(H_LCD_DB5_PIN, GET_BIT(copy_u8Nibble, 5));
    33da:	8f ad       	ldd	r24, Y+63	; 0x3f
    33dc:	82 95       	swap	r24
    33de:	86 95       	lsr	r24
    33e0:	87 70       	andi	r24, 0x07	; 7
    33e2:	98 2f       	mov	r25, r24
    33e4:	91 70       	andi	r25, 0x01	; 1
    33e6:	85 e1       	ldi	r24, 0x15	; 21
    33e8:	69 2f       	mov	r22, r25
    33ea:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(H_LCD_DB4_PIN, GET_BIT(copy_u8Nibble, 4));
    33ee:	8f ad       	ldd	r24, Y+63	; 0x3f
    33f0:	82 95       	swap	r24
    33f2:	8f 70       	andi	r24, 0x0F	; 15
    33f4:	98 2f       	mov	r25, r24
    33f6:	91 70       	andi	r25, 0x01	; 1
    33f8:	84 e1       	ldi	r24, 0x14	; 20
    33fa:	69 2f       	mov	r22, r25
    33fc:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(H_LCD_EN_PIN, DIO_LOW); // set EN to LOW
    3400:	8c e0       	ldi	r24, 0x0C	; 12
    3402:	60 e0       	ldi	r22, 0x00	; 0
    3404:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	a0 e2       	ldi	r26, 0x20	; 32
    340e:	b1 e4       	ldi	r27, 0x41	; 65
    3410:	8b af       	std	Y+59, r24	; 0x3b
    3412:	9c af       	std	Y+60, r25	; 0x3c
    3414:	ad af       	std	Y+61, r26	; 0x3d
    3416:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3418:	6b ad       	ldd	r22, Y+59	; 0x3b
    341a:	7c ad       	ldd	r23, Y+60	; 0x3c
    341c:	8d ad       	ldd	r24, Y+61	; 0x3d
    341e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3420:	2b ea       	ldi	r18, 0xAB	; 171
    3422:	3a ea       	ldi	r19, 0xAA	; 170
    3424:	4a ea       	ldi	r20, 0xAA	; 170
    3426:	50 e4       	ldi	r21, 0x40	; 64
    3428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	8f ab       	std	Y+55, r24	; 0x37
    3432:	98 af       	std	Y+56, r25	; 0x38
    3434:	a9 af       	std	Y+57, r26	; 0x39
    3436:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3438:	6f a9       	ldd	r22, Y+55	; 0x37
    343a:	78 ad       	ldd	r23, Y+56	; 0x38
    343c:	89 ad       	ldd	r24, Y+57	; 0x39
    343e:	9a ad       	ldd	r25, Y+58	; 0x3a
    3440:	20 e0       	ldi	r18, 0x00	; 0
    3442:	30 e0       	ldi	r19, 0x00	; 0
    3444:	40 e8       	ldi	r20, 0x80	; 128
    3446:	5f e3       	ldi	r21, 0x3F	; 63
    3448:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    344c:	88 23       	and	r24, r24
    344e:	1c f4       	brge	.+6      	; 0x3456 <H_LCD_void_LachNibble+0xba>
		__ticks = 1;
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	8e ab       	std	Y+54, r24	; 0x36
    3454:	91 c0       	rjmp	.+290    	; 0x3578 <H_LCD_void_LachNibble+0x1dc>
	else if (__tmp > 255)
    3456:	6f a9       	ldd	r22, Y+55	; 0x37
    3458:	78 ad       	ldd	r23, Y+56	; 0x38
    345a:	89 ad       	ldd	r24, Y+57	; 0x39
    345c:	9a ad       	ldd	r25, Y+58	; 0x3a
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	4f e7       	ldi	r20, 0x7F	; 127
    3464:	53 e4       	ldi	r21, 0x43	; 67
    3466:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    346a:	18 16       	cp	r1, r24
    346c:	0c f0       	brlt	.+2      	; 0x3470 <H_LCD_void_LachNibble+0xd4>
    346e:	7b c0       	rjmp	.+246    	; 0x3566 <H_LCD_void_LachNibble+0x1ca>
	{
		_delay_ms(__us / 1000.0);
    3470:	6b ad       	ldd	r22, Y+59	; 0x3b
    3472:	7c ad       	ldd	r23, Y+60	; 0x3c
    3474:	8d ad       	ldd	r24, Y+61	; 0x3d
    3476:	9e ad       	ldd	r25, Y+62	; 0x3e
    3478:	20 e0       	ldi	r18, 0x00	; 0
    347a:	30 e0       	ldi	r19, 0x00	; 0
    347c:	4a e7       	ldi	r20, 0x7A	; 122
    347e:	54 e4       	ldi	r21, 0x44	; 68
    3480:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	8a ab       	std	Y+50, r24	; 0x32
    348a:	9b ab       	std	Y+51, r25	; 0x33
    348c:	ac ab       	std	Y+52, r26	; 0x34
    348e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3490:	6a a9       	ldd	r22, Y+50	; 0x32
    3492:	7b a9       	ldd	r23, Y+51	; 0x33
    3494:	8c a9       	ldd	r24, Y+52	; 0x34
    3496:	9d a9       	ldd	r25, Y+53	; 0x35
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	4a e7       	ldi	r20, 0x7A	; 122
    349e:	55 e4       	ldi	r21, 0x45	; 69
    34a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	8e a7       	std	Y+46, r24	; 0x2e
    34aa:	9f a7       	std	Y+47, r25	; 0x2f
    34ac:	a8 ab       	std	Y+48, r26	; 0x30
    34ae:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    34b0:	6e a5       	ldd	r22, Y+46	; 0x2e
    34b2:	7f a5       	ldd	r23, Y+47	; 0x2f
    34b4:	88 a9       	ldd	r24, Y+48	; 0x30
    34b6:	99 a9       	ldd	r25, Y+49	; 0x31
    34b8:	20 e0       	ldi	r18, 0x00	; 0
    34ba:	30 e0       	ldi	r19, 0x00	; 0
    34bc:	40 e8       	ldi	r20, 0x80	; 128
    34be:	5f e3       	ldi	r21, 0x3F	; 63
    34c0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    34c4:	88 23       	and	r24, r24
    34c6:	2c f4       	brge	.+10     	; 0x34d2 <H_LCD_void_LachNibble+0x136>
		__ticks = 1;
    34c8:	81 e0       	ldi	r24, 0x01	; 1
    34ca:	90 e0       	ldi	r25, 0x00	; 0
    34cc:	9d a7       	std	Y+45, r25	; 0x2d
    34ce:	8c a7       	std	Y+44, r24	; 0x2c
    34d0:	3f c0       	rjmp	.+126    	; 0x3550 <H_LCD_void_LachNibble+0x1b4>
	else if (__tmp > 65535)
    34d2:	6e a5       	ldd	r22, Y+46	; 0x2e
    34d4:	7f a5       	ldd	r23, Y+47	; 0x2f
    34d6:	88 a9       	ldd	r24, Y+48	; 0x30
    34d8:	99 a9       	ldd	r25, Y+49	; 0x31
    34da:	20 e0       	ldi	r18, 0x00	; 0
    34dc:	3f ef       	ldi	r19, 0xFF	; 255
    34de:	4f e7       	ldi	r20, 0x7F	; 127
    34e0:	57 e4       	ldi	r21, 0x47	; 71
    34e2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    34e6:	18 16       	cp	r1, r24
    34e8:	4c f5       	brge	.+82     	; 0x353c <H_LCD_void_LachNibble+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ea:	6a a9       	ldd	r22, Y+50	; 0x32
    34ec:	7b a9       	ldd	r23, Y+51	; 0x33
    34ee:	8c a9       	ldd	r24, Y+52	; 0x34
    34f0:	9d a9       	ldd	r25, Y+53	; 0x35
    34f2:	20 e0       	ldi	r18, 0x00	; 0
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	40 e2       	ldi	r20, 0x20	; 32
    34f8:	51 e4       	ldi	r21, 0x41	; 65
    34fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fe:	dc 01       	movw	r26, r24
    3500:	cb 01       	movw	r24, r22
    3502:	bc 01       	movw	r22, r24
    3504:	cd 01       	movw	r24, r26
    3506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350a:	dc 01       	movw	r26, r24
    350c:	cb 01       	movw	r24, r22
    350e:	9d a7       	std	Y+45, r25	; 0x2d
    3510:	8c a7       	std	Y+44, r24	; 0x2c
    3512:	0f c0       	rjmp	.+30     	; 0x3532 <H_LCD_void_LachNibble+0x196>
    3514:	80 e9       	ldi	r24, 0x90	; 144
    3516:	91 e0       	ldi	r25, 0x01	; 1
    3518:	9b a7       	std	Y+43, r25	; 0x2b
    351a:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    351c:	8a a5       	ldd	r24, Y+42	; 0x2a
    351e:	9b a5       	ldd	r25, Y+43	; 0x2b
    3520:	01 97       	sbiw	r24, 0x01	; 1
    3522:	f1 f7       	brne	.-4      	; 0x3520 <H_LCD_void_LachNibble+0x184>
    3524:	9b a7       	std	Y+43, r25	; 0x2b
    3526:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3528:	8c a5       	ldd	r24, Y+44	; 0x2c
    352a:	9d a5       	ldd	r25, Y+45	; 0x2d
    352c:	01 97       	sbiw	r24, 0x01	; 1
    352e:	9d a7       	std	Y+45, r25	; 0x2d
    3530:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3532:	8c a5       	ldd	r24, Y+44	; 0x2c
    3534:	9d a5       	ldd	r25, Y+45	; 0x2d
    3536:	00 97       	sbiw	r24, 0x00	; 0
    3538:	69 f7       	brne	.-38     	; 0x3514 <H_LCD_void_LachNibble+0x178>
    353a:	24 c0       	rjmp	.+72     	; 0x3584 <H_LCD_void_LachNibble+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    353c:	6e a5       	ldd	r22, Y+46	; 0x2e
    353e:	7f a5       	ldd	r23, Y+47	; 0x2f
    3540:	88 a9       	ldd	r24, Y+48	; 0x30
    3542:	99 a9       	ldd	r25, Y+49	; 0x31
    3544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3548:	dc 01       	movw	r26, r24
    354a:	cb 01       	movw	r24, r22
    354c:	9d a7       	std	Y+45, r25	; 0x2d
    354e:	8c a7       	std	Y+44, r24	; 0x2c
    3550:	8c a5       	ldd	r24, Y+44	; 0x2c
    3552:	9d a5       	ldd	r25, Y+45	; 0x2d
    3554:	99 a7       	std	Y+41, r25	; 0x29
    3556:	88 a7       	std	Y+40, r24	; 0x28
    3558:	88 a5       	ldd	r24, Y+40	; 0x28
    355a:	99 a5       	ldd	r25, Y+41	; 0x29
    355c:	01 97       	sbiw	r24, 0x01	; 1
    355e:	f1 f7       	brne	.-4      	; 0x355c <H_LCD_void_LachNibble+0x1c0>
    3560:	99 a7       	std	Y+41, r25	; 0x29
    3562:	88 a7       	std	Y+40, r24	; 0x28
    3564:	0f c0       	rjmp	.+30     	; 0x3584 <H_LCD_void_LachNibble+0x1e8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3566:	6f a9       	ldd	r22, Y+55	; 0x37
    3568:	78 ad       	ldd	r23, Y+56	; 0x38
    356a:	89 ad       	ldd	r24, Y+57	; 0x39
    356c:	9a ad       	ldd	r25, Y+58	; 0x3a
    356e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3572:	dc 01       	movw	r26, r24
    3574:	cb 01       	movw	r24, r22
    3576:	8e ab       	std	Y+54, r24	; 0x36
    3578:	8e a9       	ldd	r24, Y+54	; 0x36
    357a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    357c:	8f a1       	ldd	r24, Y+39	; 0x27
    357e:	8a 95       	dec	r24
    3580:	f1 f7       	brne	.-4      	; 0x357e <H_LCD_void_LachNibble+0x1e2>
    3582:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(10);
	M_DIO_voidSetPinValue(H_LCD_EN_PIN, DIO_HIGH); // set EN to HIGH
    3584:	8c e0       	ldi	r24, 0x0C	; 12
    3586:	61 e0       	ldi	r22, 0x01	; 1
    3588:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	a8 ec       	ldi	r26, 0xC8	; 200
    3592:	b2 e4       	ldi	r27, 0x42	; 66
    3594:	8b a3       	std	Y+35, r24	; 0x23
    3596:	9c a3       	std	Y+36, r25	; 0x24
    3598:	ad a3       	std	Y+37, r26	; 0x25
    359a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    359c:	6b a1       	ldd	r22, Y+35	; 0x23
    359e:	7c a1       	ldd	r23, Y+36	; 0x24
    35a0:	8d a1       	ldd	r24, Y+37	; 0x25
    35a2:	9e a1       	ldd	r25, Y+38	; 0x26
    35a4:	2b ea       	ldi	r18, 0xAB	; 171
    35a6:	3a ea       	ldi	r19, 0xAA	; 170
    35a8:	4a ea       	ldi	r20, 0xAA	; 170
    35aa:	50 e4       	ldi	r21, 0x40	; 64
    35ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35b0:	dc 01       	movw	r26, r24
    35b2:	cb 01       	movw	r24, r22
    35b4:	8f 8f       	std	Y+31, r24	; 0x1f
    35b6:	98 a3       	std	Y+32, r25	; 0x20
    35b8:	a9 a3       	std	Y+33, r26	; 0x21
    35ba:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    35bc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    35be:	78 a1       	ldd	r23, Y+32	; 0x20
    35c0:	89 a1       	ldd	r24, Y+33	; 0x21
    35c2:	9a a1       	ldd	r25, Y+34	; 0x22
    35c4:	20 e0       	ldi	r18, 0x00	; 0
    35c6:	30 e0       	ldi	r19, 0x00	; 0
    35c8:	40 e8       	ldi	r20, 0x80	; 128
    35ca:	5f e3       	ldi	r21, 0x3F	; 63
    35cc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    35d0:	88 23       	and	r24, r24
    35d2:	1c f4       	brge	.+6      	; 0x35da <H_LCD_void_LachNibble+0x23e>
		__ticks = 1;
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	8e 8f       	std	Y+30, r24	; 0x1e
    35d8:	91 c0       	rjmp	.+290    	; 0x36fc <H_LCD_void_LachNibble+0x360>
	else if (__tmp > 255)
    35da:	6f 8d       	ldd	r22, Y+31	; 0x1f
    35dc:	78 a1       	ldd	r23, Y+32	; 0x20
    35de:	89 a1       	ldd	r24, Y+33	; 0x21
    35e0:	9a a1       	ldd	r25, Y+34	; 0x22
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	4f e7       	ldi	r20, 0x7F	; 127
    35e8:	53 e4       	ldi	r21, 0x43	; 67
    35ea:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    35ee:	18 16       	cp	r1, r24
    35f0:	0c f0       	brlt	.+2      	; 0x35f4 <H_LCD_void_LachNibble+0x258>
    35f2:	7b c0       	rjmp	.+246    	; 0x36ea <H_LCD_void_LachNibble+0x34e>
	{
		_delay_ms(__us / 1000.0);
    35f4:	6b a1       	ldd	r22, Y+35	; 0x23
    35f6:	7c a1       	ldd	r23, Y+36	; 0x24
    35f8:	8d a1       	ldd	r24, Y+37	; 0x25
    35fa:	9e a1       	ldd	r25, Y+38	; 0x26
    35fc:	20 e0       	ldi	r18, 0x00	; 0
    35fe:	30 e0       	ldi	r19, 0x00	; 0
    3600:	4a e7       	ldi	r20, 0x7A	; 122
    3602:	54 e4       	ldi	r21, 0x44	; 68
    3604:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3608:	dc 01       	movw	r26, r24
    360a:	cb 01       	movw	r24, r22
    360c:	8a 8f       	std	Y+26, r24	; 0x1a
    360e:	9b 8f       	std	Y+27, r25	; 0x1b
    3610:	ac 8f       	std	Y+28, r26	; 0x1c
    3612:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3614:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3616:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3618:	8c 8d       	ldd	r24, Y+28	; 0x1c
    361a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	4a e7       	ldi	r20, 0x7A	; 122
    3622:	55 e4       	ldi	r21, 0x45	; 69
    3624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3628:	dc 01       	movw	r26, r24
    362a:	cb 01       	movw	r24, r22
    362c:	8e 8b       	std	Y+22, r24	; 0x16
    362e:	9f 8b       	std	Y+23, r25	; 0x17
    3630:	a8 8f       	std	Y+24, r26	; 0x18
    3632:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    3634:	6e 89       	ldd	r22, Y+22	; 0x16
    3636:	7f 89       	ldd	r23, Y+23	; 0x17
    3638:	88 8d       	ldd	r24, Y+24	; 0x18
    363a:	99 8d       	ldd	r25, Y+25	; 0x19
    363c:	20 e0       	ldi	r18, 0x00	; 0
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	40 e8       	ldi	r20, 0x80	; 128
    3642:	5f e3       	ldi	r21, 0x3F	; 63
    3644:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3648:	88 23       	and	r24, r24
    364a:	2c f4       	brge	.+10     	; 0x3656 <H_LCD_void_LachNibble+0x2ba>
		__ticks = 1;
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	90 e0       	ldi	r25, 0x00	; 0
    3650:	9d 8b       	std	Y+21, r25	; 0x15
    3652:	8c 8b       	std	Y+20, r24	; 0x14
    3654:	3f c0       	rjmp	.+126    	; 0x36d4 <H_LCD_void_LachNibble+0x338>
	else if (__tmp > 65535)
    3656:	6e 89       	ldd	r22, Y+22	; 0x16
    3658:	7f 89       	ldd	r23, Y+23	; 0x17
    365a:	88 8d       	ldd	r24, Y+24	; 0x18
    365c:	99 8d       	ldd	r25, Y+25	; 0x19
    365e:	20 e0       	ldi	r18, 0x00	; 0
    3660:	3f ef       	ldi	r19, 0xFF	; 255
    3662:	4f e7       	ldi	r20, 0x7F	; 127
    3664:	57 e4       	ldi	r21, 0x47	; 71
    3666:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    366a:	18 16       	cp	r1, r24
    366c:	4c f5       	brge	.+82     	; 0x36c0 <H_LCD_void_LachNibble+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    366e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3670:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3672:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3674:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3676:	20 e0       	ldi	r18, 0x00	; 0
    3678:	30 e0       	ldi	r19, 0x00	; 0
    367a:	40 e2       	ldi	r20, 0x20	; 32
    367c:	51 e4       	ldi	r21, 0x41	; 65
    367e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3682:	dc 01       	movw	r26, r24
    3684:	cb 01       	movw	r24, r22
    3686:	bc 01       	movw	r22, r24
    3688:	cd 01       	movw	r24, r26
    368a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	9d 8b       	std	Y+21, r25	; 0x15
    3694:	8c 8b       	std	Y+20, r24	; 0x14
    3696:	0f c0       	rjmp	.+30     	; 0x36b6 <H_LCD_void_LachNibble+0x31a>
    3698:	80 e9       	ldi	r24, 0x90	; 144
    369a:	91 e0       	ldi	r25, 0x01	; 1
    369c:	9b 8b       	std	Y+19, r25	; 0x13
    369e:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    36a0:	8a 89       	ldd	r24, Y+18	; 0x12
    36a2:	9b 89       	ldd	r25, Y+19	; 0x13
    36a4:	01 97       	sbiw	r24, 0x01	; 1
    36a6:	f1 f7       	brne	.-4      	; 0x36a4 <H_LCD_void_LachNibble+0x308>
    36a8:	9b 8b       	std	Y+19, r25	; 0x13
    36aa:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36ac:	8c 89       	ldd	r24, Y+20	; 0x14
    36ae:	9d 89       	ldd	r25, Y+21	; 0x15
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	9d 8b       	std	Y+21, r25	; 0x15
    36b4:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36b6:	8c 89       	ldd	r24, Y+20	; 0x14
    36b8:	9d 89       	ldd	r25, Y+21	; 0x15
    36ba:	00 97       	sbiw	r24, 0x00	; 0
    36bc:	69 f7       	brne	.-38     	; 0x3698 <H_LCD_void_LachNibble+0x2fc>
    36be:	24 c0       	rjmp	.+72     	; 0x3708 <H_LCD_void_LachNibble+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36c0:	6e 89       	ldd	r22, Y+22	; 0x16
    36c2:	7f 89       	ldd	r23, Y+23	; 0x17
    36c4:	88 8d       	ldd	r24, Y+24	; 0x18
    36c6:	99 8d       	ldd	r25, Y+25	; 0x19
    36c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36cc:	dc 01       	movw	r26, r24
    36ce:	cb 01       	movw	r24, r22
    36d0:	9d 8b       	std	Y+21, r25	; 0x15
    36d2:	8c 8b       	std	Y+20, r24	; 0x14
    36d4:	8c 89       	ldd	r24, Y+20	; 0x14
    36d6:	9d 89       	ldd	r25, Y+21	; 0x15
    36d8:	99 8b       	std	Y+17, r25	; 0x11
    36da:	88 8b       	std	Y+16, r24	; 0x10
    36dc:	88 89       	ldd	r24, Y+16	; 0x10
    36de:	99 89       	ldd	r25, Y+17	; 0x11
    36e0:	01 97       	sbiw	r24, 0x01	; 1
    36e2:	f1 f7       	brne	.-4      	; 0x36e0 <H_LCD_void_LachNibble+0x344>
    36e4:	99 8b       	std	Y+17, r25	; 0x11
    36e6:	88 8b       	std	Y+16, r24	; 0x10
    36e8:	0f c0       	rjmp	.+30     	; 0x3708 <H_LCD_void_LachNibble+0x36c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    36ea:	6f 8d       	ldd	r22, Y+31	; 0x1f
    36ec:	78 a1       	ldd	r23, Y+32	; 0x20
    36ee:	89 a1       	ldd	r24, Y+33	; 0x21
    36f0:	9a a1       	ldd	r25, Y+34	; 0x22
    36f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36f6:	dc 01       	movw	r26, r24
    36f8:	cb 01       	movw	r24, r22
    36fa:	8e 8f       	std	Y+30, r24	; 0x1e
    36fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    36fe:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3700:	8f 85       	ldd	r24, Y+15	; 0x0f
    3702:	8a 95       	dec	r24
    3704:	f1 f7       	brne	.-4      	; 0x3702 <H_LCD_void_LachNibble+0x366>
    3706:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(100);
	M_DIO_voidSetPinValue(H_LCD_EN_PIN, DIO_LOW); // set EN to HIGH
    3708:	8c e0       	ldi	r24, 0x0C	; 12
    370a:	60 e0       	ldi	r22, 0x00	; 0
    370c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
    3710:	80 e0       	ldi	r24, 0x00	; 0
    3712:	90 e0       	ldi	r25, 0x00	; 0
    3714:	a0 e8       	ldi	r26, 0x80	; 128
    3716:	bf e3       	ldi	r27, 0x3F	; 63
    3718:	8b 87       	std	Y+11, r24	; 0x0b
    371a:	9c 87       	std	Y+12, r25	; 0x0c
    371c:	ad 87       	std	Y+13, r26	; 0x0d
    371e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3720:	6b 85       	ldd	r22, Y+11	; 0x0b
    3722:	7c 85       	ldd	r23, Y+12	; 0x0c
    3724:	8d 85       	ldd	r24, Y+13	; 0x0d
    3726:	9e 85       	ldd	r25, Y+14	; 0x0e
    3728:	20 e0       	ldi	r18, 0x00	; 0
    372a:	30 e0       	ldi	r19, 0x00	; 0
    372c:	4a e7       	ldi	r20, 0x7A	; 122
    372e:	55 e4       	ldi	r21, 0x45	; 69
    3730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3734:	dc 01       	movw	r26, r24
    3736:	cb 01       	movw	r24, r22
    3738:	8f 83       	std	Y+7, r24	; 0x07
    373a:	98 87       	std	Y+8, r25	; 0x08
    373c:	a9 87       	std	Y+9, r26	; 0x09
    373e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3740:	6f 81       	ldd	r22, Y+7	; 0x07
    3742:	78 85       	ldd	r23, Y+8	; 0x08
    3744:	89 85       	ldd	r24, Y+9	; 0x09
    3746:	9a 85       	ldd	r25, Y+10	; 0x0a
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	40 e8       	ldi	r20, 0x80	; 128
    374e:	5f e3       	ldi	r21, 0x3F	; 63
    3750:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3754:	88 23       	and	r24, r24
    3756:	2c f4       	brge	.+10     	; 0x3762 <H_LCD_void_LachNibble+0x3c6>
		__ticks = 1;
    3758:	81 e0       	ldi	r24, 0x01	; 1
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	9e 83       	std	Y+6, r25	; 0x06
    375e:	8d 83       	std	Y+5, r24	; 0x05
    3760:	3f c0       	rjmp	.+126    	; 0x37e0 <H_LCD_void_LachNibble+0x444>
	else if (__tmp > 65535)
    3762:	6f 81       	ldd	r22, Y+7	; 0x07
    3764:	78 85       	ldd	r23, Y+8	; 0x08
    3766:	89 85       	ldd	r24, Y+9	; 0x09
    3768:	9a 85       	ldd	r25, Y+10	; 0x0a
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	3f ef       	ldi	r19, 0xFF	; 255
    376e:	4f e7       	ldi	r20, 0x7F	; 127
    3770:	57 e4       	ldi	r21, 0x47	; 71
    3772:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3776:	18 16       	cp	r1, r24
    3778:	4c f5       	brge	.+82     	; 0x37cc <H_LCD_void_LachNibble+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    377a:	6b 85       	ldd	r22, Y+11	; 0x0b
    377c:	7c 85       	ldd	r23, Y+12	; 0x0c
    377e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3780:	9e 85       	ldd	r25, Y+14	; 0x0e
    3782:	20 e0       	ldi	r18, 0x00	; 0
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	40 e2       	ldi	r20, 0x20	; 32
    3788:	51 e4       	ldi	r21, 0x41	; 65
    378a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    378e:	dc 01       	movw	r26, r24
    3790:	cb 01       	movw	r24, r22
    3792:	bc 01       	movw	r22, r24
    3794:	cd 01       	movw	r24, r26
    3796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    379a:	dc 01       	movw	r26, r24
    379c:	cb 01       	movw	r24, r22
    379e:	9e 83       	std	Y+6, r25	; 0x06
    37a0:	8d 83       	std	Y+5, r24	; 0x05
    37a2:	0f c0       	rjmp	.+30     	; 0x37c2 <H_LCD_void_LachNibble+0x426>
    37a4:	80 e9       	ldi	r24, 0x90	; 144
    37a6:	91 e0       	ldi	r25, 0x01	; 1
    37a8:	9c 83       	std	Y+4, r25	; 0x04
    37aa:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    37ac:	8b 81       	ldd	r24, Y+3	; 0x03
    37ae:	9c 81       	ldd	r25, Y+4	; 0x04
    37b0:	01 97       	sbiw	r24, 0x01	; 1
    37b2:	f1 f7       	brne	.-4      	; 0x37b0 <H_LCD_void_LachNibble+0x414>
    37b4:	9c 83       	std	Y+4, r25	; 0x04
    37b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37b8:	8d 81       	ldd	r24, Y+5	; 0x05
    37ba:	9e 81       	ldd	r25, Y+6	; 0x06
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	9e 83       	std	Y+6, r25	; 0x06
    37c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37c2:	8d 81       	ldd	r24, Y+5	; 0x05
    37c4:	9e 81       	ldd	r25, Y+6	; 0x06
    37c6:	00 97       	sbiw	r24, 0x00	; 0
    37c8:	69 f7       	brne	.-38     	; 0x37a4 <H_LCD_void_LachNibble+0x408>
    37ca:	14 c0       	rjmp	.+40     	; 0x37f4 <H_LCD_void_LachNibble+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37cc:	6f 81       	ldd	r22, Y+7	; 0x07
    37ce:	78 85       	ldd	r23, Y+8	; 0x08
    37d0:	89 85       	ldd	r24, Y+9	; 0x09
    37d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    37d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d8:	dc 01       	movw	r26, r24
    37da:	cb 01       	movw	r24, r22
    37dc:	9e 83       	std	Y+6, r25	; 0x06
    37de:	8d 83       	std	Y+5, r24	; 0x05
    37e0:	8d 81       	ldd	r24, Y+5	; 0x05
    37e2:	9e 81       	ldd	r25, Y+6	; 0x06
    37e4:	9a 83       	std	Y+2, r25	; 0x02
    37e6:	89 83       	std	Y+1, r24	; 0x01
    37e8:	89 81       	ldd	r24, Y+1	; 0x01
    37ea:	9a 81       	ldd	r25, Y+2	; 0x02
    37ec:	01 97       	sbiw	r24, 0x01	; 1
    37ee:	f1 f7       	brne	.-4      	; 0x37ec <H_LCD_void_LachNibble+0x450>
    37f0:	9a 83       	std	Y+2, r25	; 0x02
    37f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); // wait for 1 ms
}
    37f4:	ef 96       	adiw	r28, 0x3f	; 63
    37f6:	0f b6       	in	r0, 0x3f	; 63
    37f8:	f8 94       	cli
    37fa:	de bf       	out	0x3e, r29	; 62
    37fc:	0f be       	out	0x3f, r0	; 63
    37fe:	cd bf       	out	0x3d, r28	; 61
    3800:	cf 91       	pop	r28
    3802:	df 91       	pop	r29
    3804:	08 95       	ret

00003806 <H_LCD_void_SendCommand>:

void H_LCD_void_SendCommand(u8 copy_u8Data) {
    3806:	df 93       	push	r29
    3808:	cf 93       	push	r28
    380a:	0f 92       	push	r0
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
    3810:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_voidSetPinValue(H_LCD_RS_PIN, DIO_LOW); //set RS LOW for command mode
    3812:	8d e0       	ldi	r24, 0x0D	; 13
    3814:	60 e0       	ldi	r22, 0x00	; 0
    3816:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
	H_LCD_void_LachByte(copy_u8Data);
    381a:	89 81       	ldd	r24, Y+1	; 0x01
    381c:	0e 94 bc 19 	call	0x3378	; 0x3378 <H_LCD_void_LachByte>

}
    3820:	0f 90       	pop	r0
    3822:	cf 91       	pop	r28
    3824:	df 91       	pop	r29
    3826:	08 95       	ret

00003828 <H_LCD_void_Clear>:

void H_LCD_void_Clear(void) {
    3828:	df 93       	push	r29
    382a:	cf 93       	push	r28
    382c:	cd b7       	in	r28, 0x3d	; 61
    382e:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_SendCommand(0x01);
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	0e 94 03 1c 	call	0x3806	; 0x3806 <H_LCD_void_SendCommand>
}
    3836:	cf 91       	pop	r28
    3838:	df 91       	pop	r29
    383a:	08 95       	ret

0000383c <H_LCD_void_SendData>:

void H_LCD_void_SendData(char copy_u8Data) {
    383c:	df 93       	push	r29
    383e:	cf 93       	push	r28
    3840:	0f 92       	push	r0
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62
    3846:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_voidSetPinValue(H_LCD_RS_PIN, DIO_HIGH); //set RS HIGH for Data mode
    3848:	8d e0       	ldi	r24, 0x0D	; 13
    384a:	61 e0       	ldi	r22, 0x01	; 1
    384c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
	H_LCD_void_LachByte(copy_u8Data);
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	0e 94 bc 19 	call	0x3378	; 0x3378 <H_LCD_void_LachByte>

}
    3856:	0f 90       	pop	r0
    3858:	cf 91       	pop	r28
    385a:	df 91       	pop	r29
    385c:	08 95       	ret

0000385e <H_LCD_void_sendString>:

void H_LCD_void_sendString(char *string) {
    385e:	df 93       	push	r29
    3860:	cf 93       	push	r28
    3862:	00 d0       	rcall	.+0      	; 0x3864 <H_LCD_void_sendString+0x6>
    3864:	00 d0       	rcall	.+0      	; 0x3866 <H_LCD_void_sendString+0x8>
    3866:	cd b7       	in	r28, 0x3d	; 61
    3868:	de b7       	in	r29, 0x3e	; 62
    386a:	9c 83       	std	Y+4, r25	; 0x04
    386c:	8b 83       	std	Y+3, r24	; 0x03
	static u8 stCounter =0;
	//for (char *it = string; *it; it++) {
	for(int i = 0; i < 100 ; i++){
    386e:	1a 82       	std	Y+2, r1	; 0x02
    3870:	19 82       	std	Y+1, r1	; 0x01
    3872:	19 c0       	rjmp	.+50     	; 0x38a6 <H_LCD_void_sendString+0x48>
		if(*(string+i) == 0)
    3874:	29 81       	ldd	r18, Y+1	; 0x01
    3876:	3a 81       	ldd	r19, Y+2	; 0x02
    3878:	8b 81       	ldd	r24, Y+3	; 0x03
    387a:	9c 81       	ldd	r25, Y+4	; 0x04
    387c:	fc 01       	movw	r30, r24
    387e:	e2 0f       	add	r30, r18
    3880:	f3 1f       	adc	r31, r19
    3882:	80 81       	ld	r24, Z
    3884:	88 23       	and	r24, r24
    3886:	a1 f0       	breq	.+40     	; 0x38b0 <H_LCD_void_sendString+0x52>
			break;
		H_LCD_void_SendData(*(string+i));
    3888:	29 81       	ldd	r18, Y+1	; 0x01
    388a:	3a 81       	ldd	r19, Y+2	; 0x02
    388c:	8b 81       	ldd	r24, Y+3	; 0x03
    388e:	9c 81       	ldd	r25, Y+4	; 0x04
    3890:	fc 01       	movw	r30, r24
    3892:	e2 0f       	add	r30, r18
    3894:	f3 1f       	adc	r31, r19
    3896:	80 81       	ld	r24, Z
    3898:	0e 94 1e 1c 	call	0x383c	; 0x383c <H_LCD_void_SendData>
}

void H_LCD_void_sendString(char *string) {
	static u8 stCounter =0;
	//for (char *it = string; *it; it++) {
	for(int i = 0; i < 100 ; i++){
    389c:	89 81       	ldd	r24, Y+1	; 0x01
    389e:	9a 81       	ldd	r25, Y+2	; 0x02
    38a0:	01 96       	adiw	r24, 0x01	; 1
    38a2:	9a 83       	std	Y+2, r25	; 0x02
    38a4:	89 83       	std	Y+1, r24	; 0x01
    38a6:	89 81       	ldd	r24, Y+1	; 0x01
    38a8:	9a 81       	ldd	r25, Y+2	; 0x02
    38aa:	84 36       	cpi	r24, 0x64	; 100
    38ac:	91 05       	cpc	r25, r1
    38ae:	14 f3       	brlt	.-60     	; 0x3874 <H_LCD_void_sendString+0x16>
			stCounter = 0;
			_delay_ms(2000);
			H_LCD_void_Clear();
		}*/
	}
}
    38b0:	0f 90       	pop	r0
    38b2:	0f 90       	pop	r0
    38b4:	0f 90       	pop	r0
    38b6:	0f 90       	pop	r0
    38b8:	cf 91       	pop	r28
    38ba:	df 91       	pop	r29
    38bc:	08 95       	ret

000038be <H_LCD_void_sendIntNum>:

void H_LCD_void_sendIntNum(s32 copy_s32Num) {
    38be:	0f 93       	push	r16
    38c0:	1f 93       	push	r17
    38c2:	df 93       	push	r29
    38c4:	cf 93       	push	r28
    38c6:	cd b7       	in	r28, 0x3d	; 61
    38c8:	de b7       	in	r29, 0x3e	; 62
    38ca:	62 97       	sbiw	r28, 0x12	; 18
    38cc:	0f b6       	in	r0, 0x3f	; 63
    38ce:	f8 94       	cli
    38d0:	de bf       	out	0x3e, r29	; 62
    38d2:	0f be       	out	0x3f, r0	; 63
    38d4:	cd bf       	out	0x3d, r28	; 61
    38d6:	6f 87       	std	Y+15, r22	; 0x0f
    38d8:	78 8b       	std	Y+16, r23	; 0x10
    38da:	89 8b       	std	Y+17, r24	; 0x11
    38dc:	9a 8b       	std	Y+18, r25	; 0x12
	char buff[10];
	int n = 0;
    38de:	1c 82       	std	Y+4, r1	; 0x04
    38e0:	1b 82       	std	Y+3, r1	; 0x03
    38e2:	2f c0       	rjmp	.+94     	; 0x3942 <H_LCD_void_sendIntNum+0x84>
	while (copy_s32Num) {
		buff[n] = (copy_s32Num % 10) + '0';
    38e4:	0b 81       	ldd	r16, Y+3	; 0x03
    38e6:	1c 81       	ldd	r17, Y+4	; 0x04
    38e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    38ea:	98 89       	ldd	r25, Y+16	; 0x10
    38ec:	a9 89       	ldd	r26, Y+17	; 0x11
    38ee:	ba 89       	ldd	r27, Y+18	; 0x12
    38f0:	2a e0       	ldi	r18, 0x0A	; 10
    38f2:	30 e0       	ldi	r19, 0x00	; 0
    38f4:	40 e0       	ldi	r20, 0x00	; 0
    38f6:	50 e0       	ldi	r21, 0x00	; 0
    38f8:	bc 01       	movw	r22, r24
    38fa:	cd 01       	movw	r24, r26
    38fc:	0e 94 cb 24 	call	0x4996	; 0x4996 <__divmodsi4>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	28 2f       	mov	r18, r24
    3906:	20 5d       	subi	r18, 0xD0	; 208
    3908:	ce 01       	movw	r24, r28
    390a:	05 96       	adiw	r24, 0x05	; 5
    390c:	fc 01       	movw	r30, r24
    390e:	e0 0f       	add	r30, r16
    3910:	f1 1f       	adc	r31, r17
    3912:	20 83       	st	Z, r18
		copy_s32Num /= 10;
    3914:	8f 85       	ldd	r24, Y+15	; 0x0f
    3916:	98 89       	ldd	r25, Y+16	; 0x10
    3918:	a9 89       	ldd	r26, Y+17	; 0x11
    391a:	ba 89       	ldd	r27, Y+18	; 0x12
    391c:	2a e0       	ldi	r18, 0x0A	; 10
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	40 e0       	ldi	r20, 0x00	; 0
    3922:	50 e0       	ldi	r21, 0x00	; 0
    3924:	bc 01       	movw	r22, r24
    3926:	cd 01       	movw	r24, r26
    3928:	0e 94 cb 24 	call	0x4996	; 0x4996 <__divmodsi4>
    392c:	da 01       	movw	r26, r20
    392e:	c9 01       	movw	r24, r18
    3930:	8f 87       	std	Y+15, r24	; 0x0f
    3932:	98 8b       	std	Y+16, r25	; 0x10
    3934:	a9 8b       	std	Y+17, r26	; 0x11
    3936:	ba 8b       	std	Y+18, r27	; 0x12
		n++;
    3938:	8b 81       	ldd	r24, Y+3	; 0x03
    393a:	9c 81       	ldd	r25, Y+4	; 0x04
    393c:	01 96       	adiw	r24, 0x01	; 1
    393e:	9c 83       	std	Y+4, r25	; 0x04
    3940:	8b 83       	std	Y+3, r24	; 0x03
}

void H_LCD_void_sendIntNum(s32 copy_s32Num) {
	char buff[10];
	int n = 0;
	while (copy_s32Num) {
    3942:	8f 85       	ldd	r24, Y+15	; 0x0f
    3944:	98 89       	ldd	r25, Y+16	; 0x10
    3946:	a9 89       	ldd	r26, Y+17	; 0x11
    3948:	ba 89       	ldd	r27, Y+18	; 0x12
    394a:	00 97       	sbiw	r24, 0x00	; 0
    394c:	a1 05       	cpc	r26, r1
    394e:	b1 05       	cpc	r27, r1
    3950:	49 f6       	brne	.-110    	; 0x38e4 <H_LCD_void_sendIntNum+0x26>
		buff[n] = (copy_s32Num % 10) + '0';
		copy_s32Num /= 10;
		n++;
	}
	buff[n] = '\0';
    3952:	2b 81       	ldd	r18, Y+3	; 0x03
    3954:	3c 81       	ldd	r19, Y+4	; 0x04
    3956:	ce 01       	movw	r24, r28
    3958:	05 96       	adiw	r24, 0x05	; 5
    395a:	fc 01       	movw	r30, r24
    395c:	e2 0f       	add	r30, r18
    395e:	f3 1f       	adc	r31, r19
    3960:	10 82       	st	Z, r1

	for (int i = n - 1; i >= 0; i--) {
    3962:	8b 81       	ldd	r24, Y+3	; 0x03
    3964:	9c 81       	ldd	r25, Y+4	; 0x04
    3966:	01 97       	sbiw	r24, 0x01	; 1
    3968:	9a 83       	std	Y+2, r25	; 0x02
    396a:	89 83       	std	Y+1, r24	; 0x01
    396c:	0f c0       	rjmp	.+30     	; 0x398c <H_LCD_void_sendIntNum+0xce>
		H_LCD_void_SendData(buff[i]);
    396e:	29 81       	ldd	r18, Y+1	; 0x01
    3970:	3a 81       	ldd	r19, Y+2	; 0x02
    3972:	ce 01       	movw	r24, r28
    3974:	05 96       	adiw	r24, 0x05	; 5
    3976:	fc 01       	movw	r30, r24
    3978:	e2 0f       	add	r30, r18
    397a:	f3 1f       	adc	r31, r19
    397c:	80 81       	ld	r24, Z
    397e:	0e 94 1e 1c 	call	0x383c	; 0x383c <H_LCD_void_SendData>
		copy_s32Num /= 10;
		n++;
	}
	buff[n] = '\0';

	for (int i = n - 1; i >= 0; i--) {
    3982:	89 81       	ldd	r24, Y+1	; 0x01
    3984:	9a 81       	ldd	r25, Y+2	; 0x02
    3986:	01 97       	sbiw	r24, 0x01	; 1
    3988:	9a 83       	std	Y+2, r25	; 0x02
    398a:	89 83       	std	Y+1, r24	; 0x01
    398c:	89 81       	ldd	r24, Y+1	; 0x01
    398e:	9a 81       	ldd	r25, Y+2	; 0x02
    3990:	99 23       	and	r25, r25
    3992:	6c f7       	brge	.-38     	; 0x396e <H_LCD_void_sendIntNum+0xb0>
		H_LCD_void_SendData(buff[i]);
	}
}
    3994:	62 96       	adiw	r28, 0x12	; 18
    3996:	0f b6       	in	r0, 0x3f	; 63
    3998:	f8 94       	cli
    399a:	de bf       	out	0x3e, r29	; 62
    399c:	0f be       	out	0x3f, r0	; 63
    399e:	cd bf       	out	0x3d, r28	; 61
    39a0:	cf 91       	pop	r28
    39a2:	df 91       	pop	r29
    39a4:	1f 91       	pop	r17
    39a6:	0f 91       	pop	r16
    39a8:	08 95       	ret

000039aa <H_LCD_void_Int>:

void H_LCD_void_Int(void) {
    39aa:	0f 93       	push	r16
    39ac:	1f 93       	push	r17
    39ae:	df 93       	push	r29
    39b0:	cf 93       	push	r28
    39b2:	cd b7       	in	r28, 0x3d	; 61
    39b4:	de b7       	in	r29, 0x3e	; 62
    39b6:	c7 54       	subi	r28, 0x47	; 71
    39b8:	d0 40       	sbci	r29, 0x00	; 0
    39ba:	0f b6       	in	r0, 0x3f	; 63
    39bc:	f8 94       	cli
    39be:	de bf       	out	0x3e, r29	; 62
    39c0:	0f be       	out	0x3f, r0	; 63
    39c2:	cd bf       	out	0x3d, r28	; 61
    39c4:	fe 01       	movw	r30, r28
    39c6:	ed 5b       	subi	r30, 0xBD	; 189
    39c8:	ff 4f       	sbci	r31, 0xFF	; 255
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	a8 e4       	ldi	r26, 0x48	; 72
    39d0:	b2 e4       	ldi	r27, 0x42	; 66
    39d2:	80 83       	st	Z, r24
    39d4:	91 83       	std	Z+1, r25	; 0x01
    39d6:	a2 83       	std	Z+2, r26	; 0x02
    39d8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39da:	8e 01       	movw	r16, r28
    39dc:	01 5c       	subi	r16, 0xC1	; 193
    39de:	1f 4f       	sbci	r17, 0xFF	; 255
    39e0:	fe 01       	movw	r30, r28
    39e2:	ed 5b       	subi	r30, 0xBD	; 189
    39e4:	ff 4f       	sbci	r31, 0xFF	; 255
    39e6:	60 81       	ld	r22, Z
    39e8:	71 81       	ldd	r23, Z+1	; 0x01
    39ea:	82 81       	ldd	r24, Z+2	; 0x02
    39ec:	93 81       	ldd	r25, Z+3	; 0x03
    39ee:	20 e0       	ldi	r18, 0x00	; 0
    39f0:	30 e0       	ldi	r19, 0x00	; 0
    39f2:	4a e7       	ldi	r20, 0x7A	; 122
    39f4:	55 e4       	ldi	r21, 0x45	; 69
    39f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39fa:	dc 01       	movw	r26, r24
    39fc:	cb 01       	movw	r24, r22
    39fe:	f8 01       	movw	r30, r16
    3a00:	80 83       	st	Z, r24
    3a02:	91 83       	std	Z+1, r25	; 0x01
    3a04:	a2 83       	std	Z+2, r26	; 0x02
    3a06:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3a08:	fe 01       	movw	r30, r28
    3a0a:	ff 96       	adiw	r30, 0x3f	; 63
    3a0c:	60 81       	ld	r22, Z
    3a0e:	71 81       	ldd	r23, Z+1	; 0x01
    3a10:	82 81       	ldd	r24, Z+2	; 0x02
    3a12:	93 81       	ldd	r25, Z+3	; 0x03
    3a14:	20 e0       	ldi	r18, 0x00	; 0
    3a16:	30 e0       	ldi	r19, 0x00	; 0
    3a18:	40 e8       	ldi	r20, 0x80	; 128
    3a1a:	5f e3       	ldi	r21, 0x3F	; 63
    3a1c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3a20:	88 23       	and	r24, r24
    3a22:	2c f4       	brge	.+10     	; 0x3a2e <H_LCD_void_Int+0x84>
		__ticks = 1;
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	9e af       	std	Y+62, r25	; 0x3e
    3a2a:	8d af       	std	Y+61, r24	; 0x3d
    3a2c:	46 c0       	rjmp	.+140    	; 0x3aba <H_LCD_void_Int+0x110>
	else if (__tmp > 65535)
    3a2e:	fe 01       	movw	r30, r28
    3a30:	ff 96       	adiw	r30, 0x3f	; 63
    3a32:	60 81       	ld	r22, Z
    3a34:	71 81       	ldd	r23, Z+1	; 0x01
    3a36:	82 81       	ldd	r24, Z+2	; 0x02
    3a38:	93 81       	ldd	r25, Z+3	; 0x03
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	3f ef       	ldi	r19, 0xFF	; 255
    3a3e:	4f e7       	ldi	r20, 0x7F	; 127
    3a40:	57 e4       	ldi	r21, 0x47	; 71
    3a42:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3a46:	18 16       	cp	r1, r24
    3a48:	64 f5       	brge	.+88     	; 0x3aa2 <H_LCD_void_Int+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a4a:	fe 01       	movw	r30, r28
    3a4c:	ed 5b       	subi	r30, 0xBD	; 189
    3a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    3a50:	60 81       	ld	r22, Z
    3a52:	71 81       	ldd	r23, Z+1	; 0x01
    3a54:	82 81       	ldd	r24, Z+2	; 0x02
    3a56:	93 81       	ldd	r25, Z+3	; 0x03
    3a58:	20 e0       	ldi	r18, 0x00	; 0
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	40 e2       	ldi	r20, 0x20	; 32
    3a5e:	51 e4       	ldi	r21, 0x41	; 65
    3a60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a64:	dc 01       	movw	r26, r24
    3a66:	cb 01       	movw	r24, r22
    3a68:	bc 01       	movw	r22, r24
    3a6a:	cd 01       	movw	r24, r26
    3a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a70:	dc 01       	movw	r26, r24
    3a72:	cb 01       	movw	r24, r22
    3a74:	9e af       	std	Y+62, r25	; 0x3e
    3a76:	8d af       	std	Y+61, r24	; 0x3d
    3a78:	0f c0       	rjmp	.+30     	; 0x3a98 <H_LCD_void_Int+0xee>
    3a7a:	80 e9       	ldi	r24, 0x90	; 144
    3a7c:	91 e0       	ldi	r25, 0x01	; 1
    3a7e:	9c af       	std	Y+60, r25	; 0x3c
    3a80:	8b af       	std	Y+59, r24	; 0x3b
    3a82:	8b ad       	ldd	r24, Y+59	; 0x3b
    3a84:	9c ad       	ldd	r25, Y+60	; 0x3c
    3a86:	01 97       	sbiw	r24, 0x01	; 1
    3a88:	f1 f7       	brne	.-4      	; 0x3a86 <H_LCD_void_Int+0xdc>
    3a8a:	9c af       	std	Y+60, r25	; 0x3c
    3a8c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a8e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a90:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a92:	01 97       	sbiw	r24, 0x01	; 1
    3a94:	9e af       	std	Y+62, r25	; 0x3e
    3a96:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a98:	8d ad       	ldd	r24, Y+61	; 0x3d
    3a9a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3a9c:	00 97       	sbiw	r24, 0x00	; 0
    3a9e:	69 f7       	brne	.-38     	; 0x3a7a <H_LCD_void_Int+0xd0>
    3aa0:	16 c0       	rjmp	.+44     	; 0x3ace <H_LCD_void_Int+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aa2:	fe 01       	movw	r30, r28
    3aa4:	ff 96       	adiw	r30, 0x3f	; 63
    3aa6:	60 81       	ld	r22, Z
    3aa8:	71 81       	ldd	r23, Z+1	; 0x01
    3aaa:	82 81       	ldd	r24, Z+2	; 0x02
    3aac:	93 81       	ldd	r25, Z+3	; 0x03
    3aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	9e af       	std	Y+62, r25	; 0x3e
    3ab8:	8d af       	std	Y+61, r24	; 0x3d
    3aba:	8d ad       	ldd	r24, Y+61	; 0x3d
    3abc:	9e ad       	ldd	r25, Y+62	; 0x3e
    3abe:	9a af       	std	Y+58, r25	; 0x3a
    3ac0:	89 af       	std	Y+57, r24	; 0x39
    3ac2:	89 ad       	ldd	r24, Y+57	; 0x39
    3ac4:	9a ad       	ldd	r25, Y+58	; 0x3a
    3ac6:	01 97       	sbiw	r24, 0x01	; 1
    3ac8:	f1 f7       	brne	.-4      	; 0x3ac6 <H_LCD_void_Int+0x11c>
    3aca:	9a af       	std	Y+58, r25	; 0x3a
    3acc:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50); //delay for 50 ms
#if(H_LCD_MOED == BIT4_MODE)

	M_DIO_voidSetPinValue(H_LCD_EN_PIN, DIO_LOW); // set EN to LOW
    3ace:	8c e0       	ldi	r24, 0x0C	; 12
    3ad0:	60 e0       	ldi	r22, 0x00	; 0
    3ad2:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(H_LCD_RS_PIN, DIO_LOW); // set RS to LOW for command mode
    3ad6:	8d e0       	ldi	r24, 0x0D	; 13
    3ad8:	60 e0       	ldi	r22, 0x00	; 0
    3ada:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <M_DIO_voidSetPinValue>

	//sending 0010 to set 4bit mode
	H_LCD_void_LachNibble(0b00100000);
    3ade:	80 e2       	ldi	r24, 0x20	; 32
    3ae0:	0e 94 ce 19 	call	0x339c	; 0x339c <H_LCD_void_LachNibble>

	//sending 0010 to set 4bit mode
	H_LCD_void_LachNibble(0b00100000);
    3ae4:	80 e2       	ldi	r24, 0x20	; 32
    3ae6:	0e 94 ce 19 	call	0x339c	; 0x339c <H_LCD_void_LachNibble>

	//sending 0010 to set 4bit mode
	H_LCD_void_LachNibble(0b00110000); // nf
    3aea:	80 e3       	ldi	r24, 0x30	; 48
    3aec:	0e 94 ce 19 	call	0x339c	; 0x339c <H_LCD_void_LachNibble>
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	a0 e8       	ldi	r26, 0x80	; 128
    3af6:	bf e3       	ldi	r27, 0x3F	; 63
    3af8:	8d ab       	std	Y+53, r24	; 0x35
    3afa:	9e ab       	std	Y+54, r25	; 0x36
    3afc:	af ab       	std	Y+55, r26	; 0x37
    3afe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b00:	6d a9       	ldd	r22, Y+53	; 0x35
    3b02:	7e a9       	ldd	r23, Y+54	; 0x36
    3b04:	8f a9       	ldd	r24, Y+55	; 0x37
    3b06:	98 ad       	ldd	r25, Y+56	; 0x38
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	4a e7       	ldi	r20, 0x7A	; 122
    3b0e:	55 e4       	ldi	r21, 0x45	; 69
    3b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b14:	dc 01       	movw	r26, r24
    3b16:	cb 01       	movw	r24, r22
    3b18:	89 ab       	std	Y+49, r24	; 0x31
    3b1a:	9a ab       	std	Y+50, r25	; 0x32
    3b1c:	ab ab       	std	Y+51, r26	; 0x33
    3b1e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3b20:	69 a9       	ldd	r22, Y+49	; 0x31
    3b22:	7a a9       	ldd	r23, Y+50	; 0x32
    3b24:	8b a9       	ldd	r24, Y+51	; 0x33
    3b26:	9c a9       	ldd	r25, Y+52	; 0x34
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	40 e8       	ldi	r20, 0x80	; 128
    3b2e:	5f e3       	ldi	r21, 0x3F	; 63
    3b30:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3b34:	88 23       	and	r24, r24
    3b36:	2c f4       	brge	.+10     	; 0x3b42 <H_LCD_void_Int+0x198>
		__ticks = 1;
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	98 ab       	std	Y+48, r25	; 0x30
    3b3e:	8f a7       	std	Y+47, r24	; 0x2f
    3b40:	3f c0       	rjmp	.+126    	; 0x3bc0 <H_LCD_void_Int+0x216>
	else if (__tmp > 65535)
    3b42:	69 a9       	ldd	r22, Y+49	; 0x31
    3b44:	7a a9       	ldd	r23, Y+50	; 0x32
    3b46:	8b a9       	ldd	r24, Y+51	; 0x33
    3b48:	9c a9       	ldd	r25, Y+52	; 0x34
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	3f ef       	ldi	r19, 0xFF	; 255
    3b4e:	4f e7       	ldi	r20, 0x7F	; 127
    3b50:	57 e4       	ldi	r21, 0x47	; 71
    3b52:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3b56:	18 16       	cp	r1, r24
    3b58:	4c f5       	brge	.+82     	; 0x3bac <H_LCD_void_Int+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b5a:	6d a9       	ldd	r22, Y+53	; 0x35
    3b5c:	7e a9       	ldd	r23, Y+54	; 0x36
    3b5e:	8f a9       	ldd	r24, Y+55	; 0x37
    3b60:	98 ad       	ldd	r25, Y+56	; 0x38
    3b62:	20 e0       	ldi	r18, 0x00	; 0
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	40 e2       	ldi	r20, 0x20	; 32
    3b68:	51 e4       	ldi	r21, 0x41	; 65
    3b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6e:	dc 01       	movw	r26, r24
    3b70:	cb 01       	movw	r24, r22
    3b72:	bc 01       	movw	r22, r24
    3b74:	cd 01       	movw	r24, r26
    3b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	98 ab       	std	Y+48, r25	; 0x30
    3b80:	8f a7       	std	Y+47, r24	; 0x2f
    3b82:	0f c0       	rjmp	.+30     	; 0x3ba2 <H_LCD_void_Int+0x1f8>
    3b84:	80 e9       	ldi	r24, 0x90	; 144
    3b86:	91 e0       	ldi	r25, 0x01	; 1
    3b88:	9e a7       	std	Y+46, r25	; 0x2e
    3b8a:	8d a7       	std	Y+45, r24	; 0x2d
    3b8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b90:	01 97       	sbiw	r24, 0x01	; 1
    3b92:	f1 f7       	brne	.-4      	; 0x3b90 <H_LCD_void_Int+0x1e6>
    3b94:	9e a7       	std	Y+46, r25	; 0x2e
    3b96:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b98:	8f a5       	ldd	r24, Y+47	; 0x2f
    3b9a:	98 a9       	ldd	r25, Y+48	; 0x30
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	98 ab       	std	Y+48, r25	; 0x30
    3ba0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ba2:	8f a5       	ldd	r24, Y+47	; 0x2f
    3ba4:	98 a9       	ldd	r25, Y+48	; 0x30
    3ba6:	00 97       	sbiw	r24, 0x00	; 0
    3ba8:	69 f7       	brne	.-38     	; 0x3b84 <H_LCD_void_Int+0x1da>
    3baa:	14 c0       	rjmp	.+40     	; 0x3bd4 <H_LCD_void_Int+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bac:	69 a9       	ldd	r22, Y+49	; 0x31
    3bae:	7a a9       	ldd	r23, Y+50	; 0x32
    3bb0:	8b a9       	ldd	r24, Y+51	; 0x33
    3bb2:	9c a9       	ldd	r25, Y+52	; 0x34
    3bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	98 ab       	std	Y+48, r25	; 0x30
    3bbe:	8f a7       	std	Y+47, r24	; 0x2f
    3bc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    3bc2:	98 a9       	ldd	r25, Y+48	; 0x30
    3bc4:	9c a7       	std	Y+44, r25	; 0x2c
    3bc6:	8b a7       	std	Y+43, r24	; 0x2b
    3bc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    3bca:	9c a5       	ldd	r25, Y+44	; 0x2c
    3bcc:	01 97       	sbiw	r24, 0x01	; 1
    3bce:	f1 f7       	brne	.-4      	; 0x3bcc <H_LCD_void_Int+0x222>
    3bd0:	9c a7       	std	Y+44, r25	; 0x2c
    3bd2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	//H_LCD_void_SendCommand(
	//LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);

	u8 lcd_displayparams = 0; //= LCD_CURSOROFF | LCD_BLINKOFF;
    3bd4:	fe 01       	movw	r30, r28
    3bd6:	e9 5b       	subi	r30, 0xB9	; 185
    3bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    3bda:	10 82       	st	Z, r1
	//H_LCD_void_SendCommand(LCD_DISPLAYCONTROL | lcd_displayparams);

	lcd_displayparams |= LCD_DISPLAYON;
    3bdc:	de 01       	movw	r26, r28
    3bde:	a9 5b       	subi	r26, 0xB9	; 185
    3be0:	bf 4f       	sbci	r27, 0xFF	; 255
    3be2:	fe 01       	movw	r30, r28
    3be4:	e9 5b       	subi	r30, 0xB9	; 185
    3be6:	ff 4f       	sbci	r31, 0xFF	; 255
    3be8:	80 81       	ld	r24, Z
    3bea:	84 60       	ori	r24, 0x04	; 4
    3bec:	8c 93       	st	X, r24
	H_LCD_void_SendCommand(LCD_DISPLAYCONTROL | lcd_displayparams);
    3bee:	fe 01       	movw	r30, r28
    3bf0:	e9 5b       	subi	r30, 0xB9	; 185
    3bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf4:	80 81       	ld	r24, Z
    3bf6:	88 60       	ori	r24, 0x08	; 8
    3bf8:	0e 94 03 1c 	call	0x3806	; 0x3806 <H_LCD_void_SendCommand>
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	a0 e8       	ldi	r26, 0x80	; 128
    3c02:	bf e3       	ldi	r27, 0x3F	; 63
    3c04:	8f a3       	std	Y+39, r24	; 0x27
    3c06:	98 a7       	std	Y+40, r25	; 0x28
    3c08:	a9 a7       	std	Y+41, r26	; 0x29
    3c0a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c0c:	6f a1       	ldd	r22, Y+39	; 0x27
    3c0e:	78 a5       	ldd	r23, Y+40	; 0x28
    3c10:	89 a5       	ldd	r24, Y+41	; 0x29
    3c12:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c14:	20 e0       	ldi	r18, 0x00	; 0
    3c16:	30 e0       	ldi	r19, 0x00	; 0
    3c18:	4a e7       	ldi	r20, 0x7A	; 122
    3c1a:	55 e4       	ldi	r21, 0x45	; 69
    3c1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c20:	dc 01       	movw	r26, r24
    3c22:	cb 01       	movw	r24, r22
    3c24:	8b a3       	std	Y+35, r24	; 0x23
    3c26:	9c a3       	std	Y+36, r25	; 0x24
    3c28:	ad a3       	std	Y+37, r26	; 0x25
    3c2a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3c2c:	6b a1       	ldd	r22, Y+35	; 0x23
    3c2e:	7c a1       	ldd	r23, Y+36	; 0x24
    3c30:	8d a1       	ldd	r24, Y+37	; 0x25
    3c32:	9e a1       	ldd	r25, Y+38	; 0x26
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	40 e8       	ldi	r20, 0x80	; 128
    3c3a:	5f e3       	ldi	r21, 0x3F	; 63
    3c3c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3c40:	88 23       	and	r24, r24
    3c42:	2c f4       	brge	.+10     	; 0x3c4e <H_LCD_void_Int+0x2a4>
		__ticks = 1;
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	9a a3       	std	Y+34, r25	; 0x22
    3c4a:	89 a3       	std	Y+33, r24	; 0x21
    3c4c:	3f c0       	rjmp	.+126    	; 0x3ccc <H_LCD_void_Int+0x322>
	else if (__tmp > 65535)
    3c4e:	6b a1       	ldd	r22, Y+35	; 0x23
    3c50:	7c a1       	ldd	r23, Y+36	; 0x24
    3c52:	8d a1       	ldd	r24, Y+37	; 0x25
    3c54:	9e a1       	ldd	r25, Y+38	; 0x26
    3c56:	20 e0       	ldi	r18, 0x00	; 0
    3c58:	3f ef       	ldi	r19, 0xFF	; 255
    3c5a:	4f e7       	ldi	r20, 0x7F	; 127
    3c5c:	57 e4       	ldi	r21, 0x47	; 71
    3c5e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3c62:	18 16       	cp	r1, r24
    3c64:	4c f5       	brge	.+82     	; 0x3cb8 <H_LCD_void_Int+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c66:	6f a1       	ldd	r22, Y+39	; 0x27
    3c68:	78 a5       	ldd	r23, Y+40	; 0x28
    3c6a:	89 a5       	ldd	r24, Y+41	; 0x29
    3c6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3c6e:	20 e0       	ldi	r18, 0x00	; 0
    3c70:	30 e0       	ldi	r19, 0x00	; 0
    3c72:	40 e2       	ldi	r20, 0x20	; 32
    3c74:	51 e4       	ldi	r21, 0x41	; 65
    3c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c7a:	dc 01       	movw	r26, r24
    3c7c:	cb 01       	movw	r24, r22
    3c7e:	bc 01       	movw	r22, r24
    3c80:	cd 01       	movw	r24, r26
    3c82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c86:	dc 01       	movw	r26, r24
    3c88:	cb 01       	movw	r24, r22
    3c8a:	9a a3       	std	Y+34, r25	; 0x22
    3c8c:	89 a3       	std	Y+33, r24	; 0x21
    3c8e:	0f c0       	rjmp	.+30     	; 0x3cae <H_LCD_void_Int+0x304>
    3c90:	80 e9       	ldi	r24, 0x90	; 144
    3c92:	91 e0       	ldi	r25, 0x01	; 1
    3c94:	98 a3       	std	Y+32, r25	; 0x20
    3c96:	8f 8f       	std	Y+31, r24	; 0x1f
    3c98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3c9a:	98 a1       	ldd	r25, Y+32	; 0x20
    3c9c:	01 97       	sbiw	r24, 0x01	; 1
    3c9e:	f1 f7       	brne	.-4      	; 0x3c9c <H_LCD_void_Int+0x2f2>
    3ca0:	98 a3       	std	Y+32, r25	; 0x20
    3ca2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ca4:	89 a1       	ldd	r24, Y+33	; 0x21
    3ca6:	9a a1       	ldd	r25, Y+34	; 0x22
    3ca8:	01 97       	sbiw	r24, 0x01	; 1
    3caa:	9a a3       	std	Y+34, r25	; 0x22
    3cac:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cae:	89 a1       	ldd	r24, Y+33	; 0x21
    3cb0:	9a a1       	ldd	r25, Y+34	; 0x22
    3cb2:	00 97       	sbiw	r24, 0x00	; 0
    3cb4:	69 f7       	brne	.-38     	; 0x3c90 <H_LCD_void_Int+0x2e6>
    3cb6:	14 c0       	rjmp	.+40     	; 0x3ce0 <H_LCD_void_Int+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3cb8:	6b a1       	ldd	r22, Y+35	; 0x23
    3cba:	7c a1       	ldd	r23, Y+36	; 0x24
    3cbc:	8d a1       	ldd	r24, Y+37	; 0x25
    3cbe:	9e a1       	ldd	r25, Y+38	; 0x26
    3cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cc4:	dc 01       	movw	r26, r24
    3cc6:	cb 01       	movw	r24, r22
    3cc8:	9a a3       	std	Y+34, r25	; 0x22
    3cca:	89 a3       	std	Y+33, r24	; 0x21
    3ccc:	89 a1       	ldd	r24, Y+33	; 0x21
    3cce:	9a a1       	ldd	r25, Y+34	; 0x22
    3cd0:	9e 8f       	std	Y+30, r25	; 0x1e
    3cd2:	8d 8f       	std	Y+29, r24	; 0x1d
    3cd4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3cd6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3cd8:	01 97       	sbiw	r24, 0x01	; 1
    3cda:	f1 f7       	brne	.-4      	; 0x3cd8 <H_LCD_void_Int+0x32e>
    3cdc:	9e 8f       	std	Y+30, r25	; 0x1e
    3cde:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);

	H_LCD_void_SendCommand(LCD_CLEARDISPLAY);
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	0e 94 03 1c 	call	0x3806	; 0x3806 <H_LCD_void_SendCommand>
    3ce6:	80 e0       	ldi	r24, 0x00	; 0
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	a0 e4       	ldi	r26, 0x40	; 64
    3cec:	b0 e4       	ldi	r27, 0x40	; 64
    3cee:	89 8f       	std	Y+25, r24	; 0x19
    3cf0:	9a 8f       	std	Y+26, r25	; 0x1a
    3cf2:	ab 8f       	std	Y+27, r26	; 0x1b
    3cf4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cf6:	69 8d       	ldd	r22, Y+25	; 0x19
    3cf8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3cfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3cfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3cfe:	20 e0       	ldi	r18, 0x00	; 0
    3d00:	30 e0       	ldi	r19, 0x00	; 0
    3d02:	4a e7       	ldi	r20, 0x7A	; 122
    3d04:	55 e4       	ldi	r21, 0x45	; 69
    3d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d0a:	dc 01       	movw	r26, r24
    3d0c:	cb 01       	movw	r24, r22
    3d0e:	8d 8b       	std	Y+21, r24	; 0x15
    3d10:	9e 8b       	std	Y+22, r25	; 0x16
    3d12:	af 8b       	std	Y+23, r26	; 0x17
    3d14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3d16:	6d 89       	ldd	r22, Y+21	; 0x15
    3d18:	7e 89       	ldd	r23, Y+22	; 0x16
    3d1a:	8f 89       	ldd	r24, Y+23	; 0x17
    3d1c:	98 8d       	ldd	r25, Y+24	; 0x18
    3d1e:	20 e0       	ldi	r18, 0x00	; 0
    3d20:	30 e0       	ldi	r19, 0x00	; 0
    3d22:	40 e8       	ldi	r20, 0x80	; 128
    3d24:	5f e3       	ldi	r21, 0x3F	; 63
    3d26:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3d2a:	88 23       	and	r24, r24
    3d2c:	2c f4       	brge	.+10     	; 0x3d38 <H_LCD_void_Int+0x38e>
		__ticks = 1;
    3d2e:	81 e0       	ldi	r24, 0x01	; 1
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	9c 8b       	std	Y+20, r25	; 0x14
    3d34:	8b 8b       	std	Y+19, r24	; 0x13
    3d36:	3f c0       	rjmp	.+126    	; 0x3db6 <H_LCD_void_Int+0x40c>
	else if (__tmp > 65535)
    3d38:	6d 89       	ldd	r22, Y+21	; 0x15
    3d3a:	7e 89       	ldd	r23, Y+22	; 0x16
    3d3c:	8f 89       	ldd	r24, Y+23	; 0x17
    3d3e:	98 8d       	ldd	r25, Y+24	; 0x18
    3d40:	20 e0       	ldi	r18, 0x00	; 0
    3d42:	3f ef       	ldi	r19, 0xFF	; 255
    3d44:	4f e7       	ldi	r20, 0x7F	; 127
    3d46:	57 e4       	ldi	r21, 0x47	; 71
    3d48:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3d4c:	18 16       	cp	r1, r24
    3d4e:	4c f5       	brge	.+82     	; 0x3da2 <H_LCD_void_Int+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d50:	69 8d       	ldd	r22, Y+25	; 0x19
    3d52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3d54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3d56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3d58:	20 e0       	ldi	r18, 0x00	; 0
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	40 e2       	ldi	r20, 0x20	; 32
    3d5e:	51 e4       	ldi	r21, 0x41	; 65
    3d60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d64:	dc 01       	movw	r26, r24
    3d66:	cb 01       	movw	r24, r22
    3d68:	bc 01       	movw	r22, r24
    3d6a:	cd 01       	movw	r24, r26
    3d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	9c 8b       	std	Y+20, r25	; 0x14
    3d76:	8b 8b       	std	Y+19, r24	; 0x13
    3d78:	0f c0       	rjmp	.+30     	; 0x3d98 <H_LCD_void_Int+0x3ee>
    3d7a:	80 e9       	ldi	r24, 0x90	; 144
    3d7c:	91 e0       	ldi	r25, 0x01	; 1
    3d7e:	9a 8b       	std	Y+18, r25	; 0x12
    3d80:	89 8b       	std	Y+17, r24	; 0x11
    3d82:	89 89       	ldd	r24, Y+17	; 0x11
    3d84:	9a 89       	ldd	r25, Y+18	; 0x12
    3d86:	01 97       	sbiw	r24, 0x01	; 1
    3d88:	f1 f7       	brne	.-4      	; 0x3d86 <H_LCD_void_Int+0x3dc>
    3d8a:	9a 8b       	std	Y+18, r25	; 0x12
    3d8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d8e:	8b 89       	ldd	r24, Y+19	; 0x13
    3d90:	9c 89       	ldd	r25, Y+20	; 0x14
    3d92:	01 97       	sbiw	r24, 0x01	; 1
    3d94:	9c 8b       	std	Y+20, r25	; 0x14
    3d96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d98:	8b 89       	ldd	r24, Y+19	; 0x13
    3d9a:	9c 89       	ldd	r25, Y+20	; 0x14
    3d9c:	00 97       	sbiw	r24, 0x00	; 0
    3d9e:	69 f7       	brne	.-38     	; 0x3d7a <H_LCD_void_Int+0x3d0>
    3da0:	14 c0       	rjmp	.+40     	; 0x3dca <H_LCD_void_Int+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3da2:	6d 89       	ldd	r22, Y+21	; 0x15
    3da4:	7e 89       	ldd	r23, Y+22	; 0x16
    3da6:	8f 89       	ldd	r24, Y+23	; 0x17
    3da8:	98 8d       	ldd	r25, Y+24	; 0x18
    3daa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dae:	dc 01       	movw	r26, r24
    3db0:	cb 01       	movw	r24, r22
    3db2:	9c 8b       	std	Y+20, r25	; 0x14
    3db4:	8b 8b       	std	Y+19, r24	; 0x13
    3db6:	8b 89       	ldd	r24, Y+19	; 0x13
    3db8:	9c 89       	ldd	r25, Y+20	; 0x14
    3dba:	98 8b       	std	Y+16, r25	; 0x10
    3dbc:	8f 87       	std	Y+15, r24	; 0x0f
    3dbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dc0:	98 89       	ldd	r25, Y+16	; 0x10
    3dc2:	01 97       	sbiw	r24, 0x01	; 1
    3dc4:	f1 f7       	brne	.-4      	; 0x3dc2 <H_LCD_void_Int+0x418>
    3dc6:	98 8b       	std	Y+16, r25	; 0x10
    3dc8:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(3);

	H_LCD_void_SendCommand(LCD_ENTRYMODESET | LCD_ENTRYSHIFTINCREMENT);
    3dca:	86 e0       	ldi	r24, 0x06	; 6
    3dcc:	0e 94 03 1c 	call	0x3806	; 0x3806 <H_LCD_void_SendCommand>
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	a0 e4       	ldi	r26, 0x40	; 64
    3dd6:	b0 e4       	ldi	r27, 0x40	; 64
    3dd8:	8b 87       	std	Y+11, r24	; 0x0b
    3dda:	9c 87       	std	Y+12, r25	; 0x0c
    3ddc:	ad 87       	std	Y+13, r26	; 0x0d
    3dde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3de0:	6b 85       	ldd	r22, Y+11	; 0x0b
    3de2:	7c 85       	ldd	r23, Y+12	; 0x0c
    3de4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3de6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3de8:	20 e0       	ldi	r18, 0x00	; 0
    3dea:	30 e0       	ldi	r19, 0x00	; 0
    3dec:	4a e7       	ldi	r20, 0x7A	; 122
    3dee:	55 e4       	ldi	r21, 0x45	; 69
    3df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3df4:	dc 01       	movw	r26, r24
    3df6:	cb 01       	movw	r24, r22
    3df8:	8f 83       	std	Y+7, r24	; 0x07
    3dfa:	98 87       	std	Y+8, r25	; 0x08
    3dfc:	a9 87       	std	Y+9, r26	; 0x09
    3dfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3e00:	6f 81       	ldd	r22, Y+7	; 0x07
    3e02:	78 85       	ldd	r23, Y+8	; 0x08
    3e04:	89 85       	ldd	r24, Y+9	; 0x09
    3e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e08:	20 e0       	ldi	r18, 0x00	; 0
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	40 e8       	ldi	r20, 0x80	; 128
    3e0e:	5f e3       	ldi	r21, 0x3F	; 63
    3e10:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3e14:	88 23       	and	r24, r24
    3e16:	2c f4       	brge	.+10     	; 0x3e22 <H_LCD_void_Int+0x478>
		__ticks = 1;
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	9e 83       	std	Y+6, r25	; 0x06
    3e1e:	8d 83       	std	Y+5, r24	; 0x05
    3e20:	3f c0       	rjmp	.+126    	; 0x3ea0 <H_LCD_void_Int+0x4f6>
	else if (__tmp > 65535)
    3e22:	6f 81       	ldd	r22, Y+7	; 0x07
    3e24:	78 85       	ldd	r23, Y+8	; 0x08
    3e26:	89 85       	ldd	r24, Y+9	; 0x09
    3e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e2a:	20 e0       	ldi	r18, 0x00	; 0
    3e2c:	3f ef       	ldi	r19, 0xFF	; 255
    3e2e:	4f e7       	ldi	r20, 0x7F	; 127
    3e30:	57 e4       	ldi	r21, 0x47	; 71
    3e32:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e36:	18 16       	cp	r1, r24
    3e38:	4c f5       	brge	.+82     	; 0x3e8c <H_LCD_void_Int+0x4e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3e3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3e3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3e40:	9e 85       	ldd	r25, Y+14	; 0x0e
    3e42:	20 e0       	ldi	r18, 0x00	; 0
    3e44:	30 e0       	ldi	r19, 0x00	; 0
    3e46:	40 e2       	ldi	r20, 0x20	; 32
    3e48:	51 e4       	ldi	r21, 0x41	; 65
    3e4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e4e:	dc 01       	movw	r26, r24
    3e50:	cb 01       	movw	r24, r22
    3e52:	bc 01       	movw	r22, r24
    3e54:	cd 01       	movw	r24, r26
    3e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e5a:	dc 01       	movw	r26, r24
    3e5c:	cb 01       	movw	r24, r22
    3e5e:	9e 83       	std	Y+6, r25	; 0x06
    3e60:	8d 83       	std	Y+5, r24	; 0x05
    3e62:	0f c0       	rjmp	.+30     	; 0x3e82 <H_LCD_void_Int+0x4d8>
    3e64:	80 e9       	ldi	r24, 0x90	; 144
    3e66:	91 e0       	ldi	r25, 0x01	; 1
    3e68:	9c 83       	std	Y+4, r25	; 0x04
    3e6a:	8b 83       	std	Y+3, r24	; 0x03
    3e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    3e70:	01 97       	sbiw	r24, 0x01	; 1
    3e72:	f1 f7       	brne	.-4      	; 0x3e70 <H_LCD_void_Int+0x4c6>
    3e74:	9c 83       	std	Y+4, r25	; 0x04
    3e76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e78:	8d 81       	ldd	r24, Y+5	; 0x05
    3e7a:	9e 81       	ldd	r25, Y+6	; 0x06
    3e7c:	01 97       	sbiw	r24, 0x01	; 1
    3e7e:	9e 83       	std	Y+6, r25	; 0x06
    3e80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e82:	8d 81       	ldd	r24, Y+5	; 0x05
    3e84:	9e 81       	ldd	r25, Y+6	; 0x06
    3e86:	00 97       	sbiw	r24, 0x00	; 0
    3e88:	69 f7       	brne	.-38     	; 0x3e64 <H_LCD_void_Int+0x4ba>
    3e8a:	14 c0       	rjmp	.+40     	; 0x3eb4 <H_LCD_void_Int+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e8c:	6f 81       	ldd	r22, Y+7	; 0x07
    3e8e:	78 85       	ldd	r23, Y+8	; 0x08
    3e90:	89 85       	ldd	r24, Y+9	; 0x09
    3e92:	9a 85       	ldd	r25, Y+10	; 0x0a
    3e94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e98:	dc 01       	movw	r26, r24
    3e9a:	cb 01       	movw	r24, r22
    3e9c:	9e 83       	std	Y+6, r25	; 0x06
    3e9e:	8d 83       	std	Y+5, r24	; 0x05
    3ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea4:	9a 83       	std	Y+2, r25	; 0x02
    3ea6:	89 83       	std	Y+1, r24	; 0x01
    3ea8:	89 81       	ldd	r24, Y+1	; 0x01
    3eaa:	9a 81       	ldd	r25, Y+2	; 0x02
    3eac:	01 97       	sbiw	r24, 0x01	; 1
    3eae:	f1 f7       	brne	.-4      	; 0x3eac <H_LCD_void_Int+0x502>
    3eb0:	9a 83       	std	Y+2, r25	; 0x02
    3eb2:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(3);

#endif
}
    3eb4:	c9 5b       	subi	r28, 0xB9	; 185
    3eb6:	df 4f       	sbci	r29, 0xFF	; 255
    3eb8:	0f b6       	in	r0, 0x3f	; 63
    3eba:	f8 94       	cli
    3ebc:	de bf       	out	0x3e, r29	; 62
    3ebe:	0f be       	out	0x3f, r0	; 63
    3ec0:	cd bf       	out	0x3d, r28	; 61
    3ec2:	cf 91       	pop	r28
    3ec4:	df 91       	pop	r29
    3ec6:	1f 91       	pop	r17
    3ec8:	0f 91       	pop	r16
    3eca:	08 95       	ret

00003ecc <__vector_7>:
#include <avr/interrupt.h>
//#include "Mcu_HW.h"
#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
    3ecc:	1f 92       	push	r1
    3ece:	0f 92       	push	r0
    3ed0:	0f b6       	in	r0, 0x3f	; 63
    3ed2:	0f 92       	push	r0
    3ed4:	11 24       	eor	r1, r1
    3ed6:	8f 93       	push	r24
    3ed8:	9f 93       	push	r25
    3eda:	af 93       	push	r26
    3edc:	bf 93       	push	r27
    3ede:	df 93       	push	r29
    3ee0:	cf 93       	push	r28
    3ee2:	cd b7       	in	r28, 0x3d	; 61
    3ee4:	de b7       	in	r29, 0x3e	; 62
  timer1_millis++;
    3ee6:	80 91 55 05 	lds	r24, 0x0555
    3eea:	90 91 56 05 	lds	r25, 0x0556
    3eee:	a0 91 57 05 	lds	r26, 0x0557
    3ef2:	b0 91 58 05 	lds	r27, 0x0558
    3ef6:	01 96       	adiw	r24, 0x01	; 1
    3ef8:	a1 1d       	adc	r26, r1
    3efa:	b1 1d       	adc	r27, r1
    3efc:	80 93 55 05 	sts	0x0555, r24
    3f00:	90 93 56 05 	sts	0x0556, r25
    3f04:	a0 93 57 05 	sts	0x0557, r26
    3f08:	b0 93 58 05 	sts	0x0558, r27
}
    3f0c:	cf 91       	pop	r28
    3f0e:	df 91       	pop	r29
    3f10:	bf 91       	pop	r27
    3f12:	af 91       	pop	r26
    3f14:	9f 91       	pop	r25
    3f16:	8f 91       	pop	r24
    3f18:	0f 90       	pop	r0
    3f1a:	0f be       	out	0x3f, r0	; 63
    3f1c:	0f 90       	pop	r0
    3f1e:	1f 90       	pop	r1
    3f20:	18 95       	reti

00003f22 <init_millis>:

void init_millis(unsigned long f_cpu)
{
    3f22:	df 93       	push	r29
    3f24:	cf 93       	push	r28
    3f26:	cd b7       	in	r28, 0x3d	; 61
    3f28:	de b7       	in	r29, 0x3e	; 62
    3f2a:	28 97       	sbiw	r28, 0x08	; 8
    3f2c:	0f b6       	in	r0, 0x3f	; 63
    3f2e:	f8 94       	cli
    3f30:	de bf       	out	0x3e, r29	; 62
    3f32:	0f be       	out	0x3f, r0	; 63
    3f34:	cd bf       	out	0x3d, r28	; 61
    3f36:	6d 83       	std	Y+5, r22	; 0x05
    3f38:	7e 83       	std	Y+6, r23	; 0x06
    3f3a:	8f 83       	std	Y+7, r24	; 0x07
    3f3c:	98 87       	std	Y+8, r25	; 0x08
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
    3f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    3f40:	9e 81       	ldd	r25, Y+6	; 0x06
    3f42:	af 81       	ldd	r26, Y+7	; 0x07
    3f44:	b8 85       	ldd	r27, Y+8	; 0x08
    3f46:	20 e4       	ldi	r18, 0x40	; 64
    3f48:	3f e1       	ldi	r19, 0x1F	; 31
    3f4a:	40 e0       	ldi	r20, 0x00	; 0
    3f4c:	50 e0       	ldi	r21, 0x00	; 0
    3f4e:	bc 01       	movw	r22, r24
    3f50:	cd 01       	movw	r24, r26
    3f52:	0e 94 a9 24 	call	0x4952	; 0x4952 <__udivmodsi4>
    3f56:	da 01       	movw	r26, r20
    3f58:	c9 01       	movw	r24, r18
    3f5a:	89 83       	std	Y+1, r24	; 0x01
    3f5c:	9a 83       	std	Y+2, r25	; 0x02
    3f5e:	ab 83       	std	Y+3, r26	; 0x03
    3f60:	bc 83       	std	Y+4, r27	; 0x04

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
    3f62:	ae e4       	ldi	r26, 0x4E	; 78
    3f64:	b0 e0       	ldi	r27, 0x00	; 0
    3f66:	ee e4       	ldi	r30, 0x4E	; 78
    3f68:	f0 e0       	ldi	r31, 0x00	; 0
    3f6a:	80 81       	ld	r24, Z
    3f6c:	8a 60       	ori	r24, 0x0A	; 10
    3f6e:	8c 93       	st	X, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
    3f70:	eb e4       	ldi	r30, 0x4B	; 75
    3f72:	f0 e0       	ldi	r31, 0x00	; 0
    3f74:	89 81       	ldd	r24, Y+1	; 0x01
    3f76:	9a 81       	ldd	r25, Y+2	; 0x02
    3f78:	ab 81       	ldd	r26, Y+3	; 0x03
    3f7a:	bc 81       	ldd	r27, Y+4	; 0x04
    3f7c:	89 2f       	mov	r24, r25
    3f7e:	9a 2f       	mov	r25, r26
    3f80:	ab 2f       	mov	r26, r27
    3f82:	bb 27       	eor	r27, r27
    3f84:	80 83       	st	Z, r24
  OCR1AL = ctc_match_overflow;
    3f86:	ea e4       	ldi	r30, 0x4A	; 74
    3f88:	f0 e0       	ldi	r31, 0x00	; 0
    3f8a:	89 81       	ldd	r24, Y+1	; 0x01
    3f8c:	80 83       	st	Z, r24

  // Enable the compare match interrupt
  TIMSK |= (1 << OCIE1A);
    3f8e:	a9 e5       	ldi	r26, 0x59	; 89
    3f90:	b0 e0       	ldi	r27, 0x00	; 0
    3f92:	e9 e5       	ldi	r30, 0x59	; 89
    3f94:	f0 e0       	ldi	r31, 0x00	; 0
    3f96:	80 81       	ld	r24, Z
    3f98:	80 61       	ori	r24, 0x10	; 16
    3f9a:	8c 93       	st	X, r24

  //REMEMBER TO ENABLE GLOBAL INTERRUPTS AFTER THIS WITH sei(); !!!
}
    3f9c:	28 96       	adiw	r28, 0x08	; 8
    3f9e:	0f b6       	in	r0, 0x3f	; 63
    3fa0:	f8 94       	cli
    3fa2:	de bf       	out	0x3e, r29	; 62
    3fa4:	0f be       	out	0x3f, r0	; 63
    3fa6:	cd bf       	out	0x3d, r28	; 61
    3fa8:	cf 91       	pop	r28
    3faa:	df 91       	pop	r29
    3fac:	08 95       	ret

00003fae <millis>:

unsigned long millis (void)
{
    3fae:	df 93       	push	r29
    3fb0:	cf 93       	push	r28
    3fb2:	00 d0       	rcall	.+0      	; 0x3fb4 <millis+0x6>
    3fb4:	00 d0       	rcall	.+0      	; 0x3fb6 <millis+0x8>
    3fb6:	00 d0       	rcall	.+0      	; 0x3fb8 <millis+0xa>
    3fb8:	cd b7       	in	r28, 0x3d	; 61
    3fba:	de b7       	in	r29, 0x3e	; 62
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    3fbc:	1e 82       	std	Y+6, r1	; 0x06
    3fbe:	0e 94 06 20 	call	0x400c	; 0x400c <__iCliRetVal>
    3fc2:	89 83       	std	Y+1, r24	; 0x01
    3fc4:	0d c0       	rjmp	.+26     	; 0x3fe0 <millis+0x32>
    millis_return = timer1_millis;
    3fc6:	80 91 55 05 	lds	r24, 0x0555
    3fca:	90 91 56 05 	lds	r25, 0x0556
    3fce:	a0 91 57 05 	lds	r26, 0x0557
    3fd2:	b0 91 58 05 	lds	r27, 0x0558
    3fd6:	8a 83       	std	Y+2, r24	; 0x02
    3fd8:	9b 83       	std	Y+3, r25	; 0x03
    3fda:	ac 83       	std	Y+4, r26	; 0x04
    3fdc:	bd 83       	std	Y+5, r27	; 0x05
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    3fde:	19 82       	std	Y+1, r1	; 0x01
    3fe0:	89 81       	ldd	r24, Y+1	; 0x01
    3fe2:	88 23       	and	r24, r24
    3fe4:	81 f7       	brne	.-32     	; 0x3fc6 <millis+0x18>
    3fe6:	ce 01       	movw	r24, r28
    3fe8:	06 96       	adiw	r24, 0x06	; 6
    3fea:	0e 94 0f 20 	call	0x401e	; 0x401e <__iSeiParam>
    millis_return = timer1_millis;
  }
  return millis_return;
    3fee:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ff2:	ac 81       	ldd	r26, Y+4	; 0x04
    3ff4:	bd 81       	ldd	r27, Y+5	; 0x05
}
    3ff6:	bc 01       	movw	r22, r24
    3ff8:	cd 01       	movw	r24, r26
    3ffa:	26 96       	adiw	r28, 0x06	; 6
    3ffc:	0f b6       	in	r0, 0x3f	; 63
    3ffe:	f8 94       	cli
    4000:	de bf       	out	0x3e, r29	; 62
    4002:	0f be       	out	0x3f, r0	; 63
    4004:	cd bf       	out	0x3d, r28	; 61
    4006:	cf 91       	pop	r28
    4008:	df 91       	pop	r29
    400a:	08 95       	ret

0000400c <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    400c:	df 93       	push	r29
    400e:	cf 93       	push	r28
    4010:	cd b7       	in	r28, 0x3d	; 61
    4012:	de b7       	in	r29, 0x3e	; 62
    cli();
    4014:	f8 94       	cli
    return 1;
    4016:	81 e0       	ldi	r24, 0x01	; 1
}
    4018:	cf 91       	pop	r28
    401a:	df 91       	pop	r29
    401c:	08 95       	ret

0000401e <__iSeiParam>:

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    401e:	df 93       	push	r29
    4020:	cf 93       	push	r28
    4022:	00 d0       	rcall	.+0      	; 0x4024 <__iSeiParam+0x6>
    4024:	cd b7       	in	r28, 0x3d	; 61
    4026:	de b7       	in	r29, 0x3e	; 62
    4028:	9a 83       	std	Y+2, r25	; 0x02
    402a:	89 83       	std	Y+1, r24	; 0x01
    sei();
    402c:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}
    402e:	0f 90       	pop	r0
    4030:	0f 90       	pop	r0
    4032:	cf 91       	pop	r28
    4034:	df 91       	pop	r29
    4036:	08 95       	ret

00004038 <APP_SmartHome_void_UpdateSensorsHub>:
extern APP_SensorsHub_t SensorsHUB;



/*Sensors HUB*/
void APP_SmartHome_void_UpdateSensorsHub(){
    4038:	df 93       	push	r29
    403a:	cf 93       	push	r28
    403c:	cd b7       	in	r28, 0x3d	; 61
    403e:	de b7       	in	r29, 0x3e	; 62
	SensorsHUB.temperature = APP_SmartHome_u8_GetTemperature();
    4040:	0e 94 64 20 	call	0x40c8	; 0x40c8 <APP_SmartHome_u8_GetTemperature>
    4044:	80 93 59 05 	sts	0x0559, r24
	SensorsHUB.illumin = APP_SmartHome_u8_GetIntensityLevel();
    4048:	0e 94 3c 20 	call	0x4078	; 0x4078 <APP_SmartHome_u8_GetIntensityLevel>
    404c:	80 93 5a 05 	sts	0x055A, r24
	SensorsHUB.intensity = SensorsHUB.illumin;
    4050:	80 91 5a 05 	lds	r24, 0x055A
    4054:	80 93 5c 05 	sts	0x055C, r24
	SensorsHUB.speed = APP_SmartHome_u8_GetFanSpeed();
    4058:	0e 94 71 20 	call	0x40e2	; 0x40e2 <APP_SmartHome_u8_GetFanSpeed>
    405c:	80 93 5b 05 	sts	0x055B, r24
}
    4060:	cf 91       	pop	r28
    4062:	df 91       	pop	r29
    4064:	08 95       	ret

00004066 <APP_SmartHome_void_LightIntensity_init>:

void APP_SmartHome_void_LightIntensity_init(){
    4066:	df 93       	push	r29
    4068:	cf 93       	push	r28
    406a:	cd b7       	in	r28, 0x3d	; 61
    406c:	de b7       	in	r29, 0x3e	; 62

	H_LDR_void_Init();
    406e:	0e 94 06 18 	call	0x300c	; 0x300c <H_LDR_void_Init>

}
    4072:	cf 91       	pop	r28
    4074:	df 91       	pop	r29
    4076:	08 95       	ret

00004078 <APP_SmartHome_u8_GetIntensityLevel>:

u8 APP_SmartHome_u8_GetIntensityLevel(){
    4078:	df 93       	push	r29
    407a:	cf 93       	push	r28
    407c:	00 d0       	rcall	.+0      	; 0x407e <APP_SmartHome_u8_GetIntensityLevel+0x6>
    407e:	0f 92       	push	r0
    4080:	cd b7       	in	r28, 0x3d	; 61
    4082:	de b7       	in	r29, 0x3e	; 62
	 u8 intensityLVL = 0;
    4084:	1b 82       	std	Y+3, r1	; 0x03
	 u16 LDRreading = H_LDR_u16_Read();
    4086:	0e 94 19 18 	call	0x3032	; 0x3032 <H_LDR_u16_Read>
    408a:	9a 83       	std	Y+2, r25	; 0x02
    408c:	89 83       	std	Y+1, r24	; 0x01
     /*intensityLVL =
    	((LDRreading - LDR_MIN_READING) / (LDR_MAX_READING - LDR_MIN_READING))*
		(LED_MAX_INTENSITY - LED_MIN_INTENSITY) + LED_MIN_INTENSITY;*/

	 //DOES SOME KIND OF MAPPING to ( 0 - 100 )
	 intensityLVL = LDRreading /(u16)50;
    408e:	89 81       	ldd	r24, Y+1	; 0x01
    4090:	9a 81       	ldd	r25, Y+2	; 0x02
    4092:	22 e3       	ldi	r18, 0x32	; 50
    4094:	30 e0       	ldi	r19, 0x00	; 0
    4096:	b9 01       	movw	r22, r18
    4098:	0e 94 95 24 	call	0x492a	; 0x492a <__udivmodhi4>
    409c:	cb 01       	movw	r24, r22
    409e:	8b 83       	std	Y+3, r24	; 0x03
     return ((intensityLVL-100)*(-1));
    40a0:	94 e6       	ldi	r25, 0x64	; 100
    40a2:	8b 81       	ldd	r24, Y+3	; 0x03
    40a4:	29 2f       	mov	r18, r25
    40a6:	28 1b       	sub	r18, r24
    40a8:	82 2f       	mov	r24, r18
}
    40aa:	0f 90       	pop	r0
    40ac:	0f 90       	pop	r0
    40ae:	0f 90       	pop	r0
    40b0:	cf 91       	pop	r28
    40b2:	df 91       	pop	r29
    40b4:	08 95       	ret

000040b6 <APP_SmartHome_void_TemperatureSensor_init>:


//Temperature Sensor
void APP_SmartHome_void_TemperatureSensor_init(){
    40b6:	df 93       	push	r29
    40b8:	cf 93       	push	r28
    40ba:	cd b7       	in	r28, 0x3d	; 61
    40bc:	de b7       	in	r29, 0x3e	; 62

	H_LM35_void_Init();
    40be:	0e 94 77 15 	call	0x2aee	; 0x2aee <H_LM35_void_Init>

}
    40c2:	cf 91       	pop	r28
    40c4:	df 91       	pop	r29
    40c6:	08 95       	ret

000040c8 <APP_SmartHome_u8_GetTemperature>:


u8 APP_SmartHome_u8_GetTemperature(){
    40c8:	df 93       	push	r29
    40ca:	cf 93       	push	r28
    40cc:	0f 92       	push	r0
    40ce:	cd b7       	in	r28, 0x3d	; 61
    40d0:	de b7       	in	r29, 0x3e	; 62

	u8 result = H_LM35_u8_ReadTemprature();
    40d2:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <H_LM35_u8_ReadTemprature>
    40d6:	89 83       	std	Y+1, r24	; 0x01
	return result;
    40d8:	89 81       	ldd	r24, Y+1	; 0x01

}
    40da:	0f 90       	pop	r0
    40dc:	cf 91       	pop	r28
    40de:	df 91       	pop	r29
    40e0:	08 95       	ret

000040e2 <APP_SmartHome_u8_GetFanSpeed>:

u8 APP_SmartHome_u8_GetFanSpeed(){
    40e2:	df 93       	push	r29
    40e4:	cf 93       	push	r28
    40e6:	00 d0       	rcall	.+0      	; 0x40e8 <APP_SmartHome_u8_GetFanSpeed+0x6>
    40e8:	0f 92       	push	r0
    40ea:	cd b7       	in	r28, 0x3d	; 61
    40ec:	de b7       	in	r29, 0x3e	; 62
	u8 factor;
	u8 speed;
	u8 temperature = H_LM35_u8_ReadTemprature();
    40ee:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <H_LM35_u8_ReadTemprature>
    40f2:	89 83       	std	Y+1, r24	; 0x01
	if(temperature <= 30){
    40f4:	89 81       	ldd	r24, Y+1	; 0x01
    40f6:	8f 31       	cpi	r24, 0x1F	; 31
    40f8:	18 f4       	brcc	.+6      	; 0x4100 <APP_SmartHome_u8_GetFanSpeed+0x1e>
		factor = 2;
    40fa:	82 e0       	ldi	r24, 0x02	; 2
    40fc:	8b 83       	std	Y+3, r24	; 0x03
    40fe:	02 c0       	rjmp	.+4      	; 0x4104 <APP_SmartHome_u8_GetFanSpeed+0x22>
	}else{
		factor = 3;
    4100:	83 e0       	ldi	r24, 0x03	; 3
    4102:	8b 83       	std	Y+3, r24	; 0x03
	}
	speed = temperature * factor;
    4104:	99 81       	ldd	r25, Y+1	; 0x01
    4106:	8b 81       	ldd	r24, Y+3	; 0x03
    4108:	98 9f       	mul	r25, r24
    410a:	80 2d       	mov	r24, r0
    410c:	11 24       	eor	r1, r1
    410e:	8a 83       	std	Y+2, r24	; 0x02
	//saturating my speed to 100
	if(speed > 100){
    4110:	8a 81       	ldd	r24, Y+2	; 0x02
    4112:	85 36       	cpi	r24, 0x65	; 101
    4114:	10 f0       	brcs	.+4      	; 0x411a <APP_SmartHome_u8_GetFanSpeed+0x38>
		speed = 100;
    4116:	84 e6       	ldi	r24, 0x64	; 100
    4118:	8a 83       	std	Y+2, r24	; 0x02
	}
	return speed;
    411a:	8a 81       	ldd	r24, Y+2	; 0x02

}
    411c:	0f 90       	pop	r0
    411e:	0f 90       	pop	r0
    4120:	0f 90       	pop	r0
    4122:	cf 91       	pop	r28
    4124:	df 91       	pop	r29
    4126:	08 95       	ret

00004128 <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI>:

/* Functions that stands between TCP commands and sensors */
APP_COMMAND_ERROR_t APP_SmartHome_ERROR_t_LocalUpdateFromWIFI(APP_Command_t command){
    4128:	0f 93       	push	r16
    412a:	1f 93       	push	r17
    412c:	df 93       	push	r29
    412e:	cf 93       	push	r28
    4130:	cd b7       	in	r28, 0x3d	; 61
    4132:	de b7       	in	r29, 0x3e	; 62
    4134:	2c 97       	sbiw	r28, 0x0c	; 12
    4136:	0f b6       	in	r0, 0x3f	; 63
    4138:	f8 94       	cli
    413a:	de bf       	out	0x3e, r29	; 62
    413c:	0f be       	out	0x3f, r0	; 63
    413e:	cd bf       	out	0x3d, r28	; 61
    4140:	0a 83       	std	Y+2, r16	; 0x02
    4142:	1b 83       	std	Y+3, r17	; 0x03
    4144:	2c 83       	std	Y+4, r18	; 0x04
    4146:	3d 83       	std	Y+5, r19	; 0x05
    4148:	4e 83       	std	Y+6, r20	; 0x06
    414a:	5f 83       	std	Y+7, r21	; 0x07
    414c:	68 87       	std	Y+8, r22	; 0x08
    414e:	79 87       	std	Y+9, r23	; 0x09
    4150:	8a 87       	std	Y+10, r24	; 0x0a
    4152:	9b 87       	std	Y+11, r25	; 0x0b

	u8 device_id ;

	if(strcmp(command.device_name,APP_LED) == 0 ){
    4154:	ce 01       	movw	r24, r28
    4156:	02 96       	adiw	r24, 0x02	; 2
    4158:	24 e7       	ldi	r18, 0x74	; 116
    415a:	31 e0       	ldi	r19, 0x01	; 1
    415c:	b9 01       	movw	r22, r18
    415e:	0e 94 22 25 	call	0x4a44	; 0x4a44 <strcmp>
    4162:	00 97       	sbiw	r24, 0x00	; 0
    4164:	11 f4       	brne	.+4      	; 0x416a <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x42>

		device_id = LED_ID;
    4166:	19 82       	std	Y+1, r1	; 0x01
    4168:	0f c0       	rjmp	.+30     	; 0x4188 <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x60>
	}else if(strcmp(command.device_name, APP_FAN)){
    416a:	ce 01       	movw	r24, r28
    416c:	02 96       	adiw	r24, 0x02	; 2
    416e:	28 e7       	ldi	r18, 0x78	; 120
    4170:	31 e0       	ldi	r19, 0x01	; 1
    4172:	b9 01       	movw	r22, r18
    4174:	0e 94 22 25 	call	0x4a44	; 0x4a44 <strcmp>
    4178:	00 97       	sbiw	r24, 0x00	; 0
    417a:	19 f0       	breq	.+6      	; 0x4182 <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x5a>

				device_id = FAN_ID;
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	89 83       	std	Y+1, r24	; 0x01
    4180:	03 c0       	rjmp	.+6      	; 0x4188 <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x60>
	}else{
		return BAD_DEVICE_NAME;
    4182:	82 e0       	ldi	r24, 0x02	; 2
    4184:	8c 87       	std	Y+12, r24	; 0x0c
    4186:	91 c0       	rjmp	.+290    	; 0x42aa <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x182>
	}


	DEVICES_STATE_LIST[device_id].update_flag = 1;
    4188:	89 81       	ldd	r24, Y+1	; 0x01
    418a:	88 2f       	mov	r24, r24
    418c:	90 e0       	ldi	r25, 0x00	; 0
    418e:	9c 01       	movw	r18, r24
    4190:	22 0f       	add	r18, r18
    4192:	33 1f       	adc	r19, r19
    4194:	c9 01       	movw	r24, r18
    4196:	88 0f       	add	r24, r24
    4198:	99 1f       	adc	r25, r25
    419a:	88 0f       	add	r24, r24
    419c:	99 1f       	adc	r25, r25
    419e:	88 0f       	add	r24, r24
    41a0:	99 1f       	adc	r25, r25
    41a2:	82 1b       	sub	r24, r18
    41a4:	93 0b       	sbc	r25, r19
    41a6:	fc 01       	movw	r30, r24
    41a8:	ee 52       	subi	r30, 0x2E	; 46
    41aa:	fd 4f       	sbci	r31, 0xFD	; 253
    41ac:	81 e0       	ldi	r24, 0x01	; 1
    41ae:	80 83       	st	Z, r24

	if(strcmp(command.command_type, APP_AV_COMMAND) == 0){
    41b0:	ce 01       	movw	r24, r28
    41b2:	02 96       	adiw	r24, 0x02	; 2
    41b4:	04 96       	adiw	r24, 0x04	; 4
    41b6:	27 e8       	ldi	r18, 0x87	; 135
    41b8:	31 e0       	ldi	r19, 0x01	; 1
    41ba:	b9 01       	movw	r22, r18
    41bc:	0e 94 22 25 	call	0x4a44	; 0x4a44 <strcmp>
    41c0:	00 97       	sbiw	r24, 0x00	; 0
    41c2:	e9 f4       	brne	.+58     	; 0x41fe <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0xd6>
		strcpy(DEVICES_STATE_LIST[device_id].value, command.value);
    41c4:	89 81       	ldd	r24, Y+1	; 0x01
    41c6:	88 2f       	mov	r24, r24
    41c8:	90 e0       	ldi	r25, 0x00	; 0
    41ca:	9c 01       	movw	r18, r24
    41cc:	22 0f       	add	r18, r18
    41ce:	33 1f       	adc	r19, r19
    41d0:	c9 01       	movw	r24, r18
    41d2:	88 0f       	add	r24, r24
    41d4:	99 1f       	adc	r25, r25
    41d6:	88 0f       	add	r24, r24
    41d8:	99 1f       	adc	r25, r25
    41da:	88 0f       	add	r24, r24
    41dc:	99 1f       	adc	r25, r25
    41de:	82 1b       	sub	r24, r18
    41e0:	93 0b       	sbc	r25, r19
    41e2:	0a 96       	adiw	r24, 0x0a	; 10
    41e4:	ac 01       	movw	r20, r24
    41e6:	4b 53       	subi	r20, 0x3B	; 59
    41e8:	5d 4f       	sbci	r21, 0xFD	; 253
    41ea:	ce 01       	movw	r24, r28
    41ec:	02 96       	adiw	r24, 0x02	; 2
    41ee:	9c 01       	movw	r18, r24
    41f0:	29 5f       	subi	r18, 0xF9	; 249
    41f2:	3f 4f       	sbci	r19, 0xFF	; 255
    41f4:	ca 01       	movw	r24, r20
    41f6:	b9 01       	movw	r22, r18
    41f8:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <strcpy>
    41fc:	51 c0       	rjmp	.+162    	; 0x42a0 <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x178>
	}else if(strcmp(command.command_type, APP_DV_COMMAND) == 0){
    41fe:	ce 01       	movw	r24, r28
    4200:	02 96       	adiw	r24, 0x02	; 2
    4202:	04 96       	adiw	r24, 0x04	; 4
    4204:	2a e8       	ldi	r18, 0x8A	; 138
    4206:	31 e0       	ldi	r19, 0x01	; 1
    4208:	b9 01       	movw	r22, r18
    420a:	0e 94 22 25 	call	0x4a44	; 0x4a44 <strcmp>
    420e:	00 97       	sbiw	r24, 0x00	; 0
    4210:	e9 f4       	brne	.+58     	; 0x424c <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x124>
		strcpy(DEVICES_STATE_LIST[device_id].device_state, command.value);
    4212:	89 81       	ldd	r24, Y+1	; 0x01
    4214:	88 2f       	mov	r24, r24
    4216:	90 e0       	ldi	r25, 0x00	; 0
    4218:	9c 01       	movw	r18, r24
    421a:	22 0f       	add	r18, r18
    421c:	33 1f       	adc	r19, r19
    421e:	c9 01       	movw	r24, r18
    4220:	88 0f       	add	r24, r24
    4222:	99 1f       	adc	r25, r25
    4224:	88 0f       	add	r24, r24
    4226:	99 1f       	adc	r25, r25
    4228:	88 0f       	add	r24, r24
    422a:	99 1f       	adc	r25, r25
    422c:	82 1b       	sub	r24, r18
    422e:	93 0b       	sbc	r25, r19
    4230:	06 96       	adiw	r24, 0x06	; 6
    4232:	ac 01       	movw	r20, r24
    4234:	4b 53       	subi	r20, 0x3B	; 59
    4236:	5d 4f       	sbci	r21, 0xFD	; 253
    4238:	ce 01       	movw	r24, r28
    423a:	02 96       	adiw	r24, 0x02	; 2
    423c:	9c 01       	movw	r18, r24
    423e:	29 5f       	subi	r18, 0xF9	; 249
    4240:	3f 4f       	sbci	r19, 0xFF	; 255
    4242:	ca 01       	movw	r24, r20
    4244:	b9 01       	movw	r22, r18
    4246:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <strcpy>
    424a:	2a c0       	rjmp	.+84     	; 0x42a0 <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x178>
	}else if(strcmp(command.command_type, APP_M_COMMAND) == 0){
    424c:	ce 01       	movw	r24, r28
    424e:	02 96       	adiw	r24, 0x02	; 2
    4250:	04 96       	adiw	r24, 0x04	; 4
    4252:	2c e7       	ldi	r18, 0x7C	; 124
    4254:	31 e0       	ldi	r19, 0x01	; 1
    4256:	b9 01       	movw	r22, r18
    4258:	0e 94 22 25 	call	0x4a44	; 0x4a44 <strcmp>
    425c:	00 97       	sbiw	r24, 0x00	; 0
    425e:	e9 f4       	brne	.+58     	; 0x429a <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x172>
		strcpy(DEVICES_STATE_LIST[device_id].device_mode, command.value);
    4260:	89 81       	ldd	r24, Y+1	; 0x01
    4262:	88 2f       	mov	r24, r24
    4264:	90 e0       	ldi	r25, 0x00	; 0
    4266:	9c 01       	movw	r18, r24
    4268:	22 0f       	add	r18, r18
    426a:	33 1f       	adc	r19, r19
    426c:	c9 01       	movw	r24, r18
    426e:	88 0f       	add	r24, r24
    4270:	99 1f       	adc	r25, r25
    4272:	88 0f       	add	r24, r24
    4274:	99 1f       	adc	r25, r25
    4276:	88 0f       	add	r24, r24
    4278:	99 1f       	adc	r25, r25
    427a:	82 1b       	sub	r24, r18
    427c:	93 0b       	sbc	r25, r19
    427e:	04 96       	adiw	r24, 0x04	; 4
    4280:	ac 01       	movw	r20, r24
    4282:	4b 53       	subi	r20, 0x3B	; 59
    4284:	5d 4f       	sbci	r21, 0xFD	; 253
    4286:	ce 01       	movw	r24, r28
    4288:	02 96       	adiw	r24, 0x02	; 2
    428a:	9c 01       	movw	r18, r24
    428c:	29 5f       	subi	r18, 0xF9	; 249
    428e:	3f 4f       	sbci	r19, 0xFF	; 255
    4290:	ca 01       	movw	r24, r20
    4292:	b9 01       	movw	r22, r18
    4294:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <strcpy>
    4298:	03 c0       	rjmp	.+6      	; 0x42a0 <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x178>
	}else{
		return BAD_COMMAND_TYPE;
    429a:	88 e0       	ldi	r24, 0x08	; 8
    429c:	8c 87       	std	Y+12, r24	; 0x0c
    429e:	05 c0       	rjmp	.+10     	; 0x42aa <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x182>
	}


	DEVICES_STATE_LIST[LED_ID].update_flag = 1;
    42a0:	81 e0       	ldi	r24, 0x01	; 1
    42a2:	80 93 d2 02 	sts	0x02D2, r24


	return SUCCEEDED;
    42a6:	8a e0       	ldi	r24, 0x0A	; 10
    42a8:	8c 87       	std	Y+12, r24	; 0x0c
    42aa:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    42ac:	2c 96       	adiw	r28, 0x0c	; 12
    42ae:	0f b6       	in	r0, 0x3f	; 63
    42b0:	f8 94       	cli
    42b2:	de bf       	out	0x3e, r29	; 62
    42b4:	0f be       	out	0x3f, r0	; 63
    42b6:	cd bf       	out	0x3d, r28	; 61
    42b8:	cf 91       	pop	r28
    42ba:	df 91       	pop	r29
    42bc:	1f 91       	pop	r17
    42be:	0f 91       	pop	r16
    42c0:	08 95       	ret

000042c2 <APP_SmartHome_void_LocalUpdateFromSensorsHub>:

//BADLY-DESIGNED
void APP_SmartHome_void_LocalUpdateFromSensorsHub(){
    42c2:	df 93       	push	r29
    42c4:	cf 93       	push	r28
    42c6:	cd b7       	in	r28, 0x3d	; 61
    42c8:	de b7       	in	r29, 0x3e	; 62
    42ca:	2e 97       	sbiw	r28, 0x0e	; 14
    42cc:	0f b6       	in	r0, 0x3f	; 63
    42ce:	f8 94       	cli
    42d0:	de bf       	out	0x3e, r29	; 62
    42d2:	0f be       	out	0x3f, r0	; 63
    42d4:	cd bf       	out	0x3d, r28	; 61

	APP_Command_t hubCommand;

	for(int loopVar = 0; loopVar < DEVICES_COUNT; loopVar++){
    42d6:	1a 82       	std	Y+2, r1	; 0x02
    42d8:	19 82       	std	Y+1, r1	; 0x01
    42da:	42 c0       	rjmp	.+132    	; 0x4360 <APP_SmartHome_void_LocalUpdateFromSensorsHub+0x9e>

		if(strcmp(DEVICES_STATE_LIST[loopVar].device_mode, APP_AUTO) == 0){
    42dc:	89 81       	ldd	r24, Y+1	; 0x01
    42de:	9a 81       	ldd	r25, Y+2	; 0x02
    42e0:	9c 01       	movw	r18, r24
    42e2:	22 0f       	add	r18, r18
    42e4:	33 1f       	adc	r19, r19
    42e6:	c9 01       	movw	r24, r18
    42e8:	88 0f       	add	r24, r24
    42ea:	99 1f       	adc	r25, r25
    42ec:	88 0f       	add	r24, r24
    42ee:	99 1f       	adc	r25, r25
    42f0:	88 0f       	add	r24, r24
    42f2:	99 1f       	adc	r25, r25
    42f4:	82 1b       	sub	r24, r18
    42f6:	93 0b       	sbc	r25, r19
    42f8:	04 96       	adiw	r24, 0x04	; 4
    42fa:	8b 53       	subi	r24, 0x3B	; 59
    42fc:	9d 4f       	sbci	r25, 0xFD	; 253
    42fe:	2e e7       	ldi	r18, 0x7E	; 126
    4300:	31 e0       	ldi	r19, 0x01	; 1
    4302:	b9 01       	movw	r22, r18
    4304:	0e 94 22 25 	call	0x4a44	; 0x4a44 <strcmp>
    4308:	00 97       	sbiw	r24, 0x00	; 0
    430a:	29 f5       	brne	.+74     	; 0x4356 <APP_SmartHome_void_LocalUpdateFromSensorsHub+0x94>
			switch(loopVar){
    430c:	89 81       	ldd	r24, Y+1	; 0x01
    430e:	9a 81       	ldd	r25, Y+2	; 0x02
    4310:	9e 87       	std	Y+14, r25	; 0x0e
    4312:	8d 87       	std	Y+13, r24	; 0x0d
    4314:	8d 85       	ldd	r24, Y+13	; 0x0d
    4316:	9e 85       	ldd	r25, Y+14	; 0x0e
    4318:	00 97       	sbiw	r24, 0x00	; 0
    431a:	31 f0       	breq	.+12     	; 0x4328 <APP_SmartHome_void_LocalUpdateFromSensorsHub+0x66>
    431c:	8d 85       	ldd	r24, Y+13	; 0x0d
    431e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4320:	81 30       	cpi	r24, 0x01	; 1
    4322:	91 05       	cpc	r25, r1
    4324:	69 f0       	breq	.+26     	; 0x4340 <APP_SmartHome_void_LocalUpdateFromSensorsHub+0x7e>
    4326:	17 c0       	rjmp	.+46     	; 0x4356 <APP_SmartHome_void_LocalUpdateFromSensorsHub+0x94>
			case LED_ID:
				itoa(SensorsHUB.intensity,DEVICES_STATE_LIST[LED_ID].value,10);
    4328:	80 91 5c 05 	lds	r24, 0x055C
    432c:	88 2f       	mov	r24, r24
    432e:	90 e0       	ldi	r25, 0x00	; 0
    4330:	2f ec       	ldi	r18, 0xCF	; 207
    4332:	32 e0       	ldi	r19, 0x02	; 2
    4334:	b9 01       	movw	r22, r18
    4336:	4a e0       	ldi	r20, 0x0A	; 10
    4338:	50 e0       	ldi	r21, 0x00	; 0
    433a:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <itoa>
    433e:	0b c0       	rjmp	.+22     	; 0x4356 <APP_SmartHome_void_LocalUpdateFromSensorsHub+0x94>
				break;
			case FAN_ID:
				itoa(SensorsHUB.speed,DEVICES_STATE_LIST[FAN_ID].value,10);
    4340:	80 91 5b 05 	lds	r24, 0x055B
    4344:	88 2f       	mov	r24, r24
    4346:	90 e0       	ldi	r25, 0x00	; 0
    4348:	2d ed       	ldi	r18, 0xDD	; 221
    434a:	32 e0       	ldi	r19, 0x02	; 2
    434c:	b9 01       	movw	r22, r18
    434e:	4a e0       	ldi	r20, 0x0A	; 10
    4350:	50 e0       	ldi	r21, 0x00	; 0
    4352:	0e 94 73 25 	call	0x4ae6	; 0x4ae6 <itoa>
//BADLY-DESIGNED
void APP_SmartHome_void_LocalUpdateFromSensorsHub(){

	APP_Command_t hubCommand;

	for(int loopVar = 0; loopVar < DEVICES_COUNT; loopVar++){
    4356:	89 81       	ldd	r24, Y+1	; 0x01
    4358:	9a 81       	ldd	r25, Y+2	; 0x02
    435a:	01 96       	adiw	r24, 0x01	; 1
    435c:	9a 83       	std	Y+2, r25	; 0x02
    435e:	89 83       	std	Y+1, r24	; 0x01
    4360:	89 81       	ldd	r24, Y+1	; 0x01
    4362:	9a 81       	ldd	r25, Y+2	; 0x02
    4364:	82 30       	cpi	r24, 0x02	; 2
    4366:	91 05       	cpc	r25, r1
    4368:	0c f4       	brge	.+2      	; 0x436c <APP_SmartHome_void_LocalUpdateFromSensorsHub+0xaa>
    436a:	b8 cf       	rjmp	.-144    	; 0x42dc <APP_SmartHome_void_LocalUpdateFromSensorsHub+0x1a>
				itoa(SensorsHUB.speed,DEVICES_STATE_LIST[FAN_ID].value,10);
				break;
			}
		}
	}
}
    436c:	2e 96       	adiw	r28, 0x0e	; 14
    436e:	0f b6       	in	r0, 0x3f	; 63
    4370:	f8 94       	cli
    4372:	de bf       	out	0x3e, r29	; 62
    4374:	0f be       	out	0x3f, r0	; 63
    4376:	cd bf       	out	0x3d, r28	; 61
    4378:	cf 91       	pop	r28
    437a:	df 91       	pop	r29
    437c:	08 95       	ret

0000437e <APP_SmartHome_void_ApplianceUpdate>:

void APP_SmartHome_void_ApplianceUpdate(){
    437e:	df 93       	push	r29
    4380:	cf 93       	push	r28
    4382:	cd b7       	in	r28, 0x3d	; 61
    4384:	de b7       	in	r29, 0x3e	; 62
	if(strcmp(DEVICES_STATE_LIST[0].device_state,APP_STATE_ON) == 0){
    4386:	8b ec       	ldi	r24, 0xCB	; 203
    4388:	92 e0       	ldi	r25, 0x02	; 2
    438a:	20 e8       	ldi	r18, 0x80	; 128
    438c:	31 e0       	ldi	r19, 0x01	; 1
    438e:	b9 01       	movw	r22, r18
    4390:	0e 94 22 25 	call	0x4a44	; 0x4a44 <strcmp>
    4394:	00 97       	sbiw	r24, 0x00	; 0
    4396:	21 f4       	brne	.+8      	; 0x43a0 <APP_SmartHome_void_ApplianceUpdate+0x22>
		H_LED_voidTurnOn(LED_RED);
    4398:	80 e0       	ldi	r24, 0x00	; 0
    439a:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <H_LED_voidTurnOn>
    439e:	0c c0       	rjmp	.+24     	; 0x43b8 <APP_SmartHome_void_ApplianceUpdate+0x3a>
	}else if(strcmp(DEVICES_STATE_LIST[0].device_state,APP_STATE_OFF) == 0){
    43a0:	8b ec       	ldi	r24, 0xCB	; 203
    43a2:	92 e0       	ldi	r25, 0x02	; 2
    43a4:	23 e8       	ldi	r18, 0x83	; 131
    43a6:	31 e0       	ldi	r19, 0x01	; 1
    43a8:	b9 01       	movw	r22, r18
    43aa:	0e 94 22 25 	call	0x4a44	; 0x4a44 <strcmp>
    43ae:	00 97       	sbiw	r24, 0x00	; 0
    43b0:	19 f4       	brne	.+6      	; 0x43b8 <APP_SmartHome_void_ApplianceUpdate+0x3a>
		H_LED_voidTurnOff(LED_RED);
    43b2:	80 e0       	ldi	r24, 0x00	; 0
    43b4:	0e 94 8c 17 	call	0x2f18	; 0x2f18 <H_LED_voidTurnOff>
	}
}
    43b8:	cf 91       	pop	r28
    43ba:	df 91       	pop	r29
    43bc:	08 95       	ret

000043be <APP_SmartHome_ERROR_t_GetCommand>:

APP_COMMAND_ERROR_t APP_SmartHome_ERROR_t_GetCommand(u8* msgArray, APP_Command_t* command){
    43be:	df 93       	push	r29
    43c0:	cf 93       	push	r28
    43c2:	cd b7       	in	r28, 0x3d	; 61
    43c4:	de b7       	in	r29, 0x3e	; 62
    43c6:	2b 97       	sbiw	r28, 0x0b	; 11
    43c8:	0f b6       	in	r0, 0x3f	; 63
    43ca:	f8 94       	cli
    43cc:	de bf       	out	0x3e, r29	; 62
    43ce:	0f be       	out	0x3f, r0	; 63
    43d0:	cd bf       	out	0x3d, r28	; 61
    43d2:	99 87       	std	Y+9, r25	; 0x09
    43d4:	88 87       	std	Y+8, r24	; 0x08
    43d6:	7b 87       	std	Y+11, r23	; 0x0b
    43d8:	6a 87       	std	Y+10, r22	; 0x0a

	APP_COMMAND_ERROR_t error_status = SUCCEEDED;
    43da:	8a e0       	ldi	r24, 0x0A	; 10
    43dc:	8f 83       	std	Y+7, r24	; 0x07
	char *token;

	//search the message Header
	msgArray = strstr(msgArray,COMMAND_HEADER);
    43de:	88 85       	ldd	r24, Y+8	; 0x08
    43e0:	99 85       	ldd	r25, Y+9	; 0x09
    43e2:	2d e8       	ldi	r18, 0x8D	; 141
    43e4:	31 e0       	ldi	r19, 0x01	; 1
    43e6:	b9 01       	movw	r22, r18
    43e8:	0e 94 32 25 	call	0x4a64	; 0x4a64 <strstr>
    43ec:	99 87       	std	Y+9, r25	; 0x09
    43ee:	88 87       	std	Y+8, r24	; 0x08

	/* get the first token */
	token = strtok(msgArray, TOKEN_DELIMETER);
    43f0:	88 85       	ldd	r24, Y+8	; 0x08
    43f2:	99 85       	ldd	r25, Y+9	; 0x09
    43f4:	22 e9       	ldi	r18, 0x92	; 146
    43f6:	31 e0       	ldi	r19, 0x01	; 1
    43f8:	b9 01       	movw	r22, r18
    43fa:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <strtok>
    43fe:	9e 83       	std	Y+6, r25	; 0x06
    4400:	8d 83       	std	Y+5, r24	; 0x05

	if(token != 0){
    4402:	8d 81       	ldd	r24, Y+5	; 0x05
    4404:	9e 81       	ldd	r25, Y+6	; 0x06
    4406:	00 97       	sbiw	r24, 0x00	; 0
    4408:	09 f4       	brne	.+2      	; 0x440c <APP_SmartHome_ERROR_t_GetCommand+0x4e>
    440a:	9a c0       	rjmp	.+308    	; 0x4540 <APP_SmartHome_ERROR_t_GetCommand+0x182>

	/* walk through other tokens */
		if(strcmp(token,COMMAND_HEADER) == 0){
    440c:	8d 81       	ldd	r24, Y+5	; 0x05
    440e:	9e 81       	ldd	r25, Y+6	; 0x06
    4410:	2d e8       	ldi	r18, 0x8D	; 141
    4412:	31 e0       	ldi	r19, 0x01	; 1
    4414:	b9 01       	movw	r22, r18
    4416:	0e 94 22 25 	call	0x4a44	; 0x4a44 <strcmp>
    441a:	00 97       	sbiw	r24, 0x00	; 0
    441c:	09 f0       	breq	.+2      	; 0x4420 <APP_SmartHome_ERROR_t_GetCommand+0x62>
    441e:	8e c0       	rjmp	.+284    	; 0x453c <APP_SmartHome_ERROR_t_GetCommand+0x17e>
			//it's Correct Header
			//Get next token [Device Name]
			token = strtok(0, TOKEN_DELIMETER);
    4420:	22 e9       	ldi	r18, 0x92	; 146
    4422:	31 e0       	ldi	r19, 0x01	; 1
    4424:	80 e0       	ldi	r24, 0x00	; 0
    4426:	90 e0       	ldi	r25, 0x00	; 0
    4428:	b9 01       	movw	r22, r18
    442a:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <strtok>
    442e:	9e 83       	std	Y+6, r25	; 0x06
    4430:	8d 83       	std	Y+5, r24	; 0x05

			if(token != 0){
    4432:	8d 81       	ldd	r24, Y+5	; 0x05
    4434:	9e 81       	ldd	r25, Y+6	; 0x06
    4436:	00 97       	sbiw	r24, 0x00	; 0
    4438:	51 f1       	breq	.+84     	; 0x448e <APP_SmartHome_ERROR_t_GetCommand+0xd0>
				//check if any device name exists
				for(int loopVar = 0; loopVar < DEVICES_COUNT; loopVar++){
    443a:	1c 82       	std	Y+4, r1	; 0x04
    443c:	1b 82       	std	Y+3, r1	; 0x03
    443e:	21 c0       	rjmp	.+66     	; 0x4482 <APP_SmartHome_ERROR_t_GetCommand+0xc4>
					error_status = BAD_DEVICE_NAME;
    4440:	82 e0       	ldi	r24, 0x02	; 2
    4442:	8f 83       	std	Y+7, r24	; 0x07
					if(strcmp(token,devices_names[loopVar]) == 0){
    4444:	8b 81       	ldd	r24, Y+3	; 0x03
    4446:	9c 81       	ldd	r25, Y+4	; 0x04
    4448:	88 0f       	add	r24, r24
    444a:	99 1f       	adc	r25, r25
    444c:	fc 01       	movw	r30, r24
    444e:	ec 5f       	subi	r30, 0xFC	; 252
    4450:	fc 4f       	sbci	r31, 0xFC	; 252
    4452:	20 81       	ld	r18, Z
    4454:	31 81       	ldd	r19, Z+1	; 0x01
    4456:	8d 81       	ldd	r24, Y+5	; 0x05
    4458:	9e 81       	ldd	r25, Y+6	; 0x06
    445a:	b9 01       	movw	r22, r18
    445c:	0e 94 22 25 	call	0x4a44	; 0x4a44 <strcmp>
    4460:	00 97       	sbiw	r24, 0x00	; 0
    4462:	51 f4       	brne	.+20     	; 0x4478 <APP_SmartHome_ERROR_t_GetCommand+0xba>
						//there's correct Device Name
						strcpy(command->device_name, token);
    4464:	8a 85       	ldd	r24, Y+10	; 0x0a
    4466:	9b 85       	ldd	r25, Y+11	; 0x0b
    4468:	2d 81       	ldd	r18, Y+5	; 0x05
    446a:	3e 81       	ldd	r19, Y+6	; 0x06
    446c:	b9 01       	movw	r22, r18
    446e:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <strcpy>
						error_status = SUCCEEDED;
    4472:	8a e0       	ldi	r24, 0x0A	; 10
    4474:	8f 83       	std	Y+7, r24	; 0x07
    4476:	0d c0       	rjmp	.+26     	; 0x4492 <APP_SmartHome_ERROR_t_GetCommand+0xd4>
			//Get next token [Device Name]
			token = strtok(0, TOKEN_DELIMETER);

			if(token != 0){
				//check if any device name exists
				for(int loopVar = 0; loopVar < DEVICES_COUNT; loopVar++){
    4478:	8b 81       	ldd	r24, Y+3	; 0x03
    447a:	9c 81       	ldd	r25, Y+4	; 0x04
    447c:	01 96       	adiw	r24, 0x01	; 1
    447e:	9c 83       	std	Y+4, r25	; 0x04
    4480:	8b 83       	std	Y+3, r24	; 0x03
    4482:	8b 81       	ldd	r24, Y+3	; 0x03
    4484:	9c 81       	ldd	r25, Y+4	; 0x04
    4486:	82 30       	cpi	r24, 0x02	; 2
    4488:	91 05       	cpc	r25, r1
    448a:	d4 f2       	brlt	.-76     	; 0x4440 <APP_SmartHome_ERROR_t_GetCommand+0x82>
    448c:	02 c0       	rjmp	.+4      	; 0x4492 <APP_SmartHome_ERROR_t_GetCommand+0xd4>
						error_status = SUCCEEDED;
						break;
					}
				}
			}else{
				error_status = NON_EXISTING_DEVICE_NAME;
    448e:	83 e0       	ldi	r24, 0x03	; 3
    4490:	8f 83       	std	Y+7, r24	; 0x07
			}

			//Get next token [Command Type]
			token = strtok(0, TOKEN_DELIMETER);
    4492:	22 e9       	ldi	r18, 0x92	; 146
    4494:	31 e0       	ldi	r19, 0x01	; 1
    4496:	80 e0       	ldi	r24, 0x00	; 0
    4498:	90 e0       	ldi	r25, 0x00	; 0
    449a:	b9 01       	movw	r22, r18
    449c:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <strtok>
    44a0:	9e 83       	std	Y+6, r25	; 0x06
    44a2:	8d 83       	std	Y+5, r24	; 0x05
			if(token != 0){
    44a4:	8d 81       	ldd	r24, Y+5	; 0x05
    44a6:	9e 81       	ldd	r25, Y+6	; 0x06
    44a8:	00 97       	sbiw	r24, 0x00	; 0
    44aa:	59 f1       	breq	.+86     	; 0x4502 <APP_SmartHome_ERROR_t_GetCommand+0x144>
				//check if any Modes exists
				for(int loopVar = 0; loopVar < DEVICES_COMMANDS_COUNT; loopVar++){
    44ac:	1a 82       	std	Y+2, r1	; 0x02
    44ae:	19 82       	std	Y+1, r1	; 0x01
    44b0:	22 c0       	rjmp	.+68     	; 0x44f6 <APP_SmartHome_ERROR_t_GetCommand+0x138>
					error_status = BAD_COMMAND_TYPE;
    44b2:	88 e0       	ldi	r24, 0x08	; 8
    44b4:	8f 83       	std	Y+7, r24	; 0x07
					if(strcmp(token,devices_commands[loopVar]) == 0){
    44b6:	89 81       	ldd	r24, Y+1	; 0x01
    44b8:	9a 81       	ldd	r25, Y+2	; 0x02
    44ba:	88 0f       	add	r24, r24
    44bc:	99 1f       	adc	r25, r25
    44be:	fc 01       	movw	r30, r24
    44c0:	e0 5f       	subi	r30, 0xF0	; 240
    44c2:	fc 4f       	sbci	r31, 0xFC	; 252
    44c4:	20 81       	ld	r18, Z
    44c6:	31 81       	ldd	r19, Z+1	; 0x01
    44c8:	8d 81       	ldd	r24, Y+5	; 0x05
    44ca:	9e 81       	ldd	r25, Y+6	; 0x06
    44cc:	b9 01       	movw	r22, r18
    44ce:	0e 94 22 25 	call	0x4a44	; 0x4a44 <strcmp>
    44d2:	00 97       	sbiw	r24, 0x00	; 0
    44d4:	59 f4       	brne	.+22     	; 0x44ec <APP_SmartHome_ERROR_t_GetCommand+0x12e>
						//there's correct Mode
						strcpy(command->command_type, token);
    44d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    44d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    44da:	04 96       	adiw	r24, 0x04	; 4
    44dc:	2d 81       	ldd	r18, Y+5	; 0x05
    44de:	3e 81       	ldd	r19, Y+6	; 0x06
    44e0:	b9 01       	movw	r22, r18
    44e2:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <strcpy>
						error_status = SUCCEEDED;
    44e6:	8a e0       	ldi	r24, 0x0A	; 10
    44e8:	8f 83       	std	Y+7, r24	; 0x07
    44ea:	0d c0       	rjmp	.+26     	; 0x4506 <APP_SmartHome_ERROR_t_GetCommand+0x148>

			//Get next token [Command Type]
			token = strtok(0, TOKEN_DELIMETER);
			if(token != 0){
				//check if any Modes exists
				for(int loopVar = 0; loopVar < DEVICES_COMMANDS_COUNT; loopVar++){
    44ec:	89 81       	ldd	r24, Y+1	; 0x01
    44ee:	9a 81       	ldd	r25, Y+2	; 0x02
    44f0:	01 96       	adiw	r24, 0x01	; 1
    44f2:	9a 83       	std	Y+2, r25	; 0x02
    44f4:	89 83       	std	Y+1, r24	; 0x01
    44f6:	89 81       	ldd	r24, Y+1	; 0x01
    44f8:	9a 81       	ldd	r25, Y+2	; 0x02
    44fa:	83 30       	cpi	r24, 0x03	; 3
    44fc:	91 05       	cpc	r25, r1
    44fe:	cc f2       	brlt	.-78     	; 0x44b2 <APP_SmartHome_ERROR_t_GetCommand+0xf4>
    4500:	02 c0       	rjmp	.+4      	; 0x4506 <APP_SmartHome_ERROR_t_GetCommand+0x148>
						error_status = SUCCEEDED;
						break;
					}
				}
			}else{
				error_status = NON_EXISTING_COMMAND_TYPE;
    4502:	89 e0       	ldi	r24, 0x09	; 9
    4504:	8f 83       	std	Y+7, r24	; 0x07
			}

			//Get next token [value]
			token = strtok(0, TOKEN_DELIMETER);
    4506:	22 e9       	ldi	r18, 0x92	; 146
    4508:	31 e0       	ldi	r19, 0x01	; 1
    450a:	80 e0       	ldi	r24, 0x00	; 0
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	b9 01       	movw	r22, r18
    4510:	0e 94 1d 25 	call	0x4a3a	; 0x4a3a <strtok>
    4514:	9e 83       	std	Y+6, r25	; 0x06
    4516:	8d 83       	std	Y+5, r24	; 0x05
			if(token != 0){
    4518:	8d 81       	ldd	r24, Y+5	; 0x05
    451a:	9e 81       	ldd	r25, Y+6	; 0x06
    451c:	00 97       	sbiw	r24, 0x00	; 0
    451e:	59 f0       	breq	.+22     	; 0x4536 <APP_SmartHome_ERROR_t_GetCommand+0x178>
				//There's a value exits
				strcpy(command->value, token);
    4520:	8a 85       	ldd	r24, Y+10	; 0x0a
    4522:	9b 85       	ldd	r25, Y+11	; 0x0b
    4524:	07 96       	adiw	r24, 0x07	; 7
    4526:	2d 81       	ldd	r18, Y+5	; 0x05
    4528:	3e 81       	ldd	r19, Y+6	; 0x06
    452a:	b9 01       	movw	r22, r18
    452c:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <strcpy>
				error_status = SUCCEEDED;
    4530:	8a e0       	ldi	r24, 0x0A	; 10
    4532:	8f 83       	std	Y+7, r24	; 0x07
    4534:	07 c0       	rjmp	.+14     	; 0x4544 <APP_SmartHome_ERROR_t_GetCommand+0x186>
			}else{
				error_status = NON_EXISTING_VALUE;
    4536:	87 e0       	ldi	r24, 0x07	; 7
    4538:	8f 83       	std	Y+7, r24	; 0x07
    453a:	04 c0       	rjmp	.+8      	; 0x4544 <APP_SmartHome_ERROR_t_GetCommand+0x186>
			}

		}else{
			error_status =  BAD_HEADER;
    453c:	1f 82       	std	Y+7, r1	; 0x07
    453e:	02 c0       	rjmp	.+4      	; 0x4544 <APP_SmartHome_ERROR_t_GetCommand+0x186>
		}

	}else{
		error_status =  NON_EXISTING_HEADER;
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	8f 83       	std	Y+7, r24	; 0x07
	}

	return error_status;
    4544:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4546:	2b 96       	adiw	r28, 0x0b	; 11
    4548:	0f b6       	in	r0, 0x3f	; 63
    454a:	f8 94       	cli
    454c:	de bf       	out	0x3e, r29	; 62
    454e:	0f be       	out	0x3f, r0	; 63
    4550:	cd bf       	out	0x3d, r28	; 61
    4552:	cf 91       	pop	r28
    4554:	df 91       	pop	r29
    4556:	08 95       	ret

00004558 <APP_void_StartWIFIserver>:


void APP_void_StartWIFIserver(void)
{
    4558:	df 93       	push	r29
    455a:	cf 93       	push	r28
    455c:	cd b7       	in	r28, 0x3d	; 61
    455e:	de b7       	in	r29, 0x3e	; 62
	H_WIFI_void_WIFIInit( WIFI_Config );
    4560:	20 91 fd 02 	lds	r18, 0x02FD
    4564:	30 91 fe 02 	lds	r19, 0x02FE
    4568:	40 91 ff 02 	lds	r20, 0x02FF
    456c:	50 91 00 03 	lds	r21, 0x0300
    4570:	60 91 01 03 	lds	r22, 0x0301
    4574:	70 91 02 03 	lds	r23, 0x0302
    4578:	80 91 03 03 	lds	r24, 0x0303
    457c:	0e 94 af 10 	call	0x215e	; 0x215e <H_WIFI_void_WIFIInit>
	H_WIFI_void_StartTCPServer();
    4580:	0e 94 4b 13 	call	0x2696	; 0x2696 <H_WIFI_void_StartTCPServer>
}
    4584:	cf 91       	pop	r28
    4586:	df 91       	pop	r29
    4588:	08 95       	ret

0000458a <APP_UpdateStatus_t_WIFIUpdate>:


APP_WIFI_UpdateStatus_t APP_UpdateStatus_t_WIFIUpdate(char *recevBuffer)
{
    458a:	df 93       	push	r29
    458c:	cf 93       	push	r28
    458e:	00 d0       	rcall	.+0      	; 0x4590 <APP_UpdateStatus_t_WIFIUpdate+0x6>
    4590:	0f 92       	push	r0
    4592:	cd b7       	in	r28, 0x3d	; 61
    4594:	de b7       	in	r29, 0x3e	; 62
    4596:	9a 83       	std	Y+2, r25	; 0x02
    4598:	89 83       	std	Y+1, r24	; 0x01
if(H_WIFI_ReceiveStatue_t_WIFIreceive(recevBuffer) == WIFI_Data_Receved)
    459a:	89 81       	ldd	r24, Y+1	; 0x01
    459c:	9a 81       	ldd	r25, Y+2	; 0x02
    459e:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <H_WIFI_ReceiveStatue_t_WIFIreceive>
    45a2:	88 23       	and	r24, r24
    45a4:	11 f4       	brne	.+4      	; 0x45aa <APP_UpdateStatus_t_WIFIUpdate+0x20>
{
	return APP_WIFI_Updated;
    45a6:	1b 82       	std	Y+3, r1	; 0x03
    45a8:	02 c0       	rjmp	.+4      	; 0x45ae <APP_UpdateStatus_t_WIFIUpdate+0x24>
}
return APP_WIFI_NO_Update;
    45aa:	81 e0       	ldi	r24, 0x01	; 1
    45ac:	8b 83       	std	Y+3, r24	; 0x03
    45ae:	8b 81       	ldd	r24, Y+3	; 0x03

}
    45b0:	0f 90       	pop	r0
    45b2:	0f 90       	pop	r0
    45b4:	0f 90       	pop	r0
    45b6:	cf 91       	pop	r28
    45b8:	df 91       	pop	r29
    45ba:	08 95       	ret

000045bc <main>:

extern const Port_Configtype Port_ConfigArr[PORT_PINS_CONFIG_ARR_SIZE];


char buff[100];
int main() {
    45bc:	0f 93       	push	r16
    45be:	1f 93       	push	r17
    45c0:	df 93       	push	r29
    45c2:	cf 93       	push	r28
    45c4:	cd b7       	in	r28, 0x3d	; 61
    45c6:	de b7       	in	r29, 0x3e	; 62
    45c8:	e4 97       	sbiw	r28, 0x34	; 52
    45ca:	0f b6       	in	r0, 0x3f	; 63
    45cc:	f8 94       	cli
    45ce:	de bf       	out	0x3e, r29	; 62
    45d0:	0f be       	out	0x3f, r0	; 63
    45d2:	cd bf       	out	0x3d, r28	; 61

	/*vars*/
	APP_Command_t mCMD;

	M_PORT_voidInit(Port_ConfigArr);
    45d4:	86 e1       	ldi	r24, 0x16	; 22
    45d6:	93 e0       	ldi	r25, 0x03	; 3
    45d8:	0e 94 b0 08 	call	0x1160	; 0x1160 <M_PORT_voidInit>
	H_LCD_void_Int();
    45dc:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <H_LCD_void_Int>
	H_LCD_void_sendString("test");
    45e0:	84 e9       	ldi	r24, 0x94	; 148
    45e2:	91 e0       	ldi	r25, 0x01	; 1
    45e4:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>

	__asm__ __volatile__ ("sei" ::);
    45e8:	78 94       	sei

	APP_void_StartWIFIserver();
    45ea:	0e 94 ac 22 	call	0x4558	; 0x4558 <APP_void_StartWIFIserver>
    45ee:	80 e0       	ldi	r24, 0x00	; 0
    45f0:	90 e0       	ldi	r25, 0x00	; 0
    45f2:	aa ef       	ldi	r26, 0xFA	; 250
    45f4:	b4 e4       	ldi	r27, 0x44	; 68
    45f6:	8f a3       	std	Y+39, r24	; 0x27
    45f8:	98 a7       	std	Y+40, r25	; 0x28
    45fa:	a9 a7       	std	Y+41, r26	; 0x29
    45fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45fe:	6f a1       	ldd	r22, Y+39	; 0x27
    4600:	78 a5       	ldd	r23, Y+40	; 0x28
    4602:	89 a5       	ldd	r24, Y+41	; 0x29
    4604:	9a a5       	ldd	r25, Y+42	; 0x2a
    4606:	20 e0       	ldi	r18, 0x00	; 0
    4608:	30 e0       	ldi	r19, 0x00	; 0
    460a:	4a e7       	ldi	r20, 0x7A	; 122
    460c:	55 e4       	ldi	r21, 0x45	; 69
    460e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4612:	dc 01       	movw	r26, r24
    4614:	cb 01       	movw	r24, r22
    4616:	8b a3       	std	Y+35, r24	; 0x23
    4618:	9c a3       	std	Y+36, r25	; 0x24
    461a:	ad a3       	std	Y+37, r26	; 0x25
    461c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    461e:	6b a1       	ldd	r22, Y+35	; 0x23
    4620:	7c a1       	ldd	r23, Y+36	; 0x24
    4622:	8d a1       	ldd	r24, Y+37	; 0x25
    4624:	9e a1       	ldd	r25, Y+38	; 0x26
    4626:	20 e0       	ldi	r18, 0x00	; 0
    4628:	30 e0       	ldi	r19, 0x00	; 0
    462a:	40 e8       	ldi	r20, 0x80	; 128
    462c:	5f e3       	ldi	r21, 0x3F	; 63
    462e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4632:	88 23       	and	r24, r24
    4634:	2c f4       	brge	.+10     	; 0x4640 <main+0x84>
		__ticks = 1;
    4636:	81 e0       	ldi	r24, 0x01	; 1
    4638:	90 e0       	ldi	r25, 0x00	; 0
    463a:	9a a3       	std	Y+34, r25	; 0x22
    463c:	89 a3       	std	Y+33, r24	; 0x21
    463e:	3f c0       	rjmp	.+126    	; 0x46be <main+0x102>
	else if (__tmp > 65535)
    4640:	6b a1       	ldd	r22, Y+35	; 0x23
    4642:	7c a1       	ldd	r23, Y+36	; 0x24
    4644:	8d a1       	ldd	r24, Y+37	; 0x25
    4646:	9e a1       	ldd	r25, Y+38	; 0x26
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	3f ef       	ldi	r19, 0xFF	; 255
    464c:	4f e7       	ldi	r20, 0x7F	; 127
    464e:	57 e4       	ldi	r21, 0x47	; 71
    4650:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4654:	18 16       	cp	r1, r24
    4656:	4c f5       	brge	.+82     	; 0x46aa <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4658:	6f a1       	ldd	r22, Y+39	; 0x27
    465a:	78 a5       	ldd	r23, Y+40	; 0x28
    465c:	89 a5       	ldd	r24, Y+41	; 0x29
    465e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4660:	20 e0       	ldi	r18, 0x00	; 0
    4662:	30 e0       	ldi	r19, 0x00	; 0
    4664:	40 e2       	ldi	r20, 0x20	; 32
    4666:	51 e4       	ldi	r21, 0x41	; 65
    4668:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    466c:	dc 01       	movw	r26, r24
    466e:	cb 01       	movw	r24, r22
    4670:	bc 01       	movw	r22, r24
    4672:	cd 01       	movw	r24, r26
    4674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4678:	dc 01       	movw	r26, r24
    467a:	cb 01       	movw	r24, r22
    467c:	9a a3       	std	Y+34, r25	; 0x22
    467e:	89 a3       	std	Y+33, r24	; 0x21
    4680:	0f c0       	rjmp	.+30     	; 0x46a0 <main+0xe4>
    4682:	80 e9       	ldi	r24, 0x90	; 144
    4684:	91 e0       	ldi	r25, 0x01	; 1
    4686:	98 a3       	std	Y+32, r25	; 0x20
    4688:	8f 8f       	std	Y+31, r24	; 0x1f
    468a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    468c:	98 a1       	ldd	r25, Y+32	; 0x20
    468e:	01 97       	sbiw	r24, 0x01	; 1
    4690:	f1 f7       	brne	.-4      	; 0x468e <main+0xd2>
    4692:	98 a3       	std	Y+32, r25	; 0x20
    4694:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4696:	89 a1       	ldd	r24, Y+33	; 0x21
    4698:	9a a1       	ldd	r25, Y+34	; 0x22
    469a:	01 97       	sbiw	r24, 0x01	; 1
    469c:	9a a3       	std	Y+34, r25	; 0x22
    469e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46a0:	89 a1       	ldd	r24, Y+33	; 0x21
    46a2:	9a a1       	ldd	r25, Y+34	; 0x22
    46a4:	00 97       	sbiw	r24, 0x00	; 0
    46a6:	69 f7       	brne	.-38     	; 0x4682 <main+0xc6>
    46a8:	14 c0       	rjmp	.+40     	; 0x46d2 <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    46aa:	6b a1       	ldd	r22, Y+35	; 0x23
    46ac:	7c a1       	ldd	r23, Y+36	; 0x24
    46ae:	8d a1       	ldd	r24, Y+37	; 0x25
    46b0:	9e a1       	ldd	r25, Y+38	; 0x26
    46b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46b6:	dc 01       	movw	r26, r24
    46b8:	cb 01       	movw	r24, r22
    46ba:	9a a3       	std	Y+34, r25	; 0x22
    46bc:	89 a3       	std	Y+33, r24	; 0x21
    46be:	89 a1       	ldd	r24, Y+33	; 0x21
    46c0:	9a a1       	ldd	r25, Y+34	; 0x22
    46c2:	9e 8f       	std	Y+30, r25	; 0x1e
    46c4:	8d 8f       	std	Y+29, r24	; 0x1d
    46c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    46c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    46ca:	01 97       	sbiw	r24, 0x01	; 1
    46cc:	f1 f7       	brne	.-4      	; 0x46ca <main+0x10e>
    46ce:	9e 8f       	std	Y+30, r25	; 0x1e
    46d0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2000);
	H_LCD_void_Clear();
    46d2:	0e 94 14 1c 	call	0x3828	; 0x3828 <H_LCD_void_Clear>
	H_LCD_void_sendString("waiting new user");
    46d6:	89 e9       	ldi	r24, 0x99	; 153
    46d8:	91 e0       	ldi	r25, 0x01	; 1
    46da:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>
	while (1) {

		if (APP_UpdateStatus_t_WIFIUpdate(buff) == APP_WIFI_Updated) {
    46de:	81 ef       	ldi	r24, 0xF1	; 241
    46e0:	94 e0       	ldi	r25, 0x04	; 4
    46e2:	0e 94 c5 22 	call	0x458a	; 0x458a <APP_UpdateStatus_t_WIFIUpdate>
    46e6:	88 23       	and	r24, r24
    46e8:	31 f4       	brne	.+12     	; 0x46f6 <main+0x13a>
			H_LCD_void_Clear();
    46ea:	0e 94 14 1c 	call	0x3828	; 0x3828 <H_LCD_void_Clear>
			H_LCD_void_sendString(buff);
    46ee:	81 ef       	ldi	r24, 0xF1	; 241
    46f0:	94 e0       	ldi	r25, 0x04	; 4
    46f2:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>
		}

		H_LCD_void_Clear();
    46f6:	0e 94 14 1c 	call	0x3828	; 0x3828 <H_LCD_void_Clear>

		APP_SmartHome_ERROR_t_GetCommand(buff, &mCMD);
    46fa:	81 ef       	ldi	r24, 0xF1	; 241
    46fc:	94 e0       	ldi	r25, 0x04	; 4
    46fe:	9e 01       	movw	r18, r28
    4700:	25 5d       	subi	r18, 0xD5	; 213
    4702:	3f 4f       	sbci	r19, 0xFF	; 255
    4704:	b9 01       	movw	r22, r18
    4706:	0e 94 df 21 	call	0x43be	; 0x43be <APP_SmartHome_ERROR_t_GetCommand>
		H_LCD_void_sendString("command: ");
    470a:	8a ea       	ldi	r24, 0xAA	; 170
    470c:	91 e0       	ldi	r25, 0x01	; 1
    470e:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>
		H_LCD_void_sendString(mCMD.value);
    4712:	ce 01       	movw	r24, r28
    4714:	8b 96       	adiw	r24, 0x2b	; 43
    4716:	07 96       	adiw	r24, 0x07	; 7
    4718:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>
		APP_SmartHome_ERROR_t_LocalUpdateFromWIFI(mCMD);
    471c:	0b a5       	ldd	r16, Y+43	; 0x2b
    471e:	1c a5       	ldd	r17, Y+44	; 0x2c
    4720:	2d a5       	ldd	r18, Y+45	; 0x2d
    4722:	3e a5       	ldd	r19, Y+46	; 0x2e
    4724:	4f a5       	ldd	r20, Y+47	; 0x2f
    4726:	58 a9       	ldd	r21, Y+48	; 0x30
    4728:	69 a9       	ldd	r22, Y+49	; 0x31
    472a:	7a a9       	ldd	r23, Y+50	; 0x32
    472c:	8b a9       	ldd	r24, Y+51	; 0x33
    472e:	9c a9       	ldd	r25, Y+52	; 0x34
    4730:	0e 94 94 20 	call	0x4128	; 0x4128 <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI>
    4734:	80 e0       	ldi	r24, 0x00	; 0
    4736:	90 e0       	ldi	r25, 0x00	; 0
    4738:	aa ef       	ldi	r26, 0xFA	; 250
    473a:	b3 e4       	ldi	r27, 0x43	; 67
    473c:	89 8f       	std	Y+25, r24	; 0x19
    473e:	9a 8f       	std	Y+26, r25	; 0x1a
    4740:	ab 8f       	std	Y+27, r26	; 0x1b
    4742:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4744:	69 8d       	ldd	r22, Y+25	; 0x19
    4746:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4748:	8b 8d       	ldd	r24, Y+27	; 0x1b
    474a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    474c:	20 e0       	ldi	r18, 0x00	; 0
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	4a e7       	ldi	r20, 0x7A	; 122
    4752:	55 e4       	ldi	r21, 0x45	; 69
    4754:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4758:	dc 01       	movw	r26, r24
    475a:	cb 01       	movw	r24, r22
    475c:	8d 8b       	std	Y+21, r24	; 0x15
    475e:	9e 8b       	std	Y+22, r25	; 0x16
    4760:	af 8b       	std	Y+23, r26	; 0x17
    4762:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4764:	6d 89       	ldd	r22, Y+21	; 0x15
    4766:	7e 89       	ldd	r23, Y+22	; 0x16
    4768:	8f 89       	ldd	r24, Y+23	; 0x17
    476a:	98 8d       	ldd	r25, Y+24	; 0x18
    476c:	20 e0       	ldi	r18, 0x00	; 0
    476e:	30 e0       	ldi	r19, 0x00	; 0
    4770:	40 e8       	ldi	r20, 0x80	; 128
    4772:	5f e3       	ldi	r21, 0x3F	; 63
    4774:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4778:	88 23       	and	r24, r24
    477a:	2c f4       	brge	.+10     	; 0x4786 <main+0x1ca>
		__ticks = 1;
    477c:	81 e0       	ldi	r24, 0x01	; 1
    477e:	90 e0       	ldi	r25, 0x00	; 0
    4780:	9c 8b       	std	Y+20, r25	; 0x14
    4782:	8b 8b       	std	Y+19, r24	; 0x13
    4784:	3f c0       	rjmp	.+126    	; 0x4804 <main+0x248>
	else if (__tmp > 65535)
    4786:	6d 89       	ldd	r22, Y+21	; 0x15
    4788:	7e 89       	ldd	r23, Y+22	; 0x16
    478a:	8f 89       	ldd	r24, Y+23	; 0x17
    478c:	98 8d       	ldd	r25, Y+24	; 0x18
    478e:	20 e0       	ldi	r18, 0x00	; 0
    4790:	3f ef       	ldi	r19, 0xFF	; 255
    4792:	4f e7       	ldi	r20, 0x7F	; 127
    4794:	57 e4       	ldi	r21, 0x47	; 71
    4796:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    479a:	18 16       	cp	r1, r24
    479c:	4c f5       	brge	.+82     	; 0x47f0 <main+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    479e:	69 8d       	ldd	r22, Y+25	; 0x19
    47a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    47a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    47a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    47a6:	20 e0       	ldi	r18, 0x00	; 0
    47a8:	30 e0       	ldi	r19, 0x00	; 0
    47aa:	40 e2       	ldi	r20, 0x20	; 32
    47ac:	51 e4       	ldi	r21, 0x41	; 65
    47ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47b2:	dc 01       	movw	r26, r24
    47b4:	cb 01       	movw	r24, r22
    47b6:	bc 01       	movw	r22, r24
    47b8:	cd 01       	movw	r24, r26
    47ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47be:	dc 01       	movw	r26, r24
    47c0:	cb 01       	movw	r24, r22
    47c2:	9c 8b       	std	Y+20, r25	; 0x14
    47c4:	8b 8b       	std	Y+19, r24	; 0x13
    47c6:	0f c0       	rjmp	.+30     	; 0x47e6 <main+0x22a>
    47c8:	80 e9       	ldi	r24, 0x90	; 144
    47ca:	91 e0       	ldi	r25, 0x01	; 1
    47cc:	9a 8b       	std	Y+18, r25	; 0x12
    47ce:	89 8b       	std	Y+17, r24	; 0x11
    47d0:	89 89       	ldd	r24, Y+17	; 0x11
    47d2:	9a 89       	ldd	r25, Y+18	; 0x12
    47d4:	01 97       	sbiw	r24, 0x01	; 1
    47d6:	f1 f7       	brne	.-4      	; 0x47d4 <main+0x218>
    47d8:	9a 8b       	std	Y+18, r25	; 0x12
    47da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47dc:	8b 89       	ldd	r24, Y+19	; 0x13
    47de:	9c 89       	ldd	r25, Y+20	; 0x14
    47e0:	01 97       	sbiw	r24, 0x01	; 1
    47e2:	9c 8b       	std	Y+20, r25	; 0x14
    47e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47e6:	8b 89       	ldd	r24, Y+19	; 0x13
    47e8:	9c 89       	ldd	r25, Y+20	; 0x14
    47ea:	00 97       	sbiw	r24, 0x00	; 0
    47ec:	69 f7       	brne	.-38     	; 0x47c8 <main+0x20c>
    47ee:	14 c0       	rjmp	.+40     	; 0x4818 <main+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47f0:	6d 89       	ldd	r22, Y+21	; 0x15
    47f2:	7e 89       	ldd	r23, Y+22	; 0x16
    47f4:	8f 89       	ldd	r24, Y+23	; 0x17
    47f6:	98 8d       	ldd	r25, Y+24	; 0x18
    47f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47fc:	dc 01       	movw	r26, r24
    47fe:	cb 01       	movw	r24, r22
    4800:	9c 8b       	std	Y+20, r25	; 0x14
    4802:	8b 8b       	std	Y+19, r24	; 0x13
    4804:	8b 89       	ldd	r24, Y+19	; 0x13
    4806:	9c 89       	ldd	r25, Y+20	; 0x14
    4808:	98 8b       	std	Y+16, r25	; 0x10
    480a:	8f 87       	std	Y+15, r24	; 0x0f
    480c:	8f 85       	ldd	r24, Y+15	; 0x0f
    480e:	98 89       	ldd	r25, Y+16	; 0x10
    4810:	01 97       	sbiw	r24, 0x01	; 1
    4812:	f1 f7       	brne	.-4      	; 0x4810 <main+0x254>
    4814:	98 8b       	std	Y+16, r25	; 0x10
    4816:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		H_LCD_void_sendString("struct: ");
    4818:	84 eb       	ldi	r24, 0xB4	; 180
    481a:	91 e0       	ldi	r25, 0x01	; 1
    481c:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>
		H_LCD_void_sendString(DEVICES_STATE_LIST[0].value);
    4820:	8f ec       	ldi	r24, 0xCF	; 207
    4822:	92 e0       	ldi	r25, 0x02	; 2
    4824:	0e 94 2f 1c 	call	0x385e	; 0x385e <H_LCD_void_sendString>
		APP_SmartHome_void_ApplianceUpdate();
    4828:	0e 94 bf 21 	call	0x437e	; 0x437e <APP_SmartHome_void_ApplianceUpdate>
    482c:	80 e0       	ldi	r24, 0x00	; 0
    482e:	90 e0       	ldi	r25, 0x00	; 0
    4830:	aa ef       	ldi	r26, 0xFA	; 250
    4832:	b3 e4       	ldi	r27, 0x43	; 67
    4834:	8b 87       	std	Y+11, r24	; 0x0b
    4836:	9c 87       	std	Y+12, r25	; 0x0c
    4838:	ad 87       	std	Y+13, r26	; 0x0d
    483a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    483c:	6b 85       	ldd	r22, Y+11	; 0x0b
    483e:	7c 85       	ldd	r23, Y+12	; 0x0c
    4840:	8d 85       	ldd	r24, Y+13	; 0x0d
    4842:	9e 85       	ldd	r25, Y+14	; 0x0e
    4844:	20 e0       	ldi	r18, 0x00	; 0
    4846:	30 e0       	ldi	r19, 0x00	; 0
    4848:	4a e7       	ldi	r20, 0x7A	; 122
    484a:	55 e4       	ldi	r21, 0x45	; 69
    484c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4850:	dc 01       	movw	r26, r24
    4852:	cb 01       	movw	r24, r22
    4854:	8f 83       	std	Y+7, r24	; 0x07
    4856:	98 87       	std	Y+8, r25	; 0x08
    4858:	a9 87       	std	Y+9, r26	; 0x09
    485a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    485c:	6f 81       	ldd	r22, Y+7	; 0x07
    485e:	78 85       	ldd	r23, Y+8	; 0x08
    4860:	89 85       	ldd	r24, Y+9	; 0x09
    4862:	9a 85       	ldd	r25, Y+10	; 0x0a
    4864:	20 e0       	ldi	r18, 0x00	; 0
    4866:	30 e0       	ldi	r19, 0x00	; 0
    4868:	40 e8       	ldi	r20, 0x80	; 128
    486a:	5f e3       	ldi	r21, 0x3F	; 63
    486c:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4870:	88 23       	and	r24, r24
    4872:	2c f4       	brge	.+10     	; 0x487e <main+0x2c2>
		__ticks = 1;
    4874:	81 e0       	ldi	r24, 0x01	; 1
    4876:	90 e0       	ldi	r25, 0x00	; 0
    4878:	9e 83       	std	Y+6, r25	; 0x06
    487a:	8d 83       	std	Y+5, r24	; 0x05
    487c:	3f c0       	rjmp	.+126    	; 0x48fc <main+0x340>
	else if (__tmp > 65535)
    487e:	6f 81       	ldd	r22, Y+7	; 0x07
    4880:	78 85       	ldd	r23, Y+8	; 0x08
    4882:	89 85       	ldd	r24, Y+9	; 0x09
    4884:	9a 85       	ldd	r25, Y+10	; 0x0a
    4886:	20 e0       	ldi	r18, 0x00	; 0
    4888:	3f ef       	ldi	r19, 0xFF	; 255
    488a:	4f e7       	ldi	r20, 0x7F	; 127
    488c:	57 e4       	ldi	r21, 0x47	; 71
    488e:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4892:	18 16       	cp	r1, r24
    4894:	4c f5       	brge	.+82     	; 0x48e8 <main+0x32c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4896:	6b 85       	ldd	r22, Y+11	; 0x0b
    4898:	7c 85       	ldd	r23, Y+12	; 0x0c
    489a:	8d 85       	ldd	r24, Y+13	; 0x0d
    489c:	9e 85       	ldd	r25, Y+14	; 0x0e
    489e:	20 e0       	ldi	r18, 0x00	; 0
    48a0:	30 e0       	ldi	r19, 0x00	; 0
    48a2:	40 e2       	ldi	r20, 0x20	; 32
    48a4:	51 e4       	ldi	r21, 0x41	; 65
    48a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    48aa:	dc 01       	movw	r26, r24
    48ac:	cb 01       	movw	r24, r22
    48ae:	bc 01       	movw	r22, r24
    48b0:	cd 01       	movw	r24, r26
    48b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48b6:	dc 01       	movw	r26, r24
    48b8:	cb 01       	movw	r24, r22
    48ba:	9e 83       	std	Y+6, r25	; 0x06
    48bc:	8d 83       	std	Y+5, r24	; 0x05
    48be:	0f c0       	rjmp	.+30     	; 0x48de <main+0x322>
    48c0:	80 e9       	ldi	r24, 0x90	; 144
    48c2:	91 e0       	ldi	r25, 0x01	; 1
    48c4:	9c 83       	std	Y+4, r25	; 0x04
    48c6:	8b 83       	std	Y+3, r24	; 0x03
    48c8:	8b 81       	ldd	r24, Y+3	; 0x03
    48ca:	9c 81       	ldd	r25, Y+4	; 0x04
    48cc:	01 97       	sbiw	r24, 0x01	; 1
    48ce:	f1 f7       	brne	.-4      	; 0x48cc <main+0x310>
    48d0:	9c 83       	std	Y+4, r25	; 0x04
    48d2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48d4:	8d 81       	ldd	r24, Y+5	; 0x05
    48d6:	9e 81       	ldd	r25, Y+6	; 0x06
    48d8:	01 97       	sbiw	r24, 0x01	; 1
    48da:	9e 83       	std	Y+6, r25	; 0x06
    48dc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48de:	8d 81       	ldd	r24, Y+5	; 0x05
    48e0:	9e 81       	ldd	r25, Y+6	; 0x06
    48e2:	00 97       	sbiw	r24, 0x00	; 0
    48e4:	69 f7       	brne	.-38     	; 0x48c0 <main+0x304>
    48e6:	fb ce       	rjmp	.-522    	; 0x46de <main+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48e8:	6f 81       	ldd	r22, Y+7	; 0x07
    48ea:	78 85       	ldd	r23, Y+8	; 0x08
    48ec:	89 85       	ldd	r24, Y+9	; 0x09
    48ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    48f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48f4:	dc 01       	movw	r26, r24
    48f6:	cb 01       	movw	r24, r22
    48f8:	9e 83       	std	Y+6, r25	; 0x06
    48fa:	8d 83       	std	Y+5, r24	; 0x05
    48fc:	8d 81       	ldd	r24, Y+5	; 0x05
    48fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4900:	9a 83       	std	Y+2, r25	; 0x02
    4902:	89 83       	std	Y+1, r24	; 0x01
    4904:	89 81       	ldd	r24, Y+1	; 0x01
    4906:	9a 81       	ldd	r25, Y+2	; 0x02
    4908:	01 97       	sbiw	r24, 0x01	; 1
    490a:	f1 f7       	brne	.-4      	; 0x4908 <main+0x34c>
    490c:	9a 83       	std	Y+2, r25	; 0x02
    490e:	89 83       	std	Y+1, r24	; 0x01
    4910:	e6 ce       	rjmp	.-564    	; 0x46de <main+0x122>

00004912 <__udivmodqi4>:
    4912:	99 1b       	sub	r25, r25
    4914:	79 e0       	ldi	r23, 0x09	; 9
    4916:	04 c0       	rjmp	.+8      	; 0x4920 <__udivmodqi4_ep>

00004918 <__udivmodqi4_loop>:
    4918:	99 1f       	adc	r25, r25
    491a:	96 17       	cp	r25, r22
    491c:	08 f0       	brcs	.+2      	; 0x4920 <__udivmodqi4_ep>
    491e:	96 1b       	sub	r25, r22

00004920 <__udivmodqi4_ep>:
    4920:	88 1f       	adc	r24, r24
    4922:	7a 95       	dec	r23
    4924:	c9 f7       	brne	.-14     	; 0x4918 <__udivmodqi4_loop>
    4926:	80 95       	com	r24
    4928:	08 95       	ret

0000492a <__udivmodhi4>:
    492a:	aa 1b       	sub	r26, r26
    492c:	bb 1b       	sub	r27, r27
    492e:	51 e1       	ldi	r21, 0x11	; 17
    4930:	07 c0       	rjmp	.+14     	; 0x4940 <__udivmodhi4_ep>

00004932 <__udivmodhi4_loop>:
    4932:	aa 1f       	adc	r26, r26
    4934:	bb 1f       	adc	r27, r27
    4936:	a6 17       	cp	r26, r22
    4938:	b7 07       	cpc	r27, r23
    493a:	10 f0       	brcs	.+4      	; 0x4940 <__udivmodhi4_ep>
    493c:	a6 1b       	sub	r26, r22
    493e:	b7 0b       	sbc	r27, r23

00004940 <__udivmodhi4_ep>:
    4940:	88 1f       	adc	r24, r24
    4942:	99 1f       	adc	r25, r25
    4944:	5a 95       	dec	r21
    4946:	a9 f7       	brne	.-22     	; 0x4932 <__udivmodhi4_loop>
    4948:	80 95       	com	r24
    494a:	90 95       	com	r25
    494c:	bc 01       	movw	r22, r24
    494e:	cd 01       	movw	r24, r26
    4950:	08 95       	ret

00004952 <__udivmodsi4>:
    4952:	a1 e2       	ldi	r26, 0x21	; 33
    4954:	1a 2e       	mov	r1, r26
    4956:	aa 1b       	sub	r26, r26
    4958:	bb 1b       	sub	r27, r27
    495a:	fd 01       	movw	r30, r26
    495c:	0d c0       	rjmp	.+26     	; 0x4978 <__udivmodsi4_ep>

0000495e <__udivmodsi4_loop>:
    495e:	aa 1f       	adc	r26, r26
    4960:	bb 1f       	adc	r27, r27
    4962:	ee 1f       	adc	r30, r30
    4964:	ff 1f       	adc	r31, r31
    4966:	a2 17       	cp	r26, r18
    4968:	b3 07       	cpc	r27, r19
    496a:	e4 07       	cpc	r30, r20
    496c:	f5 07       	cpc	r31, r21
    496e:	20 f0       	brcs	.+8      	; 0x4978 <__udivmodsi4_ep>
    4970:	a2 1b       	sub	r26, r18
    4972:	b3 0b       	sbc	r27, r19
    4974:	e4 0b       	sbc	r30, r20
    4976:	f5 0b       	sbc	r31, r21

00004978 <__udivmodsi4_ep>:
    4978:	66 1f       	adc	r22, r22
    497a:	77 1f       	adc	r23, r23
    497c:	88 1f       	adc	r24, r24
    497e:	99 1f       	adc	r25, r25
    4980:	1a 94       	dec	r1
    4982:	69 f7       	brne	.-38     	; 0x495e <__udivmodsi4_loop>
    4984:	60 95       	com	r22
    4986:	70 95       	com	r23
    4988:	80 95       	com	r24
    498a:	90 95       	com	r25
    498c:	9b 01       	movw	r18, r22
    498e:	ac 01       	movw	r20, r24
    4990:	bd 01       	movw	r22, r26
    4992:	cf 01       	movw	r24, r30
    4994:	08 95       	ret

00004996 <__divmodsi4>:
    4996:	97 fb       	bst	r25, 7
    4998:	09 2e       	mov	r0, r25
    499a:	05 26       	eor	r0, r21
    499c:	0e d0       	rcall	.+28     	; 0x49ba <__divmodsi4_neg1>
    499e:	57 fd       	sbrc	r21, 7
    49a0:	04 d0       	rcall	.+8      	; 0x49aa <__divmodsi4_neg2>
    49a2:	d7 df       	rcall	.-82     	; 0x4952 <__udivmodsi4>
    49a4:	0a d0       	rcall	.+20     	; 0x49ba <__divmodsi4_neg1>
    49a6:	00 1c       	adc	r0, r0
    49a8:	38 f4       	brcc	.+14     	; 0x49b8 <__divmodsi4_exit>

000049aa <__divmodsi4_neg2>:
    49aa:	50 95       	com	r21
    49ac:	40 95       	com	r20
    49ae:	30 95       	com	r19
    49b0:	21 95       	neg	r18
    49b2:	3f 4f       	sbci	r19, 0xFF	; 255
    49b4:	4f 4f       	sbci	r20, 0xFF	; 255
    49b6:	5f 4f       	sbci	r21, 0xFF	; 255

000049b8 <__divmodsi4_exit>:
    49b8:	08 95       	ret

000049ba <__divmodsi4_neg1>:
    49ba:	f6 f7       	brtc	.-4      	; 0x49b8 <__divmodsi4_exit>
    49bc:	90 95       	com	r25
    49be:	80 95       	com	r24
    49c0:	70 95       	com	r23
    49c2:	61 95       	neg	r22
    49c4:	7f 4f       	sbci	r23, 0xFF	; 255
    49c6:	8f 4f       	sbci	r24, 0xFF	; 255
    49c8:	9f 4f       	sbci	r25, 0xFF	; 255
    49ca:	08 95       	ret

000049cc <__prologue_saves__>:
    49cc:	2f 92       	push	r2
    49ce:	3f 92       	push	r3
    49d0:	4f 92       	push	r4
    49d2:	5f 92       	push	r5
    49d4:	6f 92       	push	r6
    49d6:	7f 92       	push	r7
    49d8:	8f 92       	push	r8
    49da:	9f 92       	push	r9
    49dc:	af 92       	push	r10
    49de:	bf 92       	push	r11
    49e0:	cf 92       	push	r12
    49e2:	df 92       	push	r13
    49e4:	ef 92       	push	r14
    49e6:	ff 92       	push	r15
    49e8:	0f 93       	push	r16
    49ea:	1f 93       	push	r17
    49ec:	cf 93       	push	r28
    49ee:	df 93       	push	r29
    49f0:	cd b7       	in	r28, 0x3d	; 61
    49f2:	de b7       	in	r29, 0x3e	; 62
    49f4:	ca 1b       	sub	r28, r26
    49f6:	db 0b       	sbc	r29, r27
    49f8:	0f b6       	in	r0, 0x3f	; 63
    49fa:	f8 94       	cli
    49fc:	de bf       	out	0x3e, r29	; 62
    49fe:	0f be       	out	0x3f, r0	; 63
    4a00:	cd bf       	out	0x3d, r28	; 61
    4a02:	09 94       	ijmp

00004a04 <__epilogue_restores__>:
    4a04:	2a 88       	ldd	r2, Y+18	; 0x12
    4a06:	39 88       	ldd	r3, Y+17	; 0x11
    4a08:	48 88       	ldd	r4, Y+16	; 0x10
    4a0a:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a0c:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a0e:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a10:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a12:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a14:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a16:	b9 84       	ldd	r11, Y+9	; 0x09
    4a18:	c8 84       	ldd	r12, Y+8	; 0x08
    4a1a:	df 80       	ldd	r13, Y+7	; 0x07
    4a1c:	ee 80       	ldd	r14, Y+6	; 0x06
    4a1e:	fd 80       	ldd	r15, Y+5	; 0x05
    4a20:	0c 81       	ldd	r16, Y+4	; 0x04
    4a22:	1b 81       	ldd	r17, Y+3	; 0x03
    4a24:	aa 81       	ldd	r26, Y+2	; 0x02
    4a26:	b9 81       	ldd	r27, Y+1	; 0x01
    4a28:	ce 0f       	add	r28, r30
    4a2a:	d1 1d       	adc	r29, r1
    4a2c:	0f b6       	in	r0, 0x3f	; 63
    4a2e:	f8 94       	cli
    4a30:	de bf       	out	0x3e, r29	; 62
    4a32:	0f be       	out	0x3f, r0	; 63
    4a34:	cd bf       	out	0x3d, r28	; 61
    4a36:	ed 01       	movw	r28, r26
    4a38:	08 95       	ret

00004a3a <strtok>:
    4a3a:	42 e8       	ldi	r20, 0x82	; 130
    4a3c:	54 e0       	ldi	r21, 0x04	; 4
    4a3e:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <strtok_r>
    4a42:	08 95       	ret

00004a44 <strcmp>:
    4a44:	fb 01       	movw	r30, r22
    4a46:	dc 01       	movw	r26, r24
    4a48:	8d 91       	ld	r24, X+
    4a4a:	01 90       	ld	r0, Z+
    4a4c:	80 19       	sub	r24, r0
    4a4e:	01 10       	cpse	r0, r1
    4a50:	d9 f3       	breq	.-10     	; 0x4a48 <strcmp+0x4>
    4a52:	99 0b       	sbc	r25, r25
    4a54:	08 95       	ret

00004a56 <strcpy>:
    4a56:	fb 01       	movw	r30, r22
    4a58:	dc 01       	movw	r26, r24
    4a5a:	01 90       	ld	r0, Z+
    4a5c:	0d 92       	st	X+, r0
    4a5e:	00 20       	and	r0, r0
    4a60:	e1 f7       	brne	.-8      	; 0x4a5a <strcpy+0x4>
    4a62:	08 95       	ret

00004a64 <strstr>:
    4a64:	fb 01       	movw	r30, r22
    4a66:	51 91       	ld	r21, Z+
    4a68:	55 23       	and	r21, r21
    4a6a:	a9 f0       	breq	.+42     	; 0x4a96 <strstr+0x32>
    4a6c:	bf 01       	movw	r22, r30
    4a6e:	dc 01       	movw	r26, r24
    4a70:	4d 91       	ld	r20, X+
    4a72:	45 17       	cp	r20, r21
    4a74:	41 11       	cpse	r20, r1
    4a76:	e1 f7       	brne	.-8      	; 0x4a70 <strstr+0xc>
    4a78:	59 f4       	brne	.+22     	; 0x4a90 <strstr+0x2c>
    4a7a:	cd 01       	movw	r24, r26
    4a7c:	01 90       	ld	r0, Z+
    4a7e:	00 20       	and	r0, r0
    4a80:	49 f0       	breq	.+18     	; 0x4a94 <strstr+0x30>
    4a82:	4d 91       	ld	r20, X+
    4a84:	40 15       	cp	r20, r0
    4a86:	41 11       	cpse	r20, r1
    4a88:	c9 f3       	breq	.-14     	; 0x4a7c <strstr+0x18>
    4a8a:	fb 01       	movw	r30, r22
    4a8c:	41 11       	cpse	r20, r1
    4a8e:	ef cf       	rjmp	.-34     	; 0x4a6e <strstr+0xa>
    4a90:	81 e0       	ldi	r24, 0x01	; 1
    4a92:	90 e0       	ldi	r25, 0x00	; 0
    4a94:	01 97       	sbiw	r24, 0x01	; 1
    4a96:	08 95       	ret

00004a98 <strtok_r>:
    4a98:	fa 01       	movw	r30, r20
    4a9a:	a1 91       	ld	r26, Z+
    4a9c:	b0 81       	ld	r27, Z
    4a9e:	00 97       	sbiw	r24, 0x00	; 0
    4aa0:	19 f4       	brne	.+6      	; 0x4aa8 <strtok_r+0x10>
    4aa2:	10 97       	sbiw	r26, 0x00	; 0
    4aa4:	e1 f0       	breq	.+56     	; 0x4ade <strtok_r+0x46>
    4aa6:	cd 01       	movw	r24, r26
    4aa8:	dc 01       	movw	r26, r24
    4aaa:	cd 01       	movw	r24, r26
    4aac:	0d 90       	ld	r0, X+
    4aae:	00 20       	and	r0, r0
    4ab0:	11 f4       	brne	.+4      	; 0x4ab6 <strtok_r+0x1e>
    4ab2:	c0 01       	movw	r24, r0
    4ab4:	13 c0       	rjmp	.+38     	; 0x4adc <strtok_r+0x44>
    4ab6:	fb 01       	movw	r30, r22
    4ab8:	21 91       	ld	r18, Z+
    4aba:	22 23       	and	r18, r18
    4abc:	19 f0       	breq	.+6      	; 0x4ac4 <strtok_r+0x2c>
    4abe:	20 15       	cp	r18, r0
    4ac0:	d9 f7       	brne	.-10     	; 0x4ab8 <strtok_r+0x20>
    4ac2:	f3 cf       	rjmp	.-26     	; 0x4aaa <strtok_r+0x12>
    4ac4:	fb 01       	movw	r30, r22
    4ac6:	21 91       	ld	r18, Z+
    4ac8:	20 15       	cp	r18, r0
    4aca:	19 f4       	brne	.+6      	; 0x4ad2 <strtok_r+0x3a>
    4acc:	1e 92       	st	-X, r1
    4ace:	11 96       	adiw	r26, 0x01	; 1
    4ad0:	06 c0       	rjmp	.+12     	; 0x4ade <strtok_r+0x46>
    4ad2:	22 23       	and	r18, r18
    4ad4:	c1 f7       	brne	.-16     	; 0x4ac6 <strtok_r+0x2e>
    4ad6:	0d 90       	ld	r0, X+
    4ad8:	00 20       	and	r0, r0
    4ada:	a1 f7       	brne	.-24     	; 0x4ac4 <strtok_r+0x2c>
    4adc:	d0 01       	movw	r26, r0
    4ade:	fa 01       	movw	r30, r20
    4ae0:	a1 93       	st	Z+, r26
    4ae2:	b0 83       	st	Z, r27
    4ae4:	08 95       	ret

00004ae6 <itoa>:
    4ae6:	fb 01       	movw	r30, r22
    4ae8:	9f 01       	movw	r18, r30
    4aea:	e8 94       	clt
    4aec:	42 30       	cpi	r20, 0x02	; 2
    4aee:	c4 f0       	brlt	.+48     	; 0x4b20 <itoa+0x3a>
    4af0:	45 32       	cpi	r20, 0x25	; 37
    4af2:	b4 f4       	brge	.+44     	; 0x4b20 <itoa+0x3a>
    4af4:	4a 30       	cpi	r20, 0x0A	; 10
    4af6:	29 f4       	brne	.+10     	; 0x4b02 <itoa+0x1c>
    4af8:	97 fb       	bst	r25, 7
    4afa:	1e f4       	brtc	.+6      	; 0x4b02 <itoa+0x1c>
    4afc:	90 95       	com	r25
    4afe:	81 95       	neg	r24
    4b00:	9f 4f       	sbci	r25, 0xFF	; 255
    4b02:	64 2f       	mov	r22, r20
    4b04:	77 27       	eor	r23, r23
    4b06:	0e 94 95 24 	call	0x492a	; 0x492a <__udivmodhi4>
    4b0a:	80 5d       	subi	r24, 0xD0	; 208
    4b0c:	8a 33       	cpi	r24, 0x3A	; 58
    4b0e:	0c f0       	brlt	.+2      	; 0x4b12 <itoa+0x2c>
    4b10:	89 5d       	subi	r24, 0xD9	; 217
    4b12:	81 93       	st	Z+, r24
    4b14:	cb 01       	movw	r24, r22
    4b16:	00 97       	sbiw	r24, 0x00	; 0
    4b18:	a1 f7       	brne	.-24     	; 0x4b02 <itoa+0x1c>
    4b1a:	16 f4       	brtc	.+4      	; 0x4b20 <itoa+0x3a>
    4b1c:	5d e2       	ldi	r21, 0x2D	; 45
    4b1e:	51 93       	st	Z+, r21
    4b20:	10 82       	st	Z, r1
    4b22:	c9 01       	movw	r24, r18
    4b24:	0c 94 ab 27 	jmp	0x4f56	; 0x4f56 <strrev>

00004b28 <sprintf>:
    4b28:	ae e0       	ldi	r26, 0x0E	; 14
    4b2a:	b0 e0       	ldi	r27, 0x00	; 0
    4b2c:	ea e9       	ldi	r30, 0x9A	; 154
    4b2e:	f5 e2       	ldi	r31, 0x25	; 37
    4b30:	0c 94 f4 24 	jmp	0x49e8	; 0x49e8 <__prologue_saves__+0x1c>
    4b34:	0d 89       	ldd	r16, Y+21	; 0x15
    4b36:	1e 89       	ldd	r17, Y+22	; 0x16
    4b38:	86 e0       	ldi	r24, 0x06	; 6
    4b3a:	8c 83       	std	Y+4, r24	; 0x04
    4b3c:	1a 83       	std	Y+2, r17	; 0x02
    4b3e:	09 83       	std	Y+1, r16	; 0x01
    4b40:	8f ef       	ldi	r24, 0xFF	; 255
    4b42:	9f e7       	ldi	r25, 0x7F	; 127
    4b44:	9e 83       	std	Y+6, r25	; 0x06
    4b46:	8d 83       	std	Y+5, r24	; 0x05
    4b48:	9e 01       	movw	r18, r28
    4b4a:	27 5e       	subi	r18, 0xE7	; 231
    4b4c:	3f 4f       	sbci	r19, 0xFF	; 255
    4b4e:	ce 01       	movw	r24, r28
    4b50:	01 96       	adiw	r24, 0x01	; 1
    4b52:	6f 89       	ldd	r22, Y+23	; 0x17
    4b54:	78 8d       	ldd	r23, Y+24	; 0x18
    4b56:	a9 01       	movw	r20, r18
    4b58:	0e 94 b8 25 	call	0x4b70	; 0x4b70 <vfprintf>
    4b5c:	2f 81       	ldd	r18, Y+7	; 0x07
    4b5e:	38 85       	ldd	r19, Y+8	; 0x08
    4b60:	02 0f       	add	r16, r18
    4b62:	13 1f       	adc	r17, r19
    4b64:	f8 01       	movw	r30, r16
    4b66:	10 82       	st	Z, r1
    4b68:	2e 96       	adiw	r28, 0x0e	; 14
    4b6a:	e4 e0       	ldi	r30, 0x04	; 4
    4b6c:	0c 94 10 25 	jmp	0x4a20	; 0x4a20 <__epilogue_restores__+0x1c>

00004b70 <vfprintf>:
    4b70:	ab e0       	ldi	r26, 0x0B	; 11
    4b72:	b0 e0       	ldi	r27, 0x00	; 0
    4b74:	ee eb       	ldi	r30, 0xBE	; 190
    4b76:	f5 e2       	ldi	r31, 0x25	; 37
    4b78:	0c 94 e6 24 	jmp	0x49cc	; 0x49cc <__prologue_saves__>
    4b7c:	3c 01       	movw	r6, r24
    4b7e:	2b 01       	movw	r4, r22
    4b80:	5a 01       	movw	r10, r20
    4b82:	fc 01       	movw	r30, r24
    4b84:	17 82       	std	Z+7, r1	; 0x07
    4b86:	16 82       	std	Z+6, r1	; 0x06
    4b88:	83 81       	ldd	r24, Z+3	; 0x03
    4b8a:	81 fd       	sbrc	r24, 1
    4b8c:	03 c0       	rjmp	.+6      	; 0x4b94 <vfprintf+0x24>
    4b8e:	6f ef       	ldi	r22, 0xFF	; 255
    4b90:	7f ef       	ldi	r23, 0xFF	; 255
    4b92:	c6 c1       	rjmp	.+908    	; 0x4f20 <vfprintf+0x3b0>
    4b94:	9a e0       	ldi	r25, 0x0A	; 10
    4b96:	89 2e       	mov	r8, r25
    4b98:	1e 01       	movw	r2, r28
    4b9a:	08 94       	sec
    4b9c:	21 1c       	adc	r2, r1
    4b9e:	31 1c       	adc	r3, r1
    4ba0:	f3 01       	movw	r30, r6
    4ba2:	23 81       	ldd	r18, Z+3	; 0x03
    4ba4:	f2 01       	movw	r30, r4
    4ba6:	23 fd       	sbrc	r18, 3
    4ba8:	85 91       	lpm	r24, Z+
    4baa:	23 ff       	sbrs	r18, 3
    4bac:	81 91       	ld	r24, Z+
    4bae:	2f 01       	movw	r4, r30
    4bb0:	88 23       	and	r24, r24
    4bb2:	09 f4       	brne	.+2      	; 0x4bb6 <vfprintf+0x46>
    4bb4:	b2 c1       	rjmp	.+868    	; 0x4f1a <vfprintf+0x3aa>
    4bb6:	85 32       	cpi	r24, 0x25	; 37
    4bb8:	39 f4       	brne	.+14     	; 0x4bc8 <vfprintf+0x58>
    4bba:	23 fd       	sbrc	r18, 3
    4bbc:	85 91       	lpm	r24, Z+
    4bbe:	23 ff       	sbrs	r18, 3
    4bc0:	81 91       	ld	r24, Z+
    4bc2:	2f 01       	movw	r4, r30
    4bc4:	85 32       	cpi	r24, 0x25	; 37
    4bc6:	29 f4       	brne	.+10     	; 0x4bd2 <vfprintf+0x62>
    4bc8:	90 e0       	ldi	r25, 0x00	; 0
    4bca:	b3 01       	movw	r22, r6
    4bcc:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <fputc>
    4bd0:	e7 cf       	rjmp	.-50     	; 0x4ba0 <vfprintf+0x30>
    4bd2:	98 2f       	mov	r25, r24
    4bd4:	ff 24       	eor	r15, r15
    4bd6:	ee 24       	eor	r14, r14
    4bd8:	99 24       	eor	r9, r9
    4bda:	ff e1       	ldi	r31, 0x1F	; 31
    4bdc:	ff 15       	cp	r31, r15
    4bde:	d0 f0       	brcs	.+52     	; 0x4c14 <vfprintf+0xa4>
    4be0:	9b 32       	cpi	r25, 0x2B	; 43
    4be2:	69 f0       	breq	.+26     	; 0x4bfe <vfprintf+0x8e>
    4be4:	9c 32       	cpi	r25, 0x2C	; 44
    4be6:	28 f4       	brcc	.+10     	; 0x4bf2 <vfprintf+0x82>
    4be8:	90 32       	cpi	r25, 0x20	; 32
    4bea:	59 f0       	breq	.+22     	; 0x4c02 <vfprintf+0x92>
    4bec:	93 32       	cpi	r25, 0x23	; 35
    4bee:	91 f4       	brne	.+36     	; 0x4c14 <vfprintf+0xa4>
    4bf0:	0e c0       	rjmp	.+28     	; 0x4c0e <vfprintf+0x9e>
    4bf2:	9d 32       	cpi	r25, 0x2D	; 45
    4bf4:	49 f0       	breq	.+18     	; 0x4c08 <vfprintf+0x98>
    4bf6:	90 33       	cpi	r25, 0x30	; 48
    4bf8:	69 f4       	brne	.+26     	; 0x4c14 <vfprintf+0xa4>
    4bfa:	41 e0       	ldi	r20, 0x01	; 1
    4bfc:	24 c0       	rjmp	.+72     	; 0x4c46 <vfprintf+0xd6>
    4bfe:	52 e0       	ldi	r21, 0x02	; 2
    4c00:	f5 2a       	or	r15, r21
    4c02:	84 e0       	ldi	r24, 0x04	; 4
    4c04:	f8 2a       	or	r15, r24
    4c06:	28 c0       	rjmp	.+80     	; 0x4c58 <vfprintf+0xe8>
    4c08:	98 e0       	ldi	r25, 0x08	; 8
    4c0a:	f9 2a       	or	r15, r25
    4c0c:	25 c0       	rjmp	.+74     	; 0x4c58 <vfprintf+0xe8>
    4c0e:	e0 e1       	ldi	r30, 0x10	; 16
    4c10:	fe 2a       	or	r15, r30
    4c12:	22 c0       	rjmp	.+68     	; 0x4c58 <vfprintf+0xe8>
    4c14:	f7 fc       	sbrc	r15, 7
    4c16:	29 c0       	rjmp	.+82     	; 0x4c6a <vfprintf+0xfa>
    4c18:	89 2f       	mov	r24, r25
    4c1a:	80 53       	subi	r24, 0x30	; 48
    4c1c:	8a 30       	cpi	r24, 0x0A	; 10
    4c1e:	70 f4       	brcc	.+28     	; 0x4c3c <vfprintf+0xcc>
    4c20:	f6 fe       	sbrs	r15, 6
    4c22:	05 c0       	rjmp	.+10     	; 0x4c2e <vfprintf+0xbe>
    4c24:	98 9c       	mul	r9, r8
    4c26:	90 2c       	mov	r9, r0
    4c28:	11 24       	eor	r1, r1
    4c2a:	98 0e       	add	r9, r24
    4c2c:	15 c0       	rjmp	.+42     	; 0x4c58 <vfprintf+0xe8>
    4c2e:	e8 9c       	mul	r14, r8
    4c30:	e0 2c       	mov	r14, r0
    4c32:	11 24       	eor	r1, r1
    4c34:	e8 0e       	add	r14, r24
    4c36:	f0 e2       	ldi	r31, 0x20	; 32
    4c38:	ff 2a       	or	r15, r31
    4c3a:	0e c0       	rjmp	.+28     	; 0x4c58 <vfprintf+0xe8>
    4c3c:	9e 32       	cpi	r25, 0x2E	; 46
    4c3e:	29 f4       	brne	.+10     	; 0x4c4a <vfprintf+0xda>
    4c40:	f6 fc       	sbrc	r15, 6
    4c42:	6b c1       	rjmp	.+726    	; 0x4f1a <vfprintf+0x3aa>
    4c44:	40 e4       	ldi	r20, 0x40	; 64
    4c46:	f4 2a       	or	r15, r20
    4c48:	07 c0       	rjmp	.+14     	; 0x4c58 <vfprintf+0xe8>
    4c4a:	9c 36       	cpi	r25, 0x6C	; 108
    4c4c:	19 f4       	brne	.+6      	; 0x4c54 <vfprintf+0xe4>
    4c4e:	50 e8       	ldi	r21, 0x80	; 128
    4c50:	f5 2a       	or	r15, r21
    4c52:	02 c0       	rjmp	.+4      	; 0x4c58 <vfprintf+0xe8>
    4c54:	98 36       	cpi	r25, 0x68	; 104
    4c56:	49 f4       	brne	.+18     	; 0x4c6a <vfprintf+0xfa>
    4c58:	f2 01       	movw	r30, r4
    4c5a:	23 fd       	sbrc	r18, 3
    4c5c:	95 91       	lpm	r25, Z+
    4c5e:	23 ff       	sbrs	r18, 3
    4c60:	91 91       	ld	r25, Z+
    4c62:	2f 01       	movw	r4, r30
    4c64:	99 23       	and	r25, r25
    4c66:	09 f0       	breq	.+2      	; 0x4c6a <vfprintf+0xfa>
    4c68:	b8 cf       	rjmp	.-144    	; 0x4bda <vfprintf+0x6a>
    4c6a:	89 2f       	mov	r24, r25
    4c6c:	85 54       	subi	r24, 0x45	; 69
    4c6e:	83 30       	cpi	r24, 0x03	; 3
    4c70:	18 f0       	brcs	.+6      	; 0x4c78 <vfprintf+0x108>
    4c72:	80 52       	subi	r24, 0x20	; 32
    4c74:	83 30       	cpi	r24, 0x03	; 3
    4c76:	38 f4       	brcc	.+14     	; 0x4c86 <vfprintf+0x116>
    4c78:	44 e0       	ldi	r20, 0x04	; 4
    4c7a:	50 e0       	ldi	r21, 0x00	; 0
    4c7c:	a4 0e       	add	r10, r20
    4c7e:	b5 1e       	adc	r11, r21
    4c80:	5f e3       	ldi	r21, 0x3F	; 63
    4c82:	59 83       	std	Y+1, r21	; 0x01
    4c84:	0f c0       	rjmp	.+30     	; 0x4ca4 <vfprintf+0x134>
    4c86:	93 36       	cpi	r25, 0x63	; 99
    4c88:	31 f0       	breq	.+12     	; 0x4c96 <vfprintf+0x126>
    4c8a:	93 37       	cpi	r25, 0x73	; 115
    4c8c:	79 f0       	breq	.+30     	; 0x4cac <vfprintf+0x13c>
    4c8e:	93 35       	cpi	r25, 0x53	; 83
    4c90:	09 f0       	breq	.+2      	; 0x4c94 <vfprintf+0x124>
    4c92:	56 c0       	rjmp	.+172    	; 0x4d40 <vfprintf+0x1d0>
    4c94:	20 c0       	rjmp	.+64     	; 0x4cd6 <vfprintf+0x166>
    4c96:	f5 01       	movw	r30, r10
    4c98:	80 81       	ld	r24, Z
    4c9a:	89 83       	std	Y+1, r24	; 0x01
    4c9c:	42 e0       	ldi	r20, 0x02	; 2
    4c9e:	50 e0       	ldi	r21, 0x00	; 0
    4ca0:	a4 0e       	add	r10, r20
    4ca2:	b5 1e       	adc	r11, r21
    4ca4:	61 01       	movw	r12, r2
    4ca6:	01 e0       	ldi	r16, 0x01	; 1
    4ca8:	10 e0       	ldi	r17, 0x00	; 0
    4caa:	12 c0       	rjmp	.+36     	; 0x4cd0 <vfprintf+0x160>
    4cac:	f5 01       	movw	r30, r10
    4cae:	c0 80       	ld	r12, Z
    4cb0:	d1 80       	ldd	r13, Z+1	; 0x01
    4cb2:	f6 fc       	sbrc	r15, 6
    4cb4:	03 c0       	rjmp	.+6      	; 0x4cbc <vfprintf+0x14c>
    4cb6:	6f ef       	ldi	r22, 0xFF	; 255
    4cb8:	7f ef       	ldi	r23, 0xFF	; 255
    4cba:	02 c0       	rjmp	.+4      	; 0x4cc0 <vfprintf+0x150>
    4cbc:	69 2d       	mov	r22, r9
    4cbe:	70 e0       	ldi	r23, 0x00	; 0
    4cc0:	42 e0       	ldi	r20, 0x02	; 2
    4cc2:	50 e0       	ldi	r21, 0x00	; 0
    4cc4:	a4 0e       	add	r10, r20
    4cc6:	b5 1e       	adc	r11, r21
    4cc8:	c6 01       	movw	r24, r12
    4cca:	0e 94 a0 27 	call	0x4f40	; 0x4f40 <strnlen>
    4cce:	8c 01       	movw	r16, r24
    4cd0:	5f e7       	ldi	r21, 0x7F	; 127
    4cd2:	f5 22       	and	r15, r21
    4cd4:	14 c0       	rjmp	.+40     	; 0x4cfe <vfprintf+0x18e>
    4cd6:	f5 01       	movw	r30, r10
    4cd8:	c0 80       	ld	r12, Z
    4cda:	d1 80       	ldd	r13, Z+1	; 0x01
    4cdc:	f6 fc       	sbrc	r15, 6
    4cde:	03 c0       	rjmp	.+6      	; 0x4ce6 <vfprintf+0x176>
    4ce0:	6f ef       	ldi	r22, 0xFF	; 255
    4ce2:	7f ef       	ldi	r23, 0xFF	; 255
    4ce4:	02 c0       	rjmp	.+4      	; 0x4cea <vfprintf+0x17a>
    4ce6:	69 2d       	mov	r22, r9
    4ce8:	70 e0       	ldi	r23, 0x00	; 0
    4cea:	42 e0       	ldi	r20, 0x02	; 2
    4cec:	50 e0       	ldi	r21, 0x00	; 0
    4cee:	a4 0e       	add	r10, r20
    4cf0:	b5 1e       	adc	r11, r21
    4cf2:	c6 01       	movw	r24, r12
    4cf4:	0e 94 95 27 	call	0x4f2a	; 0x4f2a <strnlen_P>
    4cf8:	8c 01       	movw	r16, r24
    4cfa:	50 e8       	ldi	r21, 0x80	; 128
    4cfc:	f5 2a       	or	r15, r21
    4cfe:	f3 fe       	sbrs	r15, 3
    4d00:	07 c0       	rjmp	.+14     	; 0x4d10 <vfprintf+0x1a0>
    4d02:	1a c0       	rjmp	.+52     	; 0x4d38 <vfprintf+0x1c8>
    4d04:	80 e2       	ldi	r24, 0x20	; 32
    4d06:	90 e0       	ldi	r25, 0x00	; 0
    4d08:	b3 01       	movw	r22, r6
    4d0a:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <fputc>
    4d0e:	ea 94       	dec	r14
    4d10:	8e 2d       	mov	r24, r14
    4d12:	90 e0       	ldi	r25, 0x00	; 0
    4d14:	08 17       	cp	r16, r24
    4d16:	19 07       	cpc	r17, r25
    4d18:	a8 f3       	brcs	.-22     	; 0x4d04 <vfprintf+0x194>
    4d1a:	0e c0       	rjmp	.+28     	; 0x4d38 <vfprintf+0x1c8>
    4d1c:	f6 01       	movw	r30, r12
    4d1e:	f7 fc       	sbrc	r15, 7
    4d20:	85 91       	lpm	r24, Z+
    4d22:	f7 fe       	sbrs	r15, 7
    4d24:	81 91       	ld	r24, Z+
    4d26:	6f 01       	movw	r12, r30
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	b3 01       	movw	r22, r6
    4d2c:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <fputc>
    4d30:	e1 10       	cpse	r14, r1
    4d32:	ea 94       	dec	r14
    4d34:	01 50       	subi	r16, 0x01	; 1
    4d36:	10 40       	sbci	r17, 0x00	; 0
    4d38:	01 15       	cp	r16, r1
    4d3a:	11 05       	cpc	r17, r1
    4d3c:	79 f7       	brne	.-34     	; 0x4d1c <vfprintf+0x1ac>
    4d3e:	ea c0       	rjmp	.+468    	; 0x4f14 <vfprintf+0x3a4>
    4d40:	94 36       	cpi	r25, 0x64	; 100
    4d42:	11 f0       	breq	.+4      	; 0x4d48 <vfprintf+0x1d8>
    4d44:	99 36       	cpi	r25, 0x69	; 105
    4d46:	69 f5       	brne	.+90     	; 0x4da2 <vfprintf+0x232>
    4d48:	f7 fe       	sbrs	r15, 7
    4d4a:	08 c0       	rjmp	.+16     	; 0x4d5c <vfprintf+0x1ec>
    4d4c:	f5 01       	movw	r30, r10
    4d4e:	20 81       	ld	r18, Z
    4d50:	31 81       	ldd	r19, Z+1	; 0x01
    4d52:	42 81       	ldd	r20, Z+2	; 0x02
    4d54:	53 81       	ldd	r21, Z+3	; 0x03
    4d56:	84 e0       	ldi	r24, 0x04	; 4
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	0a c0       	rjmp	.+20     	; 0x4d70 <vfprintf+0x200>
    4d5c:	f5 01       	movw	r30, r10
    4d5e:	80 81       	ld	r24, Z
    4d60:	91 81       	ldd	r25, Z+1	; 0x01
    4d62:	9c 01       	movw	r18, r24
    4d64:	44 27       	eor	r20, r20
    4d66:	37 fd       	sbrc	r19, 7
    4d68:	40 95       	com	r20
    4d6a:	54 2f       	mov	r21, r20
    4d6c:	82 e0       	ldi	r24, 0x02	; 2
    4d6e:	90 e0       	ldi	r25, 0x00	; 0
    4d70:	a8 0e       	add	r10, r24
    4d72:	b9 1e       	adc	r11, r25
    4d74:	9f e6       	ldi	r25, 0x6F	; 111
    4d76:	f9 22       	and	r15, r25
    4d78:	57 ff       	sbrs	r21, 7
    4d7a:	09 c0       	rjmp	.+18     	; 0x4d8e <vfprintf+0x21e>
    4d7c:	50 95       	com	r21
    4d7e:	40 95       	com	r20
    4d80:	30 95       	com	r19
    4d82:	21 95       	neg	r18
    4d84:	3f 4f       	sbci	r19, 0xFF	; 255
    4d86:	4f 4f       	sbci	r20, 0xFF	; 255
    4d88:	5f 4f       	sbci	r21, 0xFF	; 255
    4d8a:	e0 e8       	ldi	r30, 0x80	; 128
    4d8c:	fe 2a       	or	r15, r30
    4d8e:	ca 01       	movw	r24, r20
    4d90:	b9 01       	movw	r22, r18
    4d92:	a1 01       	movw	r20, r2
    4d94:	2a e0       	ldi	r18, 0x0A	; 10
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	0e 94 e7 27 	call	0x4fce	; 0x4fce <__ultoa_invert>
    4d9c:	d8 2e       	mov	r13, r24
    4d9e:	d2 18       	sub	r13, r2
    4da0:	40 c0       	rjmp	.+128    	; 0x4e22 <vfprintf+0x2b2>
    4da2:	95 37       	cpi	r25, 0x75	; 117
    4da4:	29 f4       	brne	.+10     	; 0x4db0 <vfprintf+0x240>
    4da6:	1f 2d       	mov	r17, r15
    4da8:	1f 7e       	andi	r17, 0xEF	; 239
    4daa:	2a e0       	ldi	r18, 0x0A	; 10
    4dac:	30 e0       	ldi	r19, 0x00	; 0
    4dae:	1d c0       	rjmp	.+58     	; 0x4dea <vfprintf+0x27a>
    4db0:	1f 2d       	mov	r17, r15
    4db2:	19 7f       	andi	r17, 0xF9	; 249
    4db4:	9f 36       	cpi	r25, 0x6F	; 111
    4db6:	61 f0       	breq	.+24     	; 0x4dd0 <vfprintf+0x260>
    4db8:	90 37       	cpi	r25, 0x70	; 112
    4dba:	20 f4       	brcc	.+8      	; 0x4dc4 <vfprintf+0x254>
    4dbc:	98 35       	cpi	r25, 0x58	; 88
    4dbe:	09 f0       	breq	.+2      	; 0x4dc2 <vfprintf+0x252>
    4dc0:	ac c0       	rjmp	.+344    	; 0x4f1a <vfprintf+0x3aa>
    4dc2:	0f c0       	rjmp	.+30     	; 0x4de2 <vfprintf+0x272>
    4dc4:	90 37       	cpi	r25, 0x70	; 112
    4dc6:	39 f0       	breq	.+14     	; 0x4dd6 <vfprintf+0x266>
    4dc8:	98 37       	cpi	r25, 0x78	; 120
    4dca:	09 f0       	breq	.+2      	; 0x4dce <vfprintf+0x25e>
    4dcc:	a6 c0       	rjmp	.+332    	; 0x4f1a <vfprintf+0x3aa>
    4dce:	04 c0       	rjmp	.+8      	; 0x4dd8 <vfprintf+0x268>
    4dd0:	28 e0       	ldi	r18, 0x08	; 8
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
    4dd4:	0a c0       	rjmp	.+20     	; 0x4dea <vfprintf+0x27a>
    4dd6:	10 61       	ori	r17, 0x10	; 16
    4dd8:	14 fd       	sbrc	r17, 4
    4dda:	14 60       	ori	r17, 0x04	; 4
    4ddc:	20 e1       	ldi	r18, 0x10	; 16
    4dde:	30 e0       	ldi	r19, 0x00	; 0
    4de0:	04 c0       	rjmp	.+8      	; 0x4dea <vfprintf+0x27a>
    4de2:	14 fd       	sbrc	r17, 4
    4de4:	16 60       	ori	r17, 0x06	; 6
    4de6:	20 e1       	ldi	r18, 0x10	; 16
    4de8:	32 e0       	ldi	r19, 0x02	; 2
    4dea:	17 ff       	sbrs	r17, 7
    4dec:	08 c0       	rjmp	.+16     	; 0x4dfe <vfprintf+0x28e>
    4dee:	f5 01       	movw	r30, r10
    4df0:	60 81       	ld	r22, Z
    4df2:	71 81       	ldd	r23, Z+1	; 0x01
    4df4:	82 81       	ldd	r24, Z+2	; 0x02
    4df6:	93 81       	ldd	r25, Z+3	; 0x03
    4df8:	44 e0       	ldi	r20, 0x04	; 4
    4dfa:	50 e0       	ldi	r21, 0x00	; 0
    4dfc:	08 c0       	rjmp	.+16     	; 0x4e0e <vfprintf+0x29e>
    4dfe:	f5 01       	movw	r30, r10
    4e00:	80 81       	ld	r24, Z
    4e02:	91 81       	ldd	r25, Z+1	; 0x01
    4e04:	bc 01       	movw	r22, r24
    4e06:	80 e0       	ldi	r24, 0x00	; 0
    4e08:	90 e0       	ldi	r25, 0x00	; 0
    4e0a:	42 e0       	ldi	r20, 0x02	; 2
    4e0c:	50 e0       	ldi	r21, 0x00	; 0
    4e0e:	a4 0e       	add	r10, r20
    4e10:	b5 1e       	adc	r11, r21
    4e12:	a1 01       	movw	r20, r2
    4e14:	0e 94 e7 27 	call	0x4fce	; 0x4fce <__ultoa_invert>
    4e18:	d8 2e       	mov	r13, r24
    4e1a:	d2 18       	sub	r13, r2
    4e1c:	8f e7       	ldi	r24, 0x7F	; 127
    4e1e:	f8 2e       	mov	r15, r24
    4e20:	f1 22       	and	r15, r17
    4e22:	f6 fe       	sbrs	r15, 6
    4e24:	0b c0       	rjmp	.+22     	; 0x4e3c <vfprintf+0x2cc>
    4e26:	5e ef       	ldi	r21, 0xFE	; 254
    4e28:	f5 22       	and	r15, r21
    4e2a:	d9 14       	cp	r13, r9
    4e2c:	38 f4       	brcc	.+14     	; 0x4e3c <vfprintf+0x2cc>
    4e2e:	f4 fe       	sbrs	r15, 4
    4e30:	07 c0       	rjmp	.+14     	; 0x4e40 <vfprintf+0x2d0>
    4e32:	f2 fc       	sbrc	r15, 2
    4e34:	05 c0       	rjmp	.+10     	; 0x4e40 <vfprintf+0x2d0>
    4e36:	8f ee       	ldi	r24, 0xEF	; 239
    4e38:	f8 22       	and	r15, r24
    4e3a:	02 c0       	rjmp	.+4      	; 0x4e40 <vfprintf+0x2d0>
    4e3c:	1d 2d       	mov	r17, r13
    4e3e:	01 c0       	rjmp	.+2      	; 0x4e42 <vfprintf+0x2d2>
    4e40:	19 2d       	mov	r17, r9
    4e42:	f4 fe       	sbrs	r15, 4
    4e44:	0d c0       	rjmp	.+26     	; 0x4e60 <vfprintf+0x2f0>
    4e46:	fe 01       	movw	r30, r28
    4e48:	ed 0d       	add	r30, r13
    4e4a:	f1 1d       	adc	r31, r1
    4e4c:	80 81       	ld	r24, Z
    4e4e:	80 33       	cpi	r24, 0x30	; 48
    4e50:	19 f4       	brne	.+6      	; 0x4e58 <vfprintf+0x2e8>
    4e52:	99 ee       	ldi	r25, 0xE9	; 233
    4e54:	f9 22       	and	r15, r25
    4e56:	08 c0       	rjmp	.+16     	; 0x4e68 <vfprintf+0x2f8>
    4e58:	1f 5f       	subi	r17, 0xFF	; 255
    4e5a:	f2 fe       	sbrs	r15, 2
    4e5c:	05 c0       	rjmp	.+10     	; 0x4e68 <vfprintf+0x2f8>
    4e5e:	03 c0       	rjmp	.+6      	; 0x4e66 <vfprintf+0x2f6>
    4e60:	8f 2d       	mov	r24, r15
    4e62:	86 78       	andi	r24, 0x86	; 134
    4e64:	09 f0       	breq	.+2      	; 0x4e68 <vfprintf+0x2f8>
    4e66:	1f 5f       	subi	r17, 0xFF	; 255
    4e68:	0f 2d       	mov	r16, r15
    4e6a:	f3 fc       	sbrc	r15, 3
    4e6c:	14 c0       	rjmp	.+40     	; 0x4e96 <vfprintf+0x326>
    4e6e:	f0 fe       	sbrs	r15, 0
    4e70:	0f c0       	rjmp	.+30     	; 0x4e90 <vfprintf+0x320>
    4e72:	1e 15       	cp	r17, r14
    4e74:	10 f0       	brcs	.+4      	; 0x4e7a <vfprintf+0x30a>
    4e76:	9d 2c       	mov	r9, r13
    4e78:	0b c0       	rjmp	.+22     	; 0x4e90 <vfprintf+0x320>
    4e7a:	9d 2c       	mov	r9, r13
    4e7c:	9e 0c       	add	r9, r14
    4e7e:	91 1a       	sub	r9, r17
    4e80:	1e 2d       	mov	r17, r14
    4e82:	06 c0       	rjmp	.+12     	; 0x4e90 <vfprintf+0x320>
    4e84:	80 e2       	ldi	r24, 0x20	; 32
    4e86:	90 e0       	ldi	r25, 0x00	; 0
    4e88:	b3 01       	movw	r22, r6
    4e8a:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <fputc>
    4e8e:	1f 5f       	subi	r17, 0xFF	; 255
    4e90:	1e 15       	cp	r17, r14
    4e92:	c0 f3       	brcs	.-16     	; 0x4e84 <vfprintf+0x314>
    4e94:	04 c0       	rjmp	.+8      	; 0x4e9e <vfprintf+0x32e>
    4e96:	1e 15       	cp	r17, r14
    4e98:	10 f4       	brcc	.+4      	; 0x4e9e <vfprintf+0x32e>
    4e9a:	e1 1a       	sub	r14, r17
    4e9c:	01 c0       	rjmp	.+2      	; 0x4ea0 <vfprintf+0x330>
    4e9e:	ee 24       	eor	r14, r14
    4ea0:	04 ff       	sbrs	r16, 4
    4ea2:	0f c0       	rjmp	.+30     	; 0x4ec2 <vfprintf+0x352>
    4ea4:	80 e3       	ldi	r24, 0x30	; 48
    4ea6:	90 e0       	ldi	r25, 0x00	; 0
    4ea8:	b3 01       	movw	r22, r6
    4eaa:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <fputc>
    4eae:	02 ff       	sbrs	r16, 2
    4eb0:	1d c0       	rjmp	.+58     	; 0x4eec <vfprintf+0x37c>
    4eb2:	01 fd       	sbrc	r16, 1
    4eb4:	03 c0       	rjmp	.+6      	; 0x4ebc <vfprintf+0x34c>
    4eb6:	88 e7       	ldi	r24, 0x78	; 120
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	0e c0       	rjmp	.+28     	; 0x4ed8 <vfprintf+0x368>
    4ebc:	88 e5       	ldi	r24, 0x58	; 88
    4ebe:	90 e0       	ldi	r25, 0x00	; 0
    4ec0:	0b c0       	rjmp	.+22     	; 0x4ed8 <vfprintf+0x368>
    4ec2:	80 2f       	mov	r24, r16
    4ec4:	86 78       	andi	r24, 0x86	; 134
    4ec6:	91 f0       	breq	.+36     	; 0x4eec <vfprintf+0x37c>
    4ec8:	01 ff       	sbrs	r16, 1
    4eca:	02 c0       	rjmp	.+4      	; 0x4ed0 <vfprintf+0x360>
    4ecc:	8b e2       	ldi	r24, 0x2B	; 43
    4ece:	01 c0       	rjmp	.+2      	; 0x4ed2 <vfprintf+0x362>
    4ed0:	80 e2       	ldi	r24, 0x20	; 32
    4ed2:	f7 fc       	sbrc	r15, 7
    4ed4:	8d e2       	ldi	r24, 0x2D	; 45
    4ed6:	90 e0       	ldi	r25, 0x00	; 0
    4ed8:	b3 01       	movw	r22, r6
    4eda:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <fputc>
    4ede:	06 c0       	rjmp	.+12     	; 0x4eec <vfprintf+0x37c>
    4ee0:	80 e3       	ldi	r24, 0x30	; 48
    4ee2:	90 e0       	ldi	r25, 0x00	; 0
    4ee4:	b3 01       	movw	r22, r6
    4ee6:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <fputc>
    4eea:	9a 94       	dec	r9
    4eec:	d9 14       	cp	r13, r9
    4eee:	c0 f3       	brcs	.-16     	; 0x4ee0 <vfprintf+0x370>
    4ef0:	da 94       	dec	r13
    4ef2:	f1 01       	movw	r30, r2
    4ef4:	ed 0d       	add	r30, r13
    4ef6:	f1 1d       	adc	r31, r1
    4ef8:	80 81       	ld	r24, Z
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	b3 01       	movw	r22, r6
    4efe:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <fputc>
    4f02:	dd 20       	and	r13, r13
    4f04:	a9 f7       	brne	.-22     	; 0x4ef0 <vfprintf+0x380>
    4f06:	06 c0       	rjmp	.+12     	; 0x4f14 <vfprintf+0x3a4>
    4f08:	80 e2       	ldi	r24, 0x20	; 32
    4f0a:	90 e0       	ldi	r25, 0x00	; 0
    4f0c:	b3 01       	movw	r22, r6
    4f0e:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <fputc>
    4f12:	ea 94       	dec	r14
    4f14:	ee 20       	and	r14, r14
    4f16:	c1 f7       	brne	.-16     	; 0x4f08 <vfprintf+0x398>
    4f18:	43 ce       	rjmp	.-890    	; 0x4ba0 <vfprintf+0x30>
    4f1a:	f3 01       	movw	r30, r6
    4f1c:	66 81       	ldd	r22, Z+6	; 0x06
    4f1e:	77 81       	ldd	r23, Z+7	; 0x07
    4f20:	cb 01       	movw	r24, r22
    4f22:	2b 96       	adiw	r28, 0x0b	; 11
    4f24:	e2 e1       	ldi	r30, 0x12	; 18
    4f26:	0c 94 02 25 	jmp	0x4a04	; 0x4a04 <__epilogue_restores__>

00004f2a <strnlen_P>:
    4f2a:	fc 01       	movw	r30, r24
    4f2c:	05 90       	lpm	r0, Z+
    4f2e:	61 50       	subi	r22, 0x01	; 1
    4f30:	70 40       	sbci	r23, 0x00	; 0
    4f32:	01 10       	cpse	r0, r1
    4f34:	d8 f7       	brcc	.-10     	; 0x4f2c <strnlen_P+0x2>
    4f36:	80 95       	com	r24
    4f38:	90 95       	com	r25
    4f3a:	8e 0f       	add	r24, r30
    4f3c:	9f 1f       	adc	r25, r31
    4f3e:	08 95       	ret

00004f40 <strnlen>:
    4f40:	fc 01       	movw	r30, r24
    4f42:	61 50       	subi	r22, 0x01	; 1
    4f44:	70 40       	sbci	r23, 0x00	; 0
    4f46:	01 90       	ld	r0, Z+
    4f48:	01 10       	cpse	r0, r1
    4f4a:	d8 f7       	brcc	.-10     	; 0x4f42 <strnlen+0x2>
    4f4c:	80 95       	com	r24
    4f4e:	90 95       	com	r25
    4f50:	8e 0f       	add	r24, r30
    4f52:	9f 1f       	adc	r25, r31
    4f54:	08 95       	ret

00004f56 <strrev>:
    4f56:	dc 01       	movw	r26, r24
    4f58:	fc 01       	movw	r30, r24
    4f5a:	67 2f       	mov	r22, r23
    4f5c:	71 91       	ld	r23, Z+
    4f5e:	77 23       	and	r23, r23
    4f60:	e1 f7       	brne	.-8      	; 0x4f5a <strrev+0x4>
    4f62:	32 97       	sbiw	r30, 0x02	; 2
    4f64:	04 c0       	rjmp	.+8      	; 0x4f6e <strrev+0x18>
    4f66:	7c 91       	ld	r23, X
    4f68:	6d 93       	st	X+, r22
    4f6a:	70 83       	st	Z, r23
    4f6c:	62 91       	ld	r22, -Z
    4f6e:	ae 17       	cp	r26, r30
    4f70:	bf 07       	cpc	r27, r31
    4f72:	c8 f3       	brcs	.-14     	; 0x4f66 <strrev+0x10>
    4f74:	08 95       	ret

00004f76 <fputc>:
    4f76:	0f 93       	push	r16
    4f78:	1f 93       	push	r17
    4f7a:	cf 93       	push	r28
    4f7c:	df 93       	push	r29
    4f7e:	8c 01       	movw	r16, r24
    4f80:	eb 01       	movw	r28, r22
    4f82:	8b 81       	ldd	r24, Y+3	; 0x03
    4f84:	81 ff       	sbrs	r24, 1
    4f86:	1b c0       	rjmp	.+54     	; 0x4fbe <fputc+0x48>
    4f88:	82 ff       	sbrs	r24, 2
    4f8a:	0d c0       	rjmp	.+26     	; 0x4fa6 <fputc+0x30>
    4f8c:	2e 81       	ldd	r18, Y+6	; 0x06
    4f8e:	3f 81       	ldd	r19, Y+7	; 0x07
    4f90:	8c 81       	ldd	r24, Y+4	; 0x04
    4f92:	9d 81       	ldd	r25, Y+5	; 0x05
    4f94:	28 17       	cp	r18, r24
    4f96:	39 07       	cpc	r19, r25
    4f98:	64 f4       	brge	.+24     	; 0x4fb2 <fputc+0x3c>
    4f9a:	e8 81       	ld	r30, Y
    4f9c:	f9 81       	ldd	r31, Y+1	; 0x01
    4f9e:	01 93       	st	Z+, r16
    4fa0:	f9 83       	std	Y+1, r31	; 0x01
    4fa2:	e8 83       	st	Y, r30
    4fa4:	06 c0       	rjmp	.+12     	; 0x4fb2 <fputc+0x3c>
    4fa6:	e8 85       	ldd	r30, Y+8	; 0x08
    4fa8:	f9 85       	ldd	r31, Y+9	; 0x09
    4faa:	80 2f       	mov	r24, r16
    4fac:	09 95       	icall
    4fae:	89 2b       	or	r24, r25
    4fb0:	31 f4       	brne	.+12     	; 0x4fbe <fputc+0x48>
    4fb2:	8e 81       	ldd	r24, Y+6	; 0x06
    4fb4:	9f 81       	ldd	r25, Y+7	; 0x07
    4fb6:	01 96       	adiw	r24, 0x01	; 1
    4fb8:	9f 83       	std	Y+7, r25	; 0x07
    4fba:	8e 83       	std	Y+6, r24	; 0x06
    4fbc:	02 c0       	rjmp	.+4      	; 0x4fc2 <fputc+0x4c>
    4fbe:	0f ef       	ldi	r16, 0xFF	; 255
    4fc0:	1f ef       	ldi	r17, 0xFF	; 255
    4fc2:	c8 01       	movw	r24, r16
    4fc4:	df 91       	pop	r29
    4fc6:	cf 91       	pop	r28
    4fc8:	1f 91       	pop	r17
    4fca:	0f 91       	pop	r16
    4fcc:	08 95       	ret

00004fce <__ultoa_invert>:
    4fce:	fa 01       	movw	r30, r20
    4fd0:	aa 27       	eor	r26, r26
    4fd2:	28 30       	cpi	r18, 0x08	; 8
    4fd4:	51 f1       	breq	.+84     	; 0x502a <__ultoa_invert+0x5c>
    4fd6:	20 31       	cpi	r18, 0x10	; 16
    4fd8:	81 f1       	breq	.+96     	; 0x503a <__ultoa_invert+0x6c>
    4fda:	e8 94       	clt
    4fdc:	6f 93       	push	r22
    4fde:	6e 7f       	andi	r22, 0xFE	; 254
    4fe0:	6e 5f       	subi	r22, 0xFE	; 254
    4fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    4fe4:	8f 4f       	sbci	r24, 0xFF	; 255
    4fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    4fe8:	af 4f       	sbci	r26, 0xFF	; 255
    4fea:	b1 e0       	ldi	r27, 0x01	; 1
    4fec:	3e d0       	rcall	.+124    	; 0x506a <__ultoa_invert+0x9c>
    4fee:	b4 e0       	ldi	r27, 0x04	; 4
    4ff0:	3c d0       	rcall	.+120    	; 0x506a <__ultoa_invert+0x9c>
    4ff2:	67 0f       	add	r22, r23
    4ff4:	78 1f       	adc	r23, r24
    4ff6:	89 1f       	adc	r24, r25
    4ff8:	9a 1f       	adc	r25, r26
    4ffa:	a1 1d       	adc	r26, r1
    4ffc:	68 0f       	add	r22, r24
    4ffe:	79 1f       	adc	r23, r25
    5000:	8a 1f       	adc	r24, r26
    5002:	91 1d       	adc	r25, r1
    5004:	a1 1d       	adc	r26, r1
    5006:	6a 0f       	add	r22, r26
    5008:	71 1d       	adc	r23, r1
    500a:	81 1d       	adc	r24, r1
    500c:	91 1d       	adc	r25, r1
    500e:	a1 1d       	adc	r26, r1
    5010:	20 d0       	rcall	.+64     	; 0x5052 <__ultoa_invert+0x84>
    5012:	09 f4       	brne	.+2      	; 0x5016 <__ultoa_invert+0x48>
    5014:	68 94       	set
    5016:	3f 91       	pop	r19
    5018:	2a e0       	ldi	r18, 0x0A	; 10
    501a:	26 9f       	mul	r18, r22
    501c:	11 24       	eor	r1, r1
    501e:	30 19       	sub	r19, r0
    5020:	30 5d       	subi	r19, 0xD0	; 208
    5022:	31 93       	st	Z+, r19
    5024:	de f6       	brtc	.-74     	; 0x4fdc <__ultoa_invert+0xe>
    5026:	cf 01       	movw	r24, r30
    5028:	08 95       	ret
    502a:	46 2f       	mov	r20, r22
    502c:	47 70       	andi	r20, 0x07	; 7
    502e:	40 5d       	subi	r20, 0xD0	; 208
    5030:	41 93       	st	Z+, r20
    5032:	b3 e0       	ldi	r27, 0x03	; 3
    5034:	0f d0       	rcall	.+30     	; 0x5054 <__ultoa_invert+0x86>
    5036:	c9 f7       	brne	.-14     	; 0x502a <__ultoa_invert+0x5c>
    5038:	f6 cf       	rjmp	.-20     	; 0x5026 <__ultoa_invert+0x58>
    503a:	46 2f       	mov	r20, r22
    503c:	4f 70       	andi	r20, 0x0F	; 15
    503e:	40 5d       	subi	r20, 0xD0	; 208
    5040:	4a 33       	cpi	r20, 0x3A	; 58
    5042:	18 f0       	brcs	.+6      	; 0x504a <__ultoa_invert+0x7c>
    5044:	49 5d       	subi	r20, 0xD9	; 217
    5046:	31 fd       	sbrc	r19, 1
    5048:	40 52       	subi	r20, 0x20	; 32
    504a:	41 93       	st	Z+, r20
    504c:	02 d0       	rcall	.+4      	; 0x5052 <__ultoa_invert+0x84>
    504e:	a9 f7       	brne	.-22     	; 0x503a <__ultoa_invert+0x6c>
    5050:	ea cf       	rjmp	.-44     	; 0x5026 <__ultoa_invert+0x58>
    5052:	b4 e0       	ldi	r27, 0x04	; 4
    5054:	a6 95       	lsr	r26
    5056:	97 95       	ror	r25
    5058:	87 95       	ror	r24
    505a:	77 95       	ror	r23
    505c:	67 95       	ror	r22
    505e:	ba 95       	dec	r27
    5060:	c9 f7       	brne	.-14     	; 0x5054 <__ultoa_invert+0x86>
    5062:	00 97       	sbiw	r24, 0x00	; 0
    5064:	61 05       	cpc	r22, r1
    5066:	71 05       	cpc	r23, r1
    5068:	08 95       	ret
    506a:	9b 01       	movw	r18, r22
    506c:	ac 01       	movw	r20, r24
    506e:	0a 2e       	mov	r0, r26
    5070:	06 94       	lsr	r0
    5072:	57 95       	ror	r21
    5074:	47 95       	ror	r20
    5076:	37 95       	ror	r19
    5078:	27 95       	ror	r18
    507a:	ba 95       	dec	r27
    507c:	c9 f7       	brne	.-14     	; 0x5070 <__ultoa_invert+0xa2>
    507e:	62 0f       	add	r22, r18
    5080:	73 1f       	adc	r23, r19
    5082:	84 1f       	adc	r24, r20
    5084:	95 1f       	adc	r25, r21
    5086:	a0 1d       	adc	r26, r0
    5088:	08 95       	ret

0000508a <_exit>:
    508a:	f8 94       	cli

0000508c <__stop_program>:
    508c:	ff cf       	rjmp	.-2      	; 0x508c <__stop_program>
