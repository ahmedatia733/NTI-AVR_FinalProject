
NTI_FinalProject_ECU2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000593a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000452  00800060  0000593a  000059ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000ea  008004b2  008004b2  00005e20  2**0
                  ALLOC
  3 .stab         000065ac  00000000  00000000  00005e20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000053ba  00000000  00000000  0000c3cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00011786  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00011966  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  00011b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  00014429  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  00015a51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  00016e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  00017030  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0001733f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00017d95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 06 24 	jmp	0x480c	; 0x480c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__vector_10>
      2c:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 b9 14 	jmp	0x2972	; 0x2972 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	14 e0       	ldi	r17, 0x04	; 4
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f9 e5       	ldi	r31, 0x59	; 89
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	15 e0       	ldi	r17, 0x05	; 5
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b4 e0       	ldi	r27, 0x04	; 4
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 39       	cpi	r26, 0x9C	; 156
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7e 27 	call	0x4efc	; 0x4efc <main>
      8a:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3c 29 	jmp	0x5278	; 0x5278 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 ed       	ldi	r26, 0xD0	; 208
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 58 29 	jmp	0x52b0	; 0x52b0 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3c 29 	jmp	0x5278	; 0x5278 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 ed       	ldi	r24, 0xD0	; 208
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 58 29 	jmp	0x52b0	; 0x52b0 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 44 29 	jmp	0x5288	; 0x5288 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 ed       	ldi	r22, 0xD0	; 208
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 60 29 	jmp	0x52c0	; 0x52c0 <__epilogue_restores__+0x10>

0000078a <__eqsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__eqsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__eqsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__eqsf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 48 29 	jmp	0x5290	; 0x5290 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 64 29 	jmp	0x52c8	; 0x52c8 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 45 29 	jmp	0x528a	; 0x528a <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 61 29 	jmp	0x52c2	; 0x52c2 <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 4c 29 	jmp	0x5298	; 0x5298 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 68 29 	jmp	0x52d0	; 0x52d0 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 44 29 	jmp	0x5288	; 0x5288 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 60 29 	jmp	0x52c0	; 0x52c0 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e8 52       	subi	r30, 0x28	; 40
     be6:	fe 4f       	sbci	r31, 0xFE	; 254
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <M_UART_void_UARTAvalepale>:

u8 RX_Counter_UART = 0; //a total count of characters in the buffer
u8 RX_Buffer_Overflow_UART; // This flag is set on USART Receiver
// buffer overflow

u8 M_UART_void_UARTAvalepale() {
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
	return RX_Counter_UART;
     f52:	80 91 b6 04 	lds	r24, 0x04B6
}
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <M_UART_void_UARTInit>:

void M_UART_void_UARTInit(S_UART_config_t UART_config) {
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	00 d0       	rcall	.+0      	; 0xf62 <M_UART_void_UARTInit+0x6>
     f62:	00 d0       	rcall	.+0      	; 0xf64 <M_UART_void_UARTInit+0x8>
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	69 83       	std	Y+1, r22	; 0x01
     f6a:	7a 83       	std	Y+2, r23	; 0x02
     f6c:	8b 83       	std	Y+3, r24	; 0x03
     f6e:	9c 83       	std	Y+4, r25	; 0x04

	UCSRC_REG = 0b10000000;
     f70:	e0 e4       	ldi	r30, 0x40	; 64
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 e8       	ldi	r24, 0x80	; 128
     f76:	80 83       	st	Z, r24
	UCSRB_REG = 0b00000000;
     f78:	ea e2       	ldi	r30, 0x2A	; 42
     f7a:	f0 e0       	ldi	r31, 0x00	; 0
     f7c:	10 82       	st	Z, r1

	UCSRC_REG |= UART_config.UART_wordLength;   // set word length
     f7e:	a0 e4       	ldi	r26, 0x40	; 64
     f80:	b0 e0       	ldi	r27, 0x00	; 0
     f82:	e0 e4       	ldi	r30, 0x40	; 64
     f84:	f0 e0       	ldi	r31, 0x00	; 0
     f86:	90 81       	ld	r25, Z
     f88:	8a 81       	ldd	r24, Y+2	; 0x02
     f8a:	89 2b       	or	r24, r25
     f8c:	8c 93       	st	X, r24

	UCSRC_REG |= UART_config.UART_stopBits;		//  set stop bits
     f8e:	a0 e4       	ldi	r26, 0x40	; 64
     f90:	b0 e0       	ldi	r27, 0x00	; 0
     f92:	e0 e4       	ldi	r30, 0x40	; 64
     f94:	f0 e0       	ldi	r31, 0x00	; 0
     f96:	90 81       	ld	r25, Z
     f98:	8c 81       	ldd	r24, Y+4	; 0x04
     f9a:	89 2b       	or	r24, r25
     f9c:	8c 93       	st	X, r24

	if (UART_config.UART_Parity == UART_Parity_even) {
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	80 32       	cpi	r24, 0x20	; 32
     fa2:	41 f4       	brne	.+16     	; 0xfb4 <M_UART_void_UARTInit+0x58>

		SET_BIT(UCSRC_REG, UCSRC_UPM1);
     fa4:	a0 e4       	ldi	r26, 0x40	; 64
     fa6:	b0 e0       	ldi	r27, 0x00	; 0
     fa8:	e0 e4       	ldi	r30, 0x40	; 64
     faa:	f0 e0       	ldi	r31, 0x00	; 0
     fac:	80 81       	ld	r24, Z
     fae:	80 62       	ori	r24, 0x20	; 32
     fb0:	8c 93       	st	X, r24
     fb2:	11 c0       	rjmp	.+34     	; 0xfd6 <M_UART_void_UARTInit+0x7a>

	} else if (UART_config.UART_Parity == UART_Parity_odd) {
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	80 33       	cpi	r24, 0x30	; 48
     fb8:	71 f4       	brne	.+28     	; 0xfd6 <M_UART_void_UARTInit+0x7a>
		SET_BIT(UCSRC_REG, UCSRC_UPM0);
     fba:	a0 e4       	ldi	r26, 0x40	; 64
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e0 e4       	ldi	r30, 0x40	; 64
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	80 61       	ori	r24, 0x10	; 16
     fc6:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSRC_UPM1);
     fc8:	a0 e4       	ldi	r26, 0x40	; 64
     fca:	b0 e0       	ldi	r27, 0x00	; 0
     fcc:	e0 e4       	ldi	r30, 0x40	; 64
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	80 81       	ld	r24, Z
     fd2:	80 62       	ori	r24, 0x20	; 32
     fd4:	8c 93       	st	X, r24
	}

	UBRRL_REG = UART_config.UART_BaudRate; //set baudRate
     fd6:	e9 e2       	ldi	r30, 0x29	; 41
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	80 83       	st	Z, r24

	SET_BIT(UCSRB_REG, UCSRB_TXEN); // enable UART TX
     fde:	aa e2       	ldi	r26, 0x2A	; 42
     fe0:	b0 e0       	ldi	r27, 0x00	; 0
     fe2:	ea e2       	ldi	r30, 0x2A	; 42
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	88 60       	ori	r24, 0x08	; 8
     fea:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, UCSRB_RXEN); // enable UART RX
     fec:	aa e2       	ldi	r26, 0x2A	; 42
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	ea e2       	ldi	r30, 0x2A	; 42
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	80 61       	ori	r24, 0x10	; 16
     ff8:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, UCSRB_RXCIE);
     ffa:	aa e2       	ldi	r26, 0x2A	; 42
     ffc:	b0 e0       	ldi	r27, 0x00	; 0
     ffe:	ea e2       	ldi	r30, 0x2A	; 42
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	80 81       	ld	r24, Z
    1004:	80 68       	ori	r24, 0x80	; 128
    1006:	8c 93       	st	X, r24


}
    1008:	0f 90       	pop	r0
    100a:	0f 90       	pop	r0
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <__vector_13>:

ISR(USART_RXC_vect) {
    1016:	1f 92       	push	r1
    1018:	0f 92       	push	r0
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	0f 92       	push	r0
    101e:	11 24       	eor	r1, r1
    1020:	8f 93       	push	r24
    1022:	9f 93       	push	r25
    1024:	ef 93       	push	r30
    1026:	ff 93       	push	r31
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	0f 92       	push	r0
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62

	u8 rx_byte;

	rx_byte = UDR_REG;
    1032:	ec e2       	ldi	r30, 0x2C	; 44
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	89 83       	std	Y+1, r24	; 0x01
	Rx_Buffer_UART[RX_Wr_Index_UART] = rx_byte;  //s put received char in buffer
    103a:	80 91 b4 04 	lds	r24, 0x04B4
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	fc 01       	movw	r30, r24
    1044:	e5 53       	subi	r30, 0x35	; 53
    1046:	fb 4f       	sbci	r31, 0xFB	; 251
    1048:	89 81       	ldd	r24, Y+1	; 0x01
    104a:	80 83       	st	Z, r24
	if (++RX_Wr_Index_UART > UART_BUFFER_SIZE)
    104c:	80 91 b4 04 	lds	r24, 0x04B4
    1050:	8f 5f       	subi	r24, 0xFF	; 255
    1052:	80 93 b4 04 	sts	0x04B4, r24
    1056:	80 91 b4 04 	lds	r24, 0x04B4
    105a:	85 36       	cpi	r24, 0x65	; 101
    105c:	10 f0       	brcs	.+4      	; 0x1062 <__vector_13+0x4c>
		RX_Wr_Index_UART = 0;
    105e:	10 92 b4 04 	sts	0x04B4, r1
	if (++RX_Counter_UART > UART_BUFFER_SIZE) // keep a character count
    1062:	80 91 b6 04 	lds	r24, 0x04B6
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	80 93 b6 04 	sts	0x04B6, r24
    106c:	80 91 b6 04 	lds	r24, 0x04B6
    1070:	85 36       	cpi	r24, 0x65	; 101
    1072:	18 f0       	brcs	.+6      	; 0x107a <__vector_13+0x64>
	{
		RX_Counter_UART = UART_BUFFER_SIZE;  //;  if too many chars came
    1074:	84 e6       	ldi	r24, 0x64	; 100
    1076:	80 93 b6 04 	sts	0x04B6, r24

	}

}
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	ff 91       	pop	r31
    1082:	ef 91       	pop	r30
    1084:	9f 91       	pop	r25
    1086:	8f 91       	pop	r24
    1088:	0f 90       	pop	r0
    108a:	0f be       	out	0x3f, r0	; 63
    108c:	0f 90       	pop	r0
    108e:	1f 90       	pop	r1
    1090:	18 95       	reti

00001092 <M_UART_u8_receiveByteASynchNonBlocking>:

char M_UART_u8_receiveByteASynchNonBlocking(void) {
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	0f 92       	push	r0
    1098:	cd b7       	in	r28, 0x3d	; 61
    109a:	de b7       	in	r29, 0x3e	; 62

	char ch = Rx_Buffer_UART[RX_Rd_Index_UART];
    109c:	80 91 b5 04 	lds	r24, 0x04B5
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	fc 01       	movw	r30, r24
    10a6:	e5 53       	subi	r30, 0x35	; 53
    10a8:	fb 4f       	sbci	r31, 0xFB	; 251
    10aa:	80 81       	ld	r24, Z
    10ac:	89 83       	std	Y+1, r24	; 0x01
	if (RX_Counter_UART) {
    10ae:	80 91 b6 04 	lds	r24, 0x04B6
    10b2:	88 23       	and	r24, r24
    10b4:	29 f0       	breq	.+10     	; 0x10c0 <M_UART_u8_receiveByteASynchNonBlocking+0x2e>
		RX_Counter_UART--;
    10b6:	80 91 b6 04 	lds	r24, 0x04B6
    10ba:	81 50       	subi	r24, 0x01	; 1
    10bc:	80 93 b6 04 	sts	0x04B6, r24
	}

	if (++RX_Rd_Index_UART > UART_BUFFER_SIZE)
    10c0:	80 91 b5 04 	lds	r24, 0x04B5
    10c4:	8f 5f       	subi	r24, 0xFF	; 255
    10c6:	80 93 b5 04 	sts	0x04B5, r24
    10ca:	80 91 b5 04 	lds	r24, 0x04B5
    10ce:	85 36       	cpi	r24, 0x65	; 101
    10d0:	10 f0       	brcs	.+4      	; 0x10d6 <M_UART_u8_receiveByteASynchNonBlocking+0x44>
		RX_Rd_Index_UART = 0;
    10d2:	10 92 b5 04 	sts	0x04B5, r1
	return ch;
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <M_UART_void_UARTSendByte>:

void M_UART_void_UARTSendByte(u8 Byte) {
    10e0:	df 93       	push	r29
    10e2:	cf 93       	push	r28
    10e4:	0f 92       	push	r0
    10e6:	cd b7       	in	r28, 0x3d	; 61
    10e8:	de b7       	in	r29, 0x3e	; 62
    10ea:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA_REG , UCSRA_UDRE) == 0)
    10ec:	eb e2       	ldi	r30, 0x2B	; 43
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	82 95       	swap	r24
    10f4:	86 95       	lsr	r24
    10f6:	87 70       	andi	r24, 0x07	; 7
    10f8:	88 2f       	mov	r24, r24
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	81 70       	andi	r24, 0x01	; 1
    10fe:	90 70       	andi	r25, 0x00	; 0
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	a1 f3       	breq	.-24     	; 0x10ec <M_UART_void_UARTSendByte+0xc>
		;
	UDR_REG = Byte;
    1104:	ec e2       	ldi	r30, 0x2C	; 44
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	80 83       	st	Z, r24
}
    110c:	0f 90       	pop	r0
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <M_UART_void_UARTSendString>:
void M_UART_void_UARTSendString(char *strPtr) {
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <M_UART_void_UARTSendString+0x6>
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
    111e:	9a 83       	std	Y+2, r25	; 0x02
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	0a c0       	rjmp	.+20     	; 0x1138 <M_UART_void_UARTSendString+0x24>

	while (*strPtr) {
		M_UART_void_UARTSendByte(*strPtr);
    1124:	e9 81       	ldd	r30, Y+1	; 0x01
    1126:	fa 81       	ldd	r31, Y+2	; 0x02
    1128:	80 81       	ld	r24, Z
    112a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <M_UART_void_UARTSendByte>
		strPtr++;
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	9a 83       	std	Y+2, r25	; 0x02
    1136:	89 83       	std	Y+1, r24	; 0x01
		;
	UDR_REG = Byte;
}
void M_UART_void_UARTSendString(char *strPtr) {

	while (*strPtr) {
    1138:	e9 81       	ldd	r30, Y+1	; 0x01
    113a:	fa 81       	ldd	r31, Y+2	; 0x02
    113c:	80 81       	ld	r24, Z
    113e:	88 23       	and	r24, r24
    1140:	89 f7       	brne	.-30     	; 0x1124 <M_UART_void_UARTSendString+0x10>
		M_UART_void_UARTSendByte(*strPtr);
		strPtr++;
	}
}
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	cf 91       	pop	r28
    1148:	df 91       	pop	r29
    114a:	08 95       	ret

0000114c <M_UART_void_UARTSendBytes>:

void M_UART_void_UARTSendBytes(u8* byteArr , u8 Arrlength)
{
    114c:	df 93       	push	r29
    114e:	cf 93       	push	r28
    1150:	00 d0       	rcall	.+0      	; 0x1152 <M_UART_void_UARTSendBytes+0x6>
    1152:	00 d0       	rcall	.+0      	; 0x1154 <M_UART_void_UARTSendBytes+0x8>
    1154:	0f 92       	push	r0
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	9c 83       	std	Y+4, r25	; 0x04
    115c:	8b 83       	std	Y+3, r24	; 0x03
    115e:	6d 83       	std	Y+5, r22	; 0x05
	for(int i = 0 ; i < Arrlength ; i++ )
    1160:	1a 82       	std	Y+2, r1	; 0x02
    1162:	19 82       	std	Y+1, r1	; 0x01
    1164:	0f c0       	rjmp	.+30     	; 0x1184 <M_UART_void_UARTSendBytes+0x38>
	{
		M_UART_void_UARTSendByte(byteArr[i]);
    1166:	29 81       	ldd	r18, Y+1	; 0x01
    1168:	3a 81       	ldd	r19, Y+2	; 0x02
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	fc 01       	movw	r30, r24
    1170:	e2 0f       	add	r30, r18
    1172:	f3 1f       	adc	r31, r19
    1174:	80 81       	ld	r24, Z
    1176:	0e 94 70 08 	call	0x10e0	; 0x10e0 <M_UART_void_UARTSendByte>
	}
}

void M_UART_void_UARTSendBytes(u8* byteArr , u8 Arrlength)
{
	for(int i = 0 ; i < Arrlength ; i++ )
    117a:	89 81       	ldd	r24, Y+1	; 0x01
    117c:	9a 81       	ldd	r25, Y+2	; 0x02
    117e:	01 96       	adiw	r24, 0x01	; 1
    1180:	9a 83       	std	Y+2, r25	; 0x02
    1182:	89 83       	std	Y+1, r24	; 0x01
    1184:	8d 81       	ldd	r24, Y+5	; 0x05
    1186:	28 2f       	mov	r18, r24
    1188:	30 e0       	ldi	r19, 0x00	; 0
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	82 17       	cp	r24, r18
    1190:	93 07       	cpc	r25, r19
    1192:	4c f3       	brlt	.-46     	; 0x1166 <M_UART_void_UARTSendBytes+0x1a>
	{
		M_UART_void_UARTSendByte(byteArr[i]);
	}
}
    1194:	0f 90       	pop	r0
    1196:	0f 90       	pop	r0
    1198:	0f 90       	pop	r0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	cf 91       	pop	r28
    11a0:	df 91       	pop	r29
    11a2:	08 95       	ret

000011a4 <M_UART_void_ReceiveString>:

void M_UART_void_ReceiveString(char *strPtr) {
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	df 93       	push	r29
    11aa:	cf 93       	push	r28
    11ac:	00 d0       	rcall	.+0      	; 0x11ae <M_UART_void_ReceiveString+0xa>
    11ae:	00 d0       	rcall	.+0      	; 0x11b0 <M_UART_void_ReceiveString+0xc>
    11b0:	cd b7       	in	r28, 0x3d	; 61
    11b2:	de b7       	in	r29, 0x3e	; 62
    11b4:	9c 83       	std	Y+4, r25	; 0x04
    11b6:	8b 83       	std	Y+3, r24	; 0x03
	//init_millis(16000000);
	int counter = 0;
    11b8:	1a 82       	std	Y+2, r1	; 0x02
    11ba:	19 82       	std	Y+1, r1	; 0x01
    11bc:	1a c0       	rjmp	.+52     	; 0x11f2 <M_UART_void_ReceiveString+0x4e>
	//long int time = millis();
	//while (1) {
		//if ((time + 500) < millis())
			//break;
		while (RX_Counter_UART > 0) {
			*(strPtr + counter) = M_UART_u8_receiveByteASynchNonBlocking();
    11be:	29 81       	ldd	r18, Y+1	; 0x01
    11c0:	3a 81       	ldd	r19, Y+2	; 0x02
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	8c 01       	movw	r16, r24
    11c8:	02 0f       	add	r16, r18
    11ca:	13 1f       	adc	r17, r19
    11cc:	0e 94 49 08 	call	0x1092	; 0x1092 <M_UART_u8_receiveByteASynchNonBlocking>
    11d0:	f8 01       	movw	r30, r16
    11d2:	80 83       	st	Z, r24
			if (*(strPtr + counter))
    11d4:	29 81       	ldd	r18, Y+1	; 0x01
    11d6:	3a 81       	ldd	r19, Y+2	; 0x02
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	fc 01       	movw	r30, r24
    11de:	e2 0f       	add	r30, r18
    11e0:	f3 1f       	adc	r31, r19
    11e2:	80 81       	ld	r24, Z
    11e4:	88 23       	and	r24, r24
    11e6:	29 f0       	breq	.+10     	; 0x11f2 <M_UART_void_ReceiveString+0x4e>
				counter++;
    11e8:	89 81       	ldd	r24, Y+1	; 0x01
    11ea:	9a 81       	ldd	r25, Y+2	; 0x02
    11ec:	01 96       	adiw	r24, 0x01	; 1
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	89 83       	std	Y+1, r24	; 0x01
	int counter = 0;
	//long int time = millis();
	//while (1) {
		//if ((time + 500) < millis())
			//break;
		while (RX_Counter_UART > 0) {
    11f2:	80 91 b6 04 	lds	r24, 0x04B6
    11f6:	88 23       	and	r24, r24
    11f8:	11 f7       	brne	.-60     	; 0x11be <M_UART_void_ReceiveString+0x1a>
			if (*(strPtr + counter))
				counter++;
		}
	//}

	*(strPtr + counter) = 0;
    11fa:	89 81       	ldd	r24, Y+1	; 0x01
    11fc:	9a 81       	ldd	r25, Y+2	; 0x02
    11fe:	2b 81       	ldd	r18, Y+3	; 0x03
    1200:	3c 81       	ldd	r19, Y+4	; 0x04
    1202:	f9 01       	movw	r30, r18
    1204:	e8 0f       	add	r30, r24
    1206:	f9 1f       	adc	r31, r25
    1208:	10 82       	st	Z, r1

}
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	0f 90       	pop	r0
    1212:	cf 91       	pop	r28
    1214:	df 91       	pop	r29
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	08 95       	ret

0000121c <M_Timer0_void_Init>:
static unsigned int G_Timer0Remaining = 0;

volatile static long unsigned int GcounterOverFlow = 0;

void M_Timer0_void_Init(Timer0_Mode_t Mode, Timer0_OC0_Mode_t OC0_Mode,
		Timer_prescaler_t prescaler) {
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	00 d0       	rcall	.+0      	; 0x1222 <M_Timer0_void_Init+0x6>
    1222:	0f 92       	push	r0
    1224:	cd b7       	in	r28, 0x3d	; 61
    1226:	de b7       	in	r29, 0x3e	; 62
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	6a 83       	std	Y+2, r22	; 0x02
    122c:	4b 83       	std	Y+3, r20	; 0x03
	G_prescaler = prescaler;
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	80 93 bb 04 	sts	0x04BB, r24

	TCCR0_REG &= CLEAR_PRESCALLER_MASK;
    1234:	a3 e5       	ldi	r26, 0x53	; 83
    1236:	b0 e0       	ldi	r27, 0x00	; 0
    1238:	e3 e5       	ldi	r30, 0x53	; 83
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	80 81       	ld	r24, Z
    123e:	88 7f       	andi	r24, 0xF8	; 248
    1240:	8c 93       	st	X, r24

	TCCR0_REG &= CLEAR_TIMER_MODE_REG;
    1242:	a3 e5       	ldi	r26, 0x53	; 83
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e3 e5       	ldi	r30, 0x53	; 83
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	87 7d       	andi	r24, 0xD7	; 215
    124e:	8c 93       	st	X, r24
	TCCR0_REG |= Mode;
    1250:	a3 e5       	ldi	r26, 0x53	; 83
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e3 e5       	ldi	r30, 0x53	; 83
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	90 81       	ld	r25, Z
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	89 2b       	or	r24, r25
    125e:	8c 93       	st	X, r24

	TCCR0_REG &= CLEAR_WAVEG_MASK;
    1260:	a3 e5       	ldi	r26, 0x53	; 83
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	e3 e5       	ldi	r30, 0x53	; 83
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	8f 7c       	andi	r24, 0xCF	; 207
    126c:	8c 93       	st	X, r24
	TCCR0_REG |= OC0_Mode;
    126e:	a3 e5       	ldi	r26, 0x53	; 83
    1270:	b0 e0       	ldi	r27, 0x00	; 0
    1272:	e3 e5       	ldi	r30, 0x53	; 83
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	90 81       	ld	r25, Z
    1278:	8a 81       	ldd	r24, Y+2	; 0x02
    127a:	89 2b       	or	r24, r25
    127c:	8c 93       	st	X, r24
}
    127e:	0f 90       	pop	r0
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	cf 91       	pop	r28
    1286:	df 91       	pop	r29
    1288:	08 95       	ret

0000128a <M_Timer0_void_start>:

void M_Timer0_void_start() {
    128a:	df 93       	push	r29
    128c:	cf 93       	push	r28
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG &= CLEAR_PRESCALLER_MASK;
    1292:	a3 e5       	ldi	r26, 0x53	; 83
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e3 e5       	ldi	r30, 0x53	; 83
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	88 7f       	andi	r24, 0xF8	; 248
    129e:	8c 93       	st	X, r24
	TCNT0_REG = G_Timer0Remaining;//Check mode here
    12a0:	e2 e5       	ldi	r30, 0x52	; 82
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 91 bf 04 	lds	r24, 0x04BF
    12a8:	90 91 c0 04 	lds	r25, 0x04C0
    12ac:	80 83       	st	Z, r24
	TCCR0_REG |= G_prescaler;
    12ae:	a3 e5       	ldi	r26, 0x53	; 83
    12b0:	b0 e0       	ldi	r27, 0x00	; 0
    12b2:	e3 e5       	ldi	r30, 0x53	; 83
    12b4:	f0 e0       	ldi	r31, 0x00	; 0
    12b6:	90 81       	ld	r25, Z
    12b8:	80 91 bb 04 	lds	r24, 0x04BB
    12bc:	89 2b       	or	r24, r25
    12be:	8c 93       	st	X, r24
}
    12c0:	cf 91       	pop	r28
    12c2:	df 91       	pop	r29
    12c4:	08 95       	ret

000012c6 <M_Timer0_void_stop>:

void M_Timer0_void_stop() {
    12c6:	df 93       	push	r29
    12c8:	cf 93       	push	r28
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
	TCCR0_REG &= CLEAR_PRESCALLER_MASK;
    12ce:	a3 e5       	ldi	r26, 0x53	; 83
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e3 e5       	ldi	r30, 0x53	; 83
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	88 7f       	andi	r24, 0xF8	; 248
    12da:	8c 93       	st	X, r24
}
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <M_Timer0_void_GetCounts>:

long long unsigned int M_Timer0_void_GetCounts() {
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
    12fa:	e3 97       	sbiw	r28, 0x33	; 51
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
	long long unsigned int counts = GcounterOverFlow*256;
    1306:	80 91 c1 04 	lds	r24, 0x04C1
    130a:	90 91 c2 04 	lds	r25, 0x04C2
    130e:	a0 91 c3 04 	lds	r26, 0x04C3
    1312:	b0 91 c4 04 	lds	r27, 0x04C4
    1316:	ba 2f       	mov	r27, r26
    1318:	a9 2f       	mov	r26, r25
    131a:	98 2f       	mov	r25, r24
    131c:	88 27       	eor	r24, r24
    131e:	9c 01       	movw	r18, r24
    1320:	ad 01       	movw	r20, r26
    1322:	60 e0       	ldi	r22, 0x00	; 0
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	29 83       	std	Y+1, r18	; 0x01
    132c:	3a 83       	std	Y+2, r19	; 0x02
    132e:	4b 83       	std	Y+3, r20	; 0x03
    1330:	5c 83       	std	Y+4, r21	; 0x04
    1332:	6d 83       	std	Y+5, r22	; 0x05
    1334:	7e 83       	std	Y+6, r23	; 0x06
    1336:	8f 83       	std	Y+7, r24	; 0x07
    1338:	98 87       	std	Y+8, r25	; 0x08
	counts += TCNT0_REG ;
    133a:	e2 e5       	ldi	r30, 0x52	; 82
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	08 2f       	mov	r16, r24
    1342:	10 e0       	ldi	r17, 0x00	; 0
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	50 e0       	ldi	r21, 0x00	; 0
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	09 87       	std	Y+9, r16	; 0x09
    1352:	1a 87       	std	Y+10, r17	; 0x0a
    1354:	2b 87       	std	Y+11, r18	; 0x0b
    1356:	3c 87       	std	Y+12, r19	; 0x0c
    1358:	4d 87       	std	Y+13, r20	; 0x0d
    135a:	5e 87       	std	Y+14, r21	; 0x0e
    135c:	6f 87       	std	Y+15, r22	; 0x0f
    135e:	78 8b       	std	Y+16, r23	; 0x10
    1360:	19 81       	ldd	r17, Y+1	; 0x01
    1362:	19 8b       	std	Y+17, r17	; 0x11
    1364:	2a 81       	ldd	r18, Y+2	; 0x02
    1366:	2a 8b       	std	Y+18, r18	; 0x12
    1368:	3b 81       	ldd	r19, Y+3	; 0x03
    136a:	3b 8b       	std	Y+19, r19	; 0x13
    136c:	4c 81       	ldd	r20, Y+4	; 0x04
    136e:	4c 8b       	std	Y+20, r20	; 0x14
    1370:	5d 81       	ldd	r21, Y+5	; 0x05
    1372:	5d 8b       	std	Y+21, r21	; 0x15
    1374:	6e 81       	ldd	r22, Y+6	; 0x06
    1376:	6e 8b       	std	Y+22, r22	; 0x16
    1378:	7f 81       	ldd	r23, Y+7	; 0x07
    137a:	7f 8b       	std	Y+23, r23	; 0x17
    137c:	88 85       	ldd	r24, Y+8	; 0x08
    137e:	88 8f       	std	Y+24, r24	; 0x18
    1380:	99 89       	ldd	r25, Y+17	; 0x11
    1382:	09 85       	ldd	r16, Y+9	; 0x09
    1384:	90 0f       	add	r25, r16
    1386:	99 8f       	std	Y+25, r25	; 0x19
    1388:	11 e0       	ldi	r17, 0x01	; 1
    138a:	19 a3       	std	Y+33, r17	; 0x21
    138c:	29 8d       	ldd	r18, Y+25	; 0x19
    138e:	39 89       	ldd	r19, Y+17	; 0x11
    1390:	23 17       	cp	r18, r19
    1392:	08 f0       	brcs	.+2      	; 0x1396 <M_Timer0_void_GetCounts+0xb4>
    1394:	19 a2       	std	Y+33, r1	; 0x21
    1396:	4a 89       	ldd	r20, Y+18	; 0x12
    1398:	5a 85       	ldd	r21, Y+10	; 0x0a
    139a:	45 0f       	add	r20, r21
    139c:	4a 8f       	std	Y+26, r20	; 0x1a
    139e:	61 e0       	ldi	r22, 0x01	; 1
    13a0:	6a a3       	std	Y+34, r22	; 0x22
    13a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13a4:	8a 89       	ldd	r24, Y+18	; 0x12
    13a6:	78 17       	cp	r23, r24
    13a8:	08 f0       	brcs	.+2      	; 0x13ac <M_Timer0_void_GetCounts+0xca>
    13aa:	1a a2       	std	Y+34, r1	; 0x22
    13ac:	99 a1       	ldd	r25, Y+33	; 0x21
    13ae:	0a 8d       	ldd	r16, Y+26	; 0x1a
    13b0:	90 0f       	add	r25, r16
    13b2:	9b a3       	std	Y+35, r25	; 0x23
    13b4:	11 e0       	ldi	r17, 0x01	; 1
    13b6:	1c a3       	std	Y+36, r17	; 0x24
    13b8:	2b a1       	ldd	r18, Y+35	; 0x23
    13ba:	3a 8d       	ldd	r19, Y+26	; 0x1a
    13bc:	23 17       	cp	r18, r19
    13be:	08 f0       	brcs	.+2      	; 0x13c2 <M_Timer0_void_GetCounts+0xe0>
    13c0:	1c a2       	std	Y+36, r1	; 0x24
    13c2:	4a a1       	ldd	r20, Y+34	; 0x22
    13c4:	5c a1       	ldd	r21, Y+36	; 0x24
    13c6:	45 2b       	or	r20, r21
    13c8:	4a a3       	std	Y+34, r20	; 0x22
    13ca:	6b a1       	ldd	r22, Y+35	; 0x23
    13cc:	6a 8f       	std	Y+26, r22	; 0x1a
    13ce:	7b 89       	ldd	r23, Y+19	; 0x13
    13d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    13d2:	78 0f       	add	r23, r24
    13d4:	7b 8f       	std	Y+27, r23	; 0x1b
    13d6:	91 e0       	ldi	r25, 0x01	; 1
    13d8:	9d a3       	std	Y+37, r25	; 0x25
    13da:	0b 8d       	ldd	r16, Y+27	; 0x1b
    13dc:	1b 89       	ldd	r17, Y+19	; 0x13
    13de:	01 17       	cp	r16, r17
    13e0:	08 f0       	brcs	.+2      	; 0x13e4 <M_Timer0_void_GetCounts+0x102>
    13e2:	1d a2       	std	Y+37, r1	; 0x25
    13e4:	2a a1       	ldd	r18, Y+34	; 0x22
    13e6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    13e8:	23 0f       	add	r18, r19
    13ea:	2e a3       	std	Y+38, r18	; 0x26
    13ec:	41 e0       	ldi	r20, 0x01	; 1
    13ee:	4f a3       	std	Y+39, r20	; 0x27
    13f0:	5e a1       	ldd	r21, Y+38	; 0x26
    13f2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    13f4:	56 17       	cp	r21, r22
    13f6:	08 f0       	brcs	.+2      	; 0x13fa <M_Timer0_void_GetCounts+0x118>
    13f8:	1f a2       	std	Y+39, r1	; 0x27
    13fa:	7d a1       	ldd	r23, Y+37	; 0x25
    13fc:	8f a1       	ldd	r24, Y+39	; 0x27
    13fe:	78 2b       	or	r23, r24
    1400:	7d a3       	std	Y+37, r23	; 0x25
    1402:	9e a1       	ldd	r25, Y+38	; 0x26
    1404:	9b 8f       	std	Y+27, r25	; 0x1b
    1406:	0c 89       	ldd	r16, Y+20	; 0x14
    1408:	1c 85       	ldd	r17, Y+12	; 0x0c
    140a:	01 0f       	add	r16, r17
    140c:	0c 8f       	std	Y+28, r16	; 0x1c
    140e:	21 e0       	ldi	r18, 0x01	; 1
    1410:	28 a7       	std	Y+40, r18	; 0x28
    1412:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1414:	4c 89       	ldd	r20, Y+20	; 0x14
    1416:	34 17       	cp	r19, r20
    1418:	08 f0       	brcs	.+2      	; 0x141c <M_Timer0_void_GetCounts+0x13a>
    141a:	18 a6       	std	Y+40, r1	; 0x28
    141c:	5d a1       	ldd	r21, Y+37	; 0x25
    141e:	6c 8d       	ldd	r22, Y+28	; 0x1c
    1420:	56 0f       	add	r21, r22
    1422:	59 a7       	std	Y+41, r21	; 0x29
    1424:	71 e0       	ldi	r23, 0x01	; 1
    1426:	7a a7       	std	Y+42, r23	; 0x2a
    1428:	89 a5       	ldd	r24, Y+41	; 0x29
    142a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    142c:	89 17       	cp	r24, r25
    142e:	08 f0       	brcs	.+2      	; 0x1432 <M_Timer0_void_GetCounts+0x150>
    1430:	1a a6       	std	Y+42, r1	; 0x2a
    1432:	08 a5       	ldd	r16, Y+40	; 0x28
    1434:	1a a5       	ldd	r17, Y+42	; 0x2a
    1436:	01 2b       	or	r16, r17
    1438:	08 a7       	std	Y+40, r16	; 0x28
    143a:	29 a5       	ldd	r18, Y+41	; 0x29
    143c:	2c 8f       	std	Y+28, r18	; 0x1c
    143e:	3d 89       	ldd	r19, Y+21	; 0x15
    1440:	4d 85       	ldd	r20, Y+13	; 0x0d
    1442:	34 0f       	add	r19, r20
    1444:	3d 8f       	std	Y+29, r19	; 0x1d
    1446:	51 e0       	ldi	r21, 0x01	; 1
    1448:	5b a7       	std	Y+43, r21	; 0x2b
    144a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    144c:	7d 89       	ldd	r23, Y+21	; 0x15
    144e:	67 17       	cp	r22, r23
    1450:	08 f0       	brcs	.+2      	; 0x1454 <M_Timer0_void_GetCounts+0x172>
    1452:	1b a6       	std	Y+43, r1	; 0x2b
    1454:	88 a5       	ldd	r24, Y+40	; 0x28
    1456:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1458:	89 0f       	add	r24, r25
    145a:	8c a7       	std	Y+44, r24	; 0x2c
    145c:	01 e0       	ldi	r16, 0x01	; 1
    145e:	0d a7       	std	Y+45, r16	; 0x2d
    1460:	1c a5       	ldd	r17, Y+44	; 0x2c
    1462:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1464:	12 17       	cp	r17, r18
    1466:	08 f0       	brcs	.+2      	; 0x146a <M_Timer0_void_GetCounts+0x188>
    1468:	1d a6       	std	Y+45, r1	; 0x2d
    146a:	3b a5       	ldd	r19, Y+43	; 0x2b
    146c:	4d a5       	ldd	r20, Y+45	; 0x2d
    146e:	34 2b       	or	r19, r20
    1470:	3b a7       	std	Y+43, r19	; 0x2b
    1472:	5c a5       	ldd	r21, Y+44	; 0x2c
    1474:	5d 8f       	std	Y+29, r21	; 0x1d
    1476:	6e 89       	ldd	r22, Y+22	; 0x16
    1478:	7e 85       	ldd	r23, Y+14	; 0x0e
    147a:	67 0f       	add	r22, r23
    147c:	6e 8f       	std	Y+30, r22	; 0x1e
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	8e a7       	std	Y+46, r24	; 0x2e
    1482:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1484:	0e 89       	ldd	r16, Y+22	; 0x16
    1486:	90 17       	cp	r25, r16
    1488:	08 f0       	brcs	.+2      	; 0x148c <M_Timer0_void_GetCounts+0x1aa>
    148a:	1e a6       	std	Y+46, r1	; 0x2e
    148c:	1b a5       	ldd	r17, Y+43	; 0x2b
    148e:	2e 8d       	ldd	r18, Y+30	; 0x1e
    1490:	12 0f       	add	r17, r18
    1492:	1f a7       	std	Y+47, r17	; 0x2f
    1494:	31 e0       	ldi	r19, 0x01	; 1
    1496:	38 ab       	std	Y+48, r19	; 0x30
    1498:	4f a5       	ldd	r20, Y+47	; 0x2f
    149a:	5e 8d       	ldd	r21, Y+30	; 0x1e
    149c:	45 17       	cp	r20, r21
    149e:	08 f0       	brcs	.+2      	; 0x14a2 <M_Timer0_void_GetCounts+0x1c0>
    14a0:	18 aa       	std	Y+48, r1	; 0x30
    14a2:	6e a5       	ldd	r22, Y+46	; 0x2e
    14a4:	78 a9       	ldd	r23, Y+48	; 0x30
    14a6:	67 2b       	or	r22, r23
    14a8:	6e a7       	std	Y+46, r22	; 0x2e
    14aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    14ac:	8e 8f       	std	Y+30, r24	; 0x1e
    14ae:	9f 89       	ldd	r25, Y+23	; 0x17
    14b0:	0f 85       	ldd	r16, Y+15	; 0x0f
    14b2:	90 0f       	add	r25, r16
    14b4:	9f 8f       	std	Y+31, r25	; 0x1f
    14b6:	11 e0       	ldi	r17, 0x01	; 1
    14b8:	19 ab       	std	Y+49, r17	; 0x31
    14ba:	2f 8d       	ldd	r18, Y+31	; 0x1f
    14bc:	3f 89       	ldd	r19, Y+23	; 0x17
    14be:	23 17       	cp	r18, r19
    14c0:	08 f0       	brcs	.+2      	; 0x14c4 <M_Timer0_void_GetCounts+0x1e2>
    14c2:	19 aa       	std	Y+49, r1	; 0x31
    14c4:	4e a5       	ldd	r20, Y+46	; 0x2e
    14c6:	5f 8d       	ldd	r21, Y+31	; 0x1f
    14c8:	45 0f       	add	r20, r21
    14ca:	4a ab       	std	Y+50, r20	; 0x32
    14cc:	61 e0       	ldi	r22, 0x01	; 1
    14ce:	6b ab       	std	Y+51, r22	; 0x33
    14d0:	7a a9       	ldd	r23, Y+50	; 0x32
    14d2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14d4:	78 17       	cp	r23, r24
    14d6:	08 f0       	brcs	.+2      	; 0x14da <M_Timer0_void_GetCounts+0x1f8>
    14d8:	1b aa       	std	Y+51, r1	; 0x33
    14da:	99 a9       	ldd	r25, Y+49	; 0x31
    14dc:	0b a9       	ldd	r16, Y+51	; 0x33
    14de:	90 2b       	or	r25, r16
    14e0:	99 ab       	std	Y+49, r25	; 0x31
    14e2:	1a a9       	ldd	r17, Y+50	; 0x32
    14e4:	1f 8f       	std	Y+31, r17	; 0x1f
    14e6:	28 8d       	ldd	r18, Y+24	; 0x18
    14e8:	38 89       	ldd	r19, Y+16	; 0x10
    14ea:	23 0f       	add	r18, r19
    14ec:	28 a3       	std	Y+32, r18	; 0x20
    14ee:	89 a9       	ldd	r24, Y+49	; 0x31
    14f0:	48 a1       	ldd	r20, Y+32	; 0x20
    14f2:	84 0f       	add	r24, r20
    14f4:	88 a3       	std	Y+32, r24	; 0x20
    14f6:	59 8d       	ldd	r21, Y+25	; 0x19
    14f8:	59 83       	std	Y+1, r21	; 0x01
    14fa:	6a 8d       	ldd	r22, Y+26	; 0x1a
    14fc:	6a 83       	std	Y+2, r22	; 0x02
    14fe:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1500:	7b 83       	std	Y+3, r23	; 0x03
    1502:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1504:	8c 83       	std	Y+4, r24	; 0x04
    1506:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1508:	9d 83       	std	Y+5, r25	; 0x05
    150a:	0e 8d       	ldd	r16, Y+30	; 0x1e
    150c:	0e 83       	std	Y+6, r16	; 0x06
    150e:	1f 8d       	ldd	r17, Y+31	; 0x1f
    1510:	1f 83       	std	Y+7, r17	; 0x07
    1512:	28 a1       	ldd	r18, Y+32	; 0x20
    1514:	28 87       	std	Y+8, r18	; 0x08
	return counts;
    1516:	29 81       	ldd	r18, Y+1	; 0x01
    1518:	3a 81       	ldd	r19, Y+2	; 0x02
    151a:	4b 81       	ldd	r20, Y+3	; 0x03
    151c:	5c 81       	ldd	r21, Y+4	; 0x04
    151e:	6d 81       	ldd	r22, Y+5	; 0x05
    1520:	7e 81       	ldd	r23, Y+6	; 0x06
    1522:	8f 81       	ldd	r24, Y+7	; 0x07
    1524:	98 85       	ldd	r25, Y+8	; 0x08
    1526:	a2 2e       	mov	r10, r18
    1528:	b3 2e       	mov	r11, r19
    152a:	c4 2e       	mov	r12, r20
    152c:	d5 2e       	mov	r13, r21
    152e:	e6 2e       	mov	r14, r22
    1530:	f7 2e       	mov	r15, r23
    1532:	08 2f       	mov	r16, r24
    1534:	19 2f       	mov	r17, r25
}
    1536:	2a 2d       	mov	r18, r10
    1538:	3b 2d       	mov	r19, r11
    153a:	4c 2d       	mov	r20, r12
    153c:	5d 2d       	mov	r21, r13
    153e:	6e 2d       	mov	r22, r14
    1540:	7f 2d       	mov	r23, r15
    1542:	80 2f       	mov	r24, r16
    1544:	91 2f       	mov	r25, r17
    1546:	e3 96       	adiw	r28, 0x33	; 51
    1548:	0f b6       	in	r0, 0x3f	; 63
    154a:	f8 94       	cli
    154c:	de bf       	out	0x3e, r29	; 62
    154e:	0f be       	out	0x3f, r0	; 63
    1550:	cd bf       	out	0x3d, r28	; 61
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	df 90       	pop	r13
    1560:	cf 90       	pop	r12
    1562:	bf 90       	pop	r11
    1564:	af 90       	pop	r10
    1566:	08 95       	ret

00001568 <M_Timer0_void_setDelayTimeMilliSec>:

void M_Timer0_void_setDelayTimeMilliSec(u32 millis){
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	cd b7       	in	r28, 0x3d	; 61
    156e:	de b7       	in	r29, 0x3e	; 62
    1570:	2c 97       	sbiw	r28, 0x0c	; 12
    1572:	0f b6       	in	r0, 0x3f	; 63
    1574:	f8 94       	cli
    1576:	de bf       	out	0x3e, r29	; 62
    1578:	0f be       	out	0x3f, r0	; 63
    157a:	cd bf       	out	0x3d, r28	; 61
    157c:	69 87       	std	Y+9, r22	; 0x09
    157e:	7a 87       	std	Y+10, r23	; 0x0a
    1580:	8b 87       	std	Y+11, r24	; 0x0b
    1582:	9c 87       	std	Y+12, r25	; 0x0c

	u32 tikTime = G_prescalerArr[G_prescaler-1] / (F_CPU / 1000000);
    1584:	80 91 bb 04 	lds	r24, 0x04BB
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	01 97       	sbiw	r24, 0x01	; 1
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	fc 01       	movw	r30, r24
    1598:	e8 52       	subi	r30, 0x28	; 40
    159a:	fd 4f       	sbci	r31, 0xFD	; 253
    159c:	80 81       	ld	r24, Z
    159e:	91 81       	ldd	r25, Z+1	; 0x01
    15a0:	a2 81       	ldd	r26, Z+2	; 0x02
    15a2:	b3 81       	ldd	r27, Z+3	; 0x03
    15a4:	68 94       	set
    15a6:	13 f8       	bld	r1, 3
    15a8:	b6 95       	lsr	r27
    15aa:	a7 95       	ror	r26
    15ac:	97 95       	ror	r25
    15ae:	87 95       	ror	r24
    15b0:	16 94       	lsr	r1
    15b2:	d1 f7       	brne	.-12     	; 0x15a8 <M_Timer0_void_setDelayTimeMilliSec+0x40>
    15b4:	8d 83       	std	Y+5, r24	; 0x05
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	af 83       	std	Y+7, r26	; 0x07
    15ba:	b8 87       	std	Y+8, r27	; 0x08
	u32 numberOfTiks = (millis * 1000) / tikTime;
    15bc:	89 85       	ldd	r24, Y+9	; 0x09
    15be:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c0:	ab 85       	ldd	r26, Y+11	; 0x0b
    15c2:	bc 85       	ldd	r27, Y+12	; 0x0c
    15c4:	28 ee       	ldi	r18, 0xE8	; 232
    15c6:	33 e0       	ldi	r19, 0x03	; 3
    15c8:	40 e0       	ldi	r20, 0x00	; 0
    15ca:	50 e0       	ldi	r21, 0x00	; 0
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	0e 94 c0 28 	call	0x5180	; 0x5180 <__mulsi3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	2d 81       	ldd	r18, Y+5	; 0x05
    15da:	3e 81       	ldd	r19, Y+6	; 0x06
    15dc:	4f 81       	ldd	r20, Y+7	; 0x07
    15de:	58 85       	ldd	r21, Y+8	; 0x08
    15e0:	bc 01       	movw	r22, r24
    15e2:	cd 01       	movw	r24, r26
    15e4:	0e 94 ff 28 	call	0x51fe	; 0x51fe <__udivmodsi4>
    15e8:	da 01       	movw	r26, r20
    15ea:	c9 01       	movw	r24, r18
    15ec:	89 83       	std	Y+1, r24	; 0x01
    15ee:	9a 83       	std	Y+2, r25	; 0x02
    15f0:	ab 83       	std	Y+3, r26	; 0x03
    15f2:	bc 83       	std	Y+4, r27	; 0x04
	G_NumberOfOFV = numberOfTiks / 256;
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	ab 81       	ldd	r26, Y+3	; 0x03
    15fa:	bc 81       	ldd	r27, Y+4	; 0x04
    15fc:	89 2f       	mov	r24, r25
    15fe:	9a 2f       	mov	r25, r26
    1600:	ab 2f       	mov	r26, r27
    1602:	bb 27       	eor	r27, r27
    1604:	90 93 be 04 	sts	0x04BE, r25
    1608:	80 93 bd 04 	sts	0x04BD, r24
	G_Timer0Remaining = numberOfTiks % 256;
    160c:	89 81       	ldd	r24, Y+1	; 0x01
    160e:	9a 81       	ldd	r25, Y+2	; 0x02
    1610:	90 70       	andi	r25, 0x00	; 0
    1612:	90 93 c0 04 	sts	0x04C0, r25
    1616:	80 93 bf 04 	sts	0x04BF, r24
	if (G_Timer0Remaining > 0 ) {G_NumberOfOFV++;}
    161a:	80 91 bf 04 	lds	r24, 0x04BF
    161e:	90 91 c0 04 	lds	r25, 0x04C0
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	49 f0       	breq	.+18     	; 0x1638 <M_Timer0_void_setDelayTimeMilliSec+0xd0>
    1626:	80 91 bd 04 	lds	r24, 0x04BD
    162a:	90 91 be 04 	lds	r25, 0x04BE
    162e:	01 96       	adiw	r24, 0x01	; 1
    1630:	90 93 be 04 	sts	0x04BE, r25
    1634:	80 93 bd 04 	sts	0x04BD, r24
	G_Timer0Remaining = 265 - G_Timer0Remaining;
    1638:	80 91 bf 04 	lds	r24, 0x04BF
    163c:	90 91 c0 04 	lds	r25, 0x04C0
    1640:	29 e0       	ldi	r18, 0x09	; 9
    1642:	31 e0       	ldi	r19, 0x01	; 1
    1644:	a9 01       	movw	r20, r18
    1646:	48 1b       	sub	r20, r24
    1648:	59 0b       	sbc	r21, r25
    164a:	ca 01       	movw	r24, r20
    164c:	90 93 c0 04 	sts	0x04C0, r25
    1650:	80 93 bf 04 	sts	0x04BF, r24

}
    1654:	2c 96       	adiw	r28, 0x0c	; 12
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <M_Timer0_void_setFastPWM>:


void M_Timer0_void_setFastPWM(u8 dutyCycle ,u32 freq)
{
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	cd b7       	in	r28, 0x3d	; 61
    1670:	de b7       	in	r29, 0x3e	; 62
    1672:	63 97       	sbiw	r28, 0x13	; 19
    1674:	0f b6       	in	r0, 0x3f	; 63
    1676:	f8 94       	cli
    1678:	de bf       	out	0x3e, r29	; 62
    167a:	0f be       	out	0x3f, r0	; 63
    167c:	cd bf       	out	0x3d, r28	; 61
    167e:	8f 87       	std	Y+15, r24	; 0x0f
    1680:	48 8b       	std	Y+16, r20	; 0x10
    1682:	59 8b       	std	Y+17, r21	; 0x11
    1684:	6a 8b       	std	Y+18, r22	; 0x12
    1686:	7b 8b       	std	Y+19, r23	; 0x13
	u32 frequancyTest = 0;
    1688:	1b 86       	std	Y+11, r1	; 0x0b
    168a:	1c 86       	std	Y+12, r1	; 0x0c
    168c:	1d 86       	std	Y+13, r1	; 0x0d
    168e:	1e 86       	std	Y+14, r1	; 0x0e
	u32 freqDiff = 0;
    1690:	1f 82       	std	Y+7, r1	; 0x07
    1692:	18 86       	std	Y+8, r1	; 0x08
    1694:	19 86       	std	Y+9, r1	; 0x09
    1696:	1a 86       	std	Y+10, r1	; 0x0a
	u32 miniFreqDiff = 0xFF;
    1698:	8f ef       	ldi	r24, 0xFF	; 255
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	a0 e0       	ldi	r26, 0x00	; 0
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	8b 83       	std	Y+3, r24	; 0x03
    16a2:	9c 83       	std	Y+4, r25	; 0x04
    16a4:	ad 83       	std	Y+5, r26	; 0x05
    16a6:	be 83       	std	Y+6, r27	; 0x06

	int i ;
	for(i = 0; i < 5 ; i++)
    16a8:	1a 82       	std	Y+2, r1	; 0x02
    16aa:	19 82       	std	Y+1, r1	; 0x01
    16ac:	86 c0       	rjmp	.+268    	; 0x17ba <M_Timer0_void_setFastPWM+0x154>
	{
		frequancyTest = F_CPU / (G_prescalerArr[i] * 256 );
    16ae:	89 81       	ldd	r24, Y+1	; 0x01
    16b0:	9a 81       	ldd	r25, Y+2	; 0x02
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	fc 01       	movw	r30, r24
    16bc:	e8 52       	subi	r30, 0x28	; 40
    16be:	fd 4f       	sbci	r31, 0xFD	; 253
    16c0:	80 81       	ld	r24, Z
    16c2:	91 81       	ldd	r25, Z+1	; 0x01
    16c4:	a2 81       	ldd	r26, Z+2	; 0x02
    16c6:	b3 81       	ldd	r27, Z+3	; 0x03
    16c8:	22 27       	eor	r18, r18
    16ca:	38 2f       	mov	r19, r24
    16cc:	49 2f       	mov	r20, r25
    16ce:	5a 2f       	mov	r21, r26
    16d0:	80 e0       	ldi	r24, 0x00	; 0
    16d2:	94 e2       	ldi	r25, 0x24	; 36
    16d4:	a4 ef       	ldi	r26, 0xF4	; 244
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	bc 01       	movw	r22, r24
    16da:	cd 01       	movw	r24, r26
    16dc:	0e 94 ff 28 	call	0x51fe	; 0x51fe <__udivmodsi4>
    16e0:	da 01       	movw	r26, r20
    16e2:	c9 01       	movw	r24, r18
    16e4:	8b 87       	std	Y+11, r24	; 0x0b
    16e6:	9c 87       	std	Y+12, r25	; 0x0c
    16e8:	ad 87       	std	Y+13, r26	; 0x0d
    16ea:	be 87       	std	Y+14, r27	; 0x0e
		if (frequancyTest > freq)
    16ec:	2b 85       	ldd	r18, Y+11	; 0x0b
    16ee:	3c 85       	ldd	r19, Y+12	; 0x0c
    16f0:	4d 85       	ldd	r20, Y+13	; 0x0d
    16f2:	5e 85       	ldd	r21, Y+14	; 0x0e
    16f4:	88 89       	ldd	r24, Y+16	; 0x10
    16f6:	99 89       	ldd	r25, Y+17	; 0x11
    16f8:	aa 89       	ldd	r26, Y+18	; 0x12
    16fa:	bb 89       	ldd	r27, Y+19	; 0x13
    16fc:	82 17       	cp	r24, r18
    16fe:	93 07       	cpc	r25, r19
    1700:	a4 07       	cpc	r26, r20
    1702:	b5 07       	cpc	r27, r21
    1704:	88 f4       	brcc	.+34     	; 0x1728 <M_Timer0_void_setFastPWM+0xc2>
		{
			freqDiff = frequancyTest - freq;
    1706:	8b 85       	ldd	r24, Y+11	; 0x0b
    1708:	9c 85       	ldd	r25, Y+12	; 0x0c
    170a:	ad 85       	ldd	r26, Y+13	; 0x0d
    170c:	be 85       	ldd	r27, Y+14	; 0x0e
    170e:	28 89       	ldd	r18, Y+16	; 0x10
    1710:	39 89       	ldd	r19, Y+17	; 0x11
    1712:	4a 89       	ldd	r20, Y+18	; 0x12
    1714:	5b 89       	ldd	r21, Y+19	; 0x13
    1716:	82 1b       	sub	r24, r18
    1718:	93 0b       	sbc	r25, r19
    171a:	a4 0b       	sbc	r26, r20
    171c:	b5 0b       	sbc	r27, r21
    171e:	8f 83       	std	Y+7, r24	; 0x07
    1720:	98 87       	std	Y+8, r25	; 0x08
    1722:	a9 87       	std	Y+9, r26	; 0x09
    1724:	ba 87       	std	Y+10, r27	; 0x0a
    1726:	2b c0       	rjmp	.+86     	; 0x177e <M_Timer0_void_setFastPWM+0x118>
		}
		else if(frequancyTest < freq)
    1728:	2b 85       	ldd	r18, Y+11	; 0x0b
    172a:	3c 85       	ldd	r19, Y+12	; 0x0c
    172c:	4d 85       	ldd	r20, Y+13	; 0x0d
    172e:	5e 85       	ldd	r21, Y+14	; 0x0e
    1730:	88 89       	ldd	r24, Y+16	; 0x10
    1732:	99 89       	ldd	r25, Y+17	; 0x11
    1734:	aa 89       	ldd	r26, Y+18	; 0x12
    1736:	bb 89       	ldd	r27, Y+19	; 0x13
    1738:	28 17       	cp	r18, r24
    173a:	39 07       	cpc	r19, r25
    173c:	4a 07       	cpc	r20, r26
    173e:	5b 07       	cpc	r21, r27
    1740:	88 f4       	brcc	.+34     	; 0x1764 <M_Timer0_void_setFastPWM+0xfe>
		{
			freqDiff =freq - frequancyTest;
    1742:	88 89       	ldd	r24, Y+16	; 0x10
    1744:	99 89       	ldd	r25, Y+17	; 0x11
    1746:	aa 89       	ldd	r26, Y+18	; 0x12
    1748:	bb 89       	ldd	r27, Y+19	; 0x13
    174a:	2b 85       	ldd	r18, Y+11	; 0x0b
    174c:	3c 85       	ldd	r19, Y+12	; 0x0c
    174e:	4d 85       	ldd	r20, Y+13	; 0x0d
    1750:	5e 85       	ldd	r21, Y+14	; 0x0e
    1752:	82 1b       	sub	r24, r18
    1754:	93 0b       	sbc	r25, r19
    1756:	a4 0b       	sbc	r26, r20
    1758:	b5 0b       	sbc	r27, r21
    175a:	8f 83       	std	Y+7, r24	; 0x07
    175c:	98 87       	std	Y+8, r25	; 0x08
    175e:	a9 87       	std	Y+9, r26	; 0x09
    1760:	ba 87       	std	Y+10, r27	; 0x0a
    1762:	0d c0       	rjmp	.+26     	; 0x177e <M_Timer0_void_setFastPWM+0x118>
		}

		else if(frequancyTest == freq)
    1764:	2b 85       	ldd	r18, Y+11	; 0x0b
    1766:	3c 85       	ldd	r19, Y+12	; 0x0c
    1768:	4d 85       	ldd	r20, Y+13	; 0x0d
    176a:	5e 85       	ldd	r21, Y+14	; 0x0e
    176c:	88 89       	ldd	r24, Y+16	; 0x10
    176e:	99 89       	ldd	r25, Y+17	; 0x11
    1770:	aa 89       	ldd	r26, Y+18	; 0x12
    1772:	bb 89       	ldd	r27, Y+19	; 0x13
    1774:	28 17       	cp	r18, r24
    1776:	39 07       	cpc	r19, r25
    1778:	4a 07       	cpc	r20, r26
    177a:	5b 07       	cpc	r21, r27
    177c:	21 f1       	breq	.+72     	; 0x17c6 <M_Timer0_void_setFastPWM+0x160>
		{
			break;
		}
		if(freqDiff < miniFreqDiff){
    177e:	2f 81       	ldd	r18, Y+7	; 0x07
    1780:	38 85       	ldd	r19, Y+8	; 0x08
    1782:	49 85       	ldd	r20, Y+9	; 0x09
    1784:	5a 85       	ldd	r21, Y+10	; 0x0a
    1786:	8b 81       	ldd	r24, Y+3	; 0x03
    1788:	9c 81       	ldd	r25, Y+4	; 0x04
    178a:	ad 81       	ldd	r26, Y+5	; 0x05
    178c:	be 81       	ldd	r27, Y+6	; 0x06
    178e:	28 17       	cp	r18, r24
    1790:	39 07       	cpc	r19, r25
    1792:	4a 07       	cpc	r20, r26
    1794:	5b 07       	cpc	r21, r27
    1796:	60 f4       	brcc	.+24     	; 0x17b0 <M_Timer0_void_setFastPWM+0x14a>
			miniFreqDiff = freqDiff;
    1798:	8f 81       	ldd	r24, Y+7	; 0x07
    179a:	98 85       	ldd	r25, Y+8	; 0x08
    179c:	a9 85       	ldd	r26, Y+9	; 0x09
    179e:	ba 85       	ldd	r27, Y+10	; 0x0a
    17a0:	8b 83       	std	Y+3, r24	; 0x03
    17a2:	9c 83       	std	Y+4, r25	; 0x04
    17a4:	ad 83       	std	Y+5, r26	; 0x05
    17a6:	be 83       	std	Y+6, r27	; 0x06
			G_prescaler = i+1;
    17a8:	89 81       	ldd	r24, Y+1	; 0x01
    17aa:	8f 5f       	subi	r24, 0xFF	; 255
    17ac:	80 93 bb 04 	sts	0x04BB, r24
	u32 frequancyTest = 0;
	u32 freqDiff = 0;
	u32 miniFreqDiff = 0xFF;

	int i ;
	for(i = 0; i < 5 ; i++)
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	01 96       	adiw	r24, 0x01	; 1
    17b6:	9a 83       	std	Y+2, r25	; 0x02
    17b8:	89 83       	std	Y+1, r24	; 0x01
    17ba:	89 81       	ldd	r24, Y+1	; 0x01
    17bc:	9a 81       	ldd	r25, Y+2	; 0x02
    17be:	85 30       	cpi	r24, 0x05	; 5
    17c0:	91 05       	cpc	r25, r1
    17c2:	0c f4       	brge	.+2      	; 0x17c6 <M_Timer0_void_setFastPWM+0x160>
    17c4:	74 cf       	rjmp	.-280    	; 0x16ae <M_Timer0_void_setFastPWM+0x48>
			miniFreqDiff = freqDiff;
			G_prescaler = i+1;
		}
	}

	OCR0_REG = ((dutyCycle*0.01)*256);
    17c6:	0c e5       	ldi	r16, 0x5C	; 92
    17c8:	10 e0       	ldi	r17, 0x00	; 0
    17ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	aa 27       	eor	r26, r26
    17d2:	97 fd       	sbrc	r25, 7
    17d4:	a0 95       	com	r26
    17d6:	ba 2f       	mov	r27, r26
    17d8:	bc 01       	movw	r22, r24
    17da:	cd 01       	movw	r24, r26
    17dc:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	bc 01       	movw	r22, r24
    17e6:	cd 01       	movw	r24, r26
    17e8:	2a e0       	ldi	r18, 0x0A	; 10
    17ea:	37 ed       	ldi	r19, 0xD7	; 215
    17ec:	43 e2       	ldi	r20, 0x23	; 35
    17ee:	5c e3       	ldi	r21, 0x3C	; 60
    17f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	bc 01       	movw	r22, r24
    17fa:	cd 01       	movw	r24, r26
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e8       	ldi	r20, 0x80	; 128
    1802:	53 e4       	ldi	r21, 0x43	; 67
    1804:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1808:	dc 01       	movw	r26, r24
    180a:	cb 01       	movw	r24, r22
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	f8 01       	movw	r30, r16
    181a:	80 83       	st	Z, r24
	TCCR0_REG &= CLEAR_PRESCALLER_MASK;
    181c:	a3 e5       	ldi	r26, 0x53	; 83
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	e3 e5       	ldi	r30, 0x53	; 83
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	88 7f       	andi	r24, 0xF8	; 248
    1828:	8c 93       	st	X, r24
	TCCR0_REG |= G_prescaler;
    182a:	a3 e5       	ldi	r26, 0x53	; 83
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e3 e5       	ldi	r30, 0x53	; 83
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	90 81       	ld	r25, Z
    1834:	80 91 bb 04 	lds	r24, 0x04BB
    1838:	89 2b       	or	r24, r25
    183a:	8c 93       	st	X, r24


}
    183c:	63 96       	adiw	r28, 0x13	; 19
    183e:	0f b6       	in	r0, 0x3f	; 63
    1840:	f8 94       	cli
    1842:	de bf       	out	0x3e, r29	; 62
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	cd bf       	out	0x3d, r28	; 61
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	08 95       	ret

00001852 <M_Timer0_void_EnableInt>:

void M_Timer0_void_EnableInt() {
    1852:	df 93       	push	r29
    1854:	cf 93       	push	r28
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
	TIMSK_REG |= NORMAL_MODE_INTERRUPT_SET;
    185a:	a9 e5       	ldi	r26, 0x59	; 89
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e9 e5       	ldi	r30, 0x59	; 89
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	81 60       	ori	r24, 0x01	; 1
    1866:	8c 93       	st	X, r24
}
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <M_Timer0_void_DisableInt>:

void M_Timer0_void_DisableInt() {
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
	TIMSK_REG |= NORMAL_MODE_INTERRUPT_CLEAR;
    1876:	a9 e5       	ldi	r26, 0x59	; 89
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	e9 e5       	ldi	r30, 0x59	; 89
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	8e 6f       	ori	r24, 0xFE	; 254
    1882:	8c 93       	st	X, r24
}
    1884:	cf 91       	pop	r28
    1886:	df 91       	pop	r29
    1888:	08 95       	ret

0000188a <M_Timer0_void_setCallBack>:

void M_Timer0_void_setCallBack(void (*T0_OVF_CB_FnPtr)(void))
{
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	00 d0       	rcall	.+0      	; 0x1890 <M_Timer0_void_setCallBack+0x6>
    1890:	cd b7       	in	r28, 0x3d	; 61
    1892:	de b7       	in	r29, 0x3e	; 62
    1894:	9a 83       	std	Y+2, r25	; 0x02
    1896:	89 83       	std	Y+1, r24	; 0x01
	if(T0_OVF_CB_FnPtr != NULL)
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	9a 81       	ldd	r25, Y+2	; 0x02
    189c:	00 97       	sbiw	r24, 0x00	; 0
    189e:	31 f0       	breq	.+12     	; 0x18ac <M_Timer0_void_setCallBack+0x22>
	{
		Timer0_OVF_FnPtr = T0_OVF_CB_FnPtr;
    18a0:	89 81       	ldd	r24, Y+1	; 0x01
    18a2:	9a 81       	ldd	r25, Y+2	; 0x02
    18a4:	90 93 b8 04 	sts	0x04B8, r25
    18a8:	80 93 b7 04 	sts	0x04B7, r24
	}
}
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	cf 91       	pop	r28
    18b2:	df 91       	pop	r29
    18b4:	08 95       	ret

000018b6 <__vector_11>:


ISR(TIMER0_OVF_vect) {
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	0f b6       	in	r0, 0x3f	; 63
    18bc:	0f 92       	push	r0
    18be:	11 24       	eor	r1, r1
    18c0:	2f 93       	push	r18
    18c2:	3f 93       	push	r19
    18c4:	4f 93       	push	r20
    18c6:	5f 93       	push	r21
    18c8:	6f 93       	push	r22
    18ca:	7f 93       	push	r23
    18cc:	8f 93       	push	r24
    18ce:	9f 93       	push	r25
    18d0:	af 93       	push	r26
    18d2:	bf 93       	push	r27
    18d4:	ef 93       	push	r30
    18d6:	ff 93       	push	r31
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
	static u8 count = 0;
	count++;
    18e0:	80 91 c5 04 	lds	r24, 0x04C5
    18e4:	8f 5f       	subi	r24, 0xFF	; 255
    18e6:	80 93 c5 04 	sts	0x04C5, r24
	if(count == G_NumberOfOFV)
    18ea:	80 91 c5 04 	lds	r24, 0x04C5
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	80 91 bd 04 	lds	r24, 0x04BD
    18f6:	90 91 be 04 	lds	r25, 0x04BE
    18fa:	28 17       	cp	r18, r24
    18fc:	39 07       	cpc	r19, r25
    18fe:	a1 f4       	brne	.+40     	; 0x1928 <__vector_11+0x72>
	{	count = 0;
    1900:	10 92 c5 04 	sts	0x04C5, r1
		TCNT0_REG = G_Timer0Remaining;
    1904:	e2 e5       	ldi	r30, 0x52	; 82
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 91 bf 04 	lds	r24, 0x04BF
    190c:	90 91 c0 04 	lds	r25, 0x04C0
    1910:	80 83       	st	Z, r24
		if (Timer0_OVF_FnPtr != NULL) {
    1912:	80 91 b7 04 	lds	r24, 0x04B7
    1916:	90 91 b8 04 	lds	r25, 0x04B8
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	29 f0       	breq	.+10     	; 0x1928 <__vector_11+0x72>
			Timer0_OVF_FnPtr();
    191e:	e0 91 b7 04 	lds	r30, 0x04B7
    1922:	f0 91 b8 04 	lds	r31, 0x04B8
    1926:	09 95       	icall
		}
	}


	GcounterOverFlow++;
    1928:	80 91 c1 04 	lds	r24, 0x04C1
    192c:	90 91 c2 04 	lds	r25, 0x04C2
    1930:	a0 91 c3 04 	lds	r26, 0x04C3
    1934:	b0 91 c4 04 	lds	r27, 0x04C4
    1938:	01 96       	adiw	r24, 0x01	; 1
    193a:	a1 1d       	adc	r26, r1
    193c:	b1 1d       	adc	r27, r1
    193e:	80 93 c1 04 	sts	0x04C1, r24
    1942:	90 93 c2 04 	sts	0x04C2, r25
    1946:	a0 93 c3 04 	sts	0x04C3, r26
    194a:	b0 93 c4 04 	sts	0x04C4, r27

}
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	ff 91       	pop	r31
    1954:	ef 91       	pop	r30
    1956:	bf 91       	pop	r27
    1958:	af 91       	pop	r26
    195a:	9f 91       	pop	r25
    195c:	8f 91       	pop	r24
    195e:	7f 91       	pop	r23
    1960:	6f 91       	pop	r22
    1962:	5f 91       	pop	r21
    1964:	4f 91       	pop	r20
    1966:	3f 91       	pop	r19
    1968:	2f 91       	pop	r18
    196a:	0f 90       	pop	r0
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	0f 90       	pop	r0
    1970:	1f 90       	pop	r1
    1972:	18 95       	reti

00001974 <__vector_10>:
ISR(TIMER0_COMP_vect) {
    1974:	1f 92       	push	r1
    1976:	0f 92       	push	r0
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	0f 92       	push	r0
    197c:	11 24       	eor	r1, r1
    197e:	2f 93       	push	r18
    1980:	3f 93       	push	r19
    1982:	4f 93       	push	r20
    1984:	5f 93       	push	r21
    1986:	6f 93       	push	r22
    1988:	7f 93       	push	r23
    198a:	8f 93       	push	r24
    198c:	9f 93       	push	r25
    198e:	af 93       	push	r26
    1990:	bf 93       	push	r27
    1992:	ef 93       	push	r30
    1994:	ff 93       	push	r31
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
	if (Timer0_OC_FnPtr != NULL) {
    199e:	80 91 b9 04 	lds	r24, 0x04B9
    19a2:	90 91 ba 04 	lds	r25, 0x04BA
    19a6:	00 97       	sbiw	r24, 0x00	; 0
    19a8:	29 f0       	breq	.+10     	; 0x19b4 <__vector_10+0x40>
		Timer0_OC_FnPtr();
    19aa:	e0 91 b9 04 	lds	r30, 0x04B9
    19ae:	f0 91 ba 04 	lds	r31, 0x04BA
    19b2:	09 95       	icall
	}
}
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	ff 91       	pop	r31
    19ba:	ef 91       	pop	r30
    19bc:	bf 91       	pop	r27
    19be:	af 91       	pop	r26
    19c0:	9f 91       	pop	r25
    19c2:	8f 91       	pop	r24
    19c4:	7f 91       	pop	r23
    19c6:	6f 91       	pop	r22
    19c8:	5f 91       	pop	r21
    19ca:	4f 91       	pop	r20
    19cc:	3f 91       	pop	r19
    19ce:	2f 91       	pop	r18
    19d0:	0f 90       	pop	r0
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	0f 90       	pop	r0
    19d6:	1f 90       	pop	r1
    19d8:	18 95       	reti

000019da <M_PORT_voidInit>:
#include "BIT_MATH.h"
#include "Port_int.h"
#include "Port_cfg.h"
#include "Mcu_HW.h"
void M_PORT_voidInit(const Port_Configtype * ConfigPtr)
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	27 97       	sbiw	r28, 0x07	; 7
    19e4:	0f b6       	in	r0, 0x3f	; 63
    19e6:	f8 94       	cli
    19e8:	de bf       	out	0x3e, r29	; 62
    19ea:	0f be       	out	0x3f, r0	; 63
    19ec:	cd bf       	out	0x3d, r28	; 61
    19ee:	9d 83       	std	Y+5, r25	; 0x05
    19f0:	8c 83       	std	Y+4, r24	; 0x04
	/* Check the pointer is not equal NULL */
	if(ConfigPtr != NULL )
    19f2:	8c 81       	ldd	r24, Y+4	; 0x04
    19f4:	9d 81       	ldd	r25, Y+5	; 0x05
    19f6:	00 97       	sbiw	r24, 0x00	; 0
    19f8:	09 f4       	brne	.+2      	; 0x19fc <M_PORT_voidInit+0x22>
    19fa:	bd c3       	rjmp	.+1914   	; 0x2176 <M_PORT_voidInit+0x79c>
	{
		u8 Local_u8Pin;
		u8 Local_u8Port;
		u8 Local_u8Counter;
		for(Local_u8Counter = 0;Local_u8Counter<PORT_PINS_CONFIG_ARR_SIZE;Local_u8Counter++)
    19fc:	19 82       	std	Y+1, r1	; 0x01
    19fe:	b7 c3       	rjmp	.+1902   	; 0x216e <M_PORT_voidInit+0x794>
		{
			Local_u8Pin  = ((ConfigPtr[Local_u8Counter].PinNumber)%10);
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	88 2f       	mov	r24, r24
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	9c 01       	movw	r18, r24
    1a08:	22 0f       	add	r18, r18
    1a0a:	33 1f       	adc	r19, r19
    1a0c:	22 0f       	add	r18, r18
    1a0e:	33 1f       	adc	r19, r19
    1a10:	8c 81       	ldd	r24, Y+4	; 0x04
    1a12:	9d 81       	ldd	r25, Y+5	; 0x05
    1a14:	fc 01       	movw	r30, r24
    1a16:	e2 0f       	add	r30, r18
    1a18:	f3 1f       	adc	r31, r19
    1a1a:	80 81       	ld	r24, Z
    1a1c:	9a e0       	ldi	r25, 0x0A	; 10
    1a1e:	69 2f       	mov	r22, r25
    1a20:	0e 94 df 28 	call	0x51be	; 0x51be <__udivmodqi4>
    1a24:	89 2f       	mov	r24, r25
    1a26:	8b 83       	std	Y+3, r24	; 0x03
			Local_u8Port = ((ConfigPtr[Local_u8Counter].PinNumber)/10);
    1a28:	89 81       	ldd	r24, Y+1	; 0x01
    1a2a:	88 2f       	mov	r24, r24
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	9c 01       	movw	r18, r24
    1a30:	22 0f       	add	r18, r18
    1a32:	33 1f       	adc	r19, r19
    1a34:	22 0f       	add	r18, r18
    1a36:	33 1f       	adc	r19, r19
    1a38:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	e2 0f       	add	r30, r18
    1a40:	f3 1f       	adc	r31, r19
    1a42:	80 81       	ld	r24, Z
    1a44:	9a e0       	ldi	r25, 0x0A	; 10
    1a46:	69 2f       	mov	r22, r25
    1a48:	0e 94 df 28 	call	0x51be	; 0x51be <__udivmodqi4>
    1a4c:	8a 83       	std	Y+2, r24	; 0x02
			switch(Local_u8Port)
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	28 2f       	mov	r18, r24
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	3f 83       	std	Y+7, r19	; 0x07
    1a56:	2e 83       	std	Y+6, r18	; 0x06
    1a58:	8e 81       	ldd	r24, Y+6	; 0x06
    1a5a:	9f 81       	ldd	r25, Y+7	; 0x07
    1a5c:	82 30       	cpi	r24, 0x02	; 2
    1a5e:	91 05       	cpc	r25, r1
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <M_PORT_voidInit+0x8a>
    1a62:	f3 c0       	rjmp	.+486    	; 0x1c4a <M_PORT_voidInit+0x270>
    1a64:	2e 81       	ldd	r18, Y+6	; 0x06
    1a66:	3f 81       	ldd	r19, Y+7	; 0x07
    1a68:	23 30       	cpi	r18, 0x03	; 3
    1a6a:	31 05       	cpc	r19, r1
    1a6c:	34 f4       	brge	.+12     	; 0x1a7a <M_PORT_voidInit+0xa0>
    1a6e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a70:	9f 81       	ldd	r25, Y+7	; 0x07
    1a72:	81 30       	cpi	r24, 0x01	; 1
    1a74:	91 05       	cpc	r25, r1
    1a76:	71 f0       	breq	.+28     	; 0x1a94 <M_PORT_voidInit+0xba>
    1a78:	77 c3       	rjmp	.+1774   	; 0x2168 <M_PORT_voidInit+0x78e>
    1a7a:	2e 81       	ldd	r18, Y+6	; 0x06
    1a7c:	3f 81       	ldd	r19, Y+7	; 0x07
    1a7e:	23 30       	cpi	r18, 0x03	; 3
    1a80:	31 05       	cpc	r19, r1
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <M_PORT_voidInit+0xac>
    1a84:	bd c1       	rjmp	.+890    	; 0x1e00 <M_PORT_voidInit+0x426>
    1a86:	8e 81       	ldd	r24, Y+6	; 0x06
    1a88:	9f 81       	ldd	r25, Y+7	; 0x07
    1a8a:	84 30       	cpi	r24, 0x04	; 4
    1a8c:	91 05       	cpc	r25, r1
    1a8e:	09 f4       	brne	.+2      	; 0x1a92 <M_PORT_voidInit+0xb8>
    1a90:	92 c2       	rjmp	.+1316   	; 0x1fb6 <M_PORT_voidInit+0x5dc>
    1a92:	6a c3       	rjmp	.+1748   	; 0x2168 <M_PORT_voidInit+0x78e>
			{
			case PORTA :
				/* Set the direction of pin */
				if(ConfigPtr[Local_u8Counter].PinDirection == PORT_OUTPUT)
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	9c 01       	movw	r18, r24
    1a9c:	22 0f       	add	r18, r18
    1a9e:	33 1f       	adc	r19, r19
    1aa0:	22 0f       	add	r18, r18
    1aa2:	33 1f       	adc	r19, r19
    1aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	e2 0f       	add	r30, r18
    1aac:	f3 1f       	adc	r31, r19
    1aae:	82 81       	ldd	r24, Z+2	; 0x02
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <M_PORT_voidInit+0xdc>
    1ab4:	5c c0       	rjmp	.+184    	; 0x1b6e <M_PORT_voidInit+0x194>
				{
					/* Set the output direction by set the bits in DDRA register */
					SET_BIT(DDRA_REG,Local_u8Pin);
    1ab6:	aa e3       	ldi	r26, 0x3A	; 58
    1ab8:	b0 e0       	ldi	r27, 0x00	; 0
    1aba:	ea e3       	ldi	r30, 0x3A	; 58
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	80 81       	ld	r24, Z
    1ac0:	48 2f       	mov	r20, r24
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	02 c0       	rjmp	.+4      	; 0x1ad2 <M_PORT_voidInit+0xf8>
    1ace:	88 0f       	add	r24, r24
    1ad0:	99 1f       	adc	r25, r25
    1ad2:	2a 95       	dec	r18
    1ad4:	e2 f7       	brpl	.-8      	; 0x1ace <M_PORT_voidInit+0xf4>
    1ad6:	84 2b       	or	r24, r20
    1ad8:	8c 93       	st	X, r24
					/* Set the Initial Value in PORTA register */
					if(ConfigPtr[Local_u8Counter].InitialValue == PORT_HIGH)
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	88 2f       	mov	r24, r24
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9c 01       	movw	r18, r24
    1ae2:	22 0f       	add	r18, r18
    1ae4:	33 1f       	adc	r19, r19
    1ae6:	22 0f       	add	r18, r18
    1ae8:	33 1f       	adc	r19, r19
    1aea:	8c 81       	ldd	r24, Y+4	; 0x04
    1aec:	9d 81       	ldd	r25, Y+5	; 0x05
    1aee:	fc 01       	movw	r30, r24
    1af0:	e2 0f       	add	r30, r18
    1af2:	f3 1f       	adc	r31, r19
    1af4:	81 81       	ldd	r24, Z+1	; 0x01
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	a1 f4       	brne	.+40     	; 0x1b22 <M_PORT_voidInit+0x148>
					{
						SET_BIT(PORTA_REG,Local_u8Pin);
    1afa:	ab e3       	ldi	r26, 0x3B	; 59
    1afc:	b0 e0       	ldi	r27, 0x00	; 0
    1afe:	eb e3       	ldi	r30, 0x3B	; 59
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 81       	ld	r24, Z
    1b04:	48 2f       	mov	r20, r24
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	28 2f       	mov	r18, r24
    1b0a:	30 e0       	ldi	r19, 0x00	; 0
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	02 2e       	mov	r0, r18
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <M_PORT_voidInit+0x13e>
    1b14:	88 0f       	add	r24, r24
    1b16:	99 1f       	adc	r25, r25
    1b18:	0a 94       	dec	r0
    1b1a:	e2 f7       	brpl	.-8      	; 0x1b14 <M_PORT_voidInit+0x13a>
    1b1c:	84 2b       	or	r24, r20
    1b1e:	8c 93       	st	X, r24
    1b20:	23 c3       	rjmp	.+1606   	; 0x2168 <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InitialValue == PORT_LOW)
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	88 2f       	mov	r24, r24
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	9c 01       	movw	r18, r24
    1b2a:	22 0f       	add	r18, r18
    1b2c:	33 1f       	adc	r19, r19
    1b2e:	22 0f       	add	r18, r18
    1b30:	33 1f       	adc	r19, r19
    1b32:	8c 81       	ldd	r24, Y+4	; 0x04
    1b34:	9d 81       	ldd	r25, Y+5	; 0x05
    1b36:	fc 01       	movw	r30, r24
    1b38:	e2 0f       	add	r30, r18
    1b3a:	f3 1f       	adc	r31, r19
    1b3c:	81 81       	ldd	r24, Z+1	; 0x01
    1b3e:	88 23       	and	r24, r24
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <M_PORT_voidInit+0x16a>
    1b42:	12 c3       	rjmp	.+1572   	; 0x2168 <M_PORT_voidInit+0x78e>
					{
						CLR_BIT(PORTA_REG,Local_u8Pin);
    1b44:	ab e3       	ldi	r26, 0x3B	; 59
    1b46:	b0 e0       	ldi	r27, 0x00	; 0
    1b48:	eb e3       	ldi	r30, 0x3B	; 59
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	48 2f       	mov	r20, r24
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	28 2f       	mov	r18, r24
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	81 e0       	ldi	r24, 0x01	; 1
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 2e       	mov	r0, r18
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <M_PORT_voidInit+0x188>
    1b5e:	88 0f       	add	r24, r24
    1b60:	99 1f       	adc	r25, r25
    1b62:	0a 94       	dec	r0
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <M_PORT_voidInit+0x184>
    1b66:	80 95       	com	r24
    1b68:	84 23       	and	r24, r20
    1b6a:	8c 93       	st	X, r24
    1b6c:	fd c2       	rjmp	.+1530   	; 0x2168 <M_PORT_voidInit+0x78e>
					else
					{
						/* Error */
					}
				}
				else if(ConfigPtr[Local_u8Counter].PinDirection == PORT_INPUT)
    1b6e:	89 81       	ldd	r24, Y+1	; 0x01
    1b70:	88 2f       	mov	r24, r24
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	9c 01       	movw	r18, r24
    1b76:	22 0f       	add	r18, r18
    1b78:	33 1f       	adc	r19, r19
    1b7a:	22 0f       	add	r18, r18
    1b7c:	33 1f       	adc	r19, r19
    1b7e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b80:	9d 81       	ldd	r25, Y+5	; 0x05
    1b82:	fc 01       	movw	r30, r24
    1b84:	e2 0f       	add	r30, r18
    1b86:	f3 1f       	adc	r31, r19
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	88 23       	and	r24, r24
    1b8c:	09 f0       	breq	.+2      	; 0x1b90 <M_PORT_voidInit+0x1b6>
    1b8e:	ec c2       	rjmp	.+1496   	; 0x2168 <M_PORT_voidInit+0x78e>
				{
					/* Set the input direction by clear the bits in DDRA register */
					CLR_BIT(DDRA_REG,Local_u8Pin);
    1b90:	aa e3       	ldi	r26, 0x3A	; 58
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	ea e3       	ldi	r30, 0x3A	; 58
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	48 2f       	mov	r20, r24
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	28 2f       	mov	r18, r24
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	81 e0       	ldi	r24, 0x01	; 1
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	02 c0       	rjmp	.+4      	; 0x1bac <M_PORT_voidInit+0x1d2>
    1ba8:	88 0f       	add	r24, r24
    1baa:	99 1f       	adc	r25, r25
    1bac:	2a 95       	dec	r18
    1bae:	e2 f7       	brpl	.-8      	; 0x1ba8 <M_PORT_voidInit+0x1ce>
    1bb0:	80 95       	com	r24
    1bb2:	84 23       	and	r24, r20
    1bb4:	8c 93       	st	X, r24
					/* Set the internal attach in PORTA register */
					if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_FLOATING)
    1bb6:	89 81       	ldd	r24, Y+1	; 0x01
    1bb8:	88 2f       	mov	r24, r24
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	9c 01       	movw	r18, r24
    1bbe:	22 0f       	add	r18, r18
    1bc0:	33 1f       	adc	r19, r19
    1bc2:	22 0f       	add	r18, r18
    1bc4:	33 1f       	adc	r19, r19
    1bc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1bca:	fc 01       	movw	r30, r24
    1bcc:	e2 0f       	add	r30, r18
    1bce:	f3 1f       	adc	r31, r19
    1bd0:	83 81       	ldd	r24, Z+3	; 0x03
    1bd2:	88 23       	and	r24, r24
    1bd4:	a9 f4       	brne	.+42     	; 0x1c00 <M_PORT_voidInit+0x226>
					{
						CLR_BIT(PORTA_REG,Local_u8Pin);
    1bd6:	ab e3       	ldi	r26, 0x3B	; 59
    1bd8:	b0 e0       	ldi	r27, 0x00	; 0
    1bda:	eb e3       	ldi	r30, 0x3B	; 59
    1bdc:	f0 e0       	ldi	r31, 0x00	; 0
    1bde:	80 81       	ld	r24, Z
    1be0:	48 2f       	mov	r20, r24
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03
    1be4:	28 2f       	mov	r18, r24
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	02 2e       	mov	r0, r18
    1bee:	02 c0       	rjmp	.+4      	; 0x1bf4 <M_PORT_voidInit+0x21a>
    1bf0:	88 0f       	add	r24, r24
    1bf2:	99 1f       	adc	r25, r25
    1bf4:	0a 94       	dec	r0
    1bf6:	e2 f7       	brpl	.-8      	; 0x1bf0 <M_PORT_voidInit+0x216>
    1bf8:	80 95       	com	r24
    1bfa:	84 23       	and	r24, r20
    1bfc:	8c 93       	st	X, r24
    1bfe:	b4 c2       	rjmp	.+1384   	; 0x2168 <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_PULLUP)
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	88 2f       	mov	r24, r24
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	9c 01       	movw	r18, r24
    1c08:	22 0f       	add	r18, r18
    1c0a:	33 1f       	adc	r19, r19
    1c0c:	22 0f       	add	r18, r18
    1c0e:	33 1f       	adc	r19, r19
    1c10:	8c 81       	ldd	r24, Y+4	; 0x04
    1c12:	9d 81       	ldd	r25, Y+5	; 0x05
    1c14:	fc 01       	movw	r30, r24
    1c16:	e2 0f       	add	r30, r18
    1c18:	f3 1f       	adc	r31, r19
    1c1a:	83 81       	ldd	r24, Z+3	; 0x03
    1c1c:	81 30       	cpi	r24, 0x01	; 1
    1c1e:	09 f0       	breq	.+2      	; 0x1c22 <M_PORT_voidInit+0x248>
    1c20:	a3 c2       	rjmp	.+1350   	; 0x2168 <M_PORT_voidInit+0x78e>
					{
						SET_BIT(PORTA_REG,Local_u8Pin);
    1c22:	ab e3       	ldi	r26, 0x3B	; 59
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	eb e3       	ldi	r30, 0x3B	; 59
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	48 2f       	mov	r20, r24
    1c2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c30:	28 2f       	mov	r18, r24
    1c32:	30 e0       	ldi	r19, 0x00	; 0
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	02 2e       	mov	r0, r18
    1c3a:	02 c0       	rjmp	.+4      	; 0x1c40 <M_PORT_voidInit+0x266>
    1c3c:	88 0f       	add	r24, r24
    1c3e:	99 1f       	adc	r25, r25
    1c40:	0a 94       	dec	r0
    1c42:	e2 f7       	brpl	.-8      	; 0x1c3c <M_PORT_voidInit+0x262>
    1c44:	84 2b       	or	r24, r20
    1c46:	8c 93       	st	X, r24
    1c48:	8f c2       	rjmp	.+1310   	; 0x2168 <M_PORT_voidInit+0x78e>
					/* Error */
				}
				break;
			case PORTB :
				/* Set the direction of the pin */
				if(ConfigPtr[Local_u8Counter].PinDirection == PORT_OUTPUT)
    1c4a:	89 81       	ldd	r24, Y+1	; 0x01
    1c4c:	88 2f       	mov	r24, r24
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	9c 01       	movw	r18, r24
    1c52:	22 0f       	add	r18, r18
    1c54:	33 1f       	adc	r19, r19
    1c56:	22 0f       	add	r18, r18
    1c58:	33 1f       	adc	r19, r19
    1c5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5e:	fc 01       	movw	r30, r24
    1c60:	e2 0f       	add	r30, r18
    1c62:	f3 1f       	adc	r31, r19
    1c64:	82 81       	ldd	r24, Z+2	; 0x02
    1c66:	81 30       	cpi	r24, 0x01	; 1
    1c68:	09 f0       	breq	.+2      	; 0x1c6c <M_PORT_voidInit+0x292>
    1c6a:	5c c0       	rjmp	.+184    	; 0x1d24 <M_PORT_voidInit+0x34a>
				{
					/* Set the output direction by set the bits in DDRB register */
					SET_BIT(DDRB_REG,Local_u8Pin);
    1c6c:	a7 e3       	ldi	r26, 0x37	; 55
    1c6e:	b0 e0       	ldi	r27, 0x00	; 0
    1c70:	e7 e3       	ldi	r30, 0x37	; 55
    1c72:	f0 e0       	ldi	r31, 0x00	; 0
    1c74:	80 81       	ld	r24, Z
    1c76:	48 2f       	mov	r20, r24
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	28 2f       	mov	r18, r24
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <M_PORT_voidInit+0x2ae>
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	2a 95       	dec	r18
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <M_PORT_voidInit+0x2aa>
    1c8c:	84 2b       	or	r24, r20
    1c8e:	8c 93       	st	X, r24
					/* Set the Initial Value in PORTB register */
					if(ConfigPtr[Local_u8Counter].InitialValue == PORT_HIGH)
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	88 2f       	mov	r24, r24
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	9c 01       	movw	r18, r24
    1c98:	22 0f       	add	r18, r18
    1c9a:	33 1f       	adc	r19, r19
    1c9c:	22 0f       	add	r18, r18
    1c9e:	33 1f       	adc	r19, r19
    1ca0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	e2 0f       	add	r30, r18
    1ca8:	f3 1f       	adc	r31, r19
    1caa:	81 81       	ldd	r24, Z+1	; 0x01
    1cac:	81 30       	cpi	r24, 0x01	; 1
    1cae:	a1 f4       	brne	.+40     	; 0x1cd8 <M_PORT_voidInit+0x2fe>
					{
						SET_BIT(PORTB_REG,Local_u8Pin);
    1cb0:	a8 e3       	ldi	r26, 0x38	; 56
    1cb2:	b0 e0       	ldi	r27, 0x00	; 0
    1cb4:	e8 e3       	ldi	r30, 0x38	; 56
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	80 81       	ld	r24, Z
    1cba:	48 2f       	mov	r20, r24
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	28 2f       	mov	r18, r24
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	02 2e       	mov	r0, r18
    1cc8:	02 c0       	rjmp	.+4      	; 0x1cce <M_PORT_voidInit+0x2f4>
    1cca:	88 0f       	add	r24, r24
    1ccc:	99 1f       	adc	r25, r25
    1cce:	0a 94       	dec	r0
    1cd0:	e2 f7       	brpl	.-8      	; 0x1cca <M_PORT_voidInit+0x2f0>
    1cd2:	84 2b       	or	r24, r20
    1cd4:	8c 93       	st	X, r24
    1cd6:	48 c2       	rjmp	.+1168   	; 0x2168 <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InitialValue == PORT_LOW)
    1cd8:	89 81       	ldd	r24, Y+1	; 0x01
    1cda:	88 2f       	mov	r24, r24
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	9c 01       	movw	r18, r24
    1ce0:	22 0f       	add	r18, r18
    1ce2:	33 1f       	adc	r19, r19
    1ce4:	22 0f       	add	r18, r18
    1ce6:	33 1f       	adc	r19, r19
    1ce8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cea:	9d 81       	ldd	r25, Y+5	; 0x05
    1cec:	fc 01       	movw	r30, r24
    1cee:	e2 0f       	add	r30, r18
    1cf0:	f3 1f       	adc	r31, r19
    1cf2:	81 81       	ldd	r24, Z+1	; 0x01
    1cf4:	88 23       	and	r24, r24
    1cf6:	09 f0       	breq	.+2      	; 0x1cfa <M_PORT_voidInit+0x320>
    1cf8:	37 c2       	rjmp	.+1134   	; 0x2168 <M_PORT_voidInit+0x78e>
					{
						CLR_BIT(PORTB_REG,Local_u8Pin);
    1cfa:	a8 e3       	ldi	r26, 0x38	; 56
    1cfc:	b0 e0       	ldi	r27, 0x00	; 0
    1cfe:	e8 e3       	ldi	r30, 0x38	; 56
    1d00:	f0 e0       	ldi	r31, 0x00	; 0
    1d02:	80 81       	ld	r24, Z
    1d04:	48 2f       	mov	r20, r24
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	02 2e       	mov	r0, r18
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <M_PORT_voidInit+0x33e>
    1d14:	88 0f       	add	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	0a 94       	dec	r0
    1d1a:	e2 f7       	brpl	.-8      	; 0x1d14 <M_PORT_voidInit+0x33a>
    1d1c:	80 95       	com	r24
    1d1e:	84 23       	and	r24, r20
    1d20:	8c 93       	st	X, r24
    1d22:	22 c2       	rjmp	.+1092   	; 0x2168 <M_PORT_voidInit+0x78e>
					else
					{
						/* Error */
					}
				}
				else if(ConfigPtr[Local_u8Counter].PinDirection == PORT_INPUT)
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	88 2f       	mov	r24, r24
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9c 01       	movw	r18, r24
    1d2c:	22 0f       	add	r18, r18
    1d2e:	33 1f       	adc	r19, r19
    1d30:	22 0f       	add	r18, r18
    1d32:	33 1f       	adc	r19, r19
    1d34:	8c 81       	ldd	r24, Y+4	; 0x04
    1d36:	9d 81       	ldd	r25, Y+5	; 0x05
    1d38:	fc 01       	movw	r30, r24
    1d3a:	e2 0f       	add	r30, r18
    1d3c:	f3 1f       	adc	r31, r19
    1d3e:	82 81       	ldd	r24, Z+2	; 0x02
    1d40:	88 23       	and	r24, r24
    1d42:	09 f0       	breq	.+2      	; 0x1d46 <M_PORT_voidInit+0x36c>
    1d44:	11 c2       	rjmp	.+1058   	; 0x2168 <M_PORT_voidInit+0x78e>
				{
					/* Set the input direction by clear the bits in DDRB register */
					CLR_BIT(DDRB_REG,Local_u8Pin);
    1d46:	a7 e3       	ldi	r26, 0x37	; 55
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e7 e3       	ldi	r30, 0x37	; 55
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	8b 81       	ldd	r24, Y+3	; 0x03
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <M_PORT_voidInit+0x388>
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	2a 95       	dec	r18
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <M_PORT_voidInit+0x384>
    1d66:	80 95       	com	r24
    1d68:	84 23       	and	r24, r20
    1d6a:	8c 93       	st	X, r24
					/* Set the internal attach in PORTB register */
					if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_FLOATING)
    1d6c:	89 81       	ldd	r24, Y+1	; 0x01
    1d6e:	88 2f       	mov	r24, r24
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	9c 01       	movw	r18, r24
    1d74:	22 0f       	add	r18, r18
    1d76:	33 1f       	adc	r19, r19
    1d78:	22 0f       	add	r18, r18
    1d7a:	33 1f       	adc	r19, r19
    1d7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1d7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1d80:	fc 01       	movw	r30, r24
    1d82:	e2 0f       	add	r30, r18
    1d84:	f3 1f       	adc	r31, r19
    1d86:	83 81       	ldd	r24, Z+3	; 0x03
    1d88:	88 23       	and	r24, r24
    1d8a:	a9 f4       	brne	.+42     	; 0x1db6 <M_PORT_voidInit+0x3dc>
					{
						CLR_BIT(PORTB_REG,Local_u8Pin);
    1d8c:	a8 e3       	ldi	r26, 0x38	; 56
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e8 e3       	ldi	r30, 0x38	; 56
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	48 2f       	mov	r20, r24
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	02 2e       	mov	r0, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <M_PORT_voidInit+0x3d0>
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	0a 94       	dec	r0
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <M_PORT_voidInit+0x3cc>
    1dae:	80 95       	com	r24
    1db0:	84 23       	and	r24, r20
    1db2:	8c 93       	st	X, r24
    1db4:	d9 c1       	rjmp	.+946    	; 0x2168 <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_PULLUP)
    1db6:	89 81       	ldd	r24, Y+1	; 0x01
    1db8:	88 2f       	mov	r24, r24
    1dba:	90 e0       	ldi	r25, 0x00	; 0
    1dbc:	9c 01       	movw	r18, r24
    1dbe:	22 0f       	add	r18, r18
    1dc0:	33 1f       	adc	r19, r19
    1dc2:	22 0f       	add	r18, r18
    1dc4:	33 1f       	adc	r19, r19
    1dc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dca:	fc 01       	movw	r30, r24
    1dcc:	e2 0f       	add	r30, r18
    1dce:	f3 1f       	adc	r31, r19
    1dd0:	83 81       	ldd	r24, Z+3	; 0x03
    1dd2:	81 30       	cpi	r24, 0x01	; 1
    1dd4:	09 f0       	breq	.+2      	; 0x1dd8 <M_PORT_voidInit+0x3fe>
    1dd6:	c8 c1       	rjmp	.+912    	; 0x2168 <M_PORT_voidInit+0x78e>
					{
						SET_BIT(PORTB_REG,Local_u8Pin);
    1dd8:	a8 e3       	ldi	r26, 0x38	; 56
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e8 e3       	ldi	r30, 0x38	; 56
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	48 2f       	mov	r20, r24
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	28 2f       	mov	r18, r24
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	90 e0       	ldi	r25, 0x00	; 0
    1dee:	02 2e       	mov	r0, r18
    1df0:	02 c0       	rjmp	.+4      	; 0x1df6 <M_PORT_voidInit+0x41c>
    1df2:	88 0f       	add	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	0a 94       	dec	r0
    1df8:	e2 f7       	brpl	.-8      	; 0x1df2 <M_PORT_voidInit+0x418>
    1dfa:	84 2b       	or	r24, r20
    1dfc:	8c 93       	st	X, r24
    1dfe:	b4 c1       	rjmp	.+872    	; 0x2168 <M_PORT_voidInit+0x78e>
					/* Error */
				}
				break;
			case PORTC :
				/* Set the direction of the pin */
				if(ConfigPtr[Local_u8Counter].PinDirection == PORT_OUTPUT)
    1e00:	89 81       	ldd	r24, Y+1	; 0x01
    1e02:	88 2f       	mov	r24, r24
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	9c 01       	movw	r18, r24
    1e08:	22 0f       	add	r18, r18
    1e0a:	33 1f       	adc	r19, r19
    1e0c:	22 0f       	add	r18, r18
    1e0e:	33 1f       	adc	r19, r19
    1e10:	8c 81       	ldd	r24, Y+4	; 0x04
    1e12:	9d 81       	ldd	r25, Y+5	; 0x05
    1e14:	fc 01       	movw	r30, r24
    1e16:	e2 0f       	add	r30, r18
    1e18:	f3 1f       	adc	r31, r19
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	81 30       	cpi	r24, 0x01	; 1
    1e1e:	09 f0       	breq	.+2      	; 0x1e22 <M_PORT_voidInit+0x448>
    1e20:	5c c0       	rjmp	.+184    	; 0x1eda <M_PORT_voidInit+0x500>
				{
					/* Set the output direction by set the bits in DDRC register */
					SET_BIT(DDRC_REG,Local_u8Pin);
    1e22:	a4 e3       	ldi	r26, 0x34	; 52
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e4 e3       	ldi	r30, 0x34	; 52
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	48 2f       	mov	r20, r24
    1e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e30:	28 2f       	mov	r18, r24
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	81 e0       	ldi	r24, 0x01	; 1
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	02 c0       	rjmp	.+4      	; 0x1e3e <M_PORT_voidInit+0x464>
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	2a 95       	dec	r18
    1e40:	e2 f7       	brpl	.-8      	; 0x1e3a <M_PORT_voidInit+0x460>
    1e42:	84 2b       	or	r24, r20
    1e44:	8c 93       	st	X, r24
					/* Set the Initial Value in PORTC register */
					if(ConfigPtr[Local_u8Counter].InitialValue == PORT_HIGH)
    1e46:	89 81       	ldd	r24, Y+1	; 0x01
    1e48:	88 2f       	mov	r24, r24
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	9c 01       	movw	r18, r24
    1e4e:	22 0f       	add	r18, r18
    1e50:	33 1f       	adc	r19, r19
    1e52:	22 0f       	add	r18, r18
    1e54:	33 1f       	adc	r19, r19
    1e56:	8c 81       	ldd	r24, Y+4	; 0x04
    1e58:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	e2 0f       	add	r30, r18
    1e5e:	f3 1f       	adc	r31, r19
    1e60:	81 81       	ldd	r24, Z+1	; 0x01
    1e62:	81 30       	cpi	r24, 0x01	; 1
    1e64:	a1 f4       	brne	.+40     	; 0x1e8e <M_PORT_voidInit+0x4b4>
					{
						SET_BIT(PORTC_REG,Local_u8Pin);
    1e66:	a5 e3       	ldi	r26, 0x35	; 53
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e5 e3       	ldi	r30, 0x35	; 53
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	80 81       	ld	r24, Z
    1e70:	48 2f       	mov	r20, r24
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	02 2e       	mov	r0, r18
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <M_PORT_voidInit+0x4aa>
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	0a 94       	dec	r0
    1e86:	e2 f7       	brpl	.-8      	; 0x1e80 <M_PORT_voidInit+0x4a6>
    1e88:	84 2b       	or	r24, r20
    1e8a:	8c 93       	st	X, r24
    1e8c:	6d c1       	rjmp	.+730    	; 0x2168 <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InitialValue == PORT_LOW)
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	88 2f       	mov	r24, r24
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	9c 01       	movw	r18, r24
    1e96:	22 0f       	add	r18, r18
    1e98:	33 1f       	adc	r19, r19
    1e9a:	22 0f       	add	r18, r18
    1e9c:	33 1f       	adc	r19, r19
    1e9e:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	e2 0f       	add	r30, r18
    1ea6:	f3 1f       	adc	r31, r19
    1ea8:	81 81       	ldd	r24, Z+1	; 0x01
    1eaa:	88 23       	and	r24, r24
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <M_PORT_voidInit+0x4d6>
    1eae:	5c c1       	rjmp	.+696    	; 0x2168 <M_PORT_voidInit+0x78e>
					{
						CLR_BIT(PORTC_REG,Local_u8Pin);
    1eb0:	a5 e3       	ldi	r26, 0x35	; 53
    1eb2:	b0 e0       	ldi	r27, 0x00	; 0
    1eb4:	e5 e3       	ldi	r30, 0x35	; 53
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	80 81       	ld	r24, Z
    1eba:	48 2f       	mov	r20, r24
    1ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebe:	28 2f       	mov	r18, r24
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	90 e0       	ldi	r25, 0x00	; 0
    1ec6:	02 2e       	mov	r0, r18
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <M_PORT_voidInit+0x4f4>
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	0a 94       	dec	r0
    1ed0:	e2 f7       	brpl	.-8      	; 0x1eca <M_PORT_voidInit+0x4f0>
    1ed2:	80 95       	com	r24
    1ed4:	84 23       	and	r24, r20
    1ed6:	8c 93       	st	X, r24
    1ed8:	47 c1       	rjmp	.+654    	; 0x2168 <M_PORT_voidInit+0x78e>
					else
					{
						/* Error */
					}
				}
				else if(ConfigPtr[Local_u8Counter].PinDirection == PORT_INPUT)
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	88 2f       	mov	r24, r24
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9c 01       	movw	r18, r24
    1ee2:	22 0f       	add	r18, r18
    1ee4:	33 1f       	adc	r19, r19
    1ee6:	22 0f       	add	r18, r18
    1ee8:	33 1f       	adc	r19, r19
    1eea:	8c 81       	ldd	r24, Y+4	; 0x04
    1eec:	9d 81       	ldd	r25, Y+5	; 0x05
    1eee:	fc 01       	movw	r30, r24
    1ef0:	e2 0f       	add	r30, r18
    1ef2:	f3 1f       	adc	r31, r19
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	88 23       	and	r24, r24
    1ef8:	09 f0       	breq	.+2      	; 0x1efc <M_PORT_voidInit+0x522>
    1efa:	36 c1       	rjmp	.+620    	; 0x2168 <M_PORT_voidInit+0x78e>
				{
					/* Set the input direction by clear the bits in DDRC register */
					CLR_BIT(DDRC_REG,Local_u8Pin);
    1efc:	a4 e3       	ldi	r26, 0x34	; 52
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e4 e3       	ldi	r30, 0x34	; 52
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	48 2f       	mov	r20, r24
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	02 c0       	rjmp	.+4      	; 0x1f18 <M_PORT_voidInit+0x53e>
    1f14:	88 0f       	add	r24, r24
    1f16:	99 1f       	adc	r25, r25
    1f18:	2a 95       	dec	r18
    1f1a:	e2 f7       	brpl	.-8      	; 0x1f14 <M_PORT_voidInit+0x53a>
    1f1c:	80 95       	com	r24
    1f1e:	84 23       	and	r24, r20
    1f20:	8c 93       	st	X, r24
					/* Set the internal attach in PORTB register */
					if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_FLOATING)
    1f22:	89 81       	ldd	r24, Y+1	; 0x01
    1f24:	88 2f       	mov	r24, r24
    1f26:	90 e0       	ldi	r25, 0x00	; 0
    1f28:	9c 01       	movw	r18, r24
    1f2a:	22 0f       	add	r18, r18
    1f2c:	33 1f       	adc	r19, r19
    1f2e:	22 0f       	add	r18, r18
    1f30:	33 1f       	adc	r19, r19
    1f32:	8c 81       	ldd	r24, Y+4	; 0x04
    1f34:	9d 81       	ldd	r25, Y+5	; 0x05
    1f36:	fc 01       	movw	r30, r24
    1f38:	e2 0f       	add	r30, r18
    1f3a:	f3 1f       	adc	r31, r19
    1f3c:	83 81       	ldd	r24, Z+3	; 0x03
    1f3e:	88 23       	and	r24, r24
    1f40:	a9 f4       	brne	.+42     	; 0x1f6c <M_PORT_voidInit+0x592>
					{
						CLR_BIT(PORTC_REG,Local_u8Pin);
    1f42:	a5 e3       	ldi	r26, 0x35	; 53
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e5 e3       	ldi	r30, 0x35	; 53
    1f48:	f0 e0       	ldi	r31, 0x00	; 0
    1f4a:	80 81       	ld	r24, Z
    1f4c:	48 2f       	mov	r20, r24
    1f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f50:	28 2f       	mov	r18, r24
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	81 e0       	ldi	r24, 0x01	; 1
    1f56:	90 e0       	ldi	r25, 0x00	; 0
    1f58:	02 2e       	mov	r0, r18
    1f5a:	02 c0       	rjmp	.+4      	; 0x1f60 <M_PORT_voidInit+0x586>
    1f5c:	88 0f       	add	r24, r24
    1f5e:	99 1f       	adc	r25, r25
    1f60:	0a 94       	dec	r0
    1f62:	e2 f7       	brpl	.-8      	; 0x1f5c <M_PORT_voidInit+0x582>
    1f64:	80 95       	com	r24
    1f66:	84 23       	and	r24, r20
    1f68:	8c 93       	st	X, r24
    1f6a:	fe c0       	rjmp	.+508    	; 0x2168 <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_PULLUP)
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	88 2f       	mov	r24, r24
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	9c 01       	movw	r18, r24
    1f74:	22 0f       	add	r18, r18
    1f76:	33 1f       	adc	r19, r19
    1f78:	22 0f       	add	r18, r18
    1f7a:	33 1f       	adc	r19, r19
    1f7c:	8c 81       	ldd	r24, Y+4	; 0x04
    1f7e:	9d 81       	ldd	r25, Y+5	; 0x05
    1f80:	fc 01       	movw	r30, r24
    1f82:	e2 0f       	add	r30, r18
    1f84:	f3 1f       	adc	r31, r19
    1f86:	83 81       	ldd	r24, Z+3	; 0x03
    1f88:	81 30       	cpi	r24, 0x01	; 1
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <M_PORT_voidInit+0x5b4>
    1f8c:	ed c0       	rjmp	.+474    	; 0x2168 <M_PORT_voidInit+0x78e>
					{
						SET_BIT(PORTC_REG,Local_u8Pin);
    1f8e:	a5 e3       	ldi	r26, 0x35	; 53
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	e5 e3       	ldi	r30, 0x35	; 53
    1f94:	f0 e0       	ldi	r31, 0x00	; 0
    1f96:	80 81       	ld	r24, Z
    1f98:	48 2f       	mov	r20, r24
    1f9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	02 2e       	mov	r0, r18
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <M_PORT_voidInit+0x5d2>
    1fa8:	88 0f       	add	r24, r24
    1faa:	99 1f       	adc	r25, r25
    1fac:	0a 94       	dec	r0
    1fae:	e2 f7       	brpl	.-8      	; 0x1fa8 <M_PORT_voidInit+0x5ce>
    1fb0:	84 2b       	or	r24, r20
    1fb2:	8c 93       	st	X, r24
    1fb4:	d9 c0       	rjmp	.+434    	; 0x2168 <M_PORT_voidInit+0x78e>
					/* Error */
				}
				break;
			case PORTD :
				/* Set the direction of the pin */
				if(ConfigPtr[Local_u8Counter].PinDirection == PORT_OUTPUT)
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	88 2f       	mov	r24, r24
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	9c 01       	movw	r18, r24
    1fbe:	22 0f       	add	r18, r18
    1fc0:	33 1f       	adc	r19, r19
    1fc2:	22 0f       	add	r18, r18
    1fc4:	33 1f       	adc	r19, r19
    1fc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fca:	fc 01       	movw	r30, r24
    1fcc:	e2 0f       	add	r30, r18
    1fce:	f3 1f       	adc	r31, r19
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	81 30       	cpi	r24, 0x01	; 1
    1fd4:	09 f0       	breq	.+2      	; 0x1fd8 <M_PORT_voidInit+0x5fe>
    1fd6:	5c c0       	rjmp	.+184    	; 0x2090 <M_PORT_voidInit+0x6b6>
				{
					/* Set the output direction by set the bits in DDRD register */
					SET_BIT(DDRD_REG,Local_u8Pin);
    1fd8:	a1 e3       	ldi	r26, 0x31	; 49
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e1 e3       	ldi	r30, 0x31	; 49
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	48 2f       	mov	r20, r24
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	28 2f       	mov	r18, r24
    1fe8:	30 e0       	ldi	r19, 0x00	; 0
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	02 c0       	rjmp	.+4      	; 0x1ff4 <M_PORT_voidInit+0x61a>
    1ff0:	88 0f       	add	r24, r24
    1ff2:	99 1f       	adc	r25, r25
    1ff4:	2a 95       	dec	r18
    1ff6:	e2 f7       	brpl	.-8      	; 0x1ff0 <M_PORT_voidInit+0x616>
    1ff8:	84 2b       	or	r24, r20
    1ffa:	8c 93       	st	X, r24
					/* Set the Initial Value in PORTD register */
					if(ConfigPtr[Local_u8Counter].InitialValue == PORT_HIGH)
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	88 2f       	mov	r24, r24
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	9c 01       	movw	r18, r24
    2004:	22 0f       	add	r18, r18
    2006:	33 1f       	adc	r19, r19
    2008:	22 0f       	add	r18, r18
    200a:	33 1f       	adc	r19, r19
    200c:	8c 81       	ldd	r24, Y+4	; 0x04
    200e:	9d 81       	ldd	r25, Y+5	; 0x05
    2010:	fc 01       	movw	r30, r24
    2012:	e2 0f       	add	r30, r18
    2014:	f3 1f       	adc	r31, r19
    2016:	81 81       	ldd	r24, Z+1	; 0x01
    2018:	81 30       	cpi	r24, 0x01	; 1
    201a:	a1 f4       	brne	.+40     	; 0x2044 <M_PORT_voidInit+0x66a>
					{
						SET_BIT(PORTD_REG,Local_u8Pin);
    201c:	a2 e3       	ldi	r26, 0x32	; 50
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	e2 e3       	ldi	r30, 0x32	; 50
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	48 2f       	mov	r20, r24
    2028:	8b 81       	ldd	r24, Y+3	; 0x03
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	81 e0       	ldi	r24, 0x01	; 1
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	02 2e       	mov	r0, r18
    2034:	02 c0       	rjmp	.+4      	; 0x203a <M_PORT_voidInit+0x660>
    2036:	88 0f       	add	r24, r24
    2038:	99 1f       	adc	r25, r25
    203a:	0a 94       	dec	r0
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <M_PORT_voidInit+0x65c>
    203e:	84 2b       	or	r24, r20
    2040:	8c 93       	st	X, r24
    2042:	92 c0       	rjmp	.+292    	; 0x2168 <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InitialValue == PORT_LOW)
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	88 2f       	mov	r24, r24
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	9c 01       	movw	r18, r24
    204c:	22 0f       	add	r18, r18
    204e:	33 1f       	adc	r19, r19
    2050:	22 0f       	add	r18, r18
    2052:	33 1f       	adc	r19, r19
    2054:	8c 81       	ldd	r24, Y+4	; 0x04
    2056:	9d 81       	ldd	r25, Y+5	; 0x05
    2058:	fc 01       	movw	r30, r24
    205a:	e2 0f       	add	r30, r18
    205c:	f3 1f       	adc	r31, r19
    205e:	81 81       	ldd	r24, Z+1	; 0x01
    2060:	88 23       	and	r24, r24
    2062:	09 f0       	breq	.+2      	; 0x2066 <M_PORT_voidInit+0x68c>
    2064:	81 c0       	rjmp	.+258    	; 0x2168 <M_PORT_voidInit+0x78e>
					{
						CLR_BIT(PORTD_REG,Local_u8Pin);
    2066:	a2 e3       	ldi	r26, 0x32	; 50
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	e2 e3       	ldi	r30, 0x32	; 50
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	48 2f       	mov	r20, r24
    2072:	8b 81       	ldd	r24, Y+3	; 0x03
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	02 2e       	mov	r0, r18
    207e:	02 c0       	rjmp	.+4      	; 0x2084 <M_PORT_voidInit+0x6aa>
    2080:	88 0f       	add	r24, r24
    2082:	99 1f       	adc	r25, r25
    2084:	0a 94       	dec	r0
    2086:	e2 f7       	brpl	.-8      	; 0x2080 <M_PORT_voidInit+0x6a6>
    2088:	80 95       	com	r24
    208a:	84 23       	and	r24, r20
    208c:	8c 93       	st	X, r24
    208e:	6c c0       	rjmp	.+216    	; 0x2168 <M_PORT_voidInit+0x78e>
					else
					{
						/* Error */
					}
				}
				else if(ConfigPtr[Local_u8Counter].PinDirection == PORT_INPUT)
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	88 2f       	mov	r24, r24
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9c 01       	movw	r18, r24
    2098:	22 0f       	add	r18, r18
    209a:	33 1f       	adc	r19, r19
    209c:	22 0f       	add	r18, r18
    209e:	33 1f       	adc	r19, r19
    20a0:	8c 81       	ldd	r24, Y+4	; 0x04
    20a2:	9d 81       	ldd	r25, Y+5	; 0x05
    20a4:	fc 01       	movw	r30, r24
    20a6:	e2 0f       	add	r30, r18
    20a8:	f3 1f       	adc	r31, r19
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	88 23       	and	r24, r24
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <M_PORT_voidInit+0x6d8>
    20b0:	5b c0       	rjmp	.+182    	; 0x2168 <M_PORT_voidInit+0x78e>
				{
					/* Set the input direction by clear the bits in DDRD register */
					CLR_BIT(DDRD_REG,Local_u8Pin);
    20b2:	a1 e3       	ldi	r26, 0x31	; 49
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e1 e3       	ldi	r30, 0x31	; 49
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 81       	ld	r24, Z
    20bc:	48 2f       	mov	r20, r24
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	28 2f       	mov	r18, r24
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <M_PORT_voidInit+0x6f4>
    20ca:	88 0f       	add	r24, r24
    20cc:	99 1f       	adc	r25, r25
    20ce:	2a 95       	dec	r18
    20d0:	e2 f7       	brpl	.-8      	; 0x20ca <M_PORT_voidInit+0x6f0>
    20d2:	80 95       	com	r24
    20d4:	84 23       	and	r24, r20
    20d6:	8c 93       	st	X, r24
					/* Set the internal attach in PORTD register */
					if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_FLOATING)
    20d8:	89 81       	ldd	r24, Y+1	; 0x01
    20da:	88 2f       	mov	r24, r24
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	9c 01       	movw	r18, r24
    20e0:	22 0f       	add	r18, r18
    20e2:	33 1f       	adc	r19, r19
    20e4:	22 0f       	add	r18, r18
    20e6:	33 1f       	adc	r19, r19
    20e8:	8c 81       	ldd	r24, Y+4	; 0x04
    20ea:	9d 81       	ldd	r25, Y+5	; 0x05
    20ec:	fc 01       	movw	r30, r24
    20ee:	e2 0f       	add	r30, r18
    20f0:	f3 1f       	adc	r31, r19
    20f2:	83 81       	ldd	r24, Z+3	; 0x03
    20f4:	88 23       	and	r24, r24
    20f6:	a9 f4       	brne	.+42     	; 0x2122 <M_PORT_voidInit+0x748>
					{
						CLR_BIT(PORTD_REG,Local_u8Pin);
    20f8:	a2 e3       	ldi	r26, 0x32	; 50
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	e2 e3       	ldi	r30, 0x32	; 50
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	48 2f       	mov	r20, r24
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	28 2f       	mov	r18, r24
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	81 e0       	ldi	r24, 0x01	; 1
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	02 2e       	mov	r0, r18
    2110:	02 c0       	rjmp	.+4      	; 0x2116 <M_PORT_voidInit+0x73c>
    2112:	88 0f       	add	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	0a 94       	dec	r0
    2118:	e2 f7       	brpl	.-8      	; 0x2112 <M_PORT_voidInit+0x738>
    211a:	80 95       	com	r24
    211c:	84 23       	and	r24, r20
    211e:	8c 93       	st	X, r24
    2120:	23 c0       	rjmp	.+70     	; 0x2168 <M_PORT_voidInit+0x78e>
					}
					else if(ConfigPtr[Local_u8Counter].InternalAttach == PORT_PULLUP)
    2122:	89 81       	ldd	r24, Y+1	; 0x01
    2124:	88 2f       	mov	r24, r24
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	9c 01       	movw	r18, r24
    212a:	22 0f       	add	r18, r18
    212c:	33 1f       	adc	r19, r19
    212e:	22 0f       	add	r18, r18
    2130:	33 1f       	adc	r19, r19
    2132:	8c 81       	ldd	r24, Y+4	; 0x04
    2134:	9d 81       	ldd	r25, Y+5	; 0x05
    2136:	fc 01       	movw	r30, r24
    2138:	e2 0f       	add	r30, r18
    213a:	f3 1f       	adc	r31, r19
    213c:	83 81       	ldd	r24, Z+3	; 0x03
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	99 f4       	brne	.+38     	; 0x2168 <M_PORT_voidInit+0x78e>
					{
						SET_BIT(PORTD_REG,Local_u8Pin);
    2142:	a2 e3       	ldi	r26, 0x32	; 50
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e2 e3       	ldi	r30, 0x32	; 50
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	48 2f       	mov	r20, r24
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	28 2f       	mov	r18, r24
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	02 2e       	mov	r0, r18
    215a:	02 c0       	rjmp	.+4      	; 0x2160 <M_PORT_voidInit+0x786>
    215c:	88 0f       	add	r24, r24
    215e:	99 1f       	adc	r25, r25
    2160:	0a 94       	dec	r0
    2162:	e2 f7       	brpl	.-8      	; 0x215c <M_PORT_voidInit+0x782>
    2164:	84 2b       	or	r24, r20
    2166:	8c 93       	st	X, r24
	if(ConfigPtr != NULL )
	{
		u8 Local_u8Pin;
		u8 Local_u8Port;
		u8 Local_u8Counter;
		for(Local_u8Counter = 0;Local_u8Counter<PORT_PINS_CONFIG_ARR_SIZE;Local_u8Counter++)
    2168:	89 81       	ldd	r24, Y+1	; 0x01
    216a:	8f 5f       	subi	r24, 0xFF	; 255
    216c:	89 83       	std	Y+1, r24	; 0x01
    216e:	89 81       	ldd	r24, Y+1	; 0x01
    2170:	8b 31       	cpi	r24, 0x1B	; 27
    2172:	08 f4       	brcc	.+2      	; 0x2176 <M_PORT_voidInit+0x79c>
    2174:	45 cc       	rjmp	.-1910   	; 0x1a00 <M_PORT_voidInit+0x26>
	}
	else
	{
		/* Error */
	}
}
    2176:	27 96       	adiw	r28, 0x07	; 7
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	08 95       	ret

00002188 <M_GIE_void_EnableGlobalInterrupt>:


#include "GIE_private.h"
#include "GIE_interface.h"

void M_GIE_void_EnableGlobalInterrupt(){
    2188:	df 93       	push	r29
    218a:	cf 93       	push	r28
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
	sei();
    2190:	78 94       	sei
}
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <M_GIE_void_DisableGlobalInterrupt>:
void M_GIE_void_DisableGlobalInterrupt(){
    2198:	df 93       	push	r29
    219a:	cf 93       	push	r28
    219c:	cd b7       	in	r28, 0x3d	; 61
    219e:	de b7       	in	r29, 0x3e	; 62

	cli();
    21a0:	f8 94       	cli
}
    21a2:	cf 91       	pop	r28
    21a4:	df 91       	pop	r29
    21a6:	08 95       	ret

000021a8 <M_DIO_enGetPinValue>:
  parameters (in)  :  channelId (pin)
  parameters (out) :  Non
  Return Value     : Dio_HIGH or DIO_LOW
******************************************/
Dio_PinLevelType M_DIO_enGetPinValue(Dio_ChannelType ChannelId)
{
    21a8:	df 93       	push	r29
    21aa:	cf 93       	push	r28
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <M_DIO_enGetPinValue+0x6>
    21ae:	00 d0       	rcall	.+0      	; 0x21b0 <M_DIO_enGetPinValue+0x8>
    21b0:	00 d0       	rcall	.+0      	; 0x21b2 <M_DIO_enGetPinValue+0xa>
    21b2:	cd b7       	in	r28, 0x3d	; 61
    21b4:	de b7       	in	r29, 0x3e	; 62
    21b6:	8c 83       	std	Y+4, r24	; 0x04
	u8 Local_u8pin = ChannelId % 10;
    21b8:	8c 81       	ldd	r24, Y+4	; 0x04
    21ba:	9a e0       	ldi	r25, 0x0A	; 10
    21bc:	69 2f       	mov	r22, r25
    21be:	0e 94 df 28 	call	0x51be	; 0x51be <__udivmodqi4>
    21c2:	89 2f       	mov	r24, r25
    21c4:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8port = ChannelId / 10;
    21c6:	8c 81       	ldd	r24, Y+4	; 0x04
    21c8:	9a e0       	ldi	r25, 0x0A	; 10
    21ca:	69 2f       	mov	r22, r25
    21cc:	0e 94 df 28 	call	0x51be	; 0x51be <__udivmodqi4>
    21d0:	8a 83       	std	Y+2, r24	; 0x02

	Dio_PinLevelType Local_levelType;
	switch(Local_u8port)
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	28 2f       	mov	r18, r24
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	3e 83       	std	Y+6, r19	; 0x06
    21da:	2d 83       	std	Y+5, r18	; 0x05
    21dc:	4d 81       	ldd	r20, Y+5	; 0x05
    21de:	5e 81       	ldd	r21, Y+6	; 0x06
    21e0:	42 30       	cpi	r20, 0x02	; 2
    21e2:	51 05       	cpc	r21, r1
    21e4:	41 f1       	breq	.+80     	; 0x2236 <M_DIO_enGetPinValue+0x8e>
    21e6:	8d 81       	ldd	r24, Y+5	; 0x05
    21e8:	9e 81       	ldd	r25, Y+6	; 0x06
    21ea:	83 30       	cpi	r24, 0x03	; 3
    21ec:	91 05       	cpc	r25, r1
    21ee:	34 f4       	brge	.+12     	; 0x21fc <M_DIO_enGetPinValue+0x54>
    21f0:	2d 81       	ldd	r18, Y+5	; 0x05
    21f2:	3e 81       	ldd	r19, Y+6	; 0x06
    21f4:	21 30       	cpi	r18, 0x01	; 1
    21f6:	31 05       	cpc	r19, r1
    21f8:	61 f0       	breq	.+24     	; 0x2212 <M_DIO_enGetPinValue+0x6a>
    21fa:	52 c0       	rjmp	.+164    	; 0x22a0 <M_DIO_enGetPinValue+0xf8>
    21fc:	4d 81       	ldd	r20, Y+5	; 0x05
    21fe:	5e 81       	ldd	r21, Y+6	; 0x06
    2200:	43 30       	cpi	r20, 0x03	; 3
    2202:	51 05       	cpc	r21, r1
    2204:	51 f1       	breq	.+84     	; 0x225a <M_DIO_enGetPinValue+0xb2>
    2206:	8d 81       	ldd	r24, Y+5	; 0x05
    2208:	9e 81       	ldd	r25, Y+6	; 0x06
    220a:	84 30       	cpi	r24, 0x04	; 4
    220c:	91 05       	cpc	r25, r1
    220e:	b9 f1       	breq	.+110    	; 0x227e <M_DIO_enGetPinValue+0xd6>
    2210:	47 c0       	rjmp	.+142    	; 0x22a0 <M_DIO_enGetPinValue+0xf8>
	{
		case DIO_PORTA : Local_levelType = GET_BIT( PINA_REG,Local_u8pin); break;
    2212:	e9 e3       	ldi	r30, 0x39	; 57
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	8b 81       	ldd	r24, Y+3	; 0x03
    221e:	88 2f       	mov	r24, r24
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	a9 01       	movw	r20, r18
    2224:	02 c0       	rjmp	.+4      	; 0x222a <M_DIO_enGetPinValue+0x82>
    2226:	55 95       	asr	r21
    2228:	47 95       	ror	r20
    222a:	8a 95       	dec	r24
    222c:	e2 f7       	brpl	.-8      	; 0x2226 <M_DIO_enGetPinValue+0x7e>
    222e:	ca 01       	movw	r24, r20
    2230:	81 70       	andi	r24, 0x01	; 1
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	35 c0       	rjmp	.+106    	; 0x22a0 <M_DIO_enGetPinValue+0xf8>
		case DIO_PORTB : Local_levelType = GET_BIT( PINB_REG,Local_u8pin);	break;
    2236:	e6 e3       	ldi	r30, 0x36	; 54
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	28 2f       	mov	r18, r24
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	88 2f       	mov	r24, r24
    2244:	90 e0       	ldi	r25, 0x00	; 0
    2246:	a9 01       	movw	r20, r18
    2248:	02 c0       	rjmp	.+4      	; 0x224e <M_DIO_enGetPinValue+0xa6>
    224a:	55 95       	asr	r21
    224c:	47 95       	ror	r20
    224e:	8a 95       	dec	r24
    2250:	e2 f7       	brpl	.-8      	; 0x224a <M_DIO_enGetPinValue+0xa2>
    2252:	ca 01       	movw	r24, r20
    2254:	81 70       	andi	r24, 0x01	; 1
    2256:	89 83       	std	Y+1, r24	; 0x01
    2258:	23 c0       	rjmp	.+70     	; 0x22a0 <M_DIO_enGetPinValue+0xf8>
		case DIO_PORTC : Local_levelType = GET_BIT( PINC_REG,Local_u8pin);	break;
    225a:	e3 e3       	ldi	r30, 0x33	; 51
    225c:	f0 e0       	ldi	r31, 0x00	; 0
    225e:	80 81       	ld	r24, Z
    2260:	28 2f       	mov	r18, r24
    2262:	30 e0       	ldi	r19, 0x00	; 0
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	88 2f       	mov	r24, r24
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	a9 01       	movw	r20, r18
    226c:	02 c0       	rjmp	.+4      	; 0x2272 <M_DIO_enGetPinValue+0xca>
    226e:	55 95       	asr	r21
    2270:	47 95       	ror	r20
    2272:	8a 95       	dec	r24
    2274:	e2 f7       	brpl	.-8      	; 0x226e <M_DIO_enGetPinValue+0xc6>
    2276:	ca 01       	movw	r24, r20
    2278:	81 70       	andi	r24, 0x01	; 1
    227a:	89 83       	std	Y+1, r24	; 0x01
    227c:	11 c0       	rjmp	.+34     	; 0x22a0 <M_DIO_enGetPinValue+0xf8>
		case DIO_PORTD : Local_levelType = GET_BIT( PIND_REG,Local_u8pin); break;
    227e:	e0 e3       	ldi	r30, 0x30	; 48
    2280:	f0 e0       	ldi	r31, 0x00	; 0
    2282:	80 81       	ld	r24, Z
    2284:	28 2f       	mov	r18, r24
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	88 2f       	mov	r24, r24
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	a9 01       	movw	r20, r18
    2290:	02 c0       	rjmp	.+4      	; 0x2296 <M_DIO_enGetPinValue+0xee>
    2292:	55 95       	asr	r21
    2294:	47 95       	ror	r20
    2296:	8a 95       	dec	r24
    2298:	e2 f7       	brpl	.-8      	; 0x2292 <M_DIO_enGetPinValue+0xea>
    229a:	ca 01       	movw	r24, r20
    229c:	81 70       	andi	r24, 0x01	; 1
    229e:	89 83       	std	Y+1, r24	; 0x01
		default: break;
	}
    return Local_levelType ;
    22a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22a2:	26 96       	adiw	r28, 0x06	; 6
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	de bf       	out	0x3e, r29	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	cd bf       	out	0x3d, r28	; 61
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <M_DIO_voidSetPinValue>:
  parameters (in)  :  channelId (pin) ,Level (Dio_HIGH or Dio_LOW)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_DIO_voidSetPinValue(Dio_ChannelType ChannelId,Dio_PinLevelType Level)
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	28 97       	sbiw	r28, 0x08	; 8
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	8b 83       	std	Y+3, r24	; 0x03
    22ca:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8pin = ChannelId % 10;
    22cc:	8b 81       	ldd	r24, Y+3	; 0x03
    22ce:	9a e0       	ldi	r25, 0x0A	; 10
    22d0:	69 2f       	mov	r22, r25
    22d2:	0e 94 df 28 	call	0x51be	; 0x51be <__udivmodqi4>
    22d6:	89 2f       	mov	r24, r25
    22d8:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8port = ChannelId / 10;
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	9a e0       	ldi	r25, 0x0A	; 10
    22de:	69 2f       	mov	r22, r25
    22e0:	0e 94 df 28 	call	0x51be	; 0x51be <__udivmodqi4>
    22e4:	89 83       	std	Y+1, r24	; 0x01

	if(Level == DIO_HIGH)
    22e6:	8c 81       	ldd	r24, Y+4	; 0x04
    22e8:	81 30       	cpi	r24, 0x01	; 1
    22ea:	09 f0       	breq	.+2      	; 0x22ee <M_DIO_voidSetPinValue+0x3a>
    22ec:	70 c0       	rjmp	.+224    	; 0x23ce <M_DIO_voidSetPinValue+0x11a>
	{
		switch(Local_u8port)
    22ee:	89 81       	ldd	r24, Y+1	; 0x01
    22f0:	28 2f       	mov	r18, r24
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	38 87       	std	Y+8, r19	; 0x08
    22f6:	2f 83       	std	Y+7, r18	; 0x07
    22f8:	8f 81       	ldd	r24, Y+7	; 0x07
    22fa:	98 85       	ldd	r25, Y+8	; 0x08
    22fc:	82 30       	cpi	r24, 0x02	; 2
    22fe:	91 05       	cpc	r25, r1
    2300:	51 f1       	breq	.+84     	; 0x2356 <M_DIO_voidSetPinValue+0xa2>
    2302:	2f 81       	ldd	r18, Y+7	; 0x07
    2304:	38 85       	ldd	r19, Y+8	; 0x08
    2306:	23 30       	cpi	r18, 0x03	; 3
    2308:	31 05       	cpc	r19, r1
    230a:	34 f4       	brge	.+12     	; 0x2318 <M_DIO_voidSetPinValue+0x64>
    230c:	8f 81       	ldd	r24, Y+7	; 0x07
    230e:	98 85       	ldd	r25, Y+8	; 0x08
    2310:	81 30       	cpi	r24, 0x01	; 1
    2312:	91 05       	cpc	r25, r1
    2314:	61 f0       	breq	.+24     	; 0x232e <M_DIO_voidSetPinValue+0x7a>
    2316:	d3 c0       	rjmp	.+422    	; 0x24be <M_DIO_voidSetPinValue+0x20a>
    2318:	2f 81       	ldd	r18, Y+7	; 0x07
    231a:	38 85       	ldd	r19, Y+8	; 0x08
    231c:	23 30       	cpi	r18, 0x03	; 3
    231e:	31 05       	cpc	r19, r1
    2320:	71 f1       	breq	.+92     	; 0x237e <M_DIO_voidSetPinValue+0xca>
    2322:	8f 81       	ldd	r24, Y+7	; 0x07
    2324:	98 85       	ldd	r25, Y+8	; 0x08
    2326:	84 30       	cpi	r24, 0x04	; 4
    2328:	91 05       	cpc	r25, r1
    232a:	e9 f1       	breq	.+122    	; 0x23a6 <M_DIO_voidSetPinValue+0xf2>
    232c:	c8 c0       	rjmp	.+400    	; 0x24be <M_DIO_voidSetPinValue+0x20a>
		{
			case DIO_PORTA : SET_BIT( PORTA_REG,Local_u8pin); break;
    232e:	ab e3       	ldi	r26, 0x3B	; 59
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	eb e3       	ldi	r30, 0x3B	; 59
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	48 2f       	mov	r20, r24
    233a:	8a 81       	ldd	r24, Y+2	; 0x02
    233c:	28 2f       	mov	r18, r24
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	02 2e       	mov	r0, r18
    2346:	02 c0       	rjmp	.+4      	; 0x234c <M_DIO_voidSetPinValue+0x98>
    2348:	88 0f       	add	r24, r24
    234a:	99 1f       	adc	r25, r25
    234c:	0a 94       	dec	r0
    234e:	e2 f7       	brpl	.-8      	; 0x2348 <M_DIO_voidSetPinValue+0x94>
    2350:	84 2b       	or	r24, r20
    2352:	8c 93       	st	X, r24
    2354:	b4 c0       	rjmp	.+360    	; 0x24be <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTB : SET_BIT( PORTB_REG,Local_u8pin); break;
    2356:	a8 e3       	ldi	r26, 0x38	; 56
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	e8 e3       	ldi	r30, 0x38	; 56
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	48 2f       	mov	r20, r24
    2362:	8a 81       	ldd	r24, Y+2	; 0x02
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	02 2e       	mov	r0, r18
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <M_DIO_voidSetPinValue+0xc0>
    2370:	88 0f       	add	r24, r24
    2372:	99 1f       	adc	r25, r25
    2374:	0a 94       	dec	r0
    2376:	e2 f7       	brpl	.-8      	; 0x2370 <M_DIO_voidSetPinValue+0xbc>
    2378:	84 2b       	or	r24, r20
    237a:	8c 93       	st	X, r24
    237c:	a0 c0       	rjmp	.+320    	; 0x24be <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTC : SET_BIT( PORTC_REG,Local_u8pin); break;
    237e:	a5 e3       	ldi	r26, 0x35	; 53
    2380:	b0 e0       	ldi	r27, 0x00	; 0
    2382:	e5 e3       	ldi	r30, 0x35	; 53
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	48 2f       	mov	r20, r24
    238a:	8a 81       	ldd	r24, Y+2	; 0x02
    238c:	28 2f       	mov	r18, r24
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	02 2e       	mov	r0, r18
    2396:	02 c0       	rjmp	.+4      	; 0x239c <M_DIO_voidSetPinValue+0xe8>
    2398:	88 0f       	add	r24, r24
    239a:	99 1f       	adc	r25, r25
    239c:	0a 94       	dec	r0
    239e:	e2 f7       	brpl	.-8      	; 0x2398 <M_DIO_voidSetPinValue+0xe4>
    23a0:	84 2b       	or	r24, r20
    23a2:	8c 93       	st	X, r24
    23a4:	8c c0       	rjmp	.+280    	; 0x24be <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTD : SET_BIT( PORTD_REG,Local_u8pin); break;
    23a6:	a2 e3       	ldi	r26, 0x32	; 50
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e2 e3       	ldi	r30, 0x32	; 50
    23ac:	f0 e0       	ldi	r31, 0x00	; 0
    23ae:	80 81       	ld	r24, Z
    23b0:	48 2f       	mov	r20, r24
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	28 2f       	mov	r18, r24
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	90 e0       	ldi	r25, 0x00	; 0
    23bc:	02 2e       	mov	r0, r18
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <M_DIO_voidSetPinValue+0x110>
    23c0:	88 0f       	add	r24, r24
    23c2:	99 1f       	adc	r25, r25
    23c4:	0a 94       	dec	r0
    23c6:	e2 f7       	brpl	.-8      	; 0x23c0 <M_DIO_voidSetPinValue+0x10c>
    23c8:	84 2b       	or	r24, r20
    23ca:	8c 93       	st	X, r24
    23cc:	78 c0       	rjmp	.+240    	; 0x24be <M_DIO_voidSetPinValue+0x20a>
			default: break;
		}
	}
	else if (Level == DIO_LOW)
    23ce:	8c 81       	ldd	r24, Y+4	; 0x04
    23d0:	88 23       	and	r24, r24
    23d2:	09 f0       	breq	.+2      	; 0x23d6 <M_DIO_voidSetPinValue+0x122>
    23d4:	74 c0       	rjmp	.+232    	; 0x24be <M_DIO_voidSetPinValue+0x20a>
	{
		switch(Local_u8port)
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	28 2f       	mov	r18, r24
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	3e 83       	std	Y+6, r19	; 0x06
    23de:	2d 83       	std	Y+5, r18	; 0x05
    23e0:	8d 81       	ldd	r24, Y+5	; 0x05
    23e2:	9e 81       	ldd	r25, Y+6	; 0x06
    23e4:	82 30       	cpi	r24, 0x02	; 2
    23e6:	91 05       	cpc	r25, r1
    23e8:	61 f1       	breq	.+88     	; 0x2442 <M_DIO_voidSetPinValue+0x18e>
    23ea:	2d 81       	ldd	r18, Y+5	; 0x05
    23ec:	3e 81       	ldd	r19, Y+6	; 0x06
    23ee:	23 30       	cpi	r18, 0x03	; 3
    23f0:	31 05       	cpc	r19, r1
    23f2:	34 f4       	brge	.+12     	; 0x2400 <M_DIO_voidSetPinValue+0x14c>
    23f4:	8d 81       	ldd	r24, Y+5	; 0x05
    23f6:	9e 81       	ldd	r25, Y+6	; 0x06
    23f8:	81 30       	cpi	r24, 0x01	; 1
    23fa:	91 05       	cpc	r25, r1
    23fc:	69 f0       	breq	.+26     	; 0x2418 <M_DIO_voidSetPinValue+0x164>
    23fe:	5f c0       	rjmp	.+190    	; 0x24be <M_DIO_voidSetPinValue+0x20a>
    2400:	2d 81       	ldd	r18, Y+5	; 0x05
    2402:	3e 81       	ldd	r19, Y+6	; 0x06
    2404:	23 30       	cpi	r18, 0x03	; 3
    2406:	31 05       	cpc	r19, r1
    2408:	89 f1       	breq	.+98     	; 0x246c <M_DIO_voidSetPinValue+0x1b8>
    240a:	8d 81       	ldd	r24, Y+5	; 0x05
    240c:	9e 81       	ldd	r25, Y+6	; 0x06
    240e:	84 30       	cpi	r24, 0x04	; 4
    2410:	91 05       	cpc	r25, r1
    2412:	09 f4       	brne	.+2      	; 0x2416 <M_DIO_voidSetPinValue+0x162>
    2414:	40 c0       	rjmp	.+128    	; 0x2496 <M_DIO_voidSetPinValue+0x1e2>
    2416:	53 c0       	rjmp	.+166    	; 0x24be <M_DIO_voidSetPinValue+0x20a>
		{
			case DIO_PORTA : CLR_BIT( PORTA_REG,Local_u8pin); break;
    2418:	ab e3       	ldi	r26, 0x3B	; 59
    241a:	b0 e0       	ldi	r27, 0x00	; 0
    241c:	eb e3       	ldi	r30, 0x3B	; 59
    241e:	f0 e0       	ldi	r31, 0x00	; 0
    2420:	80 81       	ld	r24, Z
    2422:	48 2f       	mov	r20, r24
    2424:	8a 81       	ldd	r24, Y+2	; 0x02
    2426:	28 2f       	mov	r18, r24
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	02 2e       	mov	r0, r18
    2430:	02 c0       	rjmp	.+4      	; 0x2436 <M_DIO_voidSetPinValue+0x182>
    2432:	88 0f       	add	r24, r24
    2434:	99 1f       	adc	r25, r25
    2436:	0a 94       	dec	r0
    2438:	e2 f7       	brpl	.-8      	; 0x2432 <M_DIO_voidSetPinValue+0x17e>
    243a:	80 95       	com	r24
    243c:	84 23       	and	r24, r20
    243e:	8c 93       	st	X, r24
    2440:	3e c0       	rjmp	.+124    	; 0x24be <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTB : CLR_BIT( PORTB_REG,Local_u8pin); break;
    2442:	a8 e3       	ldi	r26, 0x38	; 56
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	e8 e3       	ldi	r30, 0x38	; 56
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	48 2f       	mov	r20, r24
    244e:	8a 81       	ldd	r24, Y+2	; 0x02
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	02 2e       	mov	r0, r18
    245a:	02 c0       	rjmp	.+4      	; 0x2460 <M_DIO_voidSetPinValue+0x1ac>
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	0a 94       	dec	r0
    2462:	e2 f7       	brpl	.-8      	; 0x245c <M_DIO_voidSetPinValue+0x1a8>
    2464:	80 95       	com	r24
    2466:	84 23       	and	r24, r20
    2468:	8c 93       	st	X, r24
    246a:	29 c0       	rjmp	.+82     	; 0x24be <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTC : CLR_BIT( PORTC_REG,Local_u8pin); break;
    246c:	a5 e3       	ldi	r26, 0x35	; 53
    246e:	b0 e0       	ldi	r27, 0x00	; 0
    2470:	e5 e3       	ldi	r30, 0x35	; 53
    2472:	f0 e0       	ldi	r31, 0x00	; 0
    2474:	80 81       	ld	r24, Z
    2476:	48 2f       	mov	r20, r24
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	28 2f       	mov	r18, r24
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	02 2e       	mov	r0, r18
    2484:	02 c0       	rjmp	.+4      	; 0x248a <M_DIO_voidSetPinValue+0x1d6>
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	0a 94       	dec	r0
    248c:	e2 f7       	brpl	.-8      	; 0x2486 <M_DIO_voidSetPinValue+0x1d2>
    248e:	80 95       	com	r24
    2490:	84 23       	and	r24, r20
    2492:	8c 93       	st	X, r24
    2494:	14 c0       	rjmp	.+40     	; 0x24be <M_DIO_voidSetPinValue+0x20a>
			case DIO_PORTD : CLR_BIT( PORTD_REG,Local_u8pin); break;
    2496:	a2 e3       	ldi	r26, 0x32	; 50
    2498:	b0 e0       	ldi	r27, 0x00	; 0
    249a:	e2 e3       	ldi	r30, 0x32	; 50
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	48 2f       	mov	r20, r24
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	28 2f       	mov	r18, r24
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	02 2e       	mov	r0, r18
    24ae:	02 c0       	rjmp	.+4      	; 0x24b4 <M_DIO_voidSetPinValue+0x200>
    24b0:	88 0f       	add	r24, r24
    24b2:	99 1f       	adc	r25, r25
    24b4:	0a 94       	dec	r0
    24b6:	e2 f7       	brpl	.-8      	; 0x24b0 <M_DIO_voidSetPinValue+0x1fc>
    24b8:	80 95       	com	r24
    24ba:	84 23       	and	r24, r20
    24bc:	8c 93       	st	X, r24
			default: break;
		}
	}
}
    24be:	28 96       	adiw	r28, 0x08	; 8
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	de bf       	out	0x3e, r29	; 62
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	cd bf       	out	0x3d, r28	; 61
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	08 95       	ret

000024d0 <M_DIO_enGetPortValue>:
  parameters (in)  :  PortId
  parameters (out) :  Non
  Return Value     : Dio_PortLevelType
******************************************/
Dio_PortLevelType M_DIO_enGetPortValue(Dio_PortType PortId)
{
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	00 d0       	rcall	.+0      	; 0x24d6 <M_DIO_enGetPortValue+0x6>
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <M_DIO_enGetPortValue+0x8>
    24d8:	cd b7       	in	r28, 0x3d	; 61
    24da:	de b7       	in	r29, 0x3e	; 62
    24dc:	8a 83       	std	Y+2, r24	; 0x02
	Dio_PortLevelType Local_u8Reading;

	switch( PortId)
    24de:	8a 81       	ldd	r24, Y+2	; 0x02
    24e0:	28 2f       	mov	r18, r24
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	3c 83       	std	Y+4, r19	; 0x04
    24e6:	2b 83       	std	Y+3, r18	; 0x03
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	9c 81       	ldd	r25, Y+4	; 0x04
    24ec:	82 30       	cpi	r24, 0x02	; 2
    24ee:	91 05       	cpc	r25, r1
    24f0:	d9 f0       	breq	.+54     	; 0x2528 <M_DIO_enGetPortValue+0x58>
    24f2:	2b 81       	ldd	r18, Y+3	; 0x03
    24f4:	3c 81       	ldd	r19, Y+4	; 0x04
    24f6:	23 30       	cpi	r18, 0x03	; 3
    24f8:	31 05       	cpc	r19, r1
    24fa:	34 f4       	brge	.+12     	; 0x2508 <M_DIO_enGetPortValue+0x38>
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	91 05       	cpc	r25, r1
    2504:	61 f0       	breq	.+24     	; 0x251e <M_DIO_enGetPortValue+0x4e>
    2506:	1e c0       	rjmp	.+60     	; 0x2544 <M_DIO_enGetPortValue+0x74>
    2508:	2b 81       	ldd	r18, Y+3	; 0x03
    250a:	3c 81       	ldd	r19, Y+4	; 0x04
    250c:	23 30       	cpi	r18, 0x03	; 3
    250e:	31 05       	cpc	r19, r1
    2510:	81 f0       	breq	.+32     	; 0x2532 <M_DIO_enGetPortValue+0x62>
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	84 30       	cpi	r24, 0x04	; 4
    2518:	91 05       	cpc	r25, r1
    251a:	81 f0       	breq	.+32     	; 0x253c <M_DIO_enGetPortValue+0x6c>
    251c:	13 c0       	rjmp	.+38     	; 0x2544 <M_DIO_enGetPortValue+0x74>
	{
		case DIO_PORTA : Local_u8Reading =  PORTA_REG; break;
    251e:	eb e3       	ldi	r30, 0x3B	; 59
    2520:	f0 e0       	ldi	r31, 0x00	; 0
    2522:	80 81       	ld	r24, Z
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	0e c0       	rjmp	.+28     	; 0x2544 <M_DIO_enGetPortValue+0x74>
		case DIO_PORTB : Local_u8Reading =  PORTB_REG; break;
    2528:	e8 e3       	ldi	r30, 0x38	; 56
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	89 83       	std	Y+1, r24	; 0x01
    2530:	09 c0       	rjmp	.+18     	; 0x2544 <M_DIO_enGetPortValue+0x74>
		case DIO_PORTC : Local_u8Reading =  PORTC_REG; break;
    2532:	e5 e3       	ldi	r30, 0x35	; 53
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	04 c0       	rjmp	.+8      	; 0x2544 <M_DIO_enGetPortValue+0x74>
		case DIO_PORTD : Local_u8Reading =  PORTD_REG; break;
    253c:	e2 e3       	ldi	r30, 0x32	; 50
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	89 83       	std	Y+1, r24	; 0x01
		default: break;
	}

	return Local_u8Reading;
    2544:	89 81       	ldd	r24, Y+1	; 0x01
}
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	0f 90       	pop	r0
    254e:	cf 91       	pop	r28
    2550:	df 91       	pop	r29
    2552:	08 95       	ret

00002554 <M_DIO_voidSetPortValue>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_DIO_voidSetPortValue(Dio_PortType PortId,Dio_PortLevelType Level)
{
    2554:	df 93       	push	r29
    2556:	cf 93       	push	r28
    2558:	00 d0       	rcall	.+0      	; 0x255a <M_DIO_voidSetPortValue+0x6>
    255a:	00 d0       	rcall	.+0      	; 0x255c <M_DIO_voidSetPortValue+0x8>
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	89 83       	std	Y+1, r24	; 0x01
    2562:	6a 83       	std	Y+2, r22	; 0x02
	switch(PortId)
    2564:	89 81       	ldd	r24, Y+1	; 0x01
    2566:	28 2f       	mov	r18, r24
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	3c 83       	std	Y+4, r19	; 0x04
    256c:	2b 83       	std	Y+3, r18	; 0x03
    256e:	8b 81       	ldd	r24, Y+3	; 0x03
    2570:	9c 81       	ldd	r25, Y+4	; 0x04
    2572:	82 30       	cpi	r24, 0x02	; 2
    2574:	91 05       	cpc	r25, r1
    2576:	d9 f0       	breq	.+54     	; 0x25ae <M_DIO_voidSetPortValue+0x5a>
    2578:	2b 81       	ldd	r18, Y+3	; 0x03
    257a:	3c 81       	ldd	r19, Y+4	; 0x04
    257c:	23 30       	cpi	r18, 0x03	; 3
    257e:	31 05       	cpc	r19, r1
    2580:	34 f4       	brge	.+12     	; 0x258e <M_DIO_voidSetPortValue+0x3a>
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	9c 81       	ldd	r25, Y+4	; 0x04
    2586:	81 30       	cpi	r24, 0x01	; 1
    2588:	91 05       	cpc	r25, r1
    258a:	61 f0       	breq	.+24     	; 0x25a4 <M_DIO_voidSetPortValue+0x50>
    258c:	1e c0       	rjmp	.+60     	; 0x25ca <M_DIO_voidSetPortValue+0x76>
    258e:	2b 81       	ldd	r18, Y+3	; 0x03
    2590:	3c 81       	ldd	r19, Y+4	; 0x04
    2592:	23 30       	cpi	r18, 0x03	; 3
    2594:	31 05       	cpc	r19, r1
    2596:	81 f0       	breq	.+32     	; 0x25b8 <M_DIO_voidSetPortValue+0x64>
    2598:	8b 81       	ldd	r24, Y+3	; 0x03
    259a:	9c 81       	ldd	r25, Y+4	; 0x04
    259c:	84 30       	cpi	r24, 0x04	; 4
    259e:	91 05       	cpc	r25, r1
    25a0:	81 f0       	breq	.+32     	; 0x25c2 <M_DIO_voidSetPortValue+0x6e>
    25a2:	13 c0       	rjmp	.+38     	; 0x25ca <M_DIO_voidSetPortValue+0x76>
	{
    	case DIO_PORTA : PORTA_REG = Level; break;
    25a4:	eb e3       	ldi	r30, 0x3B	; 59
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	8a 81       	ldd	r24, Y+2	; 0x02
    25aa:	80 83       	st	Z, r24
    25ac:	0e c0       	rjmp	.+28     	; 0x25ca <M_DIO_voidSetPortValue+0x76>
		case DIO_PORTB : PORTB_REG = Level; break;
    25ae:	e8 e3       	ldi	r30, 0x38	; 56
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	8a 81       	ldd	r24, Y+2	; 0x02
    25b4:	80 83       	st	Z, r24
    25b6:	09 c0       	rjmp	.+18     	; 0x25ca <M_DIO_voidSetPortValue+0x76>
		case DIO_PORTC : PORTC_REG = Level; break;
    25b8:	e5 e3       	ldi	r30, 0x35	; 53
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	80 83       	st	Z, r24
    25c0:	04 c0       	rjmp	.+8      	; 0x25ca <M_DIO_voidSetPortValue+0x76>
		case DIO_PORTD : PORTD_REG = Level; break;
    25c2:	e2 e3       	ldi	r30, 0x32	; 50
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	80 83       	st	Z, r24
		default: break;
	}
}
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	cf 91       	pop	r28
    25d4:	df 91       	pop	r29
    25d6:	08 95       	ret

000025d8 <M_DIO_voidTogglePin>:
  parameters (in)  :  PortId, Level (0-255)
  parameters (out) :  Non
  Return Value     : void
******************************************/
void M_DIO_voidTogglePin(Dio_ChannelType channelId)
{
    25d8:	df 93       	push	r29
    25da:	cf 93       	push	r28
    25dc:	00 d0       	rcall	.+0      	; 0x25de <M_DIO_voidTogglePin+0x6>
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <M_DIO_voidTogglePin+0x8>
    25e0:	0f 92       	push	r0
    25e2:	cd b7       	in	r28, 0x3d	; 61
    25e4:	de b7       	in	r29, 0x3e	; 62
    25e6:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8pin = channelId % 10;
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	9a e0       	ldi	r25, 0x0A	; 10
    25ec:	69 2f       	mov	r22, r25
    25ee:	0e 94 df 28 	call	0x51be	; 0x51be <__udivmodqi4>
    25f2:	89 2f       	mov	r24, r25
    25f4:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8port = channelId/ 10;
    25f6:	8b 81       	ldd	r24, Y+3	; 0x03
    25f8:	9a e0       	ldi	r25, 0x0A	; 10
    25fa:	69 2f       	mov	r22, r25
    25fc:	0e 94 df 28 	call	0x51be	; 0x51be <__udivmodqi4>
    2600:	89 83       	std	Y+1, r24	; 0x01

	switch(Local_u8port)
    2602:	89 81       	ldd	r24, Y+1	; 0x01
    2604:	28 2f       	mov	r18, r24
    2606:	30 e0       	ldi	r19, 0x00	; 0
    2608:	3d 83       	std	Y+5, r19	; 0x05
    260a:	2c 83       	std	Y+4, r18	; 0x04
    260c:	8c 81       	ldd	r24, Y+4	; 0x04
    260e:	9d 81       	ldd	r25, Y+5	; 0x05
    2610:	82 30       	cpi	r24, 0x02	; 2
    2612:	91 05       	cpc	r25, r1
    2614:	51 f1       	breq	.+84     	; 0x266a <M_DIO_voidTogglePin+0x92>
    2616:	2c 81       	ldd	r18, Y+4	; 0x04
    2618:	3d 81       	ldd	r19, Y+5	; 0x05
    261a:	23 30       	cpi	r18, 0x03	; 3
    261c:	31 05       	cpc	r19, r1
    261e:	34 f4       	brge	.+12     	; 0x262c <M_DIO_voidTogglePin+0x54>
    2620:	8c 81       	ldd	r24, Y+4	; 0x04
    2622:	9d 81       	ldd	r25, Y+5	; 0x05
    2624:	81 30       	cpi	r24, 0x01	; 1
    2626:	91 05       	cpc	r25, r1
    2628:	61 f0       	breq	.+24     	; 0x2642 <M_DIO_voidTogglePin+0x6a>
    262a:	5a c0       	rjmp	.+180    	; 0x26e0 <M_DIO_voidTogglePin+0x108>
    262c:	2c 81       	ldd	r18, Y+4	; 0x04
    262e:	3d 81       	ldd	r19, Y+5	; 0x05
    2630:	23 30       	cpi	r18, 0x03	; 3
    2632:	31 05       	cpc	r19, r1
    2634:	71 f1       	breq	.+92     	; 0x2692 <M_DIO_voidTogglePin+0xba>
    2636:	8c 81       	ldd	r24, Y+4	; 0x04
    2638:	9d 81       	ldd	r25, Y+5	; 0x05
    263a:	84 30       	cpi	r24, 0x04	; 4
    263c:	91 05       	cpc	r25, r1
    263e:	e9 f1       	breq	.+122    	; 0x26ba <M_DIO_voidTogglePin+0xe2>
    2640:	4f c0       	rjmp	.+158    	; 0x26e0 <M_DIO_voidTogglePin+0x108>
	{
		case DIO_PORTA : TOG_BIT(PORTA_REG,Local_u8pin); break;
    2642:	ab e3       	ldi	r26, 0x3B	; 59
    2644:	b0 e0       	ldi	r27, 0x00	; 0
    2646:	eb e3       	ldi	r30, 0x3B	; 59
    2648:	f0 e0       	ldi	r31, 0x00	; 0
    264a:	80 81       	ld	r24, Z
    264c:	48 2f       	mov	r20, r24
    264e:	8a 81       	ldd	r24, Y+2	; 0x02
    2650:	28 2f       	mov	r18, r24
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	81 e0       	ldi	r24, 0x01	; 1
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	02 2e       	mov	r0, r18
    265a:	02 c0       	rjmp	.+4      	; 0x2660 <M_DIO_voidTogglePin+0x88>
    265c:	88 0f       	add	r24, r24
    265e:	99 1f       	adc	r25, r25
    2660:	0a 94       	dec	r0
    2662:	e2 f7       	brpl	.-8      	; 0x265c <M_DIO_voidTogglePin+0x84>
    2664:	84 27       	eor	r24, r20
    2666:	8c 93       	st	X, r24
    2668:	3b c0       	rjmp	.+118    	; 0x26e0 <M_DIO_voidTogglePin+0x108>
		case DIO_PORTB : TOG_BIT(PORTB_REG,Local_u8pin); break;
    266a:	a8 e3       	ldi	r26, 0x38	; 56
    266c:	b0 e0       	ldi	r27, 0x00	; 0
    266e:	e8 e3       	ldi	r30, 0x38	; 56
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	80 81       	ld	r24, Z
    2674:	48 2f       	mov	r20, r24
    2676:	8a 81       	ldd	r24, Y+2	; 0x02
    2678:	28 2f       	mov	r18, r24
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	02 2e       	mov	r0, r18
    2682:	02 c0       	rjmp	.+4      	; 0x2688 <M_DIO_voidTogglePin+0xb0>
    2684:	88 0f       	add	r24, r24
    2686:	99 1f       	adc	r25, r25
    2688:	0a 94       	dec	r0
    268a:	e2 f7       	brpl	.-8      	; 0x2684 <M_DIO_voidTogglePin+0xac>
    268c:	84 27       	eor	r24, r20
    268e:	8c 93       	st	X, r24
    2690:	27 c0       	rjmp	.+78     	; 0x26e0 <M_DIO_voidTogglePin+0x108>
		case DIO_PORTC : TOG_BIT(PORTC_REG,Local_u8pin); break;
    2692:	a5 e3       	ldi	r26, 0x35	; 53
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	e5 e3       	ldi	r30, 0x35	; 53
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	48 2f       	mov	r20, r24
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	28 2f       	mov	r18, r24
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	02 2e       	mov	r0, r18
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <M_DIO_voidTogglePin+0xd8>
    26ac:	88 0f       	add	r24, r24
    26ae:	99 1f       	adc	r25, r25
    26b0:	0a 94       	dec	r0
    26b2:	e2 f7       	brpl	.-8      	; 0x26ac <M_DIO_voidTogglePin+0xd4>
    26b4:	84 27       	eor	r24, r20
    26b6:	8c 93       	st	X, r24
    26b8:	13 c0       	rjmp	.+38     	; 0x26e0 <M_DIO_voidTogglePin+0x108>
		case DIO_PORTD : TOG_BIT(PORTD_REG,Local_u8pin); break;
    26ba:	a2 e3       	ldi	r26, 0x32	; 50
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	e2 e3       	ldi	r30, 0x32	; 50
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	48 2f       	mov	r20, r24
    26c6:	8a 81       	ldd	r24, Y+2	; 0x02
    26c8:	28 2f       	mov	r18, r24
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	02 2e       	mov	r0, r18
    26d2:	02 c0       	rjmp	.+4      	; 0x26d8 <M_DIO_voidTogglePin+0x100>
    26d4:	88 0f       	add	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	0a 94       	dec	r0
    26da:	e2 f7       	brpl	.-8      	; 0x26d4 <M_DIO_voidTogglePin+0xfc>
    26dc:	84 27       	eor	r24, r20
    26de:	8c 93       	st	X, r24
		default: break;
	}
}
    26e0:	0f 90       	pop	r0
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	cf 91       	pop	r28
    26ec:	df 91       	pop	r29
    26ee:	08 95       	ret

000026f0 <M_ADC_void_Init>:
#include "Mcu_HW.h"
#include "BIT_MATH.h"
#include "ADC_interface.h"


void M_ADC_void_Init(ADC_config_t mADC){
    26f0:	df 93       	push	r29
    26f2:	cf 93       	push	r28
    26f4:	00 d0       	rcall	.+0      	; 0x26f6 <M_ADC_void_Init+0x6>
    26f6:	00 d0       	rcall	.+0      	; 0x26f8 <M_ADC_void_Init+0x8>
    26f8:	0f 92       	push	r0
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	49 83       	std	Y+1, r20	; 0x01
    2700:	5a 83       	std	Y+2, r21	; 0x02
    2702:	6b 83       	std	Y+3, r22	; 0x03
    2704:	7c 83       	std	Y+4, r23	; 0x04
    2706:	8d 83       	std	Y+5, r24	; 0x05


	//Right "0" or Left "1" Adjustment of the ADC data register
	ADMUX_REG |= (ADC_ADJUSTMENT<<ADMUX_ADLAR);
    2708:	a7 e2       	ldi	r26, 0x27	; 39
    270a:	b0 e0       	ldi	r27, 0x00	; 0
    270c:	e7 e2       	ldi	r30, 0x27	; 39
    270e:	f0 e0       	ldi	r31, 0x00	; 0
    2710:	80 81       	ld	r24, Z
    2712:	28 2f       	mov	r18, r24
    2714:	80 91 c8 04 	lds	r24, 0x04C8
    2718:	88 2f       	mov	r24, r24
    271a:	90 e0       	ldi	r25, 0x00	; 0
    271c:	88 0f       	add	r24, r24
    271e:	99 1f       	adc	r25, r25
    2720:	82 95       	swap	r24
    2722:	92 95       	swap	r25
    2724:	90 7f       	andi	r25, 0xF0	; 240
    2726:	98 27       	eor	r25, r24
    2728:	80 7f       	andi	r24, 0xF0	; 240
    272a:	98 27       	eor	r25, r24
    272c:	82 2b       	or	r24, r18
    272e:	8c 93       	st	X, r24

	//Voltage Reference
	//ADMUX_REG &= 0x3F; //Zeroing the last 2 bits
	ADMUX_REG |= ((mADC.volt_ref)<<ADMUX_REFS0);
    2730:	a7 e2       	ldi	r26, 0x27	; 39
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	e7 e2       	ldi	r30, 0x27	; 39
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	28 2f       	mov	r18, r24
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	88 2f       	mov	r24, r24
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	00 24       	eor	r0, r0
    2744:	96 95       	lsr	r25
    2746:	87 95       	ror	r24
    2748:	07 94       	ror	r0
    274a:	96 95       	lsr	r25
    274c:	87 95       	ror	r24
    274e:	07 94       	ror	r0
    2750:	98 2f       	mov	r25, r24
    2752:	80 2d       	mov	r24, r0
    2754:	82 2b       	or	r24, r18
    2756:	8c 93       	st	X, r24

	//Auto trigger enable/disable
	ADCSRA_REG |= ((mADC.auto_trigger)<<ADCSRA_ADATE);
    2758:	a6 e2       	ldi	r26, 0x26	; 38
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	e6 e2       	ldi	r30, 0x26	; 38
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	28 2f       	mov	r18, r24
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	88 2f       	mov	r24, r24
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	88 0f       	add	r24, r24
    276c:	99 1f       	adc	r25, r25
    276e:	82 95       	swap	r24
    2770:	92 95       	swap	r25
    2772:	90 7f       	andi	r25, 0xF0	; 240
    2774:	98 27       	eor	r25, r24
    2776:	80 7f       	andi	r24, 0xF0	; 240
    2778:	98 27       	eor	r25, r24
    277a:	82 2b       	or	r24, r18
    277c:	8c 93       	st	X, r24

	//Interrupt Enable/Disable
	ADCSRA_REG |= ((mADC.interrupt)<<ADCSRA_ADIE);
    277e:	a6 e2       	ldi	r26, 0x26	; 38
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	e6 e2       	ldi	r30, 0x26	; 38
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	28 2f       	mov	r18, r24
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	88 2f       	mov	r24, r24
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	88 0f       	add	r24, r24
    2792:	99 1f       	adc	r25, r25
    2794:	88 0f       	add	r24, r24
    2796:	99 1f       	adc	r25, r25
    2798:	88 0f       	add	r24, r24
    279a:	99 1f       	adc	r25, r25
    279c:	82 2b       	or	r24, r18
    279e:	8c 93       	st	X, r24

	//Prescaler Select
	ADCSRA_REG &= 0xF8;
    27a0:	a6 e2       	ldi	r26, 0x26	; 38
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e6 e2       	ldi	r30, 0x26	; 38
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	88 7f       	andi	r24, 0xF8	; 248
    27ac:	8c 93       	st	X, r24
	ADCSRA_REG |= ((mADC.prescaler)<<ADCSRA_ADPS0);
    27ae:	a6 e2       	ldi	r26, 0x26	; 38
    27b0:	b0 e0       	ldi	r27, 0x00	; 0
    27b2:	e6 e2       	ldi	r30, 0x26	; 38
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	90 81       	ld	r25, Z
    27b8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ba:	89 2b       	or	r24, r25
    27bc:	8c 93       	st	X, r24

	//Auto trigger Source
	SFIOR_REG &= 0x0F;
    27be:	a0 e5       	ldi	r26, 0x50	; 80
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e0 e5       	ldi	r30, 0x50	; 80
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	8f 70       	andi	r24, 0x0F	; 15
    27ca:	8c 93       	st	X, r24
	SFIOR_REG |= ((mADC.auto_trigger_source)<<SFIOR_ADTS0);
    27cc:	a0 e5       	ldi	r26, 0x50	; 80
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	e0 e5       	ldi	r30, 0x50	; 80
    27d2:	f0 e0       	ldi	r31, 0x00	; 0
    27d4:	80 81       	ld	r24, Z
    27d6:	28 2f       	mov	r18, r24
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	88 2f       	mov	r24, r24
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	82 95       	swap	r24
    27e4:	92 95       	swap	r25
    27e6:	90 7f       	andi	r25, 0xF0	; 240
    27e8:	98 27       	eor	r25, r24
    27ea:	80 7f       	andi	r24, 0xF0	; 240
    27ec:	98 27       	eor	r25, r24
    27ee:	82 2b       	or	r24, r18
    27f0:	8c 93       	st	X, r24

	//Finally Enable
	ADCSRA_REG |= (1<<ADCSRA_ADEN);
    27f2:	a6 e2       	ldi	r26, 0x26	; 38
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	e6 e2       	ldi	r30, 0x26	; 38
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 81       	ld	r24, Z
    27fc:	80 68       	ori	r24, 0x80	; 128
    27fe:	8c 93       	st	X, r24


}
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	0f 90       	pop	r0
    2806:	0f 90       	pop	r0
    2808:	0f 90       	pop	r0
    280a:	cf 91       	pop	r28
    280c:	df 91       	pop	r29
    280e:	08 95       	ret

00002810 <M_ADC_void_StartConversion>:

void M_ADC_void_StartConversion(){
    2810:	df 93       	push	r29
    2812:	cf 93       	push	r28
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62

	//Start Conversion
	ADCSRA_REG |= (1<<ADCSRA_ADSC);
    2818:	a6 e2       	ldi	r26, 0x26	; 38
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	e6 e2       	ldi	r30, 0x26	; 38
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	80 81       	ld	r24, Z
    2822:	80 64       	ori	r24, 0x40	; 64
    2824:	8c 93       	st	X, r24


}
    2826:	cf 91       	pop	r28
    2828:	df 91       	pop	r29
    282a:	08 95       	ret

0000282c <M_ADC_void_GetDigitalValueSynchNonBlocking>:
//Polling NonBlocking (conversion is started externally)
ADC_state_code_t M_ADC_void_GetDigitalValueSynchNonBlocking(ADC_channel_t channel, u16* data){
    282c:	df 93       	push	r29
    282e:	cf 93       	push	r28
    2830:	00 d0       	rcall	.+0      	; 0x2832 <M_ADC_void_GetDigitalValueSynchNonBlocking+0x6>
    2832:	00 d0       	rcall	.+0      	; 0x2834 <M_ADC_void_GetDigitalValueSynchNonBlocking+0x8>
    2834:	00 d0       	rcall	.+0      	; 0x2836 <M_ADC_void_GetDigitalValueSynchNonBlocking+0xa>
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	89 83       	std	Y+1, r24	; 0x01
    283c:	7b 83       	std	Y+3, r23	; 0x03
    283e:	6a 83       	std	Y+2, r22	; 0x02

	//Channel
	ADMUX_REG &= 0xE0;
    2840:	a7 e2       	ldi	r26, 0x27	; 39
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	e7 e2       	ldi	r30, 0x27	; 39
    2846:	f0 e0       	ldi	r31, 0x00	; 0
    2848:	80 81       	ld	r24, Z
    284a:	80 7e       	andi	r24, 0xE0	; 224
    284c:	8c 93       	st	X, r24
	ADMUX_REG |= channel ;
    284e:	a7 e2       	ldi	r26, 0x27	; 39
    2850:	b0 e0       	ldi	r27, 0x00	; 0
    2852:	e7 e2       	ldi	r30, 0x27	; 39
    2854:	f0 e0       	ldi	r31, 0x00	; 0
    2856:	90 81       	ld	r25, Z
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	89 2b       	or	r24, r25
    285c:	8c 93       	st	X, r24


	if((GET_BIT(ADCSRA_REG,ADCSRA_ADIF)) == 0){
    285e:	e6 e2       	ldi	r30, 0x26	; 38
    2860:	f0 e0       	ldi	r31, 0x00	; 0
    2862:	80 81       	ld	r24, Z
    2864:	82 95       	swap	r24
    2866:	8f 70       	andi	r24, 0x0F	; 15
    2868:	88 2f       	mov	r24, r24
    286a:	90 e0       	ldi	r25, 0x00	; 0
    286c:	81 70       	andi	r24, 0x01	; 1
    286e:	90 70       	andi	r25, 0x00	; 0
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	11 f4       	brne	.+4      	; 0x2878 <M_ADC_void_GetDigitalValueSynchNonBlocking+0x4c>
		return ADC_FAILED;
    2874:	1e 82       	std	Y+6, r1	; 0x06
    2876:	4f c0       	rjmp	.+158    	; 0x2916 <M_ADC_void_GetDigitalValueSynchNonBlocking+0xea>
	}
	else{
	ADCSRA_REG |= (1<<ADCSRA_ADIF); //clear the flag
    2878:	a6 e2       	ldi	r26, 0x26	; 38
    287a:	b0 e0       	ldi	r27, 0x00	; 0
    287c:	e6 e2       	ldi	r30, 0x26	; 38
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	80 81       	ld	r24, Z
    2882:	80 61       	ori	r24, 0x10	; 16
    2884:	8c 93       	st	X, r24

	switch(ADC_ADJUSTMENT){
    2886:	80 91 c8 04 	lds	r24, 0x04C8
    288a:	28 2f       	mov	r18, r24
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	3d 83       	std	Y+5, r19	; 0x05
    2890:	2c 83       	std	Y+4, r18	; 0x04
    2892:	8c 81       	ldd	r24, Y+4	; 0x04
    2894:	9d 81       	ldd	r25, Y+5	; 0x05
    2896:	00 97       	sbiw	r24, 0x00	; 0
    2898:	11 f1       	breq	.+68     	; 0x28de <M_ADC_void_GetDigitalValueSynchNonBlocking+0xb2>
    289a:	2c 81       	ldd	r18, Y+4	; 0x04
    289c:	3d 81       	ldd	r19, Y+5	; 0x05
    289e:	21 30       	cpi	r18, 0x01	; 1
    28a0:	31 05       	cpc	r19, r1
    28a2:	b9 f5       	brne	.+110    	; 0x2912 <M_ADC_void_GetDigitalValueSynchNonBlocking+0xe6>
	case ADC_LEFT_ADJUST:
		(*data) = ADCL_REG;
    28a4:	e4 e2       	ldi	r30, 0x24	; 36
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	80 81       	ld	r24, Z
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	ea 81       	ldd	r30, Y+2	; 0x02
    28b0:	fb 81       	ldd	r31, Y+3	; 0x03
    28b2:	91 83       	std	Z+1, r25	; 0x01
    28b4:	80 83       	st	Z, r24
		(*data) |= ADCH_REG<<2;
    28b6:	ea 81       	ldd	r30, Y+2	; 0x02
    28b8:	fb 81       	ldd	r31, Y+3	; 0x03
    28ba:	20 81       	ld	r18, Z
    28bc:	31 81       	ldd	r19, Z+1	; 0x01
    28be:	e5 e2       	ldi	r30, 0x25	; 37
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	88 2f       	mov	r24, r24
    28c6:	90 e0       	ldi	r25, 0x00	; 0
    28c8:	88 0f       	add	r24, r24
    28ca:	99 1f       	adc	r25, r25
    28cc:	88 0f       	add	r24, r24
    28ce:	99 1f       	adc	r25, r25
    28d0:	82 2b       	or	r24, r18
    28d2:	93 2b       	or	r25, r19
    28d4:	ea 81       	ldd	r30, Y+2	; 0x02
    28d6:	fb 81       	ldd	r31, Y+3	; 0x03
    28d8:	91 83       	std	Z+1, r25	; 0x01
    28da:	80 83       	st	Z, r24
    28dc:	1a c0       	rjmp	.+52     	; 0x2912 <M_ADC_void_GetDigitalValueSynchNonBlocking+0xe6>
		break;
	case ADC_RIGHT_ADJUST:
		(*data) = ADCL_REG;
    28de:	e4 e2       	ldi	r30, 0x24	; 36
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	88 2f       	mov	r24, r24
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	ea 81       	ldd	r30, Y+2	; 0x02
    28ea:	fb 81       	ldd	r31, Y+3	; 0x03
    28ec:	91 83       	std	Z+1, r25	; 0x01
    28ee:	80 83       	st	Z, r24
		(*data) |= (ADCH_REG<<8);
    28f0:	ea 81       	ldd	r30, Y+2	; 0x02
    28f2:	fb 81       	ldd	r31, Y+3	; 0x03
    28f4:	20 81       	ld	r18, Z
    28f6:	31 81       	ldd	r19, Z+1	; 0x01
    28f8:	e5 e2       	ldi	r30, 0x25	; 37
    28fa:	f0 e0       	ldi	r31, 0x00	; 0
    28fc:	80 81       	ld	r24, Z
    28fe:	88 2f       	mov	r24, r24
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	98 2f       	mov	r25, r24
    2904:	88 27       	eor	r24, r24
    2906:	82 2b       	or	r24, r18
    2908:	93 2b       	or	r25, r19
    290a:	ea 81       	ldd	r30, Y+2	; 0x02
    290c:	fb 81       	ldd	r31, Y+3	; 0x03
    290e:	91 83       	std	Z+1, r25	; 0x01
    2910:	80 83       	st	Z, r24
		break;
	}

	return ADC_SUCCEED;
    2912:	31 e0       	ldi	r19, 0x01	; 1
    2914:	3e 83       	std	Y+6, r19	; 0x06
    2916:	8e 81       	ldd	r24, Y+6	; 0x06

	}
}
    2918:	26 96       	adiw	r28, 0x06	; 6
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	de bf       	out	0x3e, r29	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	cd bf       	out	0x3d, r28	; 61
    2924:	cf 91       	pop	r28
    2926:	df 91       	pop	r29
    2928:	08 95       	ret

0000292a <M_ADC_void_GetDigitalValueAsynchCallback>:

//(conversion is started externally)
void M_ADC_void_GetDigitalValueAsynchCallback(ADC_channel_t channel, void (*localCallBack)(void)){
    292a:	df 93       	push	r29
    292c:	cf 93       	push	r28
    292e:	00 d0       	rcall	.+0      	; 0x2930 <M_ADC_void_GetDigitalValueAsynchCallback+0x6>
    2930:	0f 92       	push	r0
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    2936:	89 83       	std	Y+1, r24	; 0x01
    2938:	7b 83       	std	Y+3, r23	; 0x03
    293a:	6a 83       	std	Y+2, r22	; 0x02

	//Channel
	ADMUX_REG &= 0xE0;
    293c:	a7 e2       	ldi	r26, 0x27	; 39
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	e7 e2       	ldi	r30, 0x27	; 39
    2942:	f0 e0       	ldi	r31, 0x00	; 0
    2944:	80 81       	ld	r24, Z
    2946:	80 7e       	andi	r24, 0xE0	; 224
    2948:	8c 93       	st	X, r24
	ADMUX_REG |= channel ;
    294a:	a7 e2       	ldi	r26, 0x27	; 39
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	e7 e2       	ldi	r30, 0x27	; 39
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	90 81       	ld	r25, Z
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	89 2b       	or	r24, r25
    2958:	8c 93       	st	X, r24

	ADC_CallBackPTR = localCallBack;
    295a:	8a 81       	ldd	r24, Y+2	; 0x02
    295c:	9b 81       	ldd	r25, Y+3	; 0x03
    295e:	90 93 c7 04 	sts	0x04C7, r25
    2962:	80 93 c6 04 	sts	0x04C6, r24

}
    2966:	0f 90       	pop	r0
    2968:	0f 90       	pop	r0
    296a:	0f 90       	pop	r0
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <__vector_16>:


ISR(ADC_vect){
    2972:	1f 92       	push	r1
    2974:	0f 92       	push	r0
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	0f 92       	push	r0
    297a:	11 24       	eor	r1, r1
    297c:	2f 93       	push	r18
    297e:	3f 93       	push	r19
    2980:	4f 93       	push	r20
    2982:	5f 93       	push	r21
    2984:	6f 93       	push	r22
    2986:	7f 93       	push	r23
    2988:	8f 93       	push	r24
    298a:	9f 93       	push	r25
    298c:	af 93       	push	r26
    298e:	bf 93       	push	r27
    2990:	ef 93       	push	r30
    2992:	ff 93       	push	r31
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62

	if(ADC_CallBackPTR != NULL){
    299c:	80 91 c6 04 	lds	r24, 0x04C6
    29a0:	90 91 c7 04 	lds	r25, 0x04C7
    29a4:	00 97       	sbiw	r24, 0x00	; 0
    29a6:	29 f0       	breq	.+10     	; 0x29b2 <__vector_16+0x40>
		ADC_CallBackPTR();
    29a8:	e0 91 c6 04 	lds	r30, 0x04C6
    29ac:	f0 91 c7 04 	lds	r31, 0x04C7
    29b0:	09 95       	icall
	}



}
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	ff 91       	pop	r31
    29b8:	ef 91       	pop	r30
    29ba:	bf 91       	pop	r27
    29bc:	af 91       	pop	r26
    29be:	9f 91       	pop	r25
    29c0:	8f 91       	pop	r24
    29c2:	7f 91       	pop	r23
    29c4:	6f 91       	pop	r22
    29c6:	5f 91       	pop	r21
    29c8:	4f 91       	pop	r20
    29ca:	3f 91       	pop	r19
    29cc:	2f 91       	pop	r18
    29ce:	0f 90       	pop	r0
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	0f 90       	pop	r0
    29d4:	1f 90       	pop	r1
    29d6:	18 95       	reti

000029d8 <H_WIFI_void_WIFIInit>:
extern u8 RX_Counter_UART;
extern S_UART_config_t UART_config  ;

char buff[100];

void H_WIFI_void_WIFIInit(S_WIFI_Config_t S_WIFI_Config) {
    29d8:	df 93       	push	r29
    29da:	cf 93       	push	r28
    29dc:	cd b7       	in	r28, 0x3d	; 61
    29de:	de b7       	in	r29, 0x3e	; 62
    29e0:	c4 5a       	subi	r28, 0xA4	; 164
    29e2:	d0 40       	sbci	r29, 0x00	; 0
    29e4:	0f b6       	in	r0, 0x3f	; 63
    29e6:	f8 94       	cli
    29e8:	de bf       	out	0x3e, r29	; 62
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	cd bf       	out	0x3d, r28	; 61
    29ee:	fe 01       	movw	r30, r28
    29f0:	e2 56       	subi	r30, 0x62	; 98
    29f2:	ff 4f       	sbci	r31, 0xFF	; 255
    29f4:	20 83       	st	Z, r18
    29f6:	31 83       	std	Z+1, r19	; 0x01
    29f8:	42 83       	std	Z+2, r20	; 0x02
    29fa:	53 83       	std	Z+3, r21	; 0x03
    29fc:	64 83       	std	Z+4, r22	; 0x04
    29fe:	75 83       	std	Z+5, r23	; 0x05
    2a00:	86 83       	std	Z+6, r24	; 0x06

	char command[100];
	M_UART_void_UARTInit(UART_config);
    2a02:	80 91 20 03 	lds	r24, 0x0320
    2a06:	90 91 21 03 	lds	r25, 0x0321
    2a0a:	a0 91 22 03 	lds	r26, 0x0322
    2a0e:	b0 91 23 03 	lds	r27, 0x0323
    2a12:	bc 01       	movw	r22, r24
    2a14:	cd 01       	movw	r24, r26
    2a16:	0e 94 ae 07 	call	0xf5c	; 0xf5c <M_UART_void_UARTInit>
	//_delay_ms(500);
	sprintf(command, "AT+CWMODE=%d\r\n", S_WIFI_Config.WIFI_Mode);
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	e2 56       	subi	r30, 0x62	; 98
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	80 81       	ld	r24, Z
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	00 d0       	rcall	.+0      	; 0x2a28 <H_WIFI_void_WIFIInit+0x50>
    2a28:	00 d0       	rcall	.+0      	; 0x2a2a <H_WIFI_void_WIFIInit+0x52>
    2a2a:	00 d0       	rcall	.+0      	; 0x2a2c <H_WIFI_void_WIFIInit+0x54>
    2a2c:	ed b7       	in	r30, 0x3d	; 61
    2a2e:	fe b7       	in	r31, 0x3e	; 62
    2a30:	31 96       	adiw	r30, 0x01	; 1
    2a32:	ce 01       	movw	r24, r28
    2a34:	ca 96       	adiw	r24, 0x3a	; 58
    2a36:	91 83       	std	Z+1, r25	; 0x01
    2a38:	80 83       	st	Z, r24
    2a3a:	80 e6       	ldi	r24, 0x60	; 96
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	93 83       	std	Z+3, r25	; 0x03
    2a40:	82 83       	std	Z+2, r24	; 0x02
    2a42:	35 83       	std	Z+5, r19	; 0x05
    2a44:	24 83       	std	Z+4, r18	; 0x04
    2a46:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <sprintf>
    2a4a:	8d b7       	in	r24, 0x3d	; 61
    2a4c:	9e b7       	in	r25, 0x3e	; 62
    2a4e:	06 96       	adiw	r24, 0x06	; 6
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	9e bf       	out	0x3e, r25	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	8d bf       	out	0x3d, r24	; 61
	WIFI_command_statue_t command_statue = H_WIFI_command_statue_t_sendData(
			command, buff, 2000);
    2a5a:	ce 01       	movw	r24, r28
    2a5c:	ca 96       	adiw	r24, 0x3a	; 58
    2a5e:	20 e3       	ldi	r18, 0x30	; 48
    2a60:	35 e0       	ldi	r19, 0x05	; 5
    2a62:	b9 01       	movw	r22, r18
    2a64:	40 ed       	ldi	r20, 0xD0	; 208
    2a66:	57 e0       	ldi	r21, 0x07	; 7
    2a68:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <H_WIFI_command_statue_t_sendData>
    2a6c:	89 af       	std	Y+57, r24	; 0x39
#if(WIFI_DEBUG)
	//configuar LCD here
	if (command_statue == WIFI_command_ok) {
    2a6e:	89 ad       	ldd	r24, Y+57	; 0x39
    2a70:	88 23       	and	r24, r24
    2a72:	09 f0       	breq	.+2      	; 0x2a76 <H_WIFI_void_WIFIInit+0x9e>
    2a74:	79 c0       	rjmp	.+242    	; 0x2b68 <H_WIFI_void_WIFIInit+0x190>
		H_LCD_void_Clear();
    2a76:	0e 94 51 20 	call	0x40a2	; 0x40a2 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI mode updated");
    2a7a:	8f e6       	ldi	r24, 0x6F	; 111
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>
    2a82:	80 e0       	ldi	r24, 0x00	; 0
    2a84:	90 e0       	ldi	r25, 0x00	; 0
    2a86:	aa ef       	ldi	r26, 0xFA	; 250
    2a88:	b4 e4       	ldi	r27, 0x44	; 68
    2a8a:	8d ab       	std	Y+53, r24	; 0x35
    2a8c:	9e ab       	std	Y+54, r25	; 0x36
    2a8e:	af ab       	std	Y+55, r26	; 0x37
    2a90:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a92:	6d a9       	ldd	r22, Y+53	; 0x35
    2a94:	7e a9       	ldd	r23, Y+54	; 0x36
    2a96:	8f a9       	ldd	r24, Y+55	; 0x37
    2a98:	98 ad       	ldd	r25, Y+56	; 0x38
    2a9a:	20 e0       	ldi	r18, 0x00	; 0
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	4a e7       	ldi	r20, 0x7A	; 122
    2aa0:	55 e4       	ldi	r21, 0x45	; 69
    2aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa6:	dc 01       	movw	r26, r24
    2aa8:	cb 01       	movw	r24, r22
    2aaa:	89 ab       	std	Y+49, r24	; 0x31
    2aac:	9a ab       	std	Y+50, r25	; 0x32
    2aae:	ab ab       	std	Y+51, r26	; 0x33
    2ab0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ab2:	69 a9       	ldd	r22, Y+49	; 0x31
    2ab4:	7a a9       	ldd	r23, Y+50	; 0x32
    2ab6:	8b a9       	ldd	r24, Y+51	; 0x33
    2ab8:	9c a9       	ldd	r25, Y+52	; 0x34
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	40 e8       	ldi	r20, 0x80	; 128
    2ac0:	5f e3       	ldi	r21, 0x3F	; 63
    2ac2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2ac6:	88 23       	and	r24, r24
    2ac8:	2c f4       	brge	.+10     	; 0x2ad4 <H_WIFI_void_WIFIInit+0xfc>
		__ticks = 1;
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	98 ab       	std	Y+48, r25	; 0x30
    2ad0:	8f a7       	std	Y+47, r24	; 0x2f
    2ad2:	3f c0       	rjmp	.+126    	; 0x2b52 <H_WIFI_void_WIFIInit+0x17a>
	else if (__tmp > 65535)
    2ad4:	69 a9       	ldd	r22, Y+49	; 0x31
    2ad6:	7a a9       	ldd	r23, Y+50	; 0x32
    2ad8:	8b a9       	ldd	r24, Y+51	; 0x33
    2ada:	9c a9       	ldd	r25, Y+52	; 0x34
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	3f ef       	ldi	r19, 0xFF	; 255
    2ae0:	4f e7       	ldi	r20, 0x7F	; 127
    2ae2:	57 e4       	ldi	r21, 0x47	; 71
    2ae4:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2ae8:	18 16       	cp	r1, r24
    2aea:	4c f5       	brge	.+82     	; 0x2b3e <H_WIFI_void_WIFIInit+0x166>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2aec:	6d a9       	ldd	r22, Y+53	; 0x35
    2aee:	7e a9       	ldd	r23, Y+54	; 0x36
    2af0:	8f a9       	ldd	r24, Y+55	; 0x37
    2af2:	98 ad       	ldd	r25, Y+56	; 0x38
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	40 e2       	ldi	r20, 0x20	; 32
    2afa:	51 e4       	ldi	r21, 0x41	; 65
    2afc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b00:	dc 01       	movw	r26, r24
    2b02:	cb 01       	movw	r24, r22
    2b04:	bc 01       	movw	r22, r24
    2b06:	cd 01       	movw	r24, r26
    2b08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b0c:	dc 01       	movw	r26, r24
    2b0e:	cb 01       	movw	r24, r22
    2b10:	98 ab       	std	Y+48, r25	; 0x30
    2b12:	8f a7       	std	Y+47, r24	; 0x2f
    2b14:	0f c0       	rjmp	.+30     	; 0x2b34 <H_WIFI_void_WIFIInit+0x15c>
    2b16:	80 e9       	ldi	r24, 0x90	; 144
    2b18:	91 e0       	ldi	r25, 0x01	; 1
    2b1a:	9e a7       	std	Y+46, r25	; 0x2e
    2b1c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b1e:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b20:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b22:	01 97       	sbiw	r24, 0x01	; 1
    2b24:	f1 f7       	brne	.-4      	; 0x2b22 <H_WIFI_void_WIFIInit+0x14a>
    2b26:	9e a7       	std	Y+46, r25	; 0x2e
    2b28:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b2c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b2e:	01 97       	sbiw	r24, 0x01	; 1
    2b30:	98 ab       	std	Y+48, r25	; 0x30
    2b32:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b34:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b36:	98 a9       	ldd	r25, Y+48	; 0x30
    2b38:	00 97       	sbiw	r24, 0x00	; 0
    2b3a:	69 f7       	brne	.-38     	; 0x2b16 <H_WIFI_void_WIFIInit+0x13e>
    2b3c:	a1 c0       	rjmp	.+322    	; 0x2c80 <H_WIFI_void_WIFIInit+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b3e:	69 a9       	ldd	r22, Y+49	; 0x31
    2b40:	7a a9       	ldd	r23, Y+50	; 0x32
    2b42:	8b a9       	ldd	r24, Y+51	; 0x33
    2b44:	9c a9       	ldd	r25, Y+52	; 0x34
    2b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	98 ab       	std	Y+48, r25	; 0x30
    2b50:	8f a7       	std	Y+47, r24	; 0x2f
    2b52:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b54:	98 a9       	ldd	r25, Y+48	; 0x30
    2b56:	9c a7       	std	Y+44, r25	; 0x2c
    2b58:	8b a7       	std	Y+43, r24	; 0x2b
    2b5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b5e:	01 97       	sbiw	r24, 0x01	; 1
    2b60:	f1 f7       	brne	.-4      	; 0x2b5e <H_WIFI_void_WIFIInit+0x186>
    2b62:	9c a7       	std	Y+44, r25	; 0x2c
    2b64:	8b a7       	std	Y+43, r24	; 0x2b
    2b66:	8c c0       	rjmp	.+280    	; 0x2c80 <H_WIFI_void_WIFIInit+0x2a8>
		_delay_ms(2000);
	} else if (command_statue == WIFI_command_error) {
    2b68:	89 ad       	ldd	r24, Y+57	; 0x39
    2b6a:	81 30       	cpi	r24, 0x01	; 1
    2b6c:	09 f0       	breq	.+2      	; 0x2b70 <H_WIFI_void_WIFIInit+0x198>
    2b6e:	7f c0       	rjmp	.+254    	; 0x2c6e <H_WIFI_void_WIFIInit+0x296>
		H_LCD_void_Clear();
    2b70:	0e 94 51 20 	call	0x40a2	; 0x40a2 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI mode update error!");
    2b74:	81 e8       	ldi	r24, 0x81	; 129
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	aa ef       	ldi	r26, 0xFA	; 250
    2b82:	b4 e4       	ldi	r27, 0x44	; 68
    2b84:	8f a3       	std	Y+39, r24	; 0x27
    2b86:	98 a7       	std	Y+40, r25	; 0x28
    2b88:	a9 a7       	std	Y+41, r26	; 0x29
    2b8a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b8c:	6f a1       	ldd	r22, Y+39	; 0x27
    2b8e:	78 a5       	ldd	r23, Y+40	; 0x28
    2b90:	89 a5       	ldd	r24, Y+41	; 0x29
    2b92:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b94:	20 e0       	ldi	r18, 0x00	; 0
    2b96:	30 e0       	ldi	r19, 0x00	; 0
    2b98:	4a e7       	ldi	r20, 0x7A	; 122
    2b9a:	55 e4       	ldi	r21, 0x45	; 69
    2b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	8b a3       	std	Y+35, r24	; 0x23
    2ba6:	9c a3       	std	Y+36, r25	; 0x24
    2ba8:	ad a3       	std	Y+37, r26	; 0x25
    2baa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bac:	6b a1       	ldd	r22, Y+35	; 0x23
    2bae:	7c a1       	ldd	r23, Y+36	; 0x24
    2bb0:	8d a1       	ldd	r24, Y+37	; 0x25
    2bb2:	9e a1       	ldd	r25, Y+38	; 0x26
    2bb4:	20 e0       	ldi	r18, 0x00	; 0
    2bb6:	30 e0       	ldi	r19, 0x00	; 0
    2bb8:	40 e8       	ldi	r20, 0x80	; 128
    2bba:	5f e3       	ldi	r21, 0x3F	; 63
    2bbc:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2bc0:	88 23       	and	r24, r24
    2bc2:	2c f4       	brge	.+10     	; 0x2bce <H_WIFI_void_WIFIInit+0x1f6>
		__ticks = 1;
    2bc4:	81 e0       	ldi	r24, 0x01	; 1
    2bc6:	90 e0       	ldi	r25, 0x00	; 0
    2bc8:	9a a3       	std	Y+34, r25	; 0x22
    2bca:	89 a3       	std	Y+33, r24	; 0x21
    2bcc:	3f c0       	rjmp	.+126    	; 0x2c4c <H_WIFI_void_WIFIInit+0x274>
	else if (__tmp > 65535)
    2bce:	6b a1       	ldd	r22, Y+35	; 0x23
    2bd0:	7c a1       	ldd	r23, Y+36	; 0x24
    2bd2:	8d a1       	ldd	r24, Y+37	; 0x25
    2bd4:	9e a1       	ldd	r25, Y+38	; 0x26
    2bd6:	20 e0       	ldi	r18, 0x00	; 0
    2bd8:	3f ef       	ldi	r19, 0xFF	; 255
    2bda:	4f e7       	ldi	r20, 0x7F	; 127
    2bdc:	57 e4       	ldi	r21, 0x47	; 71
    2bde:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2be2:	18 16       	cp	r1, r24
    2be4:	4c f5       	brge	.+82     	; 0x2c38 <H_WIFI_void_WIFIInit+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2be6:	6f a1       	ldd	r22, Y+39	; 0x27
    2be8:	78 a5       	ldd	r23, Y+40	; 0x28
    2bea:	89 a5       	ldd	r24, Y+41	; 0x29
    2bec:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	40 e2       	ldi	r20, 0x20	; 32
    2bf4:	51 e4       	ldi	r21, 0x41	; 65
    2bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	bc 01       	movw	r22, r24
    2c00:	cd 01       	movw	r24, r26
    2c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	9a a3       	std	Y+34, r25	; 0x22
    2c0c:	89 a3       	std	Y+33, r24	; 0x21
    2c0e:	0f c0       	rjmp	.+30     	; 0x2c2e <H_WIFI_void_WIFIInit+0x256>
    2c10:	80 e9       	ldi	r24, 0x90	; 144
    2c12:	91 e0       	ldi	r25, 0x01	; 1
    2c14:	98 a3       	std	Y+32, r25	; 0x20
    2c16:	8f 8f       	std	Y+31, r24	; 0x1f
    2c18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c1a:	98 a1       	ldd	r25, Y+32	; 0x20
    2c1c:	01 97       	sbiw	r24, 0x01	; 1
    2c1e:	f1 f7       	brne	.-4      	; 0x2c1c <H_WIFI_void_WIFIInit+0x244>
    2c20:	98 a3       	std	Y+32, r25	; 0x20
    2c22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c24:	89 a1       	ldd	r24, Y+33	; 0x21
    2c26:	9a a1       	ldd	r25, Y+34	; 0x22
    2c28:	01 97       	sbiw	r24, 0x01	; 1
    2c2a:	9a a3       	std	Y+34, r25	; 0x22
    2c2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c2e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c30:	9a a1       	ldd	r25, Y+34	; 0x22
    2c32:	00 97       	sbiw	r24, 0x00	; 0
    2c34:	69 f7       	brne	.-38     	; 0x2c10 <H_WIFI_void_WIFIInit+0x238>
    2c36:	14 c0       	rjmp	.+40     	; 0x2c60 <H_WIFI_void_WIFIInit+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c38:	6b a1       	ldd	r22, Y+35	; 0x23
    2c3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	9a a3       	std	Y+34, r25	; 0x22
    2c4a:	89 a3       	std	Y+33, r24	; 0x21
    2c4c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c4e:	9a a1       	ldd	r25, Y+34	; 0x22
    2c50:	9e 8f       	std	Y+30, r25	; 0x1e
    2c52:	8d 8f       	std	Y+29, r24	; 0x1d
    2c54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c58:	01 97       	sbiw	r24, 0x01	; 1
    2c5a:	f1 f7       	brne	.-4      	; 0x2c58 <H_WIFI_void_WIFIInit+0x280>
    2c5c:	9e 8f       	std	Y+30, r25	; 0x1e
    2c5e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(2000);
		H_LCD_void_Clear();
    2c60:	0e 94 51 20 	call	0x40a2	; 0x40a2 <H_LCD_void_Clear>
		H_LCD_void_sendString(buff);
    2c64:	80 e3       	ldi	r24, 0x30	; 48
    2c66:	95 e0       	ldi	r25, 0x05	; 5
    2c68:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>
    2c6c:	09 c0       	rjmp	.+18     	; 0x2c80 <H_WIFI_void_WIFIInit+0x2a8>
	} else if (command_statue == WIFI_command_timeOute) {
    2c6e:	89 ad       	ldd	r24, Y+57	; 0x39
    2c70:	82 30       	cpi	r24, 0x02	; 2
    2c72:	31 f4       	brne	.+12     	; 0x2c80 <H_WIFI_void_WIFIInit+0x2a8>
		H_LCD_void_Clear();
    2c74:	0e 94 51 20 	call	0x40a2	; 0x40a2 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI mode update timeout");
    2c78:	89 e9       	ldi	r24, 0x99	; 153
    2c7a:	90 e0       	ldi	r25, 0x00	; 0
    2c7c:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>

	}
#endif

	sprintf(command, "AT+CWJAP=\"%s\",\"%s\"\r\n", S_WIFI_Config.ssid,
    2c80:	fe 01       	movw	r30, r28
    2c82:	e2 56       	subi	r30, 0x62	; 98
    2c84:	ff 4f       	sbci	r31, 0xFF	; 255
    2c86:	21 81       	ldd	r18, Z+1	; 0x01
    2c88:	32 81       	ldd	r19, Z+2	; 0x02
    2c8a:	fe 01       	movw	r30, r28
    2c8c:	e2 56       	subi	r30, 0x62	; 98
    2c8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c90:	43 81       	ldd	r20, Z+3	; 0x03
    2c92:	54 81       	ldd	r21, Z+4	; 0x04
    2c94:	8d b7       	in	r24, 0x3d	; 61
    2c96:	9e b7       	in	r25, 0x3e	; 62
    2c98:	08 97       	sbiw	r24, 0x08	; 8
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	9e bf       	out	0x3e, r25	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	8d bf       	out	0x3d, r24	; 61
    2ca4:	ed b7       	in	r30, 0x3d	; 61
    2ca6:	fe b7       	in	r31, 0x3e	; 62
    2ca8:	31 96       	adiw	r30, 0x01	; 1
    2caa:	ce 01       	movw	r24, r28
    2cac:	ca 96       	adiw	r24, 0x3a	; 58
    2cae:	91 83       	std	Z+1, r25	; 0x01
    2cb0:	80 83       	st	Z, r24
    2cb2:	82 eb       	ldi	r24, 0xB2	; 178
    2cb4:	90 e0       	ldi	r25, 0x00	; 0
    2cb6:	93 83       	std	Z+3, r25	; 0x03
    2cb8:	82 83       	std	Z+2, r24	; 0x02
    2cba:	35 83       	std	Z+5, r19	; 0x05
    2cbc:	24 83       	std	Z+4, r18	; 0x04
    2cbe:	57 83       	std	Z+7, r21	; 0x07
    2cc0:	46 83       	std	Z+6, r20	; 0x06
    2cc2:	0e 94 ea 29 	call	0x53d4	; 0x53d4 <sprintf>
    2cc6:	8d b7       	in	r24, 0x3d	; 61
    2cc8:	9e b7       	in	r25, 0x3e	; 62
    2cca:	08 96       	adiw	r24, 0x08	; 8
    2ccc:	0f b6       	in	r0, 0x3f	; 63
    2cce:	f8 94       	cli
    2cd0:	9e bf       	out	0x3e, r25	; 62
    2cd2:	0f be       	out	0x3f, r0	; 63
    2cd4:	8d bf       	out	0x3d, r24	; 61
			S_WIFI_Config.password);
	command_statue = H_WIFI_command_statue_t_sendData(command, buff, 2000);
    2cd6:	ce 01       	movw	r24, r28
    2cd8:	ca 96       	adiw	r24, 0x3a	; 58
    2cda:	20 e3       	ldi	r18, 0x30	; 48
    2cdc:	35 e0       	ldi	r19, 0x05	; 5
    2cde:	b9 01       	movw	r22, r18
    2ce0:	40 ed       	ldi	r20, 0xD0	; 208
    2ce2:	57 e0       	ldi	r21, 0x07	; 7
    2ce4:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <H_WIFI_command_statue_t_sendData>
    2ce8:	89 af       	std	Y+57, r24	; 0x39

#if(WIFI_DEBUG)
	if (command_statue == WIFI_command_ok) {
    2cea:	89 ad       	ldd	r24, Y+57	; 0x39
    2cec:	88 23       	and	r24, r24
    2cee:	09 f0       	breq	.+2      	; 0x2cf2 <H_WIFI_void_WIFIInit+0x31a>
    2cf0:	79 c0       	rjmp	.+242    	; 0x2de4 <H_WIFI_void_WIFIInit+0x40c>
		H_LCD_void_Clear();
    2cf2:	0e 94 51 20 	call	0x40a2	; 0x40a2 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI SSID Pass updated");
    2cf6:	87 ec       	ldi	r24, 0xC7	; 199
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>
    2cfe:	80 e0       	ldi	r24, 0x00	; 0
    2d00:	90 e0       	ldi	r25, 0x00	; 0
    2d02:	aa ef       	ldi	r26, 0xFA	; 250
    2d04:	b4 e4       	ldi	r27, 0x44	; 68
    2d06:	89 8f       	std	Y+25, r24	; 0x19
    2d08:	9a 8f       	std	Y+26, r25	; 0x1a
    2d0a:	ab 8f       	std	Y+27, r26	; 0x1b
    2d0c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d0e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d10:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d12:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d14:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	4a e7       	ldi	r20, 0x7A	; 122
    2d1c:	55 e4       	ldi	r21, 0x45	; 69
    2d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	8d 8b       	std	Y+21, r24	; 0x15
    2d28:	9e 8b       	std	Y+22, r25	; 0x16
    2d2a:	af 8b       	std	Y+23, r26	; 0x17
    2d2c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d2e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d30:	7e 89       	ldd	r23, Y+22	; 0x16
    2d32:	8f 89       	ldd	r24, Y+23	; 0x17
    2d34:	98 8d       	ldd	r25, Y+24	; 0x18
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e8       	ldi	r20, 0x80	; 128
    2d3c:	5f e3       	ldi	r21, 0x3F	; 63
    2d3e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2d42:	88 23       	and	r24, r24
    2d44:	2c f4       	brge	.+10     	; 0x2d50 <H_WIFI_void_WIFIInit+0x378>
		__ticks = 1;
    2d46:	81 e0       	ldi	r24, 0x01	; 1
    2d48:	90 e0       	ldi	r25, 0x00	; 0
    2d4a:	9c 8b       	std	Y+20, r25	; 0x14
    2d4c:	8b 8b       	std	Y+19, r24	; 0x13
    2d4e:	3f c0       	rjmp	.+126    	; 0x2dce <H_WIFI_void_WIFIInit+0x3f6>
	else if (__tmp > 65535)
    2d50:	6d 89       	ldd	r22, Y+21	; 0x15
    2d52:	7e 89       	ldd	r23, Y+22	; 0x16
    2d54:	8f 89       	ldd	r24, Y+23	; 0x17
    2d56:	98 8d       	ldd	r25, Y+24	; 0x18
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	3f ef       	ldi	r19, 0xFF	; 255
    2d5c:	4f e7       	ldi	r20, 0x7F	; 127
    2d5e:	57 e4       	ldi	r21, 0x47	; 71
    2d60:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2d64:	18 16       	cp	r1, r24
    2d66:	4c f5       	brge	.+82     	; 0x2dba <H_WIFI_void_WIFIInit+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d68:	69 8d       	ldd	r22, Y+25	; 0x19
    2d6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	40 e2       	ldi	r20, 0x20	; 32
    2d76:	51 e4       	ldi	r21, 0x41	; 65
    2d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	bc 01       	movw	r22, r24
    2d82:	cd 01       	movw	r24, r26
    2d84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	9c 8b       	std	Y+20, r25	; 0x14
    2d8e:	8b 8b       	std	Y+19, r24	; 0x13
    2d90:	0f c0       	rjmp	.+30     	; 0x2db0 <H_WIFI_void_WIFIInit+0x3d8>
    2d92:	80 e9       	ldi	r24, 0x90	; 144
    2d94:	91 e0       	ldi	r25, 0x01	; 1
    2d96:	9a 8b       	std	Y+18, r25	; 0x12
    2d98:	89 8b       	std	Y+17, r24	; 0x11
    2d9a:	89 89       	ldd	r24, Y+17	; 0x11
    2d9c:	9a 89       	ldd	r25, Y+18	; 0x12
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
    2da0:	f1 f7       	brne	.-4      	; 0x2d9e <H_WIFI_void_WIFIInit+0x3c6>
    2da2:	9a 8b       	std	Y+18, r25	; 0x12
    2da4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2da6:	8b 89       	ldd	r24, Y+19	; 0x13
    2da8:	9c 89       	ldd	r25, Y+20	; 0x14
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	9c 8b       	std	Y+20, r25	; 0x14
    2dae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2db0:	8b 89       	ldd	r24, Y+19	; 0x13
    2db2:	9c 89       	ldd	r25, Y+20	; 0x14
    2db4:	00 97       	sbiw	r24, 0x00	; 0
    2db6:	69 f7       	brne	.-38     	; 0x2d92 <H_WIFI_void_WIFIInit+0x3ba>
    2db8:	a1 c0       	rjmp	.+322    	; 0x2efc <H_WIFI_void_WIFIInit+0x524>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dba:	6d 89       	ldd	r22, Y+21	; 0x15
    2dbc:	7e 89       	ldd	r23, Y+22	; 0x16
    2dbe:	8f 89       	ldd	r24, Y+23	; 0x17
    2dc0:	98 8d       	ldd	r25, Y+24	; 0x18
    2dc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	9c 8b       	std	Y+20, r25	; 0x14
    2dcc:	8b 8b       	std	Y+19, r24	; 0x13
    2dce:	8b 89       	ldd	r24, Y+19	; 0x13
    2dd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2dd2:	98 8b       	std	Y+16, r25	; 0x10
    2dd4:	8f 87       	std	Y+15, r24	; 0x0f
    2dd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dd8:	98 89       	ldd	r25, Y+16	; 0x10
    2dda:	01 97       	sbiw	r24, 0x01	; 1
    2ddc:	f1 f7       	brne	.-4      	; 0x2dda <H_WIFI_void_WIFIInit+0x402>
    2dde:	98 8b       	std	Y+16, r25	; 0x10
    2de0:	8f 87       	std	Y+15, r24	; 0x0f
    2de2:	8c c0       	rjmp	.+280    	; 0x2efc <H_WIFI_void_WIFIInit+0x524>
		_delay_ms(2000);
	} else if (command_statue == WIFI_command_error) {
    2de4:	89 ad       	ldd	r24, Y+57	; 0x39
    2de6:	81 30       	cpi	r24, 0x01	; 1
    2de8:	09 f0       	breq	.+2      	; 0x2dec <H_WIFI_void_WIFIInit+0x414>
    2dea:	7f c0       	rjmp	.+254    	; 0x2eea <H_WIFI_void_WIFIInit+0x512>
		H_LCD_void_Clear();
    2dec:	0e 94 51 20 	call	0x40a2	; 0x40a2 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI SSID update error!");
    2df0:	8e ed       	ldi	r24, 0xDE	; 222
    2df2:	90 e0       	ldi	r25, 0x00	; 0
    2df4:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	90 e0       	ldi	r25, 0x00	; 0
    2dfc:	aa ef       	ldi	r26, 0xFA	; 250
    2dfe:	b4 e4       	ldi	r27, 0x44	; 68
    2e00:	8b 87       	std	Y+11, r24	; 0x0b
    2e02:	9c 87       	std	Y+12, r25	; 0x0c
    2e04:	ad 87       	std	Y+13, r26	; 0x0d
    2e06:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e08:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	4a e7       	ldi	r20, 0x7A	; 122
    2e16:	55 e4       	ldi	r21, 0x45	; 69
    2e18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e1c:	dc 01       	movw	r26, r24
    2e1e:	cb 01       	movw	r24, r22
    2e20:	8f 83       	std	Y+7, r24	; 0x07
    2e22:	98 87       	std	Y+8, r25	; 0x08
    2e24:	a9 87       	std	Y+9, r26	; 0x09
    2e26:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e28:	6f 81       	ldd	r22, Y+7	; 0x07
    2e2a:	78 85       	ldd	r23, Y+8	; 0x08
    2e2c:	89 85       	ldd	r24, Y+9	; 0x09
    2e2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e30:	20 e0       	ldi	r18, 0x00	; 0
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	40 e8       	ldi	r20, 0x80	; 128
    2e36:	5f e3       	ldi	r21, 0x3F	; 63
    2e38:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2e3c:	88 23       	and	r24, r24
    2e3e:	2c f4       	brge	.+10     	; 0x2e4a <H_WIFI_void_WIFIInit+0x472>
		__ticks = 1;
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	9e 83       	std	Y+6, r25	; 0x06
    2e46:	8d 83       	std	Y+5, r24	; 0x05
    2e48:	3f c0       	rjmp	.+126    	; 0x2ec8 <H_WIFI_void_WIFIInit+0x4f0>
	else if (__tmp > 65535)
    2e4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e4c:	78 85       	ldd	r23, Y+8	; 0x08
    2e4e:	89 85       	ldd	r24, Y+9	; 0x09
    2e50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e52:	20 e0       	ldi	r18, 0x00	; 0
    2e54:	3f ef       	ldi	r19, 0xFF	; 255
    2e56:	4f e7       	ldi	r20, 0x7F	; 127
    2e58:	57 e4       	ldi	r21, 0x47	; 71
    2e5a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2e5e:	18 16       	cp	r1, r24
    2e60:	4c f5       	brge	.+82     	; 0x2eb4 <H_WIFI_void_WIFIInit+0x4dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e62:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e64:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	40 e2       	ldi	r20, 0x20	; 32
    2e70:	51 e4       	ldi	r21, 0x41	; 65
    2e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e76:	dc 01       	movw	r26, r24
    2e78:	cb 01       	movw	r24, r22
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	cd 01       	movw	r24, r26
    2e7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e82:	dc 01       	movw	r26, r24
    2e84:	cb 01       	movw	r24, r22
    2e86:	9e 83       	std	Y+6, r25	; 0x06
    2e88:	8d 83       	std	Y+5, r24	; 0x05
    2e8a:	0f c0       	rjmp	.+30     	; 0x2eaa <H_WIFI_void_WIFIInit+0x4d2>
    2e8c:	80 e9       	ldi	r24, 0x90	; 144
    2e8e:	91 e0       	ldi	r25, 0x01	; 1
    2e90:	9c 83       	std	Y+4, r25	; 0x04
    2e92:	8b 83       	std	Y+3, r24	; 0x03
    2e94:	8b 81       	ldd	r24, Y+3	; 0x03
    2e96:	9c 81       	ldd	r25, Y+4	; 0x04
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	f1 f7       	brne	.-4      	; 0x2e98 <H_WIFI_void_WIFIInit+0x4c0>
    2e9c:	9c 83       	std	Y+4, r25	; 0x04
    2e9e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ea0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ea2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ea4:	01 97       	sbiw	r24, 0x01	; 1
    2ea6:	9e 83       	std	Y+6, r25	; 0x06
    2ea8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2eac:	9e 81       	ldd	r25, Y+6	; 0x06
    2eae:	00 97       	sbiw	r24, 0x00	; 0
    2eb0:	69 f7       	brne	.-38     	; 0x2e8c <H_WIFI_void_WIFIInit+0x4b4>
    2eb2:	14 c0       	rjmp	.+40     	; 0x2edc <H_WIFI_void_WIFIInit+0x504>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb4:	6f 81       	ldd	r22, Y+7	; 0x07
    2eb6:	78 85       	ldd	r23, Y+8	; 0x08
    2eb8:	89 85       	ldd	r24, Y+9	; 0x09
    2eba:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ebc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	9e 83       	std	Y+6, r25	; 0x06
    2ec6:	8d 83       	std	Y+5, r24	; 0x05
    2ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eca:	9e 81       	ldd	r25, Y+6	; 0x06
    2ecc:	9a 83       	std	Y+2, r25	; 0x02
    2ece:	89 83       	std	Y+1, r24	; 0x01
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	f1 f7       	brne	.-4      	; 0x2ed4 <H_WIFI_void_WIFIInit+0x4fc>
    2ed8:	9a 83       	std	Y+2, r25	; 0x02
    2eda:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		H_LCD_void_Clear();
    2edc:	0e 94 51 20 	call	0x40a2	; 0x40a2 <H_LCD_void_Clear>
		H_LCD_void_sendString(buff);
    2ee0:	80 e3       	ldi	r24, 0x30	; 48
    2ee2:	95 e0       	ldi	r25, 0x05	; 5
    2ee4:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>
    2ee8:	09 c0       	rjmp	.+18     	; 0x2efc <H_WIFI_void_WIFIInit+0x524>
	} else if (command_statue == WIFI_command_timeOute) {
    2eea:	89 ad       	ldd	r24, Y+57	; 0x39
    2eec:	82 30       	cpi	r24, 0x02	; 2
    2eee:	31 f4       	brne	.+12     	; 0x2efc <H_WIFI_void_WIFIInit+0x524>
		H_LCD_void_Clear();
    2ef0:	0e 94 51 20 	call	0x40a2	; 0x40a2 <H_LCD_void_Clear>
		H_LCD_void_sendString("WIFI SSID update timeout");
    2ef4:	86 ef       	ldi	r24, 0xF6	; 246
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>

	}
#endif

}
    2efc:	cc 55       	subi	r28, 0x5C	; 92
    2efe:	df 4f       	sbci	r29, 0xFF	; 255
    2f00:	0f b6       	in	r0, 0x3f	; 63
    2f02:	f8 94       	cli
    2f04:	de bf       	out	0x3e, r29	; 62
    2f06:	0f be       	out	0x3f, r0	; 63
    2f08:	cd bf       	out	0x3d, r28	; 61
    2f0a:	cf 91       	pop	r28
    2f0c:	df 91       	pop	r29
    2f0e:	08 95       	ret

00002f10 <H_WIFI_void_StartTCPServer>:

void H_WIFI_void_StartTCPServer(void) {
    2f10:	df 93       	push	r29
    2f12:	cf 93       	push	r28
    2f14:	cd b7       	in	r28, 0x3d	; 61
    2f16:	de b7       	in	r29, 0x3e	; 62
    2f18:	6d 97       	sbiw	r28, 0x1d	; 29
    2f1a:	0f b6       	in	r0, 0x3f	; 63
    2f1c:	f8 94       	cli
    2f1e:	de bf       	out	0x3e, r29	; 62
    2f20:	0f be       	out	0x3f, r0	; 63
    2f22:	cd bf       	out	0x3d, r28	; 61
	WIFI_command_statue_t command_statue = H_WIFI_command_statue_t_sendData(
			"AT+CIPMUX=1\r\n", buff, 2000);
    2f24:	8f e0       	ldi	r24, 0x0F	; 15
    2f26:	91 e0       	ldi	r25, 0x01	; 1
    2f28:	20 e3       	ldi	r18, 0x30	; 48
    2f2a:	35 e0       	ldi	r19, 0x05	; 5
    2f2c:	b9 01       	movw	r22, r18
    2f2e:	40 ed       	ldi	r20, 0xD0	; 208
    2f30:	57 e0       	ldi	r21, 0x07	; 7
    2f32:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <H_WIFI_command_statue_t_sendData>
    2f36:	8d 8f       	std	Y+29, r24	; 0x1d
	command_statue = H_WIFI_command_statue_t_sendData("AT+CIPSERVER=1\r\n",
    2f38:	8d e1       	ldi	r24, 0x1D	; 29
    2f3a:	91 e0       	ldi	r25, 0x01	; 1
    2f3c:	20 e3       	ldi	r18, 0x30	; 48
    2f3e:	35 e0       	ldi	r19, 0x05	; 5
    2f40:	b9 01       	movw	r22, r18
    2f42:	40 ed       	ldi	r20, 0xD0	; 208
    2f44:	57 e0       	ldi	r21, 0x07	; 7
    2f46:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <H_WIFI_command_statue_t_sendData>
    2f4a:	8d 8f       	std	Y+29, r24	; 0x1d
			buff, 2000);

#if(WIFI_DEBUG)
	if (command_statue == WIFI_command_ok) {
    2f4c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f4e:	88 23       	and	r24, r24
    2f50:	09 f0       	breq	.+2      	; 0x2f54 <H_WIFI_void_StartTCPServer+0x44>
    2f52:	79 c0       	rjmp	.+242    	; 0x3046 <H_WIFI_void_StartTCPServer+0x136>
		H_LCD_void_Clear();
    2f54:	0e 94 51 20 	call	0x40a2	; 0x40a2 <H_LCD_void_Clear>
		H_LCD_void_sendString("TCP server started");
    2f58:	8e e2       	ldi	r24, 0x2E	; 46
    2f5a:	91 e0       	ldi	r25, 0x01	; 1
    2f5c:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	90 e0       	ldi	r25, 0x00	; 0
    2f64:	aa ef       	ldi	r26, 0xFA	; 250
    2f66:	b4 e4       	ldi	r27, 0x44	; 68
    2f68:	89 8f       	std	Y+25, r24	; 0x19
    2f6a:	9a 8f       	std	Y+26, r25	; 0x1a
    2f6c:	ab 8f       	std	Y+27, r26	; 0x1b
    2f6e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f70:	69 8d       	ldd	r22, Y+25	; 0x19
    2f72:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f78:	20 e0       	ldi	r18, 0x00	; 0
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	4a e7       	ldi	r20, 0x7A	; 122
    2f7e:	55 e4       	ldi	r21, 0x45	; 69
    2f80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f84:	dc 01       	movw	r26, r24
    2f86:	cb 01       	movw	r24, r22
    2f88:	8d 8b       	std	Y+21, r24	; 0x15
    2f8a:	9e 8b       	std	Y+22, r25	; 0x16
    2f8c:	af 8b       	std	Y+23, r26	; 0x17
    2f8e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f90:	6d 89       	ldd	r22, Y+21	; 0x15
    2f92:	7e 89       	ldd	r23, Y+22	; 0x16
    2f94:	8f 89       	ldd	r24, Y+23	; 0x17
    2f96:	98 8d       	ldd	r25, Y+24	; 0x18
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	40 e8       	ldi	r20, 0x80	; 128
    2f9e:	5f e3       	ldi	r21, 0x3F	; 63
    2fa0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2fa4:	88 23       	and	r24, r24
    2fa6:	2c f4       	brge	.+10     	; 0x2fb2 <H_WIFI_void_StartTCPServer+0xa2>
		__ticks = 1;
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	9c 8b       	std	Y+20, r25	; 0x14
    2fae:	8b 8b       	std	Y+19, r24	; 0x13
    2fb0:	3f c0       	rjmp	.+126    	; 0x3030 <H_WIFI_void_StartTCPServer+0x120>
	else if (__tmp > 65535)
    2fb2:	6d 89       	ldd	r22, Y+21	; 0x15
    2fb4:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb6:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb8:	98 8d       	ldd	r25, Y+24	; 0x18
    2fba:	20 e0       	ldi	r18, 0x00	; 0
    2fbc:	3f ef       	ldi	r19, 0xFF	; 255
    2fbe:	4f e7       	ldi	r20, 0x7F	; 127
    2fc0:	57 e4       	ldi	r21, 0x47	; 71
    2fc2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2fc6:	18 16       	cp	r1, r24
    2fc8:	4c f5       	brge	.+82     	; 0x301c <H_WIFI_void_StartTCPServer+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fca:	69 8d       	ldd	r22, Y+25	; 0x19
    2fcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fd2:	20 e0       	ldi	r18, 0x00	; 0
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	40 e2       	ldi	r20, 0x20	; 32
    2fd8:	51 e4       	ldi	r21, 0x41	; 65
    2fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	bc 01       	movw	r22, r24
    2fe4:	cd 01       	movw	r24, r26
    2fe6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fea:	dc 01       	movw	r26, r24
    2fec:	cb 01       	movw	r24, r22
    2fee:	9c 8b       	std	Y+20, r25	; 0x14
    2ff0:	8b 8b       	std	Y+19, r24	; 0x13
    2ff2:	0f c0       	rjmp	.+30     	; 0x3012 <H_WIFI_void_StartTCPServer+0x102>
    2ff4:	80 e9       	ldi	r24, 0x90	; 144
    2ff6:	91 e0       	ldi	r25, 0x01	; 1
    2ff8:	9a 8b       	std	Y+18, r25	; 0x12
    2ffa:	89 8b       	std	Y+17, r24	; 0x11
    2ffc:	89 89       	ldd	r24, Y+17	; 0x11
    2ffe:	9a 89       	ldd	r25, Y+18	; 0x12
    3000:	01 97       	sbiw	r24, 0x01	; 1
    3002:	f1 f7       	brne	.-4      	; 0x3000 <H_WIFI_void_StartTCPServer+0xf0>
    3004:	9a 8b       	std	Y+18, r25	; 0x12
    3006:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3008:	8b 89       	ldd	r24, Y+19	; 0x13
    300a:	9c 89       	ldd	r25, Y+20	; 0x14
    300c:	01 97       	sbiw	r24, 0x01	; 1
    300e:	9c 8b       	std	Y+20, r25	; 0x14
    3010:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3012:	8b 89       	ldd	r24, Y+19	; 0x13
    3014:	9c 89       	ldd	r25, Y+20	; 0x14
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	69 f7       	brne	.-38     	; 0x2ff4 <H_WIFI_void_StartTCPServer+0xe4>
    301a:	97 c0       	rjmp	.+302    	; 0x314a <H_WIFI_void_StartTCPServer+0x23a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301c:	6d 89       	ldd	r22, Y+21	; 0x15
    301e:	7e 89       	ldd	r23, Y+22	; 0x16
    3020:	8f 89       	ldd	r24, Y+23	; 0x17
    3022:	98 8d       	ldd	r25, Y+24	; 0x18
    3024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3028:	dc 01       	movw	r26, r24
    302a:	cb 01       	movw	r24, r22
    302c:	9c 8b       	std	Y+20, r25	; 0x14
    302e:	8b 8b       	std	Y+19, r24	; 0x13
    3030:	8b 89       	ldd	r24, Y+19	; 0x13
    3032:	9c 89       	ldd	r25, Y+20	; 0x14
    3034:	98 8b       	std	Y+16, r25	; 0x10
    3036:	8f 87       	std	Y+15, r24	; 0x0f
    3038:	8f 85       	ldd	r24, Y+15	; 0x0f
    303a:	98 89       	ldd	r25, Y+16	; 0x10
    303c:	01 97       	sbiw	r24, 0x01	; 1
    303e:	f1 f7       	brne	.-4      	; 0x303c <H_WIFI_void_StartTCPServer+0x12c>
    3040:	98 8b       	std	Y+16, r25	; 0x10
    3042:	8f 87       	std	Y+15, r24	; 0x0f
    3044:	82 c0       	rjmp	.+260    	; 0x314a <H_WIFI_void_StartTCPServer+0x23a>
		_delay_ms(2000);
	} else if (command_statue == WIFI_command_error) {
    3046:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3048:	81 30       	cpi	r24, 0x01	; 1
    304a:	09 f0       	breq	.+2      	; 0x304e <H_WIFI_void_StartTCPServer+0x13e>
    304c:	7e c0       	rjmp	.+252    	; 0x314a <H_WIFI_void_StartTCPServer+0x23a>
		H_LCD_void_Clear();
    304e:	0e 94 51 20 	call	0x40a2	; 0x40a2 <H_LCD_void_Clear>
		H_LCD_void_sendString("TCP server failed!");
    3052:	81 e4       	ldi	r24, 0x41	; 65
    3054:	91 e0       	ldi	r25, 0x01	; 1
    3056:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>
    305a:	80 e0       	ldi	r24, 0x00	; 0
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	aa ef       	ldi	r26, 0xFA	; 250
    3060:	b4 e4       	ldi	r27, 0x44	; 68
    3062:	8b 87       	std	Y+11, r24	; 0x0b
    3064:	9c 87       	std	Y+12, r25	; 0x0c
    3066:	ad 87       	std	Y+13, r26	; 0x0d
    3068:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    306a:	6b 85       	ldd	r22, Y+11	; 0x0b
    306c:	7c 85       	ldd	r23, Y+12	; 0x0c
    306e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3070:	9e 85       	ldd	r25, Y+14	; 0x0e
    3072:	20 e0       	ldi	r18, 0x00	; 0
    3074:	30 e0       	ldi	r19, 0x00	; 0
    3076:	4a e7       	ldi	r20, 0x7A	; 122
    3078:	55 e4       	ldi	r21, 0x45	; 69
    307a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307e:	dc 01       	movw	r26, r24
    3080:	cb 01       	movw	r24, r22
    3082:	8f 83       	std	Y+7, r24	; 0x07
    3084:	98 87       	std	Y+8, r25	; 0x08
    3086:	a9 87       	std	Y+9, r26	; 0x09
    3088:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    308a:	6f 81       	ldd	r22, Y+7	; 0x07
    308c:	78 85       	ldd	r23, Y+8	; 0x08
    308e:	89 85       	ldd	r24, Y+9	; 0x09
    3090:	9a 85       	ldd	r25, Y+10	; 0x0a
    3092:	20 e0       	ldi	r18, 0x00	; 0
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	40 e8       	ldi	r20, 0x80	; 128
    3098:	5f e3       	ldi	r21, 0x3F	; 63
    309a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    309e:	88 23       	and	r24, r24
    30a0:	2c f4       	brge	.+10     	; 0x30ac <H_WIFI_void_StartTCPServer+0x19c>
		__ticks = 1;
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	9e 83       	std	Y+6, r25	; 0x06
    30a8:	8d 83       	std	Y+5, r24	; 0x05
    30aa:	3f c0       	rjmp	.+126    	; 0x312a <H_WIFI_void_StartTCPServer+0x21a>
	else if (__tmp > 65535)
    30ac:	6f 81       	ldd	r22, Y+7	; 0x07
    30ae:	78 85       	ldd	r23, Y+8	; 0x08
    30b0:	89 85       	ldd	r24, Y+9	; 0x09
    30b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	3f ef       	ldi	r19, 0xFF	; 255
    30b8:	4f e7       	ldi	r20, 0x7F	; 127
    30ba:	57 e4       	ldi	r21, 0x47	; 71
    30bc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    30c0:	18 16       	cp	r1, r24
    30c2:	4c f5       	brge	.+82     	; 0x3116 <H_WIFI_void_StartTCPServer+0x206>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	40 e2       	ldi	r20, 0x20	; 32
    30d2:	51 e4       	ldi	r21, 0x41	; 65
    30d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	bc 01       	movw	r22, r24
    30de:	cd 01       	movw	r24, r26
    30e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e4:	dc 01       	movw	r26, r24
    30e6:	cb 01       	movw	r24, r22
    30e8:	9e 83       	std	Y+6, r25	; 0x06
    30ea:	8d 83       	std	Y+5, r24	; 0x05
    30ec:	0f c0       	rjmp	.+30     	; 0x310c <H_WIFI_void_StartTCPServer+0x1fc>
    30ee:	80 e9       	ldi	r24, 0x90	; 144
    30f0:	91 e0       	ldi	r25, 0x01	; 1
    30f2:	9c 83       	std	Y+4, r25	; 0x04
    30f4:	8b 83       	std	Y+3, r24	; 0x03
    30f6:	8b 81       	ldd	r24, Y+3	; 0x03
    30f8:	9c 81       	ldd	r25, Y+4	; 0x04
    30fa:	01 97       	sbiw	r24, 0x01	; 1
    30fc:	f1 f7       	brne	.-4      	; 0x30fa <H_WIFI_void_StartTCPServer+0x1ea>
    30fe:	9c 83       	std	Y+4, r25	; 0x04
    3100:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3102:	8d 81       	ldd	r24, Y+5	; 0x05
    3104:	9e 81       	ldd	r25, Y+6	; 0x06
    3106:	01 97       	sbiw	r24, 0x01	; 1
    3108:	9e 83       	std	Y+6, r25	; 0x06
    310a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    310c:	8d 81       	ldd	r24, Y+5	; 0x05
    310e:	9e 81       	ldd	r25, Y+6	; 0x06
    3110:	00 97       	sbiw	r24, 0x00	; 0
    3112:	69 f7       	brne	.-38     	; 0x30ee <H_WIFI_void_StartTCPServer+0x1de>
    3114:	14 c0       	rjmp	.+40     	; 0x313e <H_WIFI_void_StartTCPServer+0x22e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3116:	6f 81       	ldd	r22, Y+7	; 0x07
    3118:	78 85       	ldd	r23, Y+8	; 0x08
    311a:	89 85       	ldd	r24, Y+9	; 0x09
    311c:	9a 85       	ldd	r25, Y+10	; 0x0a
    311e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3122:	dc 01       	movw	r26, r24
    3124:	cb 01       	movw	r24, r22
    3126:	9e 83       	std	Y+6, r25	; 0x06
    3128:	8d 83       	std	Y+5, r24	; 0x05
    312a:	8d 81       	ldd	r24, Y+5	; 0x05
    312c:	9e 81       	ldd	r25, Y+6	; 0x06
    312e:	9a 83       	std	Y+2, r25	; 0x02
    3130:	89 83       	std	Y+1, r24	; 0x01
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	9a 81       	ldd	r25, Y+2	; 0x02
    3136:	01 97       	sbiw	r24, 0x01	; 1
    3138:	f1 f7       	brne	.-4      	; 0x3136 <H_WIFI_void_StartTCPServer+0x226>
    313a:	9a 83       	std	Y+2, r25	; 0x02
    313c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);
		H_LCD_void_Clear();
    313e:	0e 94 51 20 	call	0x40a2	; 0x40a2 <H_LCD_void_Clear>
		H_LCD_void_sendString(buff);
    3142:	80 e3       	ldi	r24, 0x30	; 48
    3144:	95 e0       	ldi	r25, 0x05	; 5
    3146:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>
	}
#endif
}
    314a:	6d 96       	adiw	r28, 0x1d	; 29
    314c:	0f b6       	in	r0, 0x3f	; 63
    314e:	f8 94       	cli
    3150:	de bf       	out	0x3e, r29	; 62
    3152:	0f be       	out	0x3f, r0	; 63
    3154:	cd bf       	out	0x3d, r28	; 61
    3156:	cf 91       	pop	r28
    3158:	df 91       	pop	r29
    315a:	08 95       	ret

0000315c <H_WIFI_statue_t_cheakOk>:

WIFI_command_statue_t H_WIFI_statue_t_cheakOk(char *response) {
    315c:	df 93       	push	r29
    315e:	cf 93       	push	r28
    3160:	00 d0       	rcall	.+0      	; 0x3162 <H_WIFI_statue_t_cheakOk+0x6>
    3162:	00 d0       	rcall	.+0      	; 0x3164 <H_WIFI_statue_t_cheakOk+0x8>
    3164:	0f 92       	push	r0
    3166:	cd b7       	in	r28, 0x3d	; 61
    3168:	de b7       	in	r29, 0x3e	; 62
    316a:	9c 83       	std	Y+4, r25	; 0x04
    316c:	8b 83       	std	Y+3, r24	; 0x03
	for (int i = 0; i <= UART_BUFFER_SIZE; i++) {
    316e:	1a 82       	std	Y+2, r1	; 0x02
    3170:	19 82       	std	Y+1, r1	; 0x01
    3172:	1e c0       	rjmp	.+60     	; 0x31b0 <H_WIFI_statue_t_cheakOk+0x54>
		if (*(response + i) == 'O')
    3174:	29 81       	ldd	r18, Y+1	; 0x01
    3176:	3a 81       	ldd	r19, Y+2	; 0x02
    3178:	8b 81       	ldd	r24, Y+3	; 0x03
    317a:	9c 81       	ldd	r25, Y+4	; 0x04
    317c:	fc 01       	movw	r30, r24
    317e:	e2 0f       	add	r30, r18
    3180:	f3 1f       	adc	r31, r19
    3182:	80 81       	ld	r24, Z
    3184:	8f 34       	cpi	r24, 0x4F	; 79
    3186:	79 f4       	brne	.+30     	; 0x31a6 <H_WIFI_statue_t_cheakOk+0x4a>
			if (*(response + i + 1) == 'K')
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	9a 81       	ldd	r25, Y+2	; 0x02
    318c:	9c 01       	movw	r18, r24
    318e:	2f 5f       	subi	r18, 0xFF	; 255
    3190:	3f 4f       	sbci	r19, 0xFF	; 255
    3192:	8b 81       	ldd	r24, Y+3	; 0x03
    3194:	9c 81       	ldd	r25, Y+4	; 0x04
    3196:	fc 01       	movw	r30, r24
    3198:	e2 0f       	add	r30, r18
    319a:	f3 1f       	adc	r31, r19
    319c:	80 81       	ld	r24, Z
    319e:	8b 34       	cpi	r24, 0x4B	; 75
    31a0:	11 f4       	brne	.+4      	; 0x31a6 <H_WIFI_statue_t_cheakOk+0x4a>
				return WIFI_command_ok;
    31a2:	1d 82       	std	Y+5, r1	; 0x05
    31a4:	0c c0       	rjmp	.+24     	; 0x31be <H_WIFI_statue_t_cheakOk+0x62>
	}
#endif
}

WIFI_command_statue_t H_WIFI_statue_t_cheakOk(char *response) {
	for (int i = 0; i <= UART_BUFFER_SIZE; i++) {
    31a6:	89 81       	ldd	r24, Y+1	; 0x01
    31a8:	9a 81       	ldd	r25, Y+2	; 0x02
    31aa:	01 96       	adiw	r24, 0x01	; 1
    31ac:	9a 83       	std	Y+2, r25	; 0x02
    31ae:	89 83       	std	Y+1, r24	; 0x01
    31b0:	89 81       	ldd	r24, Y+1	; 0x01
    31b2:	9a 81       	ldd	r25, Y+2	; 0x02
    31b4:	85 36       	cpi	r24, 0x65	; 101
    31b6:	91 05       	cpc	r25, r1
    31b8:	ec f2       	brlt	.-70     	; 0x3174 <H_WIFI_statue_t_cheakOk+0x18>
		if (*(response + i) == 'O')
			if (*(response + i + 1) == 'K')
				return WIFI_command_ok;
	}
	return WIFI_command_error;
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	8d 83       	std	Y+5, r24	; 0x05
    31be:	8d 81       	ldd	r24, Y+5	; 0x05

}
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	0f 90       	pop	r0
    31c8:	0f 90       	pop	r0
    31ca:	cf 91       	pop	r28
    31cc:	df 91       	pop	r29
    31ce:	08 95       	ret

000031d0 <H_WIFI_command_statue_t_sendData>:

WIFI_command_statue_t H_WIFI_command_statue_t_sendData(char *command,
		char *response, const int timeout) {
    31d0:	ef 92       	push	r14
    31d2:	ff 92       	push	r15
    31d4:	0f 93       	push	r16
    31d6:	1f 93       	push	r17
    31d8:	df 93       	push	r29
    31da:	cf 93       	push	r28
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	2d 97       	sbiw	r28, 0x0d	; 13
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	cd bf       	out	0x3d, r28	; 61
    31ec:	98 87       	std	Y+8, r25	; 0x08
    31ee:	8f 83       	std	Y+7, r24	; 0x07
    31f0:	7a 87       	std	Y+10, r23	; 0x0a
    31f2:	69 87       	std	Y+9, r22	; 0x09
    31f4:	5c 87       	std	Y+12, r21	; 0x0c
    31f6:	4b 87       	std	Y+11, r20	; 0x0b
	init_millis(16000000);
    31f8:	60 e0       	ldi	r22, 0x00	; 0
    31fa:	74 e2       	ldi	r23, 0x24	; 36
    31fc:	84 ef       	ldi	r24, 0xF4	; 244
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	0e 94 31 24 	call	0x4862	; 0x4862 <init_millis>
	M_UART_void_UARTSendString(command);
    3204:	8f 81       	ldd	r24, Y+7	; 0x07
    3206:	98 85       	ldd	r25, Y+8	; 0x08
    3208:	0e 94 8a 08 	call	0x1114	; 0x1114 <M_UART_void_UARTSendString>
	int counter = 0;
    320c:	1e 82       	std	Y+6, r1	; 0x06
    320e:	1d 82       	std	Y+5, r1	; 0x05
	long int time = millis();
    3210:	0e 94 77 24 	call	0x48ee	; 0x48ee <millis>
    3214:	dc 01       	movw	r26, r24
    3216:	cb 01       	movw	r24, r22
    3218:	89 83       	std	Y+1, r24	; 0x01
    321a:	9a 83       	std	Y+2, r25	; 0x02
    321c:	ab 83       	std	Y+3, r26	; 0x03
    321e:	bc 83       	std	Y+4, r27	; 0x04
	while (1) {
		if ((time + 2000) < millis())
    3220:	89 81       	ldd	r24, Y+1	; 0x01
    3222:	9a 81       	ldd	r25, Y+2	; 0x02
    3224:	ab 81       	ldd	r26, Y+3	; 0x03
    3226:	bc 81       	ldd	r27, Y+4	; 0x04
    3228:	80 53       	subi	r24, 0x30	; 48
    322a:	98 4f       	sbci	r25, 0xF8	; 248
    322c:	af 4f       	sbci	r26, 0xFF	; 255
    322e:	bf 4f       	sbci	r27, 0xFF	; 255
    3230:	7c 01       	movw	r14, r24
    3232:	8d 01       	movw	r16, r26
    3234:	0e 94 77 24 	call	0x48ee	; 0x48ee <millis>
    3238:	dc 01       	movw	r26, r24
    323a:	cb 01       	movw	r24, r22
    323c:	e8 16       	cp	r14, r24
    323e:	f9 06       	cpc	r15, r25
    3240:	0a 07       	cpc	r16, r26
    3242:	1b 07       	cpc	r17, r27
    3244:	00 f1       	brcs	.+64     	; 0x3286 <H_WIFI_command_statue_t_sendData+0xb6>
    3246:	1a c0       	rjmp	.+52     	; 0x327c <H_WIFI_command_statue_t_sendData+0xac>
			break;
		while (RX_Counter_UART) {
			*(response + counter) = M_UART_u8_receiveByteASynchNonBlocking();
    3248:	2d 81       	ldd	r18, Y+5	; 0x05
    324a:	3e 81       	ldd	r19, Y+6	; 0x06
    324c:	89 85       	ldd	r24, Y+9	; 0x09
    324e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3250:	8c 01       	movw	r16, r24
    3252:	02 0f       	add	r16, r18
    3254:	13 1f       	adc	r17, r19
    3256:	0e 94 49 08 	call	0x1092	; 0x1092 <M_UART_u8_receiveByteASynchNonBlocking>
    325a:	f8 01       	movw	r30, r16
    325c:	80 83       	st	Z, r24
			if (*(response + counter))
    325e:	2d 81       	ldd	r18, Y+5	; 0x05
    3260:	3e 81       	ldd	r19, Y+6	; 0x06
    3262:	89 85       	ldd	r24, Y+9	; 0x09
    3264:	9a 85       	ldd	r25, Y+10	; 0x0a
    3266:	fc 01       	movw	r30, r24
    3268:	e2 0f       	add	r30, r18
    326a:	f3 1f       	adc	r31, r19
    326c:	80 81       	ld	r24, Z
    326e:	88 23       	and	r24, r24
    3270:	29 f0       	breq	.+10     	; 0x327c <H_WIFI_command_statue_t_sendData+0xac>
				counter++;
    3272:	8d 81       	ldd	r24, Y+5	; 0x05
    3274:	9e 81       	ldd	r25, Y+6	; 0x06
    3276:	01 96       	adiw	r24, 0x01	; 1
    3278:	9e 83       	std	Y+6, r25	; 0x06
    327a:	8d 83       	std	Y+5, r24	; 0x05
	int counter = 0;
	long int time = millis();
	while (1) {
		if ((time + 2000) < millis())
			break;
		while (RX_Counter_UART) {
    327c:	80 91 b6 04 	lds	r24, 0x04B6
    3280:	88 23       	and	r24, r24
    3282:	11 f7       	brne	.-60     	; 0x3248 <H_WIFI_command_statue_t_sendData+0x78>
    3284:	cd cf       	rjmp	.-102    	; 0x3220 <H_WIFI_command_statue_t_sendData+0x50>
			if (*(response + counter))
				counter++;
		}
	}

	*(response + counter) = 0;
    3286:	2d 81       	ldd	r18, Y+5	; 0x05
    3288:	3e 81       	ldd	r19, Y+6	; 0x06
    328a:	89 85       	ldd	r24, Y+9	; 0x09
    328c:	9a 85       	ldd	r25, Y+10	; 0x0a
    328e:	fc 01       	movw	r30, r24
    3290:	e2 0f       	add	r30, r18
    3292:	f3 1f       	adc	r31, r19
    3294:	10 82       	st	Z, r1
	if (counter == 0)
    3296:	8d 81       	ldd	r24, Y+5	; 0x05
    3298:	9e 81       	ldd	r25, Y+6	; 0x06
    329a:	00 97       	sbiw	r24, 0x00	; 0
    329c:	19 f4       	brne	.+6      	; 0x32a4 <H_WIFI_command_statue_t_sendData+0xd4>
		return WIFI_command_timeOute;
    329e:	f2 e0       	ldi	r31, 0x02	; 2
    32a0:	fd 87       	std	Y+13, r31	; 0x0d
    32a2:	05 c0       	rjmp	.+10     	; 0x32ae <H_WIFI_command_statue_t_sendData+0xde>
	return H_WIFI_statue_t_cheakOk(response);
    32a4:	89 85       	ldd	r24, Y+9	; 0x09
    32a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32a8:	0e 94 ae 18 	call	0x315c	; 0x315c <H_WIFI_statue_t_cheakOk>
    32ac:	8d 87       	std	Y+13, r24	; 0x0d
    32ae:	8d 85       	ldd	r24, Y+13	; 0x0d

}
    32b0:	2d 96       	adiw	r28, 0x0d	; 13
    32b2:	0f b6       	in	r0, 0x3f	; 63
    32b4:	f8 94       	cli
    32b6:	de bf       	out	0x3e, r29	; 62
    32b8:	0f be       	out	0x3f, r0	; 63
    32ba:	cd bf       	out	0x3d, r28	; 61
    32bc:	cf 91       	pop	r28
    32be:	df 91       	pop	r29
    32c0:	1f 91       	pop	r17
    32c2:	0f 91       	pop	r16
    32c4:	ff 90       	pop	r15
    32c6:	ef 90       	pop	r14
    32c8:	08 95       	ret

000032ca <H_WIFI_TCPCommand_t_TCPCommand>:

WIFI_TCPCommand_t H_WIFI_TCPCommand_t_TCPCommand(char *StrReceved) {
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	00 d0       	rcall	.+0      	; 0x32d0 <H_WIFI_TCPCommand_t_TCPCommand+0x6>
    32d0:	00 d0       	rcall	.+0      	; 0x32d2 <H_WIFI_TCPCommand_t_TCPCommand+0x8>
    32d2:	00 d0       	rcall	.+0      	; 0x32d4 <H_WIFI_TCPCommand_t_TCPCommand+0xa>
    32d4:	cd b7       	in	r28, 0x3d	; 61
    32d6:	de b7       	in	r29, 0x3e	; 62
    32d8:	9d 83       	std	Y+5, r25	; 0x05
    32da:	8c 83       	std	Y+4, r24	; 0x04
	char *command;
	command = strstr(StrReceved, "REL");
    32dc:	8c 81       	ldd	r24, Y+4	; 0x04
    32de:	9d 81       	ldd	r25, Y+5	; 0x05
    32e0:	24 e5       	ldi	r18, 0x54	; 84
    32e2:	31 e0       	ldi	r19, 0x01	; 1
    32e4:	b9 01       	movw	r22, r18
    32e6:	0e 94 88 29 	call	0x5310	; 0x5310 <strstr>
    32ea:	9b 83       	std	Y+3, r25	; 0x03
    32ec:	8a 83       	std	Y+2, r24	; 0x02
	if (command != NULL) {
    32ee:	8a 81       	ldd	r24, Y+2	; 0x02
    32f0:	9b 81       	ldd	r25, Y+3	; 0x03
    32f2:	00 97       	sbiw	r24, 0x00	; 0
    32f4:	99 f0       	breq	.+38     	; 0x331c <H_WIFI_TCPCommand_t_TCPCommand+0x52>
		u8 LEDstatues = *(command + 3) - '0';
    32f6:	8a 81       	ldd	r24, Y+2	; 0x02
    32f8:	9b 81       	ldd	r25, Y+3	; 0x03
    32fa:	fc 01       	movw	r30, r24
    32fc:	33 96       	adiw	r30, 0x03	; 3
    32fe:	80 81       	ld	r24, Z
    3300:	80 53       	subi	r24, 0x30	; 48
    3302:	89 83       	std	Y+1, r24	; 0x01
		if (LEDstatues == 0) {
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	88 23       	and	r24, r24
    3308:	19 f4       	brne	.+6      	; 0x3310 <H_WIFI_TCPCommand_t_TCPCommand+0x46>


			return TCPCommand_RelayOFF;
    330a:	82 e0       	ldi	r24, 0x02	; 2
    330c:	8e 83       	std	Y+6, r24	; 0x06
    330e:	07 c0       	rjmp	.+14     	; 0x331e <H_WIFI_TCPCommand_t_TCPCommand+0x54>
		} else if (LEDstatues == 1) {
    3310:	89 81       	ldd	r24, Y+1	; 0x01
    3312:	81 30       	cpi	r24, 0x01	; 1
    3314:	19 f4       	brne	.+6      	; 0x331c <H_WIFI_TCPCommand_t_TCPCommand+0x52>


			return TCPCommand_RelayON;
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	8e 83       	std	Y+6, r24	; 0x06
    331a:	01 c0       	rjmp	.+2      	; 0x331e <H_WIFI_TCPCommand_t_TCPCommand+0x54>
		}
	}

	return TCPCommand_NULL;
    331c:	1e 82       	std	Y+6, r1	; 0x06
    331e:	8e 81       	ldd	r24, Y+6	; 0x06
}
    3320:	26 96       	adiw	r28, 0x06	; 6
    3322:	0f b6       	in	r0, 0x3f	; 63
    3324:	f8 94       	cli
    3326:	de bf       	out	0x3e, r29	; 62
    3328:	0f be       	out	0x3f, r0	; 63
    332a:	cd bf       	out	0x3d, r28	; 61
    332c:	cf 91       	pop	r28
    332e:	df 91       	pop	r29
    3330:	08 95       	ret

00003332 <H_WIFI_ReceiveStatue_t_WIFIreceive>:



WIFI_Receive_statue_t H_WIFI_ReceiveStatue_t_WIFIreceive(char *recevBuffer)
{
    3332:	df 93       	push	r29
    3334:	cf 93       	push	r28
    3336:	00 d0       	rcall	.+0      	; 0x3338 <H_WIFI_ReceiveStatue_t_WIFIreceive+0x6>
    3338:	0f 92       	push	r0
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
    333e:	9a 83       	std	Y+2, r25	; 0x02
    3340:	89 83       	std	Y+1, r24	; 0x01
	if(M_UART_void_UARTAvalepale() > 0)
    3342:	0e 94 a5 07 	call	0xf4a	; 0xf4a <M_UART_void_UARTAvalepale>
    3346:	88 23       	and	r24, r24
    3348:	31 f0       	breq	.+12     	; 0x3356 <H_WIFI_ReceiveStatue_t_WIFIreceive+0x24>
	{
		M_UART_void_ReceiveString(recevBuffer);
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	9a 81       	ldd	r25, Y+2	; 0x02
    334e:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <M_UART_void_ReceiveString>
		return WIFI_Data_Receved;
    3352:	1b 82       	std	Y+3, r1	; 0x03
    3354:	02 c0       	rjmp	.+4      	; 0x335a <H_WIFI_ReceiveStatue_t_WIFIreceive+0x28>
	}
	return WIFI_NO_data_receved;
    3356:	81 e0       	ldi	r24, 0x01	; 1
    3358:	8b 83       	std	Y+3, r24	; 0x03
    335a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    335c:	0f 90       	pop	r0
    335e:	0f 90       	pop	r0
    3360:	0f 90       	pop	r0
    3362:	cf 91       	pop	r28
    3364:	df 91       	pop	r29
    3366:	08 95       	ret

00003368 <H_LM35_void_Init>:
extern ADC_config_t LM35_ADC_config_struct;


#define LM35_NUM_OF_SAMPLES	40

void H_LM35_void_Init(){
    3368:	df 93       	push	r29
    336a:	cf 93       	push	r28
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
	M_ADC_void_Init(LM35_ADC_config_struct);
    3370:	40 91 0d 03 	lds	r20, 0x030D
    3374:	50 91 0e 03 	lds	r21, 0x030E
    3378:	60 91 0f 03 	lds	r22, 0x030F
    337c:	70 91 10 03 	lds	r23, 0x0310
    3380:	80 91 11 03 	lds	r24, 0x0311
    3384:	0e 94 78 13 	call	0x26f0	; 0x26f0 <M_ADC_void_Init>
}
    3388:	cf 91       	pop	r28
    338a:	df 91       	pop	r29
    338c:	08 95       	ret

0000338e <H_LM35_u8_ReadTemprature>:

u8 H_LM35_u8_ReadTemprature(){
    338e:	df 93       	push	r29
    3390:	cf 93       	push	r28
    3392:	cd b7       	in	r28, 0x3d	; 61
    3394:	de b7       	in	r29, 0x3e	; 62
    3396:	c2 55       	subi	r28, 0x52	; 82
    3398:	d0 40       	sbci	r29, 0x00	; 0
    339a:	0f b6       	in	r0, 0x3f	; 63
    339c:	f8 94       	cli
    339e:	de bf       	out	0x3e, r29	; 62
    33a0:	0f be       	out	0x3f, r0	; 63
    33a2:	cd bf       	out	0x3d, r28	; 61
*/

	f64 analog_volt;
	f64 tempreture;
	u16 ADC_result;
	u8 state= ADC_FAILED;
    33a4:	1e 8e       	std	Y+30, r1	; 0x1e
	u8 readings[LM35_NUM_OF_SAMPLES];
	int i, j;

	//Taking samples
	for(i= 0; i< LM35_NUM_OF_SAMPLES ; i++){
    33a6:	1d 8e       	std	Y+29, r1	; 0x1d
    33a8:	1c 8e       	std	Y+28, r1	; 0x1c
    33aa:	dc c0       	rjmp	.+440    	; 0x3564 <H_LM35_u8_ReadTemprature+0x1d6>
		M_ADC_void_StartConversion();
    33ac:	0e 94 08 14 	call	0x2810	; 0x2810 <M_ADC_void_StartConversion>
    33b0:	08 c0       	rjmp	.+16     	; 0x33c2 <H_LM35_u8_ReadTemprature+0x34>

		while(state == ADC_FAILED){
			state = M_ADC_void_GetDigitalValueSynchNonBlocking(LM35_ADC_CHANNEL, &ADC_result);
    33b2:	9e 01       	movw	r18, r28
    33b4:	29 5d       	subi	r18, 0xD9	; 217
    33b6:	3f 4f       	sbci	r19, 0xFF	; 255
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	b9 01       	movw	r22, r18
    33bc:	0e 94 16 14 	call	0x282c	; 0x282c <M_ADC_void_GetDigitalValueSynchNonBlocking>
    33c0:	8e 8f       	std	Y+30, r24	; 0x1e

	//Taking samples
	for(i= 0; i< LM35_NUM_OF_SAMPLES ; i++){
		M_ADC_void_StartConversion();

		while(state == ADC_FAILED){
    33c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    33c4:	88 23       	and	r24, r24
    33c6:	a9 f3       	breq	.-22     	; 0x33b2 <H_LM35_u8_ReadTemprature+0x24>
			state = M_ADC_void_GetDigitalValueSynchNonBlocking(LM35_ADC_CHANNEL, &ADC_result);
		}
		readings[i] = ADC_result;
    33c8:	2c 8d       	ldd	r18, Y+28	; 0x1c
    33ca:	3d 8d       	ldd	r19, Y+29	; 0x1d
    33cc:	8f a1       	ldd	r24, Y+39	; 0x27
    33ce:	98 a5       	ldd	r25, Y+40	; 0x28
    33d0:	48 2f       	mov	r20, r24
    33d2:	ce 01       	movw	r24, r28
    33d4:	89 96       	adiw	r24, 0x29	; 41
    33d6:	fc 01       	movw	r30, r24
    33d8:	e2 0f       	add	r30, r18
    33da:	f3 1f       	adc	r31, r19
    33dc:	40 83       	st	Z, r20
    33de:	80 e0       	ldi	r24, 0x00	; 0
    33e0:	90 e0       	ldi	r25, 0x00	; 0
    33e2:	a8 ec       	ldi	r26, 0xC8	; 200
    33e4:	b2 e4       	ldi	r27, 0x42	; 66
    33e6:	8d 8b       	std	Y+21, r24	; 0x15
    33e8:	9e 8b       	std	Y+22, r25	; 0x16
    33ea:	af 8b       	std	Y+23, r26	; 0x17
    33ec:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    33ee:	6d 89       	ldd	r22, Y+21	; 0x15
    33f0:	7e 89       	ldd	r23, Y+22	; 0x16
    33f2:	8f 89       	ldd	r24, Y+23	; 0x17
    33f4:	98 8d       	ldd	r25, Y+24	; 0x18
    33f6:	2b ea       	ldi	r18, 0xAB	; 171
    33f8:	3a ea       	ldi	r19, 0xAA	; 170
    33fa:	4a ea       	ldi	r20, 0xAA	; 170
    33fc:	50 e4       	ldi	r21, 0x40	; 64
    33fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3402:	dc 01       	movw	r26, r24
    3404:	cb 01       	movw	r24, r22
    3406:	89 8b       	std	Y+17, r24	; 0x11
    3408:	9a 8b       	std	Y+18, r25	; 0x12
    340a:	ab 8b       	std	Y+19, r26	; 0x13
    340c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    340e:	69 89       	ldd	r22, Y+17	; 0x11
    3410:	7a 89       	ldd	r23, Y+18	; 0x12
    3412:	8b 89       	ldd	r24, Y+19	; 0x13
    3414:	9c 89       	ldd	r25, Y+20	; 0x14
    3416:	20 e0       	ldi	r18, 0x00	; 0
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	40 e8       	ldi	r20, 0x80	; 128
    341c:	5f e3       	ldi	r21, 0x3F	; 63
    341e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3422:	88 23       	and	r24, r24
    3424:	1c f4       	brge	.+6      	; 0x342c <H_LM35_u8_ReadTemprature+0x9e>
		__ticks = 1;
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	88 8b       	std	Y+16, r24	; 0x10
    342a:	91 c0       	rjmp	.+290    	; 0x354e <H_LM35_u8_ReadTemprature+0x1c0>
	else if (__tmp > 255)
    342c:	69 89       	ldd	r22, Y+17	; 0x11
    342e:	7a 89       	ldd	r23, Y+18	; 0x12
    3430:	8b 89       	ldd	r24, Y+19	; 0x13
    3432:	9c 89       	ldd	r25, Y+20	; 0x14
    3434:	20 e0       	ldi	r18, 0x00	; 0
    3436:	30 e0       	ldi	r19, 0x00	; 0
    3438:	4f e7       	ldi	r20, 0x7F	; 127
    343a:	53 e4       	ldi	r21, 0x43	; 67
    343c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3440:	18 16       	cp	r1, r24
    3442:	0c f0       	brlt	.+2      	; 0x3446 <H_LM35_u8_ReadTemprature+0xb8>
    3444:	7b c0       	rjmp	.+246    	; 0x353c <H_LM35_u8_ReadTemprature+0x1ae>
	{
		_delay_ms(__us / 1000.0);
    3446:	6d 89       	ldd	r22, Y+21	; 0x15
    3448:	7e 89       	ldd	r23, Y+22	; 0x16
    344a:	8f 89       	ldd	r24, Y+23	; 0x17
    344c:	98 8d       	ldd	r25, Y+24	; 0x18
    344e:	20 e0       	ldi	r18, 0x00	; 0
    3450:	30 e0       	ldi	r19, 0x00	; 0
    3452:	4a e7       	ldi	r20, 0x7A	; 122
    3454:	54 e4       	ldi	r21, 0x44	; 68
    3456:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    345a:	dc 01       	movw	r26, r24
    345c:	cb 01       	movw	r24, r22
    345e:	8c 87       	std	Y+12, r24	; 0x0c
    3460:	9d 87       	std	Y+13, r25	; 0x0d
    3462:	ae 87       	std	Y+14, r26	; 0x0e
    3464:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3466:	6c 85       	ldd	r22, Y+12	; 0x0c
    3468:	7d 85       	ldd	r23, Y+13	; 0x0d
    346a:	8e 85       	ldd	r24, Y+14	; 0x0e
    346c:	9f 85       	ldd	r25, Y+15	; 0x0f
    346e:	20 e0       	ldi	r18, 0x00	; 0
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	4a e7       	ldi	r20, 0x7A	; 122
    3474:	55 e4       	ldi	r21, 0x45	; 69
    3476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    347a:	dc 01       	movw	r26, r24
    347c:	cb 01       	movw	r24, r22
    347e:	88 87       	std	Y+8, r24	; 0x08
    3480:	99 87       	std	Y+9, r25	; 0x09
    3482:	aa 87       	std	Y+10, r26	; 0x0a
    3484:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    3486:	68 85       	ldd	r22, Y+8	; 0x08
    3488:	79 85       	ldd	r23, Y+9	; 0x09
    348a:	8a 85       	ldd	r24, Y+10	; 0x0a
    348c:	9b 85       	ldd	r25, Y+11	; 0x0b
    348e:	20 e0       	ldi	r18, 0x00	; 0
    3490:	30 e0       	ldi	r19, 0x00	; 0
    3492:	40 e8       	ldi	r20, 0x80	; 128
    3494:	5f e3       	ldi	r21, 0x3F	; 63
    3496:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    349a:	88 23       	and	r24, r24
    349c:	2c f4       	brge	.+10     	; 0x34a8 <H_LM35_u8_ReadTemprature+0x11a>
		__ticks = 1;
    349e:	81 e0       	ldi	r24, 0x01	; 1
    34a0:	90 e0       	ldi	r25, 0x00	; 0
    34a2:	9f 83       	std	Y+7, r25	; 0x07
    34a4:	8e 83       	std	Y+6, r24	; 0x06
    34a6:	3f c0       	rjmp	.+126    	; 0x3526 <H_LM35_u8_ReadTemprature+0x198>
	else if (__tmp > 65535)
    34a8:	68 85       	ldd	r22, Y+8	; 0x08
    34aa:	79 85       	ldd	r23, Y+9	; 0x09
    34ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    34ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	3f ef       	ldi	r19, 0xFF	; 255
    34b4:	4f e7       	ldi	r20, 0x7F	; 127
    34b6:	57 e4       	ldi	r21, 0x47	; 71
    34b8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    34bc:	18 16       	cp	r1, r24
    34be:	4c f5       	brge	.+82     	; 0x3512 <H_LM35_u8_ReadTemprature+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    34c2:	7d 85       	ldd	r23, Y+13	; 0x0d
    34c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    34c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    34c8:	20 e0       	ldi	r18, 0x00	; 0
    34ca:	30 e0       	ldi	r19, 0x00	; 0
    34cc:	40 e2       	ldi	r20, 0x20	; 32
    34ce:	51 e4       	ldi	r21, 0x41	; 65
    34d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34d4:	dc 01       	movw	r26, r24
    34d6:	cb 01       	movw	r24, r22
    34d8:	bc 01       	movw	r22, r24
    34da:	cd 01       	movw	r24, r26
    34dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	9f 83       	std	Y+7, r25	; 0x07
    34e6:	8e 83       	std	Y+6, r24	; 0x06
    34e8:	0f c0       	rjmp	.+30     	; 0x3508 <H_LM35_u8_ReadTemprature+0x17a>
    34ea:	80 e9       	ldi	r24, 0x90	; 144
    34ec:	91 e0       	ldi	r25, 0x01	; 1
    34ee:	9d 83       	std	Y+5, r25	; 0x05
    34f0:	8c 83       	std	Y+4, r24	; 0x04
    34f2:	8c 81       	ldd	r24, Y+4	; 0x04
    34f4:	9d 81       	ldd	r25, Y+5	; 0x05
    34f6:	01 97       	sbiw	r24, 0x01	; 1
    34f8:	f1 f7       	brne	.-4      	; 0x34f6 <H_LM35_u8_ReadTemprature+0x168>
    34fa:	9d 83       	std	Y+5, r25	; 0x05
    34fc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3500:	9f 81       	ldd	r25, Y+7	; 0x07
    3502:	01 97       	sbiw	r24, 0x01	; 1
    3504:	9f 83       	std	Y+7, r25	; 0x07
    3506:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3508:	8e 81       	ldd	r24, Y+6	; 0x06
    350a:	9f 81       	ldd	r25, Y+7	; 0x07
    350c:	00 97       	sbiw	r24, 0x00	; 0
    350e:	69 f7       	brne	.-38     	; 0x34ea <H_LM35_u8_ReadTemprature+0x15c>
    3510:	24 c0       	rjmp	.+72     	; 0x355a <H_LM35_u8_ReadTemprature+0x1cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3512:	68 85       	ldd	r22, Y+8	; 0x08
    3514:	79 85       	ldd	r23, Y+9	; 0x09
    3516:	8a 85       	ldd	r24, Y+10	; 0x0a
    3518:	9b 85       	ldd	r25, Y+11	; 0x0b
    351a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    351e:	dc 01       	movw	r26, r24
    3520:	cb 01       	movw	r24, r22
    3522:	9f 83       	std	Y+7, r25	; 0x07
    3524:	8e 83       	std	Y+6, r24	; 0x06
    3526:	8e 81       	ldd	r24, Y+6	; 0x06
    3528:	9f 81       	ldd	r25, Y+7	; 0x07
    352a:	9b 83       	std	Y+3, r25	; 0x03
    352c:	8a 83       	std	Y+2, r24	; 0x02
    352e:	8a 81       	ldd	r24, Y+2	; 0x02
    3530:	9b 81       	ldd	r25, Y+3	; 0x03
    3532:	01 97       	sbiw	r24, 0x01	; 1
    3534:	f1 f7       	brne	.-4      	; 0x3532 <H_LM35_u8_ReadTemprature+0x1a4>
    3536:	9b 83       	std	Y+3, r25	; 0x03
    3538:	8a 83       	std	Y+2, r24	; 0x02
    353a:	0f c0       	rjmp	.+30     	; 0x355a <H_LM35_u8_ReadTemprature+0x1cc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    353c:	69 89       	ldd	r22, Y+17	; 0x11
    353e:	7a 89       	ldd	r23, Y+18	; 0x12
    3540:	8b 89       	ldd	r24, Y+19	; 0x13
    3542:	9c 89       	ldd	r25, Y+20	; 0x14
    3544:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3548:	dc 01       	movw	r26, r24
    354a:	cb 01       	movw	r24, r22
    354c:	88 8b       	std	Y+16, r24	; 0x10
    354e:	88 89       	ldd	r24, Y+16	; 0x10
    3550:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3552:	89 81       	ldd	r24, Y+1	; 0x01
    3554:	8a 95       	dec	r24
    3556:	f1 f7       	brne	.-4      	; 0x3554 <H_LM35_u8_ReadTemprature+0x1c6>
    3558:	89 83       	std	Y+1, r24	; 0x01
	u8 state= ADC_FAILED;
	u8 readings[LM35_NUM_OF_SAMPLES];
	int i, j;

	//Taking samples
	for(i= 0; i< LM35_NUM_OF_SAMPLES ; i++){
    355a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    355c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    355e:	01 96       	adiw	r24, 0x01	; 1
    3560:	9d 8f       	std	Y+29, r25	; 0x1d
    3562:	8c 8f       	std	Y+28, r24	; 0x1c
    3564:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3566:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3568:	88 32       	cpi	r24, 0x28	; 40
    356a:	91 05       	cpc	r25, r1
    356c:	0c f4       	brge	.+2      	; 0x3570 <H_LM35_u8_ReadTemprature+0x1e2>
    356e:	1e cf       	rjmp	.-452    	; 0x33ac <H_LM35_u8_ReadTemprature+0x1e>

	}

	//Sorting readings (Bubble Sort)
		u8 temp;
	    for (i = 0; i < LM35_NUM_OF_SAMPLES; i++) {
    3570:	1d 8e       	std	Y+29, r1	; 0x1d
    3572:	1c 8e       	std	Y+28, r1	; 0x1c
    3574:	56 c0       	rjmp	.+172    	; 0x3622 <H_LM35_u8_ReadTemprature+0x294>
	        for (j = 0; j < LM35_NUM_OF_SAMPLES-j-1; j++) {
    3576:	1b 8e       	std	Y+27, r1	; 0x1b
    3578:	1a 8e       	std	Y+26, r1	; 0x1a
    357a:	42 c0       	rjmp	.+132    	; 0x3600 <H_LM35_u8_ReadTemprature+0x272>
	            if (readings[j] > readings[j+1]) {
    357c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    357e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    3580:	ce 01       	movw	r24, r28
    3582:	89 96       	adiw	r24, 0x29	; 41
    3584:	fc 01       	movw	r30, r24
    3586:	e2 0f       	add	r30, r18
    3588:	f3 1f       	adc	r31, r19
    358a:	40 81       	ld	r20, Z
    358c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    358e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3590:	9c 01       	movw	r18, r24
    3592:	2f 5f       	subi	r18, 0xFF	; 255
    3594:	3f 4f       	sbci	r19, 0xFF	; 255
    3596:	ce 01       	movw	r24, r28
    3598:	89 96       	adiw	r24, 0x29	; 41
    359a:	fc 01       	movw	r30, r24
    359c:	e2 0f       	add	r30, r18
    359e:	f3 1f       	adc	r31, r19
    35a0:	80 81       	ld	r24, Z
    35a2:	84 17       	cp	r24, r20
    35a4:	40 f5       	brcc	.+80     	; 0x35f6 <H_LM35_u8_ReadTemprature+0x268>
	                temp = readings[j];
    35a6:	2a 8d       	ldd	r18, Y+26	; 0x1a
    35a8:	3b 8d       	ldd	r19, Y+27	; 0x1b
    35aa:	ce 01       	movw	r24, r28
    35ac:	89 96       	adiw	r24, 0x29	; 41
    35ae:	fc 01       	movw	r30, r24
    35b0:	e2 0f       	add	r30, r18
    35b2:	f3 1f       	adc	r31, r19
    35b4:	80 81       	ld	r24, Z
    35b6:	89 8f       	std	Y+25, r24	; 0x19
	                readings[j] = readings[j+1];
    35b8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    35ba:	5b 8d       	ldd	r21, Y+27	; 0x1b
    35bc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35be:	9b 8d       	ldd	r25, Y+27	; 0x1b
    35c0:	9c 01       	movw	r18, r24
    35c2:	2f 5f       	subi	r18, 0xFF	; 255
    35c4:	3f 4f       	sbci	r19, 0xFF	; 255
    35c6:	ce 01       	movw	r24, r28
    35c8:	89 96       	adiw	r24, 0x29	; 41
    35ca:	fc 01       	movw	r30, r24
    35cc:	e2 0f       	add	r30, r18
    35ce:	f3 1f       	adc	r31, r19
    35d0:	20 81       	ld	r18, Z
    35d2:	ce 01       	movw	r24, r28
    35d4:	89 96       	adiw	r24, 0x29	; 41
    35d6:	fc 01       	movw	r30, r24
    35d8:	e4 0f       	add	r30, r20
    35da:	f5 1f       	adc	r31, r21
    35dc:	20 83       	st	Z, r18
	                readings[j+1] = temp;
    35de:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35e0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    35e2:	9c 01       	movw	r18, r24
    35e4:	2f 5f       	subi	r18, 0xFF	; 255
    35e6:	3f 4f       	sbci	r19, 0xFF	; 255
    35e8:	ce 01       	movw	r24, r28
    35ea:	89 96       	adiw	r24, 0x29	; 41
    35ec:	fc 01       	movw	r30, r24
    35ee:	e2 0f       	add	r30, r18
    35f0:	f3 1f       	adc	r31, r19
    35f2:	89 8d       	ldd	r24, Y+25	; 0x19
    35f4:	80 83       	st	Z, r24
	}

	//Sorting readings (Bubble Sort)
		u8 temp;
	    for (i = 0; i < LM35_NUM_OF_SAMPLES; i++) {
	        for (j = 0; j < LM35_NUM_OF_SAMPLES-j-1; j++) {
    35f6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    35f8:	9b 8d       	ldd	r25, Y+27	; 0x1b
    35fa:	01 96       	adiw	r24, 0x01	; 1
    35fc:	9b 8f       	std	Y+27, r25	; 0x1b
    35fe:	8a 8f       	std	Y+26, r24	; 0x1a
    3600:	27 e2       	ldi	r18, 0x27	; 39
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3606:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3608:	28 1b       	sub	r18, r24
    360a:	39 0b       	sbc	r19, r25
    360c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    360e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3610:	82 17       	cp	r24, r18
    3612:	93 07       	cpc	r25, r19
    3614:	0c f4       	brge	.+2      	; 0x3618 <H_LM35_u8_ReadTemprature+0x28a>
    3616:	b2 cf       	rjmp	.-156    	; 0x357c <H_LM35_u8_ReadTemprature+0x1ee>

	}

	//Sorting readings (Bubble Sort)
		u8 temp;
	    for (i = 0; i < LM35_NUM_OF_SAMPLES; i++) {
    3618:	8c 8d       	ldd	r24, Y+28	; 0x1c
    361a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    361c:	01 96       	adiw	r24, 0x01	; 1
    361e:	9d 8f       	std	Y+29, r25	; 0x1d
    3620:	8c 8f       	std	Y+28, r24	; 0x1c
    3622:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3624:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3626:	88 32       	cpi	r24, 0x28	; 40
    3628:	91 05       	cpc	r25, r1
    362a:	0c f4       	brge	.+2      	; 0x362e <H_LM35_u8_ReadTemprature+0x2a0>
    362c:	a4 cf       	rjmp	.-184    	; 0x3576 <H_LM35_u8_ReadTemprature+0x1e8>
	        }
	    }

	    // Find the median value in the window
	    if (LM35_NUM_OF_SAMPLES % 2 == 0) {
	        ADC_result = (readings[LM35_NUM_OF_SAMPLES/2] + readings[LM35_NUM_OF_SAMPLES/2-1])/2;
    362e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3630:	28 2f       	mov	r18, r24
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	8c ad       	ldd	r24, Y+60	; 0x3c
    3636:	88 2f       	mov	r24, r24
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	82 0f       	add	r24, r18
    363c:	93 1f       	adc	r25, r19
    363e:	63 96       	adiw	r28, 0x13	; 19
    3640:	9f af       	std	Y+63, r25	; 0x3f
    3642:	8e af       	std	Y+62, r24	; 0x3e
    3644:	63 97       	sbiw	r28, 0x13	; 19
    3646:	63 96       	adiw	r28, 0x13	; 19
    3648:	8e ad       	ldd	r24, Y+62	; 0x3e
    364a:	9f ad       	ldd	r25, Y+63	; 0x3f
    364c:	63 97       	sbiw	r28, 0x13	; 19
    364e:	99 23       	and	r25, r25
    3650:	4c f4       	brge	.+18     	; 0x3664 <H_LM35_u8_ReadTemprature+0x2d6>
    3652:	63 96       	adiw	r28, 0x13	; 19
    3654:	8e ad       	ldd	r24, Y+62	; 0x3e
    3656:	9f ad       	ldd	r25, Y+63	; 0x3f
    3658:	63 97       	sbiw	r28, 0x13	; 19
    365a:	01 96       	adiw	r24, 0x01	; 1
    365c:	63 96       	adiw	r28, 0x13	; 19
    365e:	9f af       	std	Y+63, r25	; 0x3f
    3660:	8e af       	std	Y+62, r24	; 0x3e
    3662:	63 97       	sbiw	r28, 0x13	; 19
    3664:	63 96       	adiw	r28, 0x13	; 19
    3666:	8e ad       	ldd	r24, Y+62	; 0x3e
    3668:	9f ad       	ldd	r25, Y+63	; 0x3f
    366a:	63 97       	sbiw	r28, 0x13	; 19
    366c:	95 95       	asr	r25
    366e:	87 95       	ror	r24
    3670:	98 a7       	std	Y+40, r25	; 0x28
    3672:	8f a3       	std	Y+39, r24	; 0x27
	    else {
	        ADC_result = readings[LM35_NUM_OF_SAMPLES/2];
	    }


		analog_volt = ADC_result * ((5.0*1000)/1024);  //in millieVolts
    3674:	8f a1       	ldd	r24, Y+39	; 0x27
    3676:	98 a5       	ldd	r25, Y+40	; 0x28
    3678:	cc 01       	movw	r24, r24
    367a:	a0 e0       	ldi	r26, 0x00	; 0
    367c:	b0 e0       	ldi	r27, 0x00	; 0
    367e:	bc 01       	movw	r22, r24
    3680:	cd 01       	movw	r24, r26
    3682:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3686:	dc 01       	movw	r26, r24
    3688:	cb 01       	movw	r24, r22
    368a:	bc 01       	movw	r22, r24
    368c:	cd 01       	movw	r24, r26
    368e:	20 e0       	ldi	r18, 0x00	; 0
    3690:	30 e4       	ldi	r19, 0x40	; 64
    3692:	4c e9       	ldi	r20, 0x9C	; 156
    3694:	50 e4       	ldi	r21, 0x40	; 64
    3696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    369a:	dc 01       	movw	r26, r24
    369c:	cb 01       	movw	r24, r22
    369e:	8b a3       	std	Y+35, r24	; 0x23
    36a0:	9c a3       	std	Y+36, r25	; 0x24
    36a2:	ad a3       	std	Y+37, r26	; 0x25
    36a4:	be a3       	std	Y+38, r27	; 0x26

		if(analog_volt == (f64)550){
    36a6:	6b a1       	ldd	r22, Y+35	; 0x23
    36a8:	7c a1       	ldd	r23, Y+36	; 0x24
    36aa:	8d a1       	ldd	r24, Y+37	; 0x25
    36ac:	9e a1       	ldd	r25, Y+38	; 0x26
    36ae:	20 e0       	ldi	r18, 0x00	; 0
    36b0:	30 e8       	ldi	r19, 0x80	; 128
    36b2:	49 e0       	ldi	r20, 0x09	; 9
    36b4:	54 e4       	ldi	r21, 0x44	; 68
    36b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__eqsf2>
    36ba:	88 23       	and	r24, r24
    36bc:	49 f4       	brne	.+18     	; 0x36d0 <H_LM35_u8_ReadTemprature+0x342>
			tempreture = 0.0;
    36be:	80 e0       	ldi	r24, 0x00	; 0
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	a0 e0       	ldi	r26, 0x00	; 0
    36c4:	b0 e0       	ldi	r27, 0x00	; 0
    36c6:	8f 8f       	std	Y+31, r24	; 0x1f
    36c8:	98 a3       	std	Y+32, r25	; 0x20
    36ca:	a9 a3       	std	Y+33, r26	; 0x21
    36cc:	ba a3       	std	Y+34, r27	; 0x22
    36ce:	10 c0       	rjmp	.+32     	; 0x36f0 <H_LM35_u8_ReadTemprature+0x362>

		}else {
			tempreture = analog_volt / 10.0;
    36d0:	6b a1       	ldd	r22, Y+35	; 0x23
    36d2:	7c a1       	ldd	r23, Y+36	; 0x24
    36d4:	8d a1       	ldd	r24, Y+37	; 0x25
    36d6:	9e a1       	ldd	r25, Y+38	; 0x26
    36d8:	20 e0       	ldi	r18, 0x00	; 0
    36da:	30 e0       	ldi	r19, 0x00	; 0
    36dc:	40 e2       	ldi	r20, 0x20	; 32
    36de:	51 e4       	ldi	r21, 0x41	; 65
    36e0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    36e4:	dc 01       	movw	r26, r24
    36e6:	cb 01       	movw	r24, r22
    36e8:	8f 8f       	std	Y+31, r24	; 0x1f
    36ea:	98 a3       	std	Y+32, r25	; 0x20
    36ec:	a9 a3       	std	Y+33, r26	; 0x21
    36ee:	ba a3       	std	Y+34, r27	; 0x22
		}

		//return ADC_result;
		return tempreture;
    36f0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    36f2:	78 a1       	ldd	r23, Y+32	; 0x20
    36f4:	89 a1       	ldd	r24, Y+33	; 0x21
    36f6:	9a a1       	ldd	r25, Y+34	; 0x22
    36f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36fc:	dc 01       	movw	r26, r24
    36fe:	cb 01       	movw	r24, r22

}
    3700:	ce 5a       	subi	r28, 0xAE	; 174
    3702:	df 4f       	sbci	r29, 0xFF	; 255
    3704:	0f b6       	in	r0, 0x3f	; 63
    3706:	f8 94       	cli
    3708:	de bf       	out	0x3e, r29	; 62
    370a:	0f be       	out	0x3f, r0	; 63
    370c:	cd bf       	out	0x3d, r28	; 61
    370e:	cf 91       	pop	r28
    3710:	df 91       	pop	r29
    3712:	08 95       	ret

00003714 <H_LED_voidTurnOn>:




void H_LED_voidTurnOn(Led_IDtype LedId)
{
    3714:	df 93       	push	r29
    3716:	cf 93       	push	r28
    3718:	00 d0       	rcall	.+0      	; 0x371a <H_LED_voidTurnOn+0x6>
    371a:	0f 92       	push	r0
    371c:	cd b7       	in	r28, 0x3d	; 61
    371e:	de b7       	in	r29, 0x3e	; 62
    3720:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
    3722:	89 81       	ldd	r24, Y+1	; 0x01
    3724:	28 2f       	mov	r18, r24
    3726:	30 e0       	ldi	r19, 0x00	; 0
    3728:	3b 83       	std	Y+3, r19	; 0x03
    372a:	2a 83       	std	Y+2, r18	; 0x02
    372c:	8a 81       	ldd	r24, Y+2	; 0x02
    372e:	9b 81       	ldd	r25, Y+3	; 0x03
    3730:	81 30       	cpi	r24, 0x01	; 1
    3732:	91 05       	cpc	r25, r1
    3734:	f9 f0       	breq	.+62     	; 0x3774 <H_LED_voidTurnOn+0x60>
    3736:	2a 81       	ldd	r18, Y+2	; 0x02
    3738:	3b 81       	ldd	r19, Y+3	; 0x03
    373a:	22 30       	cpi	r18, 0x02	; 2
    373c:	31 05       	cpc	r19, r1
    373e:	2c f4       	brge	.+10     	; 0x374a <H_LED_voidTurnOn+0x36>
    3740:	8a 81       	ldd	r24, Y+2	; 0x02
    3742:	9b 81       	ldd	r25, Y+3	; 0x03
    3744:	00 97       	sbiw	r24, 0x00	; 0
    3746:	61 f0       	breq	.+24     	; 0x3760 <H_LED_voidTurnOn+0x4c>
    3748:	1e c0       	rjmp	.+60     	; 0x3786 <H_LED_voidTurnOn+0x72>
    374a:	2a 81       	ldd	r18, Y+2	; 0x02
    374c:	3b 81       	ldd	r19, Y+3	; 0x03
    374e:	22 30       	cpi	r18, 0x02	; 2
    3750:	31 05       	cpc	r19, r1
    3752:	59 f0       	breq	.+22     	; 0x376a <H_LED_voidTurnOn+0x56>
    3754:	8a 81       	ldd	r24, Y+2	; 0x02
    3756:	9b 81       	ldd	r25, Y+3	; 0x03
    3758:	83 30       	cpi	r24, 0x03	; 3
    375a:	91 05       	cpc	r25, r1
    375c:	81 f0       	breq	.+32     	; 0x377e <H_LED_voidTurnOn+0x6a>
    375e:	13 c0       	rjmp	.+38     	; 0x3786 <H_LED_voidTurnOn+0x72>
	{
	case LED_RED :
#if LED_RED_DIRECTION == LED_ACTIVE_HIGH
		M_DIO_voidSetPinValue(LED_RED_PIN, DIO_HIGH);
    3760:	8b e1       	ldi	r24, 0x1B	; 27
    3762:	61 e0       	ldi	r22, 0x01	; 1
    3764:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
    3768:	0e c0       	rjmp	.+28     	; 0x3786 <H_LED_voidTurnOn+0x72>
#error "Wrong led direction configurations"
#endif
		break;
	case LED_GREEN  :
#if LED_GREEN_DIRECTION == LED_ACTIVE_HIGH
		M_DIO_voidSetPinValue(LED_GREEN_PIN, DIO_HIGH);
    376a:	8e e0       	ldi	r24, 0x0E	; 14
    376c:	61 e0       	ldi	r22, 0x01	; 1
    376e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
    3772:	09 c0       	rjmp	.+18     	; 0x3786 <H_LED_voidTurnOn+0x72>
#error "Wrong led direction configurations"
#endif
		break;
	case LED_BLUE   :
#if LED_BLUE_DIRECTION == LED_ACTIVE_HIGH
		M_DIO_voidSetPinValue(LED_BLUE_PIN, DIO_HIGH);
    3774:	8f e0       	ldi	r24, 0x0F	; 15
    3776:	61 e0       	ldi	r22, 0x01	; 1
    3778:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
    377c:	04 c0       	rjmp	.+8      	; 0x3786 <H_LED_voidTurnOn+0x72>
#error "Wrong led direction configurations"
#endif
		break;
	case LED_YELLOW :
#if LED_YELLOW_DIRECTION == LED_ACTIVE_HIGH
		M_DIO_voidSetPinValue(LED_YELLOW_PIN, DIO_HIGH);
    377e:	80 e1       	ldi	r24, 0x10	; 16
    3780:	61 e0       	ldi	r22, 0x01	; 1
    3782:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
#else
#error "Wrong led direction configurations"
#endif
		break;
	}
}
    3786:	0f 90       	pop	r0
    3788:	0f 90       	pop	r0
    378a:	0f 90       	pop	r0
    378c:	cf 91       	pop	r28
    378e:	df 91       	pop	r29
    3790:	08 95       	ret

00003792 <H_LED_voidTurnOff>:

void H_LED_voidTurnOff(Led_IDtype LedId)
{
    3792:	df 93       	push	r29
    3794:	cf 93       	push	r28
    3796:	00 d0       	rcall	.+0      	; 0x3798 <H_LED_voidTurnOff+0x6>
    3798:	0f 92       	push	r0
    379a:	cd b7       	in	r28, 0x3d	; 61
    379c:	de b7       	in	r29, 0x3e	; 62
    379e:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
    37a0:	89 81       	ldd	r24, Y+1	; 0x01
    37a2:	28 2f       	mov	r18, r24
    37a4:	30 e0       	ldi	r19, 0x00	; 0
    37a6:	3b 83       	std	Y+3, r19	; 0x03
    37a8:	2a 83       	std	Y+2, r18	; 0x02
    37aa:	8a 81       	ldd	r24, Y+2	; 0x02
    37ac:	9b 81       	ldd	r25, Y+3	; 0x03
    37ae:	81 30       	cpi	r24, 0x01	; 1
    37b0:	91 05       	cpc	r25, r1
    37b2:	f9 f0       	breq	.+62     	; 0x37f2 <H_LED_voidTurnOff+0x60>
    37b4:	2a 81       	ldd	r18, Y+2	; 0x02
    37b6:	3b 81       	ldd	r19, Y+3	; 0x03
    37b8:	22 30       	cpi	r18, 0x02	; 2
    37ba:	31 05       	cpc	r19, r1
    37bc:	2c f4       	brge	.+10     	; 0x37c8 <H_LED_voidTurnOff+0x36>
    37be:	8a 81       	ldd	r24, Y+2	; 0x02
    37c0:	9b 81       	ldd	r25, Y+3	; 0x03
    37c2:	00 97       	sbiw	r24, 0x00	; 0
    37c4:	61 f0       	breq	.+24     	; 0x37de <H_LED_voidTurnOff+0x4c>
    37c6:	1e c0       	rjmp	.+60     	; 0x3804 <H_LED_voidTurnOff+0x72>
    37c8:	2a 81       	ldd	r18, Y+2	; 0x02
    37ca:	3b 81       	ldd	r19, Y+3	; 0x03
    37cc:	22 30       	cpi	r18, 0x02	; 2
    37ce:	31 05       	cpc	r19, r1
    37d0:	59 f0       	breq	.+22     	; 0x37e8 <H_LED_voidTurnOff+0x56>
    37d2:	8a 81       	ldd	r24, Y+2	; 0x02
    37d4:	9b 81       	ldd	r25, Y+3	; 0x03
    37d6:	83 30       	cpi	r24, 0x03	; 3
    37d8:	91 05       	cpc	r25, r1
    37da:	81 f0       	breq	.+32     	; 0x37fc <H_LED_voidTurnOff+0x6a>
    37dc:	13 c0       	rjmp	.+38     	; 0x3804 <H_LED_voidTurnOff+0x72>
	{
	case LED_RED :
#if LED_RED_DIRECTION == LED_ACTIVE_HIGH
		M_DIO_voidSetPinValue(LED_RED_PIN, DIO_LOW);
    37de:	8b e1       	ldi	r24, 0x1B	; 27
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
    37e6:	0e c0       	rjmp	.+28     	; 0x3804 <H_LED_voidTurnOff+0x72>
#error "Wrong led direction configurations"
#endif
		break;
	case LED_GREEN  :
#if LED_GREEN_DIRECTION == LED_ACTIVE_HIGH
		M_DIO_voidSetPinValue(LED_GREEN_PIN, DIO_LOW);
    37e8:	8e e0       	ldi	r24, 0x0E	; 14
    37ea:	60 e0       	ldi	r22, 0x00	; 0
    37ec:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
    37f0:	09 c0       	rjmp	.+18     	; 0x3804 <H_LED_voidTurnOff+0x72>
#error "Wrong led direction configurations"
#endif
		break;
	case LED_BLUE   :
#if LED_BLUE_DIRECTION == LED_ACTIVE_HIGH
		M_DIO_voidSetPinValue(LED_BLUE_PIN, DIO_LOW);
    37f2:	8f e0       	ldi	r24, 0x0F	; 15
    37f4:	60 e0       	ldi	r22, 0x00	; 0
    37f6:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
    37fa:	04 c0       	rjmp	.+8      	; 0x3804 <H_LED_voidTurnOff+0x72>
#error "Wrong led direction configurations"
#endif
		break;
	case LED_YELLOW :
#if LED_YELLOW_DIRECTION == LED_ACTIVE_HIGH
		M_DIO_voidSetPinValue(LED_YELLOW_PIN, DIO_LOW);
    37fc:	80 e1       	ldi	r24, 0x10	; 16
    37fe:	60 e0       	ldi	r22, 0x00	; 0
    3800:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
#else
#error "Wrong led direction configurations"
#endif
		break;
	}
}
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	cf 91       	pop	r28
    380c:	df 91       	pop	r29
    380e:	08 95       	ret

00003810 <H_LED_voidToggle>:


void H_LED_voidToggle(Led_IDtype LedId)
{
    3810:	df 93       	push	r29
    3812:	cf 93       	push	r28
    3814:	00 d0       	rcall	.+0      	; 0x3816 <H_LED_voidToggle+0x6>
    3816:	0f 92       	push	r0
    3818:	cd b7       	in	r28, 0x3d	; 61
    381a:	de b7       	in	r29, 0x3e	; 62
    381c:	89 83       	std	Y+1, r24	; 0x01
	switch(LedId)
    381e:	89 81       	ldd	r24, Y+1	; 0x01
    3820:	28 2f       	mov	r18, r24
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	3b 83       	std	Y+3, r19	; 0x03
    3826:	2a 83       	std	Y+2, r18	; 0x02
    3828:	8a 81       	ldd	r24, Y+2	; 0x02
    382a:	9b 81       	ldd	r25, Y+3	; 0x03
    382c:	81 30       	cpi	r24, 0x01	; 1
    382e:	91 05       	cpc	r25, r1
    3830:	e9 f0       	breq	.+58     	; 0x386c <H_LED_voidToggle+0x5c>
    3832:	2a 81       	ldd	r18, Y+2	; 0x02
    3834:	3b 81       	ldd	r19, Y+3	; 0x03
    3836:	22 30       	cpi	r18, 0x02	; 2
    3838:	31 05       	cpc	r19, r1
    383a:	2c f4       	brge	.+10     	; 0x3846 <H_LED_voidToggle+0x36>
    383c:	8a 81       	ldd	r24, Y+2	; 0x02
    383e:	9b 81       	ldd	r25, Y+3	; 0x03
    3840:	00 97       	sbiw	r24, 0x00	; 0
    3842:	61 f0       	breq	.+24     	; 0x385c <H_LED_voidToggle+0x4c>
    3844:	1a c0       	rjmp	.+52     	; 0x387a <H_LED_voidToggle+0x6a>
    3846:	2a 81       	ldd	r18, Y+2	; 0x02
    3848:	3b 81       	ldd	r19, Y+3	; 0x03
    384a:	22 30       	cpi	r18, 0x02	; 2
    384c:	31 05       	cpc	r19, r1
    384e:	51 f0       	breq	.+20     	; 0x3864 <H_LED_voidToggle+0x54>
    3850:	8a 81       	ldd	r24, Y+2	; 0x02
    3852:	9b 81       	ldd	r25, Y+3	; 0x03
    3854:	83 30       	cpi	r24, 0x03	; 3
    3856:	91 05       	cpc	r25, r1
    3858:	69 f0       	breq	.+26     	; 0x3874 <H_LED_voidToggle+0x64>
    385a:	0f c0       	rjmp	.+30     	; 0x387a <H_LED_voidToggle+0x6a>
	{
	case LED_RED :
		M_DIO_voidTogglePin(LED_RED_PIN);
    385c:	8b e1       	ldi	r24, 0x1B	; 27
    385e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <M_DIO_voidTogglePin>
    3862:	0b c0       	rjmp	.+22     	; 0x387a <H_LED_voidToggle+0x6a>
		break;
	case LED_GREEN  :
		M_DIO_voidTogglePin(LED_GREEN_PIN);
    3864:	8e e0       	ldi	r24, 0x0E	; 14
    3866:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <M_DIO_voidTogglePin>
    386a:	07 c0       	rjmp	.+14     	; 0x387a <H_LED_voidToggle+0x6a>
		break;
	case LED_BLUE   :
		M_DIO_voidTogglePin(LED_BLUE_PIN);
    386c:	8f e0       	ldi	r24, 0x0F	; 15
    386e:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <M_DIO_voidTogglePin>
    3872:	03 c0       	rjmp	.+6      	; 0x387a <H_LED_voidToggle+0x6a>
		break;
	case LED_YELLOW :
		M_DIO_voidTogglePin(LED_YELLOW_PIN);
    3874:	80 e1       	ldi	r24, 0x10	; 16
    3876:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <M_DIO_voidTogglePin>

		break;
	}
}
    387a:	0f 90       	pop	r0
    387c:	0f 90       	pop	r0
    387e:	0f 90       	pop	r0
    3880:	cf 91       	pop	r28
    3882:	df 91       	pop	r29
    3884:	08 95       	ret

00003886 <H_LDR_void_Init>:
extern ADC_config_t LDR_ADC_config_struct;
/*** HOW to use
 * - You provide ADC_config_t structure with the desired ADC configurations
 *   to read LDR outputs.
 *  ***/
void H_LDR_void_Init(){
    3886:	df 93       	push	r29
    3888:	cf 93       	push	r28
    388a:	cd b7       	in	r28, 0x3d	; 61
    388c:	de b7       	in	r29, 0x3e	; 62
	M_ADC_void_Init(LDR_ADC_config_struct);
    388e:	40 91 08 03 	lds	r20, 0x0308
    3892:	50 91 09 03 	lds	r21, 0x0309
    3896:	60 91 0a 03 	lds	r22, 0x030A
    389a:	70 91 0b 03 	lds	r23, 0x030B
    389e:	80 91 0c 03 	lds	r24, 0x030C
    38a2:	0e 94 78 13 	call	0x26f0	; 0x26f0 <M_ADC_void_Init>
}
    38a6:	cf 91       	pop	r28
    38a8:	df 91       	pop	r29
    38aa:	08 95       	ret

000038ac <H_LDR_u16_Read>:
 * - After initializing the ADC reading LDR through H_LDR_void_Init
 * - You provide the channel that LDR is connected to
 * - The function does a 1-shoot ADC conversion and return the voltage in millieVolts
 * - The function uses the non-blocking ADC reading function, but H_LDR_u16_Read itself
 *   blocks the code because it loops until the Reading function returns ADC_SUCCEED  ***/
u16 H_LDR_u16_Read(){
    38ac:	df 93       	push	r29
    38ae:	cf 93       	push	r28
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
    38b4:	e8 97       	sbiw	r28, 0x38	; 56
    38b6:	0f b6       	in	r0, 0x3f	; 63
    38b8:	f8 94       	cli
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	cd bf       	out	0x3d, r28	; 61

	f64 analog_volt;
	u16 ADC_result;
	u8 state = ADC_FAILED;
    38c0:	1e 8e       	std	Y+30, r1	; 0x1e
	u16 readings[LDR_NUM_OF_SAMPLES] ;
	int i,j;

	//taking 5 readings
	for( i = 0 ; i< LDR_NUM_OF_SAMPLES ;i++){
    38c2:	1d 8e       	std	Y+29, r1	; 0x1d
    38c4:	1c 8e       	std	Y+28, r1	; 0x1c
    38c6:	e0 c0       	rjmp	.+448    	; 0x3a88 <H_LDR_u16_Read+0x1dc>

		M_ADC_void_StartConversion();
    38c8:	0e 94 08 14 	call	0x2810	; 0x2810 <M_ADC_void_StartConversion>
    38cc:	08 c0       	rjmp	.+16     	; 0x38de <H_LDR_u16_Read+0x32>
		while(state == ADC_FAILED){
			state = M_ADC_void_GetDigitalValueSynchNonBlocking(LDR_ADC_CHANNEL, &ADC_result);
    38ce:	9e 01       	movw	r18, r28
    38d0:	2d 5d       	subi	r18, 0xDD	; 221
    38d2:	3f 4f       	sbci	r19, 0xFF	; 255
    38d4:	80 e0       	ldi	r24, 0x00	; 0
    38d6:	b9 01       	movw	r22, r18
    38d8:	0e 94 16 14 	call	0x282c	; 0x282c <M_ADC_void_GetDigitalValueSynchNonBlocking>
    38dc:	8e 8f       	std	Y+30, r24	; 0x1e

	//taking 5 readings
	for( i = 0 ; i< LDR_NUM_OF_SAMPLES ;i++){

		M_ADC_void_StartConversion();
		while(state == ADC_FAILED){
    38de:	8e 8d       	ldd	r24, Y+30	; 0x1e
    38e0:	88 23       	and	r24, r24
    38e2:	a9 f3       	breq	.-22     	; 0x38ce <H_LDR_u16_Read+0x22>
			state = M_ADC_void_GetDigitalValueSynchNonBlocking(LDR_ADC_CHANNEL, &ADC_result);
		}
		readings[i] = ADC_result;
    38e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    38e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    38e8:	4b a1       	ldd	r20, Y+35	; 0x23
    38ea:	5c a1       	ldd	r21, Y+36	; 0x24
    38ec:	9c 01       	movw	r18, r24
    38ee:	22 0f       	add	r18, r18
    38f0:	33 1f       	adc	r19, r19
    38f2:	ce 01       	movw	r24, r28
    38f4:	01 96       	adiw	r24, 0x01	; 1
    38f6:	82 0f       	add	r24, r18
    38f8:	93 1f       	adc	r25, r19
    38fa:	fc 01       	movw	r30, r24
    38fc:	b4 96       	adiw	r30, 0x24	; 36
    38fe:	51 83       	std	Z+1, r21	; 0x01
    3900:	40 83       	st	Z, r20
    3902:	80 e0       	ldi	r24, 0x00	; 0
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	a8 ec       	ldi	r26, 0xC8	; 200
    3908:	b2 e4       	ldi	r27, 0x42	; 66
    390a:	8d 8b       	std	Y+21, r24	; 0x15
    390c:	9e 8b       	std	Y+22, r25	; 0x16
    390e:	af 8b       	std	Y+23, r26	; 0x17
    3910:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3912:	6d 89       	ldd	r22, Y+21	; 0x15
    3914:	7e 89       	ldd	r23, Y+22	; 0x16
    3916:	8f 89       	ldd	r24, Y+23	; 0x17
    3918:	98 8d       	ldd	r25, Y+24	; 0x18
    391a:	2b ea       	ldi	r18, 0xAB	; 171
    391c:	3a ea       	ldi	r19, 0xAA	; 170
    391e:	4a ea       	ldi	r20, 0xAA	; 170
    3920:	50 e4       	ldi	r21, 0x40	; 64
    3922:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3926:	dc 01       	movw	r26, r24
    3928:	cb 01       	movw	r24, r22
    392a:	89 8b       	std	Y+17, r24	; 0x11
    392c:	9a 8b       	std	Y+18, r25	; 0x12
    392e:	ab 8b       	std	Y+19, r26	; 0x13
    3930:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    3932:	69 89       	ldd	r22, Y+17	; 0x11
    3934:	7a 89       	ldd	r23, Y+18	; 0x12
    3936:	8b 89       	ldd	r24, Y+19	; 0x13
    3938:	9c 89       	ldd	r25, Y+20	; 0x14
    393a:	20 e0       	ldi	r18, 0x00	; 0
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	40 e8       	ldi	r20, 0x80	; 128
    3940:	5f e3       	ldi	r21, 0x3F	; 63
    3942:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3946:	88 23       	and	r24, r24
    3948:	1c f4       	brge	.+6      	; 0x3950 <H_LDR_u16_Read+0xa4>
		__ticks = 1;
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	88 8b       	std	Y+16, r24	; 0x10
    394e:	91 c0       	rjmp	.+290    	; 0x3a72 <H_LDR_u16_Read+0x1c6>
	else if (__tmp > 255)
    3950:	69 89       	ldd	r22, Y+17	; 0x11
    3952:	7a 89       	ldd	r23, Y+18	; 0x12
    3954:	8b 89       	ldd	r24, Y+19	; 0x13
    3956:	9c 89       	ldd	r25, Y+20	; 0x14
    3958:	20 e0       	ldi	r18, 0x00	; 0
    395a:	30 e0       	ldi	r19, 0x00	; 0
    395c:	4f e7       	ldi	r20, 0x7F	; 127
    395e:	53 e4       	ldi	r21, 0x43	; 67
    3960:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3964:	18 16       	cp	r1, r24
    3966:	0c f0       	brlt	.+2      	; 0x396a <H_LDR_u16_Read+0xbe>
    3968:	7b c0       	rjmp	.+246    	; 0x3a60 <H_LDR_u16_Read+0x1b4>
	{
		_delay_ms(__us / 1000.0);
    396a:	6d 89       	ldd	r22, Y+21	; 0x15
    396c:	7e 89       	ldd	r23, Y+22	; 0x16
    396e:	8f 89       	ldd	r24, Y+23	; 0x17
    3970:	98 8d       	ldd	r25, Y+24	; 0x18
    3972:	20 e0       	ldi	r18, 0x00	; 0
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	4a e7       	ldi	r20, 0x7A	; 122
    3978:	54 e4       	ldi	r21, 0x44	; 68
    397a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    397e:	dc 01       	movw	r26, r24
    3980:	cb 01       	movw	r24, r22
    3982:	8c 87       	std	Y+12, r24	; 0x0c
    3984:	9d 87       	std	Y+13, r25	; 0x0d
    3986:	ae 87       	std	Y+14, r26	; 0x0e
    3988:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    398a:	6c 85       	ldd	r22, Y+12	; 0x0c
    398c:	7d 85       	ldd	r23, Y+13	; 0x0d
    398e:	8e 85       	ldd	r24, Y+14	; 0x0e
    3990:	9f 85       	ldd	r25, Y+15	; 0x0f
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	4a e7       	ldi	r20, 0x7A	; 122
    3998:	55 e4       	ldi	r21, 0x45	; 69
    399a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    399e:	dc 01       	movw	r26, r24
    39a0:	cb 01       	movw	r24, r22
    39a2:	88 87       	std	Y+8, r24	; 0x08
    39a4:	99 87       	std	Y+9, r25	; 0x09
    39a6:	aa 87       	std	Y+10, r26	; 0x0a
    39a8:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    39aa:	68 85       	ldd	r22, Y+8	; 0x08
    39ac:	79 85       	ldd	r23, Y+9	; 0x09
    39ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    39b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    39b2:	20 e0       	ldi	r18, 0x00	; 0
    39b4:	30 e0       	ldi	r19, 0x00	; 0
    39b6:	40 e8       	ldi	r20, 0x80	; 128
    39b8:	5f e3       	ldi	r21, 0x3F	; 63
    39ba:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    39be:	88 23       	and	r24, r24
    39c0:	2c f4       	brge	.+10     	; 0x39cc <H_LDR_u16_Read+0x120>
		__ticks = 1;
    39c2:	81 e0       	ldi	r24, 0x01	; 1
    39c4:	90 e0       	ldi	r25, 0x00	; 0
    39c6:	9f 83       	std	Y+7, r25	; 0x07
    39c8:	8e 83       	std	Y+6, r24	; 0x06
    39ca:	3f c0       	rjmp	.+126    	; 0x3a4a <H_LDR_u16_Read+0x19e>
	else if (__tmp > 65535)
    39cc:	68 85       	ldd	r22, Y+8	; 0x08
    39ce:	79 85       	ldd	r23, Y+9	; 0x09
    39d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    39d2:	9b 85       	ldd	r25, Y+11	; 0x0b
    39d4:	20 e0       	ldi	r18, 0x00	; 0
    39d6:	3f ef       	ldi	r19, 0xFF	; 255
    39d8:	4f e7       	ldi	r20, 0x7F	; 127
    39da:	57 e4       	ldi	r21, 0x47	; 71
    39dc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    39e0:	18 16       	cp	r1, r24
    39e2:	4c f5       	brge	.+82     	; 0x3a36 <H_LDR_u16_Read+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39e4:	6c 85       	ldd	r22, Y+12	; 0x0c
    39e6:	7d 85       	ldd	r23, Y+13	; 0x0d
    39e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    39ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    39ec:	20 e0       	ldi	r18, 0x00	; 0
    39ee:	30 e0       	ldi	r19, 0x00	; 0
    39f0:	40 e2       	ldi	r20, 0x20	; 32
    39f2:	51 e4       	ldi	r21, 0x41	; 65
    39f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f8:	dc 01       	movw	r26, r24
    39fa:	cb 01       	movw	r24, r22
    39fc:	bc 01       	movw	r22, r24
    39fe:	cd 01       	movw	r24, r26
    3a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	9f 83       	std	Y+7, r25	; 0x07
    3a0a:	8e 83       	std	Y+6, r24	; 0x06
    3a0c:	0f c0       	rjmp	.+30     	; 0x3a2c <H_LDR_u16_Read+0x180>
    3a0e:	80 e9       	ldi	r24, 0x90	; 144
    3a10:	91 e0       	ldi	r25, 0x01	; 1
    3a12:	9d 83       	std	Y+5, r25	; 0x05
    3a14:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3a16:	8c 81       	ldd	r24, Y+4	; 0x04
    3a18:	9d 81       	ldd	r25, Y+5	; 0x05
    3a1a:	01 97       	sbiw	r24, 0x01	; 1
    3a1c:	f1 f7       	brne	.-4      	; 0x3a1a <H_LDR_u16_Read+0x16e>
    3a1e:	9d 83       	std	Y+5, r25	; 0x05
    3a20:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a22:	8e 81       	ldd	r24, Y+6	; 0x06
    3a24:	9f 81       	ldd	r25, Y+7	; 0x07
    3a26:	01 97       	sbiw	r24, 0x01	; 1
    3a28:	9f 83       	std	Y+7, r25	; 0x07
    3a2a:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a2c:	8e 81       	ldd	r24, Y+6	; 0x06
    3a2e:	9f 81       	ldd	r25, Y+7	; 0x07
    3a30:	00 97       	sbiw	r24, 0x00	; 0
    3a32:	69 f7       	brne	.-38     	; 0x3a0e <H_LDR_u16_Read+0x162>
    3a34:	24 c0       	rjmp	.+72     	; 0x3a7e <H_LDR_u16_Read+0x1d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a36:	68 85       	ldd	r22, Y+8	; 0x08
    3a38:	79 85       	ldd	r23, Y+9	; 0x09
    3a3a:	8a 85       	ldd	r24, Y+10	; 0x0a
    3a3c:	9b 85       	ldd	r25, Y+11	; 0x0b
    3a3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	9f 83       	std	Y+7, r25	; 0x07
    3a48:	8e 83       	std	Y+6, r24	; 0x06
    3a4a:	8e 81       	ldd	r24, Y+6	; 0x06
    3a4c:	9f 81       	ldd	r25, Y+7	; 0x07
    3a4e:	9b 83       	std	Y+3, r25	; 0x03
    3a50:	8a 83       	std	Y+2, r24	; 0x02
    3a52:	8a 81       	ldd	r24, Y+2	; 0x02
    3a54:	9b 81       	ldd	r25, Y+3	; 0x03
    3a56:	01 97       	sbiw	r24, 0x01	; 1
    3a58:	f1 f7       	brne	.-4      	; 0x3a56 <H_LDR_u16_Read+0x1aa>
    3a5a:	9b 83       	std	Y+3, r25	; 0x03
    3a5c:	8a 83       	std	Y+2, r24	; 0x02
    3a5e:	0f c0       	rjmp	.+30     	; 0x3a7e <H_LDR_u16_Read+0x1d2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3a60:	69 89       	ldd	r22, Y+17	; 0x11
    3a62:	7a 89       	ldd	r23, Y+18	; 0x12
    3a64:	8b 89       	ldd	r24, Y+19	; 0x13
    3a66:	9c 89       	ldd	r25, Y+20	; 0x14
    3a68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a6c:	dc 01       	movw	r26, r24
    3a6e:	cb 01       	movw	r24, r22
    3a70:	88 8b       	std	Y+16, r24	; 0x10
    3a72:	88 89       	ldd	r24, Y+16	; 0x10
    3a74:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3a76:	89 81       	ldd	r24, Y+1	; 0x01
    3a78:	8a 95       	dec	r24
    3a7a:	f1 f7       	brne	.-4      	; 0x3a78 <H_LDR_u16_Read+0x1cc>
    3a7c:	89 83       	std	Y+1, r24	; 0x01
	u8 state = ADC_FAILED;
	u16 readings[LDR_NUM_OF_SAMPLES] ;
	int i,j;

	//taking 5 readings
	for( i = 0 ; i< LDR_NUM_OF_SAMPLES ;i++){
    3a7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a80:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3a82:	01 96       	adiw	r24, 0x01	; 1
    3a84:	9d 8f       	std	Y+29, r25	; 0x1d
    3a86:	8c 8f       	std	Y+28, r24	; 0x1c
    3a88:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3a8a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3a8c:	8a 30       	cpi	r24, 0x0A	; 10
    3a8e:	91 05       	cpc	r25, r1
    3a90:	0c f4       	brge	.+2      	; 0x3a94 <H_LDR_u16_Read+0x1e8>
    3a92:	1a cf       	rjmp	.-460    	; 0x38c8 <H_LDR_u16_Read+0x1c>
		_delay_us(100);
	}

	//Sorting readings (Bubble Sort)
	u8 temp;
    for (i = 0; i < LDR_NUM_OF_SAMPLES; i++) {
    3a94:	1d 8e       	std	Y+29, r1	; 0x1d
    3a96:	1c 8e       	std	Y+28, r1	; 0x1c
    3a98:	72 c0       	rjmp	.+228    	; 0x3b7e <H_LDR_u16_Read+0x2d2>
        for (j = 0; j < LDR_NUM_OF_SAMPLES-j-1; j++) {
    3a9a:	1b 8e       	std	Y+27, r1	; 0x1b
    3a9c:	1a 8e       	std	Y+26, r1	; 0x1a
    3a9e:	5e c0       	rjmp	.+188    	; 0x3b5c <H_LDR_u16_Read+0x2b0>
            if (readings[j] > readings[j+1]) {
    3aa0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3aa2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3aa4:	9c 01       	movw	r18, r24
    3aa6:	22 0f       	add	r18, r18
    3aa8:	33 1f       	adc	r19, r19
    3aaa:	ce 01       	movw	r24, r28
    3aac:	01 96       	adiw	r24, 0x01	; 1
    3aae:	82 0f       	add	r24, r18
    3ab0:	93 1f       	adc	r25, r19
    3ab2:	fc 01       	movw	r30, r24
    3ab4:	b4 96       	adiw	r30, 0x24	; 36
    3ab6:	40 81       	ld	r20, Z
    3ab8:	51 81       	ldd	r21, Z+1	; 0x01
    3aba:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3abc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3abe:	01 96       	adiw	r24, 0x01	; 1
    3ac0:	9c 01       	movw	r18, r24
    3ac2:	22 0f       	add	r18, r18
    3ac4:	33 1f       	adc	r19, r19
    3ac6:	ce 01       	movw	r24, r28
    3ac8:	01 96       	adiw	r24, 0x01	; 1
    3aca:	82 0f       	add	r24, r18
    3acc:	93 1f       	adc	r25, r19
    3ace:	fc 01       	movw	r30, r24
    3ad0:	b4 96       	adiw	r30, 0x24	; 36
    3ad2:	80 81       	ld	r24, Z
    3ad4:	91 81       	ldd	r25, Z+1	; 0x01
    3ad6:	84 17       	cp	r24, r20
    3ad8:	95 07       	cpc	r25, r21
    3ada:	d8 f5       	brcc	.+118    	; 0x3b52 <H_LDR_u16_Read+0x2a6>
                temp = readings[j];
    3adc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3ade:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3ae0:	9c 01       	movw	r18, r24
    3ae2:	22 0f       	add	r18, r18
    3ae4:	33 1f       	adc	r19, r19
    3ae6:	ce 01       	movw	r24, r28
    3ae8:	01 96       	adiw	r24, 0x01	; 1
    3aea:	82 0f       	add	r24, r18
    3aec:	93 1f       	adc	r25, r19
    3aee:	fc 01       	movw	r30, r24
    3af0:	b4 96       	adiw	r30, 0x24	; 36
    3af2:	80 81       	ld	r24, Z
    3af4:	91 81       	ldd	r25, Z+1	; 0x01
    3af6:	89 8f       	std	Y+25, r24	; 0x19
                readings[j] = readings[j+1];
    3af8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3afa:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3afc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3afe:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b00:	01 96       	adiw	r24, 0x01	; 1
    3b02:	9c 01       	movw	r18, r24
    3b04:	22 0f       	add	r18, r18
    3b06:	33 1f       	adc	r19, r19
    3b08:	ce 01       	movw	r24, r28
    3b0a:	01 96       	adiw	r24, 0x01	; 1
    3b0c:	82 0f       	add	r24, r18
    3b0e:	93 1f       	adc	r25, r19
    3b10:	fc 01       	movw	r30, r24
    3b12:	b4 96       	adiw	r30, 0x24	; 36
    3b14:	40 81       	ld	r20, Z
    3b16:	51 81       	ldd	r21, Z+1	; 0x01
    3b18:	9b 01       	movw	r18, r22
    3b1a:	22 0f       	add	r18, r18
    3b1c:	33 1f       	adc	r19, r19
    3b1e:	ce 01       	movw	r24, r28
    3b20:	01 96       	adiw	r24, 0x01	; 1
    3b22:	82 0f       	add	r24, r18
    3b24:	93 1f       	adc	r25, r19
    3b26:	fc 01       	movw	r30, r24
    3b28:	b4 96       	adiw	r30, 0x24	; 36
    3b2a:	51 83       	std	Z+1, r21	; 0x01
    3b2c:	40 83       	st	Z, r20
                readings[j+1] = temp;
    3b2e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b30:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b32:	9c 01       	movw	r18, r24
    3b34:	2f 5f       	subi	r18, 0xFF	; 255
    3b36:	3f 4f       	sbci	r19, 0xFF	; 255
    3b38:	89 8d       	ldd	r24, Y+25	; 0x19
    3b3a:	48 2f       	mov	r20, r24
    3b3c:	50 e0       	ldi	r21, 0x00	; 0
    3b3e:	22 0f       	add	r18, r18
    3b40:	33 1f       	adc	r19, r19
    3b42:	ce 01       	movw	r24, r28
    3b44:	01 96       	adiw	r24, 0x01	; 1
    3b46:	82 0f       	add	r24, r18
    3b48:	93 1f       	adc	r25, r19
    3b4a:	fc 01       	movw	r30, r24
    3b4c:	b4 96       	adiw	r30, 0x24	; 36
    3b4e:	51 83       	std	Z+1, r21	; 0x01
    3b50:	40 83       	st	Z, r20
	}

	//Sorting readings (Bubble Sort)
	u8 temp;
    for (i = 0; i < LDR_NUM_OF_SAMPLES; i++) {
        for (j = 0; j < LDR_NUM_OF_SAMPLES-j-1; j++) {
    3b52:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b54:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b56:	01 96       	adiw	r24, 0x01	; 1
    3b58:	9b 8f       	std	Y+27, r25	; 0x1b
    3b5a:	8a 8f       	std	Y+26, r24	; 0x1a
    3b5c:	29 e0       	ldi	r18, 0x09	; 9
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b62:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b64:	28 1b       	sub	r18, r24
    3b66:	39 0b       	sbc	r19, r25
    3b68:	8a 8d       	ldd	r24, Y+26	; 0x1a
    3b6a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    3b6c:	82 17       	cp	r24, r18
    3b6e:	93 07       	cpc	r25, r19
    3b70:	0c f4       	brge	.+2      	; 0x3b74 <H_LDR_u16_Read+0x2c8>
    3b72:	96 cf       	rjmp	.-212    	; 0x3aa0 <H_LDR_u16_Read+0x1f4>
		_delay_us(100);
	}

	//Sorting readings (Bubble Sort)
	u8 temp;
    for (i = 0; i < LDR_NUM_OF_SAMPLES; i++) {
    3b74:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b76:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3b78:	01 96       	adiw	r24, 0x01	; 1
    3b7a:	9d 8f       	std	Y+29, r25	; 0x1d
    3b7c:	8c 8f       	std	Y+28, r24	; 0x1c
    3b7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b80:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3b82:	8a 30       	cpi	r24, 0x0A	; 10
    3b84:	91 05       	cpc	r25, r1
    3b86:	0c f4       	brge	.+2      	; 0x3b8a <H_LDR_u16_Read+0x2de>
    3b88:	88 cf       	rjmp	.-240    	; 0x3a9a <H_LDR_u16_Read+0x1ee>
        }
    }

    // Find the median value in the window
    if (LDR_NUM_OF_SAMPLES % 2 == 0) {
        ADC_result = (readings[LDR_NUM_OF_SAMPLES/2] + readings[LDR_NUM_OF_SAMPLES/2-1])/2;
    3b8a:	2f a5       	ldd	r18, Y+47	; 0x2f
    3b8c:	38 a9       	ldd	r19, Y+48	; 0x30
    3b8e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b90:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b92:	82 0f       	add	r24, r18
    3b94:	93 1f       	adc	r25, r19
    3b96:	96 95       	lsr	r25
    3b98:	87 95       	ror	r24
    3b9a:	9c a3       	std	Y+36, r25	; 0x24
    3b9c:	8b a3       	std	Y+35, r24	; 0x23
    else {
        ADC_result = readings[LDR_NUM_OF_SAMPLES/2];
    }


	analog_volt = ADC_result * (((f64)5.0*1000)/1024);  //in millieVolts
    3b9e:	8b a1       	ldd	r24, Y+35	; 0x23
    3ba0:	9c a1       	ldd	r25, Y+36	; 0x24
    3ba2:	cc 01       	movw	r24, r24
    3ba4:	a0 e0       	ldi	r26, 0x00	; 0
    3ba6:	b0 e0       	ldi	r27, 0x00	; 0
    3ba8:	bc 01       	movw	r22, r24
    3baa:	cd 01       	movw	r24, r26
    3bac:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    3bb0:	dc 01       	movw	r26, r24
    3bb2:	cb 01       	movw	r24, r22
    3bb4:	bc 01       	movw	r22, r24
    3bb6:	cd 01       	movw	r24, r26
    3bb8:	20 e0       	ldi	r18, 0x00	; 0
    3bba:	30 e4       	ldi	r19, 0x40	; 64
    3bbc:	4c e9       	ldi	r20, 0x9C	; 156
    3bbe:	50 e4       	ldi	r21, 0x40	; 64
    3bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	cb 01       	movw	r24, r22
    3bc8:	8f 8f       	std	Y+31, r24	; 0x1f
    3bca:	98 a3       	std	Y+32, r25	; 0x20
    3bcc:	a9 a3       	std	Y+33, r26	; 0x21
    3bce:	ba a3       	std	Y+34, r27	; 0x22

	return analog_volt;
    3bd0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3bd2:	78 a1       	ldd	r23, Y+32	; 0x20
    3bd4:	89 a1       	ldd	r24, Y+33	; 0x21
    3bd6:	9a a1       	ldd	r25, Y+34	; 0x22
    3bd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bdc:	dc 01       	movw	r26, r24
    3bde:	cb 01       	movw	r24, r22
	//return ADC_result;

}
    3be0:	e8 96       	adiw	r28, 0x38	; 56
    3be2:	0f b6       	in	r0, 0x3f	; 63
    3be4:	f8 94       	cli
    3be6:	de bf       	out	0x3e, r29	; 62
    3be8:	0f be       	out	0x3f, r0	; 63
    3bea:	cd bf       	out	0x3d, r28	; 61
    3bec:	cf 91       	pop	r28
    3bee:	df 91       	pop	r29
    3bf0:	08 95       	ret

00003bf2 <H_LCD_void_LachByte>:
#include "Dio_int.h"
#include "LCD_cfg.h"
#include "LCD_int.h"
#include "LCD_priv.h"

static void H_LCD_void_LachByte(u8 copy_u8Byte) {
    3bf2:	df 93       	push	r29
    3bf4:	cf 93       	push	r28
    3bf6:	0f 92       	push	r0
    3bf8:	cd b7       	in	r28, 0x3d	; 61
    3bfa:	de b7       	in	r29, 0x3e	; 62
    3bfc:	89 83       	std	Y+1, r24	; 0x01
#if(H_LCD_MOED == BIT4_MODE)
	H_LCD_void_LachNibble(copy_u8Byte);
    3bfe:	89 81       	ldd	r24, Y+1	; 0x01
    3c00:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <H_LCD_void_LachNibble>
	H_LCD_void_LachNibble(copy_u8Byte << 4); //send the first niblle
    3c04:	89 81       	ldd	r24, Y+1	; 0x01
    3c06:	82 95       	swap	r24
    3c08:	80 7f       	andi	r24, 0xF0	; 240
    3c0a:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <H_LCD_void_LachNibble>
	//send the second niblle
#else if(H_LCD_MOED == BIT8_MODE)

#endif
}
    3c0e:	0f 90       	pop	r0
    3c10:	cf 91       	pop	r28
    3c12:	df 91       	pop	r29
    3c14:	08 95       	ret

00003c16 <H_LCD_void_LachNibble>:

static void H_LCD_void_LachNibble(u8 copy_u8Nibble) {
    3c16:	df 93       	push	r29
    3c18:	cf 93       	push	r28
    3c1a:	cd b7       	in	r28, 0x3d	; 61
    3c1c:	de b7       	in	r29, 0x3e	; 62
    3c1e:	ef 97       	sbiw	r28, 0x3f	; 63
    3c20:	0f b6       	in	r0, 0x3f	; 63
    3c22:	f8 94       	cli
    3c24:	de bf       	out	0x3e, r29	; 62
    3c26:	0f be       	out	0x3f, r0	; 63
    3c28:	cd bf       	out	0x3d, r28	; 61
    3c2a:	8f af       	std	Y+63, r24	; 0x3f
	M_DIO_voidSetPinValue(H_LCD_DB7_PIN, GET_BIT(copy_u8Nibble, 7));
    3c2c:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c2e:	98 2f       	mov	r25, r24
    3c30:	99 1f       	adc	r25, r25
    3c32:	99 27       	eor	r25, r25
    3c34:	99 1f       	adc	r25, r25
    3c36:	88 e1       	ldi	r24, 0x18	; 24
    3c38:	69 2f       	mov	r22, r25
    3c3a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(H_LCD_DB6_PIN, GET_BIT(copy_u8Nibble, 6));
    3c3e:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c40:	82 95       	swap	r24
    3c42:	86 95       	lsr	r24
    3c44:	86 95       	lsr	r24
    3c46:	83 70       	andi	r24, 0x03	; 3
    3c48:	98 2f       	mov	r25, r24
    3c4a:	91 70       	andi	r25, 0x01	; 1
    3c4c:	86 e1       	ldi	r24, 0x16	; 22
    3c4e:	69 2f       	mov	r22, r25
    3c50:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(H_LCD_DB5_PIN, GET_BIT(copy_u8Nibble, 5));
    3c54:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c56:	82 95       	swap	r24
    3c58:	86 95       	lsr	r24
    3c5a:	87 70       	andi	r24, 0x07	; 7
    3c5c:	98 2f       	mov	r25, r24
    3c5e:	91 70       	andi	r25, 0x01	; 1
    3c60:	85 e1       	ldi	r24, 0x15	; 21
    3c62:	69 2f       	mov	r22, r25
    3c64:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(H_LCD_DB4_PIN, GET_BIT(copy_u8Nibble, 4));
    3c68:	8f ad       	ldd	r24, Y+63	; 0x3f
    3c6a:	82 95       	swap	r24
    3c6c:	8f 70       	andi	r24, 0x0F	; 15
    3c6e:	98 2f       	mov	r25, r24
    3c70:	91 70       	andi	r25, 0x01	; 1
    3c72:	84 e1       	ldi	r24, 0x14	; 20
    3c74:	69 2f       	mov	r22, r25
    3c76:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(H_LCD_EN_PIN, DIO_LOW); // set EN to LOW
    3c7a:	8c e0       	ldi	r24, 0x0C	; 12
    3c7c:	60 e0       	ldi	r22, 0x00	; 0
    3c7e:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
    3c82:	80 e0       	ldi	r24, 0x00	; 0
    3c84:	90 e0       	ldi	r25, 0x00	; 0
    3c86:	a0 e2       	ldi	r26, 0x20	; 32
    3c88:	b1 e4       	ldi	r27, 0x41	; 65
    3c8a:	8b af       	std	Y+59, r24	; 0x3b
    3c8c:	9c af       	std	Y+60, r25	; 0x3c
    3c8e:	ad af       	std	Y+61, r26	; 0x3d
    3c90:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3c92:	6b ad       	ldd	r22, Y+59	; 0x3b
    3c94:	7c ad       	ldd	r23, Y+60	; 0x3c
    3c96:	8d ad       	ldd	r24, Y+61	; 0x3d
    3c98:	9e ad       	ldd	r25, Y+62	; 0x3e
    3c9a:	2b ea       	ldi	r18, 0xAB	; 171
    3c9c:	3a ea       	ldi	r19, 0xAA	; 170
    3c9e:	4a ea       	ldi	r20, 0xAA	; 170
    3ca0:	50 e4       	ldi	r21, 0x40	; 64
    3ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	cb 01       	movw	r24, r22
    3caa:	8f ab       	std	Y+55, r24	; 0x37
    3cac:	98 af       	std	Y+56, r25	; 0x38
    3cae:	a9 af       	std	Y+57, r26	; 0x39
    3cb0:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    3cb2:	6f a9       	ldd	r22, Y+55	; 0x37
    3cb4:	78 ad       	ldd	r23, Y+56	; 0x38
    3cb6:	89 ad       	ldd	r24, Y+57	; 0x39
    3cb8:	9a ad       	ldd	r25, Y+58	; 0x3a
    3cba:	20 e0       	ldi	r18, 0x00	; 0
    3cbc:	30 e0       	ldi	r19, 0x00	; 0
    3cbe:	40 e8       	ldi	r20, 0x80	; 128
    3cc0:	5f e3       	ldi	r21, 0x3F	; 63
    3cc2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3cc6:	88 23       	and	r24, r24
    3cc8:	1c f4       	brge	.+6      	; 0x3cd0 <H_LCD_void_LachNibble+0xba>
		__ticks = 1;
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	8e ab       	std	Y+54, r24	; 0x36
    3cce:	91 c0       	rjmp	.+290    	; 0x3df2 <H_LCD_void_LachNibble+0x1dc>
	else if (__tmp > 255)
    3cd0:	6f a9       	ldd	r22, Y+55	; 0x37
    3cd2:	78 ad       	ldd	r23, Y+56	; 0x38
    3cd4:	89 ad       	ldd	r24, Y+57	; 0x39
    3cd6:	9a ad       	ldd	r25, Y+58	; 0x3a
    3cd8:	20 e0       	ldi	r18, 0x00	; 0
    3cda:	30 e0       	ldi	r19, 0x00	; 0
    3cdc:	4f e7       	ldi	r20, 0x7F	; 127
    3cde:	53 e4       	ldi	r21, 0x43	; 67
    3ce0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3ce4:	18 16       	cp	r1, r24
    3ce6:	0c f0       	brlt	.+2      	; 0x3cea <H_LCD_void_LachNibble+0xd4>
    3ce8:	7b c0       	rjmp	.+246    	; 0x3de0 <H_LCD_void_LachNibble+0x1ca>
	{
		_delay_ms(__us / 1000.0);
    3cea:	6b ad       	ldd	r22, Y+59	; 0x3b
    3cec:	7c ad       	ldd	r23, Y+60	; 0x3c
    3cee:	8d ad       	ldd	r24, Y+61	; 0x3d
    3cf0:	9e ad       	ldd	r25, Y+62	; 0x3e
    3cf2:	20 e0       	ldi	r18, 0x00	; 0
    3cf4:	30 e0       	ldi	r19, 0x00	; 0
    3cf6:	4a e7       	ldi	r20, 0x7A	; 122
    3cf8:	54 e4       	ldi	r21, 0x44	; 68
    3cfa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	8a ab       	std	Y+50, r24	; 0x32
    3d04:	9b ab       	std	Y+51, r25	; 0x33
    3d06:	ac ab       	std	Y+52, r26	; 0x34
    3d08:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d0a:	6a a9       	ldd	r22, Y+50	; 0x32
    3d0c:	7b a9       	ldd	r23, Y+51	; 0x33
    3d0e:	8c a9       	ldd	r24, Y+52	; 0x34
    3d10:	9d a9       	ldd	r25, Y+53	; 0x35
    3d12:	20 e0       	ldi	r18, 0x00	; 0
    3d14:	30 e0       	ldi	r19, 0x00	; 0
    3d16:	4a e7       	ldi	r20, 0x7A	; 122
    3d18:	55 e4       	ldi	r21, 0x45	; 69
    3d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d1e:	dc 01       	movw	r26, r24
    3d20:	cb 01       	movw	r24, r22
    3d22:	8e a7       	std	Y+46, r24	; 0x2e
    3d24:	9f a7       	std	Y+47, r25	; 0x2f
    3d26:	a8 ab       	std	Y+48, r26	; 0x30
    3d28:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    3d2a:	6e a5       	ldd	r22, Y+46	; 0x2e
    3d2c:	7f a5       	ldd	r23, Y+47	; 0x2f
    3d2e:	88 a9       	ldd	r24, Y+48	; 0x30
    3d30:	99 a9       	ldd	r25, Y+49	; 0x31
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	30 e0       	ldi	r19, 0x00	; 0
    3d36:	40 e8       	ldi	r20, 0x80	; 128
    3d38:	5f e3       	ldi	r21, 0x3F	; 63
    3d3a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3d3e:	88 23       	and	r24, r24
    3d40:	2c f4       	brge	.+10     	; 0x3d4c <H_LCD_void_LachNibble+0x136>
		__ticks = 1;
    3d42:	81 e0       	ldi	r24, 0x01	; 1
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	9d a7       	std	Y+45, r25	; 0x2d
    3d48:	8c a7       	std	Y+44, r24	; 0x2c
    3d4a:	3f c0       	rjmp	.+126    	; 0x3dca <H_LCD_void_LachNibble+0x1b4>
	else if (__tmp > 65535)
    3d4c:	6e a5       	ldd	r22, Y+46	; 0x2e
    3d4e:	7f a5       	ldd	r23, Y+47	; 0x2f
    3d50:	88 a9       	ldd	r24, Y+48	; 0x30
    3d52:	99 a9       	ldd	r25, Y+49	; 0x31
    3d54:	20 e0       	ldi	r18, 0x00	; 0
    3d56:	3f ef       	ldi	r19, 0xFF	; 255
    3d58:	4f e7       	ldi	r20, 0x7F	; 127
    3d5a:	57 e4       	ldi	r21, 0x47	; 71
    3d5c:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3d60:	18 16       	cp	r1, r24
    3d62:	4c f5       	brge	.+82     	; 0x3db6 <H_LCD_void_LachNibble+0x1a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d64:	6a a9       	ldd	r22, Y+50	; 0x32
    3d66:	7b a9       	ldd	r23, Y+51	; 0x33
    3d68:	8c a9       	ldd	r24, Y+52	; 0x34
    3d6a:	9d a9       	ldd	r25, Y+53	; 0x35
    3d6c:	20 e0       	ldi	r18, 0x00	; 0
    3d6e:	30 e0       	ldi	r19, 0x00	; 0
    3d70:	40 e2       	ldi	r20, 0x20	; 32
    3d72:	51 e4       	ldi	r21, 0x41	; 65
    3d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d78:	dc 01       	movw	r26, r24
    3d7a:	cb 01       	movw	r24, r22
    3d7c:	bc 01       	movw	r22, r24
    3d7e:	cd 01       	movw	r24, r26
    3d80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d84:	dc 01       	movw	r26, r24
    3d86:	cb 01       	movw	r24, r22
    3d88:	9d a7       	std	Y+45, r25	; 0x2d
    3d8a:	8c a7       	std	Y+44, r24	; 0x2c
    3d8c:	0f c0       	rjmp	.+30     	; 0x3dac <H_LCD_void_LachNibble+0x196>
    3d8e:	80 e9       	ldi	r24, 0x90	; 144
    3d90:	91 e0       	ldi	r25, 0x01	; 1
    3d92:	9b a7       	std	Y+43, r25	; 0x2b
    3d94:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3d96:	8a a5       	ldd	r24, Y+42	; 0x2a
    3d98:	9b a5       	ldd	r25, Y+43	; 0x2b
    3d9a:	01 97       	sbiw	r24, 0x01	; 1
    3d9c:	f1 f7       	brne	.-4      	; 0x3d9a <H_LCD_void_LachNibble+0x184>
    3d9e:	9b a7       	std	Y+43, r25	; 0x2b
    3da0:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3da2:	8c a5       	ldd	r24, Y+44	; 0x2c
    3da4:	9d a5       	ldd	r25, Y+45	; 0x2d
    3da6:	01 97       	sbiw	r24, 0x01	; 1
    3da8:	9d a7       	std	Y+45, r25	; 0x2d
    3daa:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dac:	8c a5       	ldd	r24, Y+44	; 0x2c
    3dae:	9d a5       	ldd	r25, Y+45	; 0x2d
    3db0:	00 97       	sbiw	r24, 0x00	; 0
    3db2:	69 f7       	brne	.-38     	; 0x3d8e <H_LCD_void_LachNibble+0x178>
    3db4:	24 c0       	rjmp	.+72     	; 0x3dfe <H_LCD_void_LachNibble+0x1e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3db6:	6e a5       	ldd	r22, Y+46	; 0x2e
    3db8:	7f a5       	ldd	r23, Y+47	; 0x2f
    3dba:	88 a9       	ldd	r24, Y+48	; 0x30
    3dbc:	99 a9       	ldd	r25, Y+49	; 0x31
    3dbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dc2:	dc 01       	movw	r26, r24
    3dc4:	cb 01       	movw	r24, r22
    3dc6:	9d a7       	std	Y+45, r25	; 0x2d
    3dc8:	8c a7       	std	Y+44, r24	; 0x2c
    3dca:	8c a5       	ldd	r24, Y+44	; 0x2c
    3dcc:	9d a5       	ldd	r25, Y+45	; 0x2d
    3dce:	99 a7       	std	Y+41, r25	; 0x29
    3dd0:	88 a7       	std	Y+40, r24	; 0x28
    3dd2:	88 a5       	ldd	r24, Y+40	; 0x28
    3dd4:	99 a5       	ldd	r25, Y+41	; 0x29
    3dd6:	01 97       	sbiw	r24, 0x01	; 1
    3dd8:	f1 f7       	brne	.-4      	; 0x3dd6 <H_LCD_void_LachNibble+0x1c0>
    3dda:	99 a7       	std	Y+41, r25	; 0x29
    3ddc:	88 a7       	std	Y+40, r24	; 0x28
    3dde:	0f c0       	rjmp	.+30     	; 0x3dfe <H_LCD_void_LachNibble+0x1e8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3de0:	6f a9       	ldd	r22, Y+55	; 0x37
    3de2:	78 ad       	ldd	r23, Y+56	; 0x38
    3de4:	89 ad       	ldd	r24, Y+57	; 0x39
    3de6:	9a ad       	ldd	r25, Y+58	; 0x3a
    3de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3dec:	dc 01       	movw	r26, r24
    3dee:	cb 01       	movw	r24, r22
    3df0:	8e ab       	std	Y+54, r24	; 0x36
    3df2:	8e a9       	ldd	r24, Y+54	; 0x36
    3df4:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3df6:	8f a1       	ldd	r24, Y+39	; 0x27
    3df8:	8a 95       	dec	r24
    3dfa:	f1 f7       	brne	.-4      	; 0x3df8 <H_LCD_void_LachNibble+0x1e2>
    3dfc:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(10);
	M_DIO_voidSetPinValue(H_LCD_EN_PIN, DIO_HIGH); // set EN to HIGH
    3dfe:	8c e0       	ldi	r24, 0x0C	; 12
    3e00:	61 e0       	ldi	r22, 0x01	; 1
    3e02:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    3e0a:	a8 ec       	ldi	r26, 0xC8	; 200
    3e0c:	b2 e4       	ldi	r27, 0x42	; 66
    3e0e:	8b a3       	std	Y+35, r24	; 0x23
    3e10:	9c a3       	std	Y+36, r25	; 0x24
    3e12:	ad a3       	std	Y+37, r26	; 0x25
    3e14:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    3e16:	6b a1       	ldd	r22, Y+35	; 0x23
    3e18:	7c a1       	ldd	r23, Y+36	; 0x24
    3e1a:	8d a1       	ldd	r24, Y+37	; 0x25
    3e1c:	9e a1       	ldd	r25, Y+38	; 0x26
    3e1e:	2b ea       	ldi	r18, 0xAB	; 171
    3e20:	3a ea       	ldi	r19, 0xAA	; 170
    3e22:	4a ea       	ldi	r20, 0xAA	; 170
    3e24:	50 e4       	ldi	r21, 0x40	; 64
    3e26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e2a:	dc 01       	movw	r26, r24
    3e2c:	cb 01       	movw	r24, r22
    3e2e:	8f 8f       	std	Y+31, r24	; 0x1f
    3e30:	98 a3       	std	Y+32, r25	; 0x20
    3e32:	a9 a3       	std	Y+33, r26	; 0x21
    3e34:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    3e36:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3e38:	78 a1       	ldd	r23, Y+32	; 0x20
    3e3a:	89 a1       	ldd	r24, Y+33	; 0x21
    3e3c:	9a a1       	ldd	r25, Y+34	; 0x22
    3e3e:	20 e0       	ldi	r18, 0x00	; 0
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	40 e8       	ldi	r20, 0x80	; 128
    3e44:	5f e3       	ldi	r21, 0x3F	; 63
    3e46:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3e4a:	88 23       	and	r24, r24
    3e4c:	1c f4       	brge	.+6      	; 0x3e54 <H_LCD_void_LachNibble+0x23e>
		__ticks = 1;
    3e4e:	81 e0       	ldi	r24, 0x01	; 1
    3e50:	8e 8f       	std	Y+30, r24	; 0x1e
    3e52:	91 c0       	rjmp	.+290    	; 0x3f76 <H_LCD_void_LachNibble+0x360>
	else if (__tmp > 255)
    3e54:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3e56:	78 a1       	ldd	r23, Y+32	; 0x20
    3e58:	89 a1       	ldd	r24, Y+33	; 0x21
    3e5a:	9a a1       	ldd	r25, Y+34	; 0x22
    3e5c:	20 e0       	ldi	r18, 0x00	; 0
    3e5e:	30 e0       	ldi	r19, 0x00	; 0
    3e60:	4f e7       	ldi	r20, 0x7F	; 127
    3e62:	53 e4       	ldi	r21, 0x43	; 67
    3e64:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3e68:	18 16       	cp	r1, r24
    3e6a:	0c f0       	brlt	.+2      	; 0x3e6e <H_LCD_void_LachNibble+0x258>
    3e6c:	7b c0       	rjmp	.+246    	; 0x3f64 <H_LCD_void_LachNibble+0x34e>
	{
		_delay_ms(__us / 1000.0);
    3e6e:	6b a1       	ldd	r22, Y+35	; 0x23
    3e70:	7c a1       	ldd	r23, Y+36	; 0x24
    3e72:	8d a1       	ldd	r24, Y+37	; 0x25
    3e74:	9e a1       	ldd	r25, Y+38	; 0x26
    3e76:	20 e0       	ldi	r18, 0x00	; 0
    3e78:	30 e0       	ldi	r19, 0x00	; 0
    3e7a:	4a e7       	ldi	r20, 0x7A	; 122
    3e7c:	54 e4       	ldi	r21, 0x44	; 68
    3e7e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e82:	dc 01       	movw	r26, r24
    3e84:	cb 01       	movw	r24, r22
    3e86:	8a 8f       	std	Y+26, r24	; 0x1a
    3e88:	9b 8f       	std	Y+27, r25	; 0x1b
    3e8a:	ac 8f       	std	Y+28, r26	; 0x1c
    3e8c:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e8e:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3e90:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3e92:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e94:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3e96:	20 e0       	ldi	r18, 0x00	; 0
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	4a e7       	ldi	r20, 0x7A	; 122
    3e9c:	55 e4       	ldi	r21, 0x45	; 69
    3e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ea2:	dc 01       	movw	r26, r24
    3ea4:	cb 01       	movw	r24, r22
    3ea6:	8e 8b       	std	Y+22, r24	; 0x16
    3ea8:	9f 8b       	std	Y+23, r25	; 0x17
    3eaa:	a8 8f       	std	Y+24, r26	; 0x18
    3eac:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    3eae:	6e 89       	ldd	r22, Y+22	; 0x16
    3eb0:	7f 89       	ldd	r23, Y+23	; 0x17
    3eb2:	88 8d       	ldd	r24, Y+24	; 0x18
    3eb4:	99 8d       	ldd	r25, Y+25	; 0x19
    3eb6:	20 e0       	ldi	r18, 0x00	; 0
    3eb8:	30 e0       	ldi	r19, 0x00	; 0
    3eba:	40 e8       	ldi	r20, 0x80	; 128
    3ebc:	5f e3       	ldi	r21, 0x3F	; 63
    3ebe:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3ec2:	88 23       	and	r24, r24
    3ec4:	2c f4       	brge	.+10     	; 0x3ed0 <H_LCD_void_LachNibble+0x2ba>
		__ticks = 1;
    3ec6:	81 e0       	ldi	r24, 0x01	; 1
    3ec8:	90 e0       	ldi	r25, 0x00	; 0
    3eca:	9d 8b       	std	Y+21, r25	; 0x15
    3ecc:	8c 8b       	std	Y+20, r24	; 0x14
    3ece:	3f c0       	rjmp	.+126    	; 0x3f4e <H_LCD_void_LachNibble+0x338>
	else if (__tmp > 65535)
    3ed0:	6e 89       	ldd	r22, Y+22	; 0x16
    3ed2:	7f 89       	ldd	r23, Y+23	; 0x17
    3ed4:	88 8d       	ldd	r24, Y+24	; 0x18
    3ed6:	99 8d       	ldd	r25, Y+25	; 0x19
    3ed8:	20 e0       	ldi	r18, 0x00	; 0
    3eda:	3f ef       	ldi	r19, 0xFF	; 255
    3edc:	4f e7       	ldi	r20, 0x7F	; 127
    3ede:	57 e4       	ldi	r21, 0x47	; 71
    3ee0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3ee4:	18 16       	cp	r1, r24
    3ee6:	4c f5       	brge	.+82     	; 0x3f3a <H_LCD_void_LachNibble+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ee8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3eea:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3eec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3eee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3ef0:	20 e0       	ldi	r18, 0x00	; 0
    3ef2:	30 e0       	ldi	r19, 0x00	; 0
    3ef4:	40 e2       	ldi	r20, 0x20	; 32
    3ef6:	51 e4       	ldi	r21, 0x41	; 65
    3ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3efc:	dc 01       	movw	r26, r24
    3efe:	cb 01       	movw	r24, r22
    3f00:	bc 01       	movw	r22, r24
    3f02:	cd 01       	movw	r24, r26
    3f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f08:	dc 01       	movw	r26, r24
    3f0a:	cb 01       	movw	r24, r22
    3f0c:	9d 8b       	std	Y+21, r25	; 0x15
    3f0e:	8c 8b       	std	Y+20, r24	; 0x14
    3f10:	0f c0       	rjmp	.+30     	; 0x3f30 <H_LCD_void_LachNibble+0x31a>
    3f12:	80 e9       	ldi	r24, 0x90	; 144
    3f14:	91 e0       	ldi	r25, 0x01	; 1
    3f16:	9b 8b       	std	Y+19, r25	; 0x13
    3f18:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3f1a:	8a 89       	ldd	r24, Y+18	; 0x12
    3f1c:	9b 89       	ldd	r25, Y+19	; 0x13
    3f1e:	01 97       	sbiw	r24, 0x01	; 1
    3f20:	f1 f7       	brne	.-4      	; 0x3f1e <H_LCD_void_LachNibble+0x308>
    3f22:	9b 8b       	std	Y+19, r25	; 0x13
    3f24:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f26:	8c 89       	ldd	r24, Y+20	; 0x14
    3f28:	9d 89       	ldd	r25, Y+21	; 0x15
    3f2a:	01 97       	sbiw	r24, 0x01	; 1
    3f2c:	9d 8b       	std	Y+21, r25	; 0x15
    3f2e:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f30:	8c 89       	ldd	r24, Y+20	; 0x14
    3f32:	9d 89       	ldd	r25, Y+21	; 0x15
    3f34:	00 97       	sbiw	r24, 0x00	; 0
    3f36:	69 f7       	brne	.-38     	; 0x3f12 <H_LCD_void_LachNibble+0x2fc>
    3f38:	24 c0       	rjmp	.+72     	; 0x3f82 <H_LCD_void_LachNibble+0x36c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f3a:	6e 89       	ldd	r22, Y+22	; 0x16
    3f3c:	7f 89       	ldd	r23, Y+23	; 0x17
    3f3e:	88 8d       	ldd	r24, Y+24	; 0x18
    3f40:	99 8d       	ldd	r25, Y+25	; 0x19
    3f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f46:	dc 01       	movw	r26, r24
    3f48:	cb 01       	movw	r24, r22
    3f4a:	9d 8b       	std	Y+21, r25	; 0x15
    3f4c:	8c 8b       	std	Y+20, r24	; 0x14
    3f4e:	8c 89       	ldd	r24, Y+20	; 0x14
    3f50:	9d 89       	ldd	r25, Y+21	; 0x15
    3f52:	99 8b       	std	Y+17, r25	; 0x11
    3f54:	88 8b       	std	Y+16, r24	; 0x10
    3f56:	88 89       	ldd	r24, Y+16	; 0x10
    3f58:	99 89       	ldd	r25, Y+17	; 0x11
    3f5a:	01 97       	sbiw	r24, 0x01	; 1
    3f5c:	f1 f7       	brne	.-4      	; 0x3f5a <H_LCD_void_LachNibble+0x344>
    3f5e:	99 8b       	std	Y+17, r25	; 0x11
    3f60:	88 8b       	std	Y+16, r24	; 0x10
    3f62:	0f c0       	rjmp	.+30     	; 0x3f82 <H_LCD_void_LachNibble+0x36c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3f64:	6f 8d       	ldd	r22, Y+31	; 0x1f
    3f66:	78 a1       	ldd	r23, Y+32	; 0x20
    3f68:	89 a1       	ldd	r24, Y+33	; 0x21
    3f6a:	9a a1       	ldd	r25, Y+34	; 0x22
    3f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f70:	dc 01       	movw	r26, r24
    3f72:	cb 01       	movw	r24, r22
    3f74:	8e 8f       	std	Y+30, r24	; 0x1e
    3f76:	8e 8d       	ldd	r24, Y+30	; 0x1e
    3f78:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    3f7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f7c:	8a 95       	dec	r24
    3f7e:	f1 f7       	brne	.-4      	; 0x3f7c <H_LCD_void_LachNibble+0x366>
    3f80:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(100);
	M_DIO_voidSetPinValue(H_LCD_EN_PIN, DIO_LOW); // set EN to HIGH
    3f82:	8c e0       	ldi	r24, 0x0C	; 12
    3f84:	60 e0       	ldi	r22, 0x00	; 0
    3f86:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
    3f8a:	80 e0       	ldi	r24, 0x00	; 0
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	a0 e8       	ldi	r26, 0x80	; 128
    3f90:	bf e3       	ldi	r27, 0x3F	; 63
    3f92:	8b 87       	std	Y+11, r24	; 0x0b
    3f94:	9c 87       	std	Y+12, r25	; 0x0c
    3f96:	ad 87       	std	Y+13, r26	; 0x0d
    3f98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fa2:	20 e0       	ldi	r18, 0x00	; 0
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	4a e7       	ldi	r20, 0x7A	; 122
    3fa8:	55 e4       	ldi	r21, 0x45	; 69
    3faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fae:	dc 01       	movw	r26, r24
    3fb0:	cb 01       	movw	r24, r22
    3fb2:	8f 83       	std	Y+7, r24	; 0x07
    3fb4:	98 87       	std	Y+8, r25	; 0x08
    3fb6:	a9 87       	std	Y+9, r26	; 0x09
    3fb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3fba:	6f 81       	ldd	r22, Y+7	; 0x07
    3fbc:	78 85       	ldd	r23, Y+8	; 0x08
    3fbe:	89 85       	ldd	r24, Y+9	; 0x09
    3fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fc2:	20 e0       	ldi	r18, 0x00	; 0
    3fc4:	30 e0       	ldi	r19, 0x00	; 0
    3fc6:	40 e8       	ldi	r20, 0x80	; 128
    3fc8:	5f e3       	ldi	r21, 0x3F	; 63
    3fca:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    3fce:	88 23       	and	r24, r24
    3fd0:	2c f4       	brge	.+10     	; 0x3fdc <H_LCD_void_LachNibble+0x3c6>
		__ticks = 1;
    3fd2:	81 e0       	ldi	r24, 0x01	; 1
    3fd4:	90 e0       	ldi	r25, 0x00	; 0
    3fd6:	9e 83       	std	Y+6, r25	; 0x06
    3fd8:	8d 83       	std	Y+5, r24	; 0x05
    3fda:	3f c0       	rjmp	.+126    	; 0x405a <H_LCD_void_LachNibble+0x444>
	else if (__tmp > 65535)
    3fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    3fde:	78 85       	ldd	r23, Y+8	; 0x08
    3fe0:	89 85       	ldd	r24, Y+9	; 0x09
    3fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3fe4:	20 e0       	ldi	r18, 0x00	; 0
    3fe6:	3f ef       	ldi	r19, 0xFF	; 255
    3fe8:	4f e7       	ldi	r20, 0x7F	; 127
    3fea:	57 e4       	ldi	r21, 0x47	; 71
    3fec:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    3ff0:	18 16       	cp	r1, r24
    3ff2:	4c f5       	brge	.+82     	; 0x4046 <H_LCD_void_LachNibble+0x430>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	40 e2       	ldi	r20, 0x20	; 32
    4002:	51 e4       	ldi	r21, 0x41	; 65
    4004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4008:	dc 01       	movw	r26, r24
    400a:	cb 01       	movw	r24, r22
    400c:	bc 01       	movw	r22, r24
    400e:	cd 01       	movw	r24, r26
    4010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4014:	dc 01       	movw	r26, r24
    4016:	cb 01       	movw	r24, r22
    4018:	9e 83       	std	Y+6, r25	; 0x06
    401a:	8d 83       	std	Y+5, r24	; 0x05
    401c:	0f c0       	rjmp	.+30     	; 0x403c <H_LCD_void_LachNibble+0x426>
    401e:	80 e9       	ldi	r24, 0x90	; 144
    4020:	91 e0       	ldi	r25, 0x01	; 1
    4022:	9c 83       	std	Y+4, r25	; 0x04
    4024:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    4026:	8b 81       	ldd	r24, Y+3	; 0x03
    4028:	9c 81       	ldd	r25, Y+4	; 0x04
    402a:	01 97       	sbiw	r24, 0x01	; 1
    402c:	f1 f7       	brne	.-4      	; 0x402a <H_LCD_void_LachNibble+0x414>
    402e:	9c 83       	std	Y+4, r25	; 0x04
    4030:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4032:	8d 81       	ldd	r24, Y+5	; 0x05
    4034:	9e 81       	ldd	r25, Y+6	; 0x06
    4036:	01 97       	sbiw	r24, 0x01	; 1
    4038:	9e 83       	std	Y+6, r25	; 0x06
    403a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    403c:	8d 81       	ldd	r24, Y+5	; 0x05
    403e:	9e 81       	ldd	r25, Y+6	; 0x06
    4040:	00 97       	sbiw	r24, 0x00	; 0
    4042:	69 f7       	brne	.-38     	; 0x401e <H_LCD_void_LachNibble+0x408>
    4044:	14 c0       	rjmp	.+40     	; 0x406e <H_LCD_void_LachNibble+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4046:	6f 81       	ldd	r22, Y+7	; 0x07
    4048:	78 85       	ldd	r23, Y+8	; 0x08
    404a:	89 85       	ldd	r24, Y+9	; 0x09
    404c:	9a 85       	ldd	r25, Y+10	; 0x0a
    404e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4052:	dc 01       	movw	r26, r24
    4054:	cb 01       	movw	r24, r22
    4056:	9e 83       	std	Y+6, r25	; 0x06
    4058:	8d 83       	std	Y+5, r24	; 0x05
    405a:	8d 81       	ldd	r24, Y+5	; 0x05
    405c:	9e 81       	ldd	r25, Y+6	; 0x06
    405e:	9a 83       	std	Y+2, r25	; 0x02
    4060:	89 83       	std	Y+1, r24	; 0x01
    4062:	89 81       	ldd	r24, Y+1	; 0x01
    4064:	9a 81       	ldd	r25, Y+2	; 0x02
    4066:	01 97       	sbiw	r24, 0x01	; 1
    4068:	f1 f7       	brne	.-4      	; 0x4066 <H_LCD_void_LachNibble+0x450>
    406a:	9a 83       	std	Y+2, r25	; 0x02
    406c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); // wait for 1 ms
}
    406e:	ef 96       	adiw	r28, 0x3f	; 63
    4070:	0f b6       	in	r0, 0x3f	; 63
    4072:	f8 94       	cli
    4074:	de bf       	out	0x3e, r29	; 62
    4076:	0f be       	out	0x3f, r0	; 63
    4078:	cd bf       	out	0x3d, r28	; 61
    407a:	cf 91       	pop	r28
    407c:	df 91       	pop	r29
    407e:	08 95       	ret

00004080 <H_LCD_void_SendCommand>:

void H_LCD_void_SendCommand(u8 copy_u8Data) {
    4080:	df 93       	push	r29
    4082:	cf 93       	push	r28
    4084:	0f 92       	push	r0
    4086:	cd b7       	in	r28, 0x3d	; 61
    4088:	de b7       	in	r29, 0x3e	; 62
    408a:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_voidSetPinValue(H_LCD_RS_PIN, DIO_LOW); //set RS LOW for command mode
    408c:	8d e0       	ldi	r24, 0x0D	; 13
    408e:	60 e0       	ldi	r22, 0x00	; 0
    4090:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
	H_LCD_void_LachByte(copy_u8Data);
    4094:	89 81       	ldd	r24, Y+1	; 0x01
    4096:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <H_LCD_void_LachByte>

}
    409a:	0f 90       	pop	r0
    409c:	cf 91       	pop	r28
    409e:	df 91       	pop	r29
    40a0:	08 95       	ret

000040a2 <H_LCD_void_Clear>:

void H_LCD_void_Clear(void) {
    40a2:	df 93       	push	r29
    40a4:	cf 93       	push	r28
    40a6:	cd b7       	in	r28, 0x3d	; 61
    40a8:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_SendCommand(0x01);
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	0e 94 40 20 	call	0x4080	; 0x4080 <H_LCD_void_SendCommand>
}
    40b0:	cf 91       	pop	r28
    40b2:	df 91       	pop	r29
    40b4:	08 95       	ret

000040b6 <H_LCD_void_SendData>:

void H_LCD_void_SendData(char copy_u8Data) {
    40b6:	df 93       	push	r29
    40b8:	cf 93       	push	r28
    40ba:	0f 92       	push	r0
    40bc:	cd b7       	in	r28, 0x3d	; 61
    40be:	de b7       	in	r29, 0x3e	; 62
    40c0:	89 83       	std	Y+1, r24	; 0x01
	M_DIO_voidSetPinValue(H_LCD_RS_PIN, DIO_HIGH); //set RS HIGH for Data mode
    40c2:	8d e0       	ldi	r24, 0x0D	; 13
    40c4:	61 e0       	ldi	r22, 0x01	; 1
    40c6:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
	H_LCD_void_LachByte(copy_u8Data);
    40ca:	89 81       	ldd	r24, Y+1	; 0x01
    40cc:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <H_LCD_void_LachByte>

}
    40d0:	0f 90       	pop	r0
    40d2:	cf 91       	pop	r28
    40d4:	df 91       	pop	r29
    40d6:	08 95       	ret

000040d8 <H_LCD_void_sendString>:

void H_LCD_void_sendString(char *string) {
    40d8:	df 93       	push	r29
    40da:	cf 93       	push	r28
    40dc:	00 d0       	rcall	.+0      	; 0x40de <H_LCD_void_sendString+0x6>
    40de:	00 d0       	rcall	.+0      	; 0x40e0 <H_LCD_void_sendString+0x8>
    40e0:	cd b7       	in	r28, 0x3d	; 61
    40e2:	de b7       	in	r29, 0x3e	; 62
    40e4:	9c 83       	std	Y+4, r25	; 0x04
    40e6:	8b 83       	std	Y+3, r24	; 0x03
	static u8 stCounter =0;
	//for (char *it = string; *it; it++) {
	for(int i = 0; i < 100 ; i++){
    40e8:	1a 82       	std	Y+2, r1	; 0x02
    40ea:	19 82       	std	Y+1, r1	; 0x01
    40ec:	19 c0       	rjmp	.+50     	; 0x4120 <H_LCD_void_sendString+0x48>
		if(*(string+i) == 0)
    40ee:	29 81       	ldd	r18, Y+1	; 0x01
    40f0:	3a 81       	ldd	r19, Y+2	; 0x02
    40f2:	8b 81       	ldd	r24, Y+3	; 0x03
    40f4:	9c 81       	ldd	r25, Y+4	; 0x04
    40f6:	fc 01       	movw	r30, r24
    40f8:	e2 0f       	add	r30, r18
    40fa:	f3 1f       	adc	r31, r19
    40fc:	80 81       	ld	r24, Z
    40fe:	88 23       	and	r24, r24
    4100:	a1 f0       	breq	.+40     	; 0x412a <H_LCD_void_sendString+0x52>
			break;
		H_LCD_void_SendData(*(string+i));
    4102:	29 81       	ldd	r18, Y+1	; 0x01
    4104:	3a 81       	ldd	r19, Y+2	; 0x02
    4106:	8b 81       	ldd	r24, Y+3	; 0x03
    4108:	9c 81       	ldd	r25, Y+4	; 0x04
    410a:	fc 01       	movw	r30, r24
    410c:	e2 0f       	add	r30, r18
    410e:	f3 1f       	adc	r31, r19
    4110:	80 81       	ld	r24, Z
    4112:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <H_LCD_void_SendData>
}

void H_LCD_void_sendString(char *string) {
	static u8 stCounter =0;
	//for (char *it = string; *it; it++) {
	for(int i = 0; i < 100 ; i++){
    4116:	89 81       	ldd	r24, Y+1	; 0x01
    4118:	9a 81       	ldd	r25, Y+2	; 0x02
    411a:	01 96       	adiw	r24, 0x01	; 1
    411c:	9a 83       	std	Y+2, r25	; 0x02
    411e:	89 83       	std	Y+1, r24	; 0x01
    4120:	89 81       	ldd	r24, Y+1	; 0x01
    4122:	9a 81       	ldd	r25, Y+2	; 0x02
    4124:	84 36       	cpi	r24, 0x64	; 100
    4126:	91 05       	cpc	r25, r1
    4128:	14 f3       	brlt	.-60     	; 0x40ee <H_LCD_void_sendString+0x16>
			stCounter = 0;
			_delay_ms(2000);
			H_LCD_void_Clear();
		}*/
	}
}
    412a:	0f 90       	pop	r0
    412c:	0f 90       	pop	r0
    412e:	0f 90       	pop	r0
    4130:	0f 90       	pop	r0
    4132:	cf 91       	pop	r28
    4134:	df 91       	pop	r29
    4136:	08 95       	ret

00004138 <H_LCD_void_sendIntNum>:

void H_LCD_void_sendIntNum(s32 copy_s32Num) {
    4138:	0f 93       	push	r16
    413a:	1f 93       	push	r17
    413c:	df 93       	push	r29
    413e:	cf 93       	push	r28
    4140:	cd b7       	in	r28, 0x3d	; 61
    4142:	de b7       	in	r29, 0x3e	; 62
    4144:	62 97       	sbiw	r28, 0x12	; 18
    4146:	0f b6       	in	r0, 0x3f	; 63
    4148:	f8 94       	cli
    414a:	de bf       	out	0x3e, r29	; 62
    414c:	0f be       	out	0x3f, r0	; 63
    414e:	cd bf       	out	0x3d, r28	; 61
    4150:	6f 87       	std	Y+15, r22	; 0x0f
    4152:	78 8b       	std	Y+16, r23	; 0x10
    4154:	89 8b       	std	Y+17, r24	; 0x11
    4156:	9a 8b       	std	Y+18, r25	; 0x12
	char buff[10];
	int n = 0;
    4158:	1c 82       	std	Y+4, r1	; 0x04
    415a:	1b 82       	std	Y+3, r1	; 0x03
    415c:	2f c0       	rjmp	.+94     	; 0x41bc <H_LCD_void_sendIntNum+0x84>
	while (copy_s32Num) {
		buff[n] = (copy_s32Num % 10) + '0';
    415e:	0b 81       	ldd	r16, Y+3	; 0x03
    4160:	1c 81       	ldd	r17, Y+4	; 0x04
    4162:	8f 85       	ldd	r24, Y+15	; 0x0f
    4164:	98 89       	ldd	r25, Y+16	; 0x10
    4166:	a9 89       	ldd	r26, Y+17	; 0x11
    4168:	ba 89       	ldd	r27, Y+18	; 0x12
    416a:	2a e0       	ldi	r18, 0x0A	; 10
    416c:	30 e0       	ldi	r19, 0x00	; 0
    416e:	40 e0       	ldi	r20, 0x00	; 0
    4170:	50 e0       	ldi	r21, 0x00	; 0
    4172:	bc 01       	movw	r22, r24
    4174:	cd 01       	movw	r24, r26
    4176:	0e 94 21 29 	call	0x5242	; 0x5242 <__divmodsi4>
    417a:	dc 01       	movw	r26, r24
    417c:	cb 01       	movw	r24, r22
    417e:	28 2f       	mov	r18, r24
    4180:	20 5d       	subi	r18, 0xD0	; 208
    4182:	ce 01       	movw	r24, r28
    4184:	05 96       	adiw	r24, 0x05	; 5
    4186:	fc 01       	movw	r30, r24
    4188:	e0 0f       	add	r30, r16
    418a:	f1 1f       	adc	r31, r17
    418c:	20 83       	st	Z, r18
		copy_s32Num /= 10;
    418e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4190:	98 89       	ldd	r25, Y+16	; 0x10
    4192:	a9 89       	ldd	r26, Y+17	; 0x11
    4194:	ba 89       	ldd	r27, Y+18	; 0x12
    4196:	2a e0       	ldi	r18, 0x0A	; 10
    4198:	30 e0       	ldi	r19, 0x00	; 0
    419a:	40 e0       	ldi	r20, 0x00	; 0
    419c:	50 e0       	ldi	r21, 0x00	; 0
    419e:	bc 01       	movw	r22, r24
    41a0:	cd 01       	movw	r24, r26
    41a2:	0e 94 21 29 	call	0x5242	; 0x5242 <__divmodsi4>
    41a6:	da 01       	movw	r26, r20
    41a8:	c9 01       	movw	r24, r18
    41aa:	8f 87       	std	Y+15, r24	; 0x0f
    41ac:	98 8b       	std	Y+16, r25	; 0x10
    41ae:	a9 8b       	std	Y+17, r26	; 0x11
    41b0:	ba 8b       	std	Y+18, r27	; 0x12
		n++;
    41b2:	8b 81       	ldd	r24, Y+3	; 0x03
    41b4:	9c 81       	ldd	r25, Y+4	; 0x04
    41b6:	01 96       	adiw	r24, 0x01	; 1
    41b8:	9c 83       	std	Y+4, r25	; 0x04
    41ba:	8b 83       	std	Y+3, r24	; 0x03
}

void H_LCD_void_sendIntNum(s32 copy_s32Num) {
	char buff[10];
	int n = 0;
	while (copy_s32Num) {
    41bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    41be:	98 89       	ldd	r25, Y+16	; 0x10
    41c0:	a9 89       	ldd	r26, Y+17	; 0x11
    41c2:	ba 89       	ldd	r27, Y+18	; 0x12
    41c4:	00 97       	sbiw	r24, 0x00	; 0
    41c6:	a1 05       	cpc	r26, r1
    41c8:	b1 05       	cpc	r27, r1
    41ca:	49 f6       	brne	.-110    	; 0x415e <H_LCD_void_sendIntNum+0x26>
		buff[n] = (copy_s32Num % 10) + '0';
		copy_s32Num /= 10;
		n++;
	}
	buff[n] = '\0';
    41cc:	2b 81       	ldd	r18, Y+3	; 0x03
    41ce:	3c 81       	ldd	r19, Y+4	; 0x04
    41d0:	ce 01       	movw	r24, r28
    41d2:	05 96       	adiw	r24, 0x05	; 5
    41d4:	fc 01       	movw	r30, r24
    41d6:	e2 0f       	add	r30, r18
    41d8:	f3 1f       	adc	r31, r19
    41da:	10 82       	st	Z, r1

	for (int i = n - 1; i >= 0; i--) {
    41dc:	8b 81       	ldd	r24, Y+3	; 0x03
    41de:	9c 81       	ldd	r25, Y+4	; 0x04
    41e0:	01 97       	sbiw	r24, 0x01	; 1
    41e2:	9a 83       	std	Y+2, r25	; 0x02
    41e4:	89 83       	std	Y+1, r24	; 0x01
    41e6:	0f c0       	rjmp	.+30     	; 0x4206 <H_LCD_void_sendIntNum+0xce>
		H_LCD_void_SendData(buff[i]);
    41e8:	29 81       	ldd	r18, Y+1	; 0x01
    41ea:	3a 81       	ldd	r19, Y+2	; 0x02
    41ec:	ce 01       	movw	r24, r28
    41ee:	05 96       	adiw	r24, 0x05	; 5
    41f0:	fc 01       	movw	r30, r24
    41f2:	e2 0f       	add	r30, r18
    41f4:	f3 1f       	adc	r31, r19
    41f6:	80 81       	ld	r24, Z
    41f8:	0e 94 5b 20 	call	0x40b6	; 0x40b6 <H_LCD_void_SendData>
		copy_s32Num /= 10;
		n++;
	}
	buff[n] = '\0';

	for (int i = n - 1; i >= 0; i--) {
    41fc:	89 81       	ldd	r24, Y+1	; 0x01
    41fe:	9a 81       	ldd	r25, Y+2	; 0x02
    4200:	01 97       	sbiw	r24, 0x01	; 1
    4202:	9a 83       	std	Y+2, r25	; 0x02
    4204:	89 83       	std	Y+1, r24	; 0x01
    4206:	89 81       	ldd	r24, Y+1	; 0x01
    4208:	9a 81       	ldd	r25, Y+2	; 0x02
    420a:	99 23       	and	r25, r25
    420c:	6c f7       	brge	.-38     	; 0x41e8 <H_LCD_void_sendIntNum+0xb0>
		H_LCD_void_SendData(buff[i]);
	}
}
    420e:	62 96       	adiw	r28, 0x12	; 18
    4210:	0f b6       	in	r0, 0x3f	; 63
    4212:	f8 94       	cli
    4214:	de bf       	out	0x3e, r29	; 62
    4216:	0f be       	out	0x3f, r0	; 63
    4218:	cd bf       	out	0x3d, r28	; 61
    421a:	cf 91       	pop	r28
    421c:	df 91       	pop	r29
    421e:	1f 91       	pop	r17
    4220:	0f 91       	pop	r16
    4222:	08 95       	ret

00004224 <H_LCD_void_Int>:

void H_LCD_void_Int(void) {
    4224:	0f 93       	push	r16
    4226:	1f 93       	push	r17
    4228:	df 93       	push	r29
    422a:	cf 93       	push	r28
    422c:	cd b7       	in	r28, 0x3d	; 61
    422e:	de b7       	in	r29, 0x3e	; 62
    4230:	c7 54       	subi	r28, 0x47	; 71
    4232:	d0 40       	sbci	r29, 0x00	; 0
    4234:	0f b6       	in	r0, 0x3f	; 63
    4236:	f8 94       	cli
    4238:	de bf       	out	0x3e, r29	; 62
    423a:	0f be       	out	0x3f, r0	; 63
    423c:	cd bf       	out	0x3d, r28	; 61
    423e:	fe 01       	movw	r30, r28
    4240:	ed 5b       	subi	r30, 0xBD	; 189
    4242:	ff 4f       	sbci	r31, 0xFF	; 255
    4244:	80 e0       	ldi	r24, 0x00	; 0
    4246:	90 e0       	ldi	r25, 0x00	; 0
    4248:	a8 e4       	ldi	r26, 0x48	; 72
    424a:	b2 e4       	ldi	r27, 0x42	; 66
    424c:	80 83       	st	Z, r24
    424e:	91 83       	std	Z+1, r25	; 0x01
    4250:	a2 83       	std	Z+2, r26	; 0x02
    4252:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4254:	8e 01       	movw	r16, r28
    4256:	01 5c       	subi	r16, 0xC1	; 193
    4258:	1f 4f       	sbci	r17, 0xFF	; 255
    425a:	fe 01       	movw	r30, r28
    425c:	ed 5b       	subi	r30, 0xBD	; 189
    425e:	ff 4f       	sbci	r31, 0xFF	; 255
    4260:	60 81       	ld	r22, Z
    4262:	71 81       	ldd	r23, Z+1	; 0x01
    4264:	82 81       	ldd	r24, Z+2	; 0x02
    4266:	93 81       	ldd	r25, Z+3	; 0x03
    4268:	20 e0       	ldi	r18, 0x00	; 0
    426a:	30 e0       	ldi	r19, 0x00	; 0
    426c:	4a e7       	ldi	r20, 0x7A	; 122
    426e:	55 e4       	ldi	r21, 0x45	; 69
    4270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4274:	dc 01       	movw	r26, r24
    4276:	cb 01       	movw	r24, r22
    4278:	f8 01       	movw	r30, r16
    427a:	80 83       	st	Z, r24
    427c:	91 83       	std	Z+1, r25	; 0x01
    427e:	a2 83       	std	Z+2, r26	; 0x02
    4280:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4282:	fe 01       	movw	r30, r28
    4284:	ff 96       	adiw	r30, 0x3f	; 63
    4286:	60 81       	ld	r22, Z
    4288:	71 81       	ldd	r23, Z+1	; 0x01
    428a:	82 81       	ldd	r24, Z+2	; 0x02
    428c:	93 81       	ldd	r25, Z+3	; 0x03
    428e:	20 e0       	ldi	r18, 0x00	; 0
    4290:	30 e0       	ldi	r19, 0x00	; 0
    4292:	40 e8       	ldi	r20, 0x80	; 128
    4294:	5f e3       	ldi	r21, 0x3F	; 63
    4296:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    429a:	88 23       	and	r24, r24
    429c:	2c f4       	brge	.+10     	; 0x42a8 <H_LCD_void_Int+0x84>
		__ticks = 1;
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	90 e0       	ldi	r25, 0x00	; 0
    42a2:	9e af       	std	Y+62, r25	; 0x3e
    42a4:	8d af       	std	Y+61, r24	; 0x3d
    42a6:	46 c0       	rjmp	.+140    	; 0x4334 <H_LCD_void_Int+0x110>
	else if (__tmp > 65535)
    42a8:	fe 01       	movw	r30, r28
    42aa:	ff 96       	adiw	r30, 0x3f	; 63
    42ac:	60 81       	ld	r22, Z
    42ae:	71 81       	ldd	r23, Z+1	; 0x01
    42b0:	82 81       	ldd	r24, Z+2	; 0x02
    42b2:	93 81       	ldd	r25, Z+3	; 0x03
    42b4:	20 e0       	ldi	r18, 0x00	; 0
    42b6:	3f ef       	ldi	r19, 0xFF	; 255
    42b8:	4f e7       	ldi	r20, 0x7F	; 127
    42ba:	57 e4       	ldi	r21, 0x47	; 71
    42bc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    42c0:	18 16       	cp	r1, r24
    42c2:	64 f5       	brge	.+88     	; 0x431c <H_LCD_void_Int+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42c4:	fe 01       	movw	r30, r28
    42c6:	ed 5b       	subi	r30, 0xBD	; 189
    42c8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ca:	60 81       	ld	r22, Z
    42cc:	71 81       	ldd	r23, Z+1	; 0x01
    42ce:	82 81       	ldd	r24, Z+2	; 0x02
    42d0:	93 81       	ldd	r25, Z+3	; 0x03
    42d2:	20 e0       	ldi	r18, 0x00	; 0
    42d4:	30 e0       	ldi	r19, 0x00	; 0
    42d6:	40 e2       	ldi	r20, 0x20	; 32
    42d8:	51 e4       	ldi	r21, 0x41	; 65
    42da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42de:	dc 01       	movw	r26, r24
    42e0:	cb 01       	movw	r24, r22
    42e2:	bc 01       	movw	r22, r24
    42e4:	cd 01       	movw	r24, r26
    42e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42ea:	dc 01       	movw	r26, r24
    42ec:	cb 01       	movw	r24, r22
    42ee:	9e af       	std	Y+62, r25	; 0x3e
    42f0:	8d af       	std	Y+61, r24	; 0x3d
    42f2:	0f c0       	rjmp	.+30     	; 0x4312 <H_LCD_void_Int+0xee>
    42f4:	80 e9       	ldi	r24, 0x90	; 144
    42f6:	91 e0       	ldi	r25, 0x01	; 1
    42f8:	9c af       	std	Y+60, r25	; 0x3c
    42fa:	8b af       	std	Y+59, r24	; 0x3b
    42fc:	8b ad       	ldd	r24, Y+59	; 0x3b
    42fe:	9c ad       	ldd	r25, Y+60	; 0x3c
    4300:	01 97       	sbiw	r24, 0x01	; 1
    4302:	f1 f7       	brne	.-4      	; 0x4300 <H_LCD_void_Int+0xdc>
    4304:	9c af       	std	Y+60, r25	; 0x3c
    4306:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4308:	8d ad       	ldd	r24, Y+61	; 0x3d
    430a:	9e ad       	ldd	r25, Y+62	; 0x3e
    430c:	01 97       	sbiw	r24, 0x01	; 1
    430e:	9e af       	std	Y+62, r25	; 0x3e
    4310:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4312:	8d ad       	ldd	r24, Y+61	; 0x3d
    4314:	9e ad       	ldd	r25, Y+62	; 0x3e
    4316:	00 97       	sbiw	r24, 0x00	; 0
    4318:	69 f7       	brne	.-38     	; 0x42f4 <H_LCD_void_Int+0xd0>
    431a:	16 c0       	rjmp	.+44     	; 0x4348 <H_LCD_void_Int+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    431c:	fe 01       	movw	r30, r28
    431e:	ff 96       	adiw	r30, 0x3f	; 63
    4320:	60 81       	ld	r22, Z
    4322:	71 81       	ldd	r23, Z+1	; 0x01
    4324:	82 81       	ldd	r24, Z+2	; 0x02
    4326:	93 81       	ldd	r25, Z+3	; 0x03
    4328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    432c:	dc 01       	movw	r26, r24
    432e:	cb 01       	movw	r24, r22
    4330:	9e af       	std	Y+62, r25	; 0x3e
    4332:	8d af       	std	Y+61, r24	; 0x3d
    4334:	8d ad       	ldd	r24, Y+61	; 0x3d
    4336:	9e ad       	ldd	r25, Y+62	; 0x3e
    4338:	9a af       	std	Y+58, r25	; 0x3a
    433a:	89 af       	std	Y+57, r24	; 0x39
    433c:	89 ad       	ldd	r24, Y+57	; 0x39
    433e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4340:	01 97       	sbiw	r24, 0x01	; 1
    4342:	f1 f7       	brne	.-4      	; 0x4340 <H_LCD_void_Int+0x11c>
    4344:	9a af       	std	Y+58, r25	; 0x3a
    4346:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(50); //delay for 50 ms
#if(H_LCD_MOED == BIT4_MODE)

	M_DIO_voidSetPinValue(H_LCD_EN_PIN, DIO_LOW); // set EN to LOW
    4348:	8c e0       	ldi	r24, 0x0C	; 12
    434a:	60 e0       	ldi	r22, 0x00	; 0
    434c:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(H_LCD_RS_PIN, DIO_LOW); // set RS to LOW for command mode
    4350:	8d e0       	ldi	r24, 0x0D	; 13
    4352:	60 e0       	ldi	r22, 0x00	; 0
    4354:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>

	//sending 0010 to set 4bit mode
	H_LCD_void_LachNibble(0b00100000);
    4358:	80 e2       	ldi	r24, 0x20	; 32
    435a:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <H_LCD_void_LachNibble>

	//sending 0010 to set 4bit mode
	H_LCD_void_LachNibble(0b00100000);
    435e:	80 e2       	ldi	r24, 0x20	; 32
    4360:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <H_LCD_void_LachNibble>

	//sending 0010 to set 4bit mode
	H_LCD_void_LachNibble(0b00110000); // nf
    4364:	80 e3       	ldi	r24, 0x30	; 48
    4366:	0e 94 0b 1e 	call	0x3c16	; 0x3c16 <H_LCD_void_LachNibble>
    436a:	80 e0       	ldi	r24, 0x00	; 0
    436c:	90 e0       	ldi	r25, 0x00	; 0
    436e:	a0 e8       	ldi	r26, 0x80	; 128
    4370:	bf e3       	ldi	r27, 0x3F	; 63
    4372:	8d ab       	std	Y+53, r24	; 0x35
    4374:	9e ab       	std	Y+54, r25	; 0x36
    4376:	af ab       	std	Y+55, r26	; 0x37
    4378:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    437a:	6d a9       	ldd	r22, Y+53	; 0x35
    437c:	7e a9       	ldd	r23, Y+54	; 0x36
    437e:	8f a9       	ldd	r24, Y+55	; 0x37
    4380:	98 ad       	ldd	r25, Y+56	; 0x38
    4382:	20 e0       	ldi	r18, 0x00	; 0
    4384:	30 e0       	ldi	r19, 0x00	; 0
    4386:	4a e7       	ldi	r20, 0x7A	; 122
    4388:	55 e4       	ldi	r21, 0x45	; 69
    438a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    438e:	dc 01       	movw	r26, r24
    4390:	cb 01       	movw	r24, r22
    4392:	89 ab       	std	Y+49, r24	; 0x31
    4394:	9a ab       	std	Y+50, r25	; 0x32
    4396:	ab ab       	std	Y+51, r26	; 0x33
    4398:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    439a:	69 a9       	ldd	r22, Y+49	; 0x31
    439c:	7a a9       	ldd	r23, Y+50	; 0x32
    439e:	8b a9       	ldd	r24, Y+51	; 0x33
    43a0:	9c a9       	ldd	r25, Y+52	; 0x34
    43a2:	20 e0       	ldi	r18, 0x00	; 0
    43a4:	30 e0       	ldi	r19, 0x00	; 0
    43a6:	40 e8       	ldi	r20, 0x80	; 128
    43a8:	5f e3       	ldi	r21, 0x3F	; 63
    43aa:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    43ae:	88 23       	and	r24, r24
    43b0:	2c f4       	brge	.+10     	; 0x43bc <H_LCD_void_Int+0x198>
		__ticks = 1;
    43b2:	81 e0       	ldi	r24, 0x01	; 1
    43b4:	90 e0       	ldi	r25, 0x00	; 0
    43b6:	98 ab       	std	Y+48, r25	; 0x30
    43b8:	8f a7       	std	Y+47, r24	; 0x2f
    43ba:	3f c0       	rjmp	.+126    	; 0x443a <H_LCD_void_Int+0x216>
	else if (__tmp > 65535)
    43bc:	69 a9       	ldd	r22, Y+49	; 0x31
    43be:	7a a9       	ldd	r23, Y+50	; 0x32
    43c0:	8b a9       	ldd	r24, Y+51	; 0x33
    43c2:	9c a9       	ldd	r25, Y+52	; 0x34
    43c4:	20 e0       	ldi	r18, 0x00	; 0
    43c6:	3f ef       	ldi	r19, 0xFF	; 255
    43c8:	4f e7       	ldi	r20, 0x7F	; 127
    43ca:	57 e4       	ldi	r21, 0x47	; 71
    43cc:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    43d0:	18 16       	cp	r1, r24
    43d2:	4c f5       	brge	.+82     	; 0x4426 <H_LCD_void_Int+0x202>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43d4:	6d a9       	ldd	r22, Y+53	; 0x35
    43d6:	7e a9       	ldd	r23, Y+54	; 0x36
    43d8:	8f a9       	ldd	r24, Y+55	; 0x37
    43da:	98 ad       	ldd	r25, Y+56	; 0x38
    43dc:	20 e0       	ldi	r18, 0x00	; 0
    43de:	30 e0       	ldi	r19, 0x00	; 0
    43e0:	40 e2       	ldi	r20, 0x20	; 32
    43e2:	51 e4       	ldi	r21, 0x41	; 65
    43e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43e8:	dc 01       	movw	r26, r24
    43ea:	cb 01       	movw	r24, r22
    43ec:	bc 01       	movw	r22, r24
    43ee:	cd 01       	movw	r24, r26
    43f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43f4:	dc 01       	movw	r26, r24
    43f6:	cb 01       	movw	r24, r22
    43f8:	98 ab       	std	Y+48, r25	; 0x30
    43fa:	8f a7       	std	Y+47, r24	; 0x2f
    43fc:	0f c0       	rjmp	.+30     	; 0x441c <H_LCD_void_Int+0x1f8>
    43fe:	80 e9       	ldi	r24, 0x90	; 144
    4400:	91 e0       	ldi	r25, 0x01	; 1
    4402:	9e a7       	std	Y+46, r25	; 0x2e
    4404:	8d a7       	std	Y+45, r24	; 0x2d
    4406:	8d a5       	ldd	r24, Y+45	; 0x2d
    4408:	9e a5       	ldd	r25, Y+46	; 0x2e
    440a:	01 97       	sbiw	r24, 0x01	; 1
    440c:	f1 f7       	brne	.-4      	; 0x440a <H_LCD_void_Int+0x1e6>
    440e:	9e a7       	std	Y+46, r25	; 0x2e
    4410:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4412:	8f a5       	ldd	r24, Y+47	; 0x2f
    4414:	98 a9       	ldd	r25, Y+48	; 0x30
    4416:	01 97       	sbiw	r24, 0x01	; 1
    4418:	98 ab       	std	Y+48, r25	; 0x30
    441a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    441c:	8f a5       	ldd	r24, Y+47	; 0x2f
    441e:	98 a9       	ldd	r25, Y+48	; 0x30
    4420:	00 97       	sbiw	r24, 0x00	; 0
    4422:	69 f7       	brne	.-38     	; 0x43fe <H_LCD_void_Int+0x1da>
    4424:	14 c0       	rjmp	.+40     	; 0x444e <H_LCD_void_Int+0x22a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4426:	69 a9       	ldd	r22, Y+49	; 0x31
    4428:	7a a9       	ldd	r23, Y+50	; 0x32
    442a:	8b a9       	ldd	r24, Y+51	; 0x33
    442c:	9c a9       	ldd	r25, Y+52	; 0x34
    442e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4432:	dc 01       	movw	r26, r24
    4434:	cb 01       	movw	r24, r22
    4436:	98 ab       	std	Y+48, r25	; 0x30
    4438:	8f a7       	std	Y+47, r24	; 0x2f
    443a:	8f a5       	ldd	r24, Y+47	; 0x2f
    443c:	98 a9       	ldd	r25, Y+48	; 0x30
    443e:	9c a7       	std	Y+44, r25	; 0x2c
    4440:	8b a7       	std	Y+43, r24	; 0x2b
    4442:	8b a5       	ldd	r24, Y+43	; 0x2b
    4444:	9c a5       	ldd	r25, Y+44	; 0x2c
    4446:	01 97       	sbiw	r24, 0x01	; 1
    4448:	f1 f7       	brne	.-4      	; 0x4446 <H_LCD_void_Int+0x222>
    444a:	9c a7       	std	Y+44, r25	; 0x2c
    444c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	//H_LCD_void_SendCommand(
	//LCD_FUNCTIONSET | LCD_4BITMODE | LCD_2LINE | LCD_5x8DOTS);

	u8 lcd_displayparams = 0; //= LCD_CURSOROFF | LCD_BLINKOFF;
    444e:	fe 01       	movw	r30, r28
    4450:	e9 5b       	subi	r30, 0xB9	; 185
    4452:	ff 4f       	sbci	r31, 0xFF	; 255
    4454:	10 82       	st	Z, r1
	//H_LCD_void_SendCommand(LCD_DISPLAYCONTROL | lcd_displayparams);

	lcd_displayparams |= LCD_DISPLAYON;
    4456:	de 01       	movw	r26, r28
    4458:	a9 5b       	subi	r26, 0xB9	; 185
    445a:	bf 4f       	sbci	r27, 0xFF	; 255
    445c:	fe 01       	movw	r30, r28
    445e:	e9 5b       	subi	r30, 0xB9	; 185
    4460:	ff 4f       	sbci	r31, 0xFF	; 255
    4462:	80 81       	ld	r24, Z
    4464:	84 60       	ori	r24, 0x04	; 4
    4466:	8c 93       	st	X, r24
	H_LCD_void_SendCommand(LCD_DISPLAYCONTROL | lcd_displayparams);
    4468:	fe 01       	movw	r30, r28
    446a:	e9 5b       	subi	r30, 0xB9	; 185
    446c:	ff 4f       	sbci	r31, 0xFF	; 255
    446e:	80 81       	ld	r24, Z
    4470:	88 60       	ori	r24, 0x08	; 8
    4472:	0e 94 40 20 	call	0x4080	; 0x4080 <H_LCD_void_SendCommand>
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	a0 e8       	ldi	r26, 0x80	; 128
    447c:	bf e3       	ldi	r27, 0x3F	; 63
    447e:	8f a3       	std	Y+39, r24	; 0x27
    4480:	98 a7       	std	Y+40, r25	; 0x28
    4482:	a9 a7       	std	Y+41, r26	; 0x29
    4484:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4486:	6f a1       	ldd	r22, Y+39	; 0x27
    4488:	78 a5       	ldd	r23, Y+40	; 0x28
    448a:	89 a5       	ldd	r24, Y+41	; 0x29
    448c:	9a a5       	ldd	r25, Y+42	; 0x2a
    448e:	20 e0       	ldi	r18, 0x00	; 0
    4490:	30 e0       	ldi	r19, 0x00	; 0
    4492:	4a e7       	ldi	r20, 0x7A	; 122
    4494:	55 e4       	ldi	r21, 0x45	; 69
    4496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    449a:	dc 01       	movw	r26, r24
    449c:	cb 01       	movw	r24, r22
    449e:	8b a3       	std	Y+35, r24	; 0x23
    44a0:	9c a3       	std	Y+36, r25	; 0x24
    44a2:	ad a3       	std	Y+37, r26	; 0x25
    44a4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    44a6:	6b a1       	ldd	r22, Y+35	; 0x23
    44a8:	7c a1       	ldd	r23, Y+36	; 0x24
    44aa:	8d a1       	ldd	r24, Y+37	; 0x25
    44ac:	9e a1       	ldd	r25, Y+38	; 0x26
    44ae:	20 e0       	ldi	r18, 0x00	; 0
    44b0:	30 e0       	ldi	r19, 0x00	; 0
    44b2:	40 e8       	ldi	r20, 0x80	; 128
    44b4:	5f e3       	ldi	r21, 0x3F	; 63
    44b6:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    44ba:	88 23       	and	r24, r24
    44bc:	2c f4       	brge	.+10     	; 0x44c8 <H_LCD_void_Int+0x2a4>
		__ticks = 1;
    44be:	81 e0       	ldi	r24, 0x01	; 1
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	9a a3       	std	Y+34, r25	; 0x22
    44c4:	89 a3       	std	Y+33, r24	; 0x21
    44c6:	3f c0       	rjmp	.+126    	; 0x4546 <H_LCD_void_Int+0x322>
	else if (__tmp > 65535)
    44c8:	6b a1       	ldd	r22, Y+35	; 0x23
    44ca:	7c a1       	ldd	r23, Y+36	; 0x24
    44cc:	8d a1       	ldd	r24, Y+37	; 0x25
    44ce:	9e a1       	ldd	r25, Y+38	; 0x26
    44d0:	20 e0       	ldi	r18, 0x00	; 0
    44d2:	3f ef       	ldi	r19, 0xFF	; 255
    44d4:	4f e7       	ldi	r20, 0x7F	; 127
    44d6:	57 e4       	ldi	r21, 0x47	; 71
    44d8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    44dc:	18 16       	cp	r1, r24
    44de:	4c f5       	brge	.+82     	; 0x4532 <H_LCD_void_Int+0x30e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    44e0:	6f a1       	ldd	r22, Y+39	; 0x27
    44e2:	78 a5       	ldd	r23, Y+40	; 0x28
    44e4:	89 a5       	ldd	r24, Y+41	; 0x29
    44e6:	9a a5       	ldd	r25, Y+42	; 0x2a
    44e8:	20 e0       	ldi	r18, 0x00	; 0
    44ea:	30 e0       	ldi	r19, 0x00	; 0
    44ec:	40 e2       	ldi	r20, 0x20	; 32
    44ee:	51 e4       	ldi	r21, 0x41	; 65
    44f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44f4:	dc 01       	movw	r26, r24
    44f6:	cb 01       	movw	r24, r22
    44f8:	bc 01       	movw	r22, r24
    44fa:	cd 01       	movw	r24, r26
    44fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4500:	dc 01       	movw	r26, r24
    4502:	cb 01       	movw	r24, r22
    4504:	9a a3       	std	Y+34, r25	; 0x22
    4506:	89 a3       	std	Y+33, r24	; 0x21
    4508:	0f c0       	rjmp	.+30     	; 0x4528 <H_LCD_void_Int+0x304>
    450a:	80 e9       	ldi	r24, 0x90	; 144
    450c:	91 e0       	ldi	r25, 0x01	; 1
    450e:	98 a3       	std	Y+32, r25	; 0x20
    4510:	8f 8f       	std	Y+31, r24	; 0x1f
    4512:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4514:	98 a1       	ldd	r25, Y+32	; 0x20
    4516:	01 97       	sbiw	r24, 0x01	; 1
    4518:	f1 f7       	brne	.-4      	; 0x4516 <H_LCD_void_Int+0x2f2>
    451a:	98 a3       	std	Y+32, r25	; 0x20
    451c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    451e:	89 a1       	ldd	r24, Y+33	; 0x21
    4520:	9a a1       	ldd	r25, Y+34	; 0x22
    4522:	01 97       	sbiw	r24, 0x01	; 1
    4524:	9a a3       	std	Y+34, r25	; 0x22
    4526:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4528:	89 a1       	ldd	r24, Y+33	; 0x21
    452a:	9a a1       	ldd	r25, Y+34	; 0x22
    452c:	00 97       	sbiw	r24, 0x00	; 0
    452e:	69 f7       	brne	.-38     	; 0x450a <H_LCD_void_Int+0x2e6>
    4530:	14 c0       	rjmp	.+40     	; 0x455a <H_LCD_void_Int+0x336>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4532:	6b a1       	ldd	r22, Y+35	; 0x23
    4534:	7c a1       	ldd	r23, Y+36	; 0x24
    4536:	8d a1       	ldd	r24, Y+37	; 0x25
    4538:	9e a1       	ldd	r25, Y+38	; 0x26
    453a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    453e:	dc 01       	movw	r26, r24
    4540:	cb 01       	movw	r24, r22
    4542:	9a a3       	std	Y+34, r25	; 0x22
    4544:	89 a3       	std	Y+33, r24	; 0x21
    4546:	89 a1       	ldd	r24, Y+33	; 0x21
    4548:	9a a1       	ldd	r25, Y+34	; 0x22
    454a:	9e 8f       	std	Y+30, r25	; 0x1e
    454c:	8d 8f       	std	Y+29, r24	; 0x1d
    454e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4550:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4552:	01 97       	sbiw	r24, 0x01	; 1
    4554:	f1 f7       	brne	.-4      	; 0x4552 <H_LCD_void_Int+0x32e>
    4556:	9e 8f       	std	Y+30, r25	; 0x1e
    4558:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(1);

	H_LCD_void_SendCommand(LCD_CLEARDISPLAY);
    455a:	81 e0       	ldi	r24, 0x01	; 1
    455c:	0e 94 40 20 	call	0x4080	; 0x4080 <H_LCD_void_SendCommand>
    4560:	80 e0       	ldi	r24, 0x00	; 0
    4562:	90 e0       	ldi	r25, 0x00	; 0
    4564:	a0 e4       	ldi	r26, 0x40	; 64
    4566:	b0 e4       	ldi	r27, 0x40	; 64
    4568:	89 8f       	std	Y+25, r24	; 0x19
    456a:	9a 8f       	std	Y+26, r25	; 0x1a
    456c:	ab 8f       	std	Y+27, r26	; 0x1b
    456e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4570:	69 8d       	ldd	r22, Y+25	; 0x19
    4572:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4574:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4576:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4578:	20 e0       	ldi	r18, 0x00	; 0
    457a:	30 e0       	ldi	r19, 0x00	; 0
    457c:	4a e7       	ldi	r20, 0x7A	; 122
    457e:	55 e4       	ldi	r21, 0x45	; 69
    4580:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4584:	dc 01       	movw	r26, r24
    4586:	cb 01       	movw	r24, r22
    4588:	8d 8b       	std	Y+21, r24	; 0x15
    458a:	9e 8b       	std	Y+22, r25	; 0x16
    458c:	af 8b       	std	Y+23, r26	; 0x17
    458e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4590:	6d 89       	ldd	r22, Y+21	; 0x15
    4592:	7e 89       	ldd	r23, Y+22	; 0x16
    4594:	8f 89       	ldd	r24, Y+23	; 0x17
    4596:	98 8d       	ldd	r25, Y+24	; 0x18
    4598:	20 e0       	ldi	r18, 0x00	; 0
    459a:	30 e0       	ldi	r19, 0x00	; 0
    459c:	40 e8       	ldi	r20, 0x80	; 128
    459e:	5f e3       	ldi	r21, 0x3F	; 63
    45a0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    45a4:	88 23       	and	r24, r24
    45a6:	2c f4       	brge	.+10     	; 0x45b2 <H_LCD_void_Int+0x38e>
		__ticks = 1;
    45a8:	81 e0       	ldi	r24, 0x01	; 1
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	9c 8b       	std	Y+20, r25	; 0x14
    45ae:	8b 8b       	std	Y+19, r24	; 0x13
    45b0:	3f c0       	rjmp	.+126    	; 0x4630 <H_LCD_void_Int+0x40c>
	else if (__tmp > 65535)
    45b2:	6d 89       	ldd	r22, Y+21	; 0x15
    45b4:	7e 89       	ldd	r23, Y+22	; 0x16
    45b6:	8f 89       	ldd	r24, Y+23	; 0x17
    45b8:	98 8d       	ldd	r25, Y+24	; 0x18
    45ba:	20 e0       	ldi	r18, 0x00	; 0
    45bc:	3f ef       	ldi	r19, 0xFF	; 255
    45be:	4f e7       	ldi	r20, 0x7F	; 127
    45c0:	57 e4       	ldi	r21, 0x47	; 71
    45c2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    45c6:	18 16       	cp	r1, r24
    45c8:	4c f5       	brge	.+82     	; 0x461c <H_LCD_void_Int+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    45ca:	69 8d       	ldd	r22, Y+25	; 0x19
    45cc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    45ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    45d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    45d2:	20 e0       	ldi	r18, 0x00	; 0
    45d4:	30 e0       	ldi	r19, 0x00	; 0
    45d6:	40 e2       	ldi	r20, 0x20	; 32
    45d8:	51 e4       	ldi	r21, 0x41	; 65
    45da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45de:	dc 01       	movw	r26, r24
    45e0:	cb 01       	movw	r24, r22
    45e2:	bc 01       	movw	r22, r24
    45e4:	cd 01       	movw	r24, r26
    45e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45ea:	dc 01       	movw	r26, r24
    45ec:	cb 01       	movw	r24, r22
    45ee:	9c 8b       	std	Y+20, r25	; 0x14
    45f0:	8b 8b       	std	Y+19, r24	; 0x13
    45f2:	0f c0       	rjmp	.+30     	; 0x4612 <H_LCD_void_Int+0x3ee>
    45f4:	80 e9       	ldi	r24, 0x90	; 144
    45f6:	91 e0       	ldi	r25, 0x01	; 1
    45f8:	9a 8b       	std	Y+18, r25	; 0x12
    45fa:	89 8b       	std	Y+17, r24	; 0x11
    45fc:	89 89       	ldd	r24, Y+17	; 0x11
    45fe:	9a 89       	ldd	r25, Y+18	; 0x12
    4600:	01 97       	sbiw	r24, 0x01	; 1
    4602:	f1 f7       	brne	.-4      	; 0x4600 <H_LCD_void_Int+0x3dc>
    4604:	9a 8b       	std	Y+18, r25	; 0x12
    4606:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4608:	8b 89       	ldd	r24, Y+19	; 0x13
    460a:	9c 89       	ldd	r25, Y+20	; 0x14
    460c:	01 97       	sbiw	r24, 0x01	; 1
    460e:	9c 8b       	std	Y+20, r25	; 0x14
    4610:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4612:	8b 89       	ldd	r24, Y+19	; 0x13
    4614:	9c 89       	ldd	r25, Y+20	; 0x14
    4616:	00 97       	sbiw	r24, 0x00	; 0
    4618:	69 f7       	brne	.-38     	; 0x45f4 <H_LCD_void_Int+0x3d0>
    461a:	14 c0       	rjmp	.+40     	; 0x4644 <H_LCD_void_Int+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    461c:	6d 89       	ldd	r22, Y+21	; 0x15
    461e:	7e 89       	ldd	r23, Y+22	; 0x16
    4620:	8f 89       	ldd	r24, Y+23	; 0x17
    4622:	98 8d       	ldd	r25, Y+24	; 0x18
    4624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4628:	dc 01       	movw	r26, r24
    462a:	cb 01       	movw	r24, r22
    462c:	9c 8b       	std	Y+20, r25	; 0x14
    462e:	8b 8b       	std	Y+19, r24	; 0x13
    4630:	8b 89       	ldd	r24, Y+19	; 0x13
    4632:	9c 89       	ldd	r25, Y+20	; 0x14
    4634:	98 8b       	std	Y+16, r25	; 0x10
    4636:	8f 87       	std	Y+15, r24	; 0x0f
    4638:	8f 85       	ldd	r24, Y+15	; 0x0f
    463a:	98 89       	ldd	r25, Y+16	; 0x10
    463c:	01 97       	sbiw	r24, 0x01	; 1
    463e:	f1 f7       	brne	.-4      	; 0x463c <H_LCD_void_Int+0x418>
    4640:	98 8b       	std	Y+16, r25	; 0x10
    4642:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(3);

	H_LCD_void_SendCommand(LCD_ENTRYMODESET | LCD_ENTRYSHIFTINCREMENT);
    4644:	86 e0       	ldi	r24, 0x06	; 6
    4646:	0e 94 40 20 	call	0x4080	; 0x4080 <H_LCD_void_SendCommand>
    464a:	80 e0       	ldi	r24, 0x00	; 0
    464c:	90 e0       	ldi	r25, 0x00	; 0
    464e:	a0 e4       	ldi	r26, 0x40	; 64
    4650:	b0 e4       	ldi	r27, 0x40	; 64
    4652:	8b 87       	std	Y+11, r24	; 0x0b
    4654:	9c 87       	std	Y+12, r25	; 0x0c
    4656:	ad 87       	std	Y+13, r26	; 0x0d
    4658:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    465a:	6b 85       	ldd	r22, Y+11	; 0x0b
    465c:	7c 85       	ldd	r23, Y+12	; 0x0c
    465e:	8d 85       	ldd	r24, Y+13	; 0x0d
    4660:	9e 85       	ldd	r25, Y+14	; 0x0e
    4662:	20 e0       	ldi	r18, 0x00	; 0
    4664:	30 e0       	ldi	r19, 0x00	; 0
    4666:	4a e7       	ldi	r20, 0x7A	; 122
    4668:	55 e4       	ldi	r21, 0x45	; 69
    466a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    466e:	dc 01       	movw	r26, r24
    4670:	cb 01       	movw	r24, r22
    4672:	8f 83       	std	Y+7, r24	; 0x07
    4674:	98 87       	std	Y+8, r25	; 0x08
    4676:	a9 87       	std	Y+9, r26	; 0x09
    4678:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    467a:	6f 81       	ldd	r22, Y+7	; 0x07
    467c:	78 85       	ldd	r23, Y+8	; 0x08
    467e:	89 85       	ldd	r24, Y+9	; 0x09
    4680:	9a 85       	ldd	r25, Y+10	; 0x0a
    4682:	20 e0       	ldi	r18, 0x00	; 0
    4684:	30 e0       	ldi	r19, 0x00	; 0
    4686:	40 e8       	ldi	r20, 0x80	; 128
    4688:	5f e3       	ldi	r21, 0x3F	; 63
    468a:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    468e:	88 23       	and	r24, r24
    4690:	2c f4       	brge	.+10     	; 0x469c <H_LCD_void_Int+0x478>
		__ticks = 1;
    4692:	81 e0       	ldi	r24, 0x01	; 1
    4694:	90 e0       	ldi	r25, 0x00	; 0
    4696:	9e 83       	std	Y+6, r25	; 0x06
    4698:	8d 83       	std	Y+5, r24	; 0x05
    469a:	3f c0       	rjmp	.+126    	; 0x471a <H_LCD_void_Int+0x4f6>
	else if (__tmp > 65535)
    469c:	6f 81       	ldd	r22, Y+7	; 0x07
    469e:	78 85       	ldd	r23, Y+8	; 0x08
    46a0:	89 85       	ldd	r24, Y+9	; 0x09
    46a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    46a4:	20 e0       	ldi	r18, 0x00	; 0
    46a6:	3f ef       	ldi	r19, 0xFF	; 255
    46a8:	4f e7       	ldi	r20, 0x7F	; 127
    46aa:	57 e4       	ldi	r21, 0x47	; 71
    46ac:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    46b0:	18 16       	cp	r1, r24
    46b2:	4c f5       	brge	.+82     	; 0x4706 <H_LCD_void_Int+0x4e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    46b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    46b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    46ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    46bc:	20 e0       	ldi	r18, 0x00	; 0
    46be:	30 e0       	ldi	r19, 0x00	; 0
    46c0:	40 e2       	ldi	r20, 0x20	; 32
    46c2:	51 e4       	ldi	r21, 0x41	; 65
    46c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46c8:	dc 01       	movw	r26, r24
    46ca:	cb 01       	movw	r24, r22
    46cc:	bc 01       	movw	r22, r24
    46ce:	cd 01       	movw	r24, r26
    46d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    46d4:	dc 01       	movw	r26, r24
    46d6:	cb 01       	movw	r24, r22
    46d8:	9e 83       	std	Y+6, r25	; 0x06
    46da:	8d 83       	std	Y+5, r24	; 0x05
    46dc:	0f c0       	rjmp	.+30     	; 0x46fc <H_LCD_void_Int+0x4d8>
    46de:	80 e9       	ldi	r24, 0x90	; 144
    46e0:	91 e0       	ldi	r25, 0x01	; 1
    46e2:	9c 83       	std	Y+4, r25	; 0x04
    46e4:	8b 83       	std	Y+3, r24	; 0x03
    46e6:	8b 81       	ldd	r24, Y+3	; 0x03
    46e8:	9c 81       	ldd	r25, Y+4	; 0x04
    46ea:	01 97       	sbiw	r24, 0x01	; 1
    46ec:	f1 f7       	brne	.-4      	; 0x46ea <H_LCD_void_Int+0x4c6>
    46ee:	9c 83       	std	Y+4, r25	; 0x04
    46f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    46f2:	8d 81       	ldd	r24, Y+5	; 0x05
    46f4:	9e 81       	ldd	r25, Y+6	; 0x06
    46f6:	01 97       	sbiw	r24, 0x01	; 1
    46f8:	9e 83       	std	Y+6, r25	; 0x06
    46fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    46fc:	8d 81       	ldd	r24, Y+5	; 0x05
    46fe:	9e 81       	ldd	r25, Y+6	; 0x06
    4700:	00 97       	sbiw	r24, 0x00	; 0
    4702:	69 f7       	brne	.-38     	; 0x46de <H_LCD_void_Int+0x4ba>
    4704:	14 c0       	rjmp	.+40     	; 0x472e <H_LCD_void_Int+0x50a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4706:	6f 81       	ldd	r22, Y+7	; 0x07
    4708:	78 85       	ldd	r23, Y+8	; 0x08
    470a:	89 85       	ldd	r24, Y+9	; 0x09
    470c:	9a 85       	ldd	r25, Y+10	; 0x0a
    470e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4712:	dc 01       	movw	r26, r24
    4714:	cb 01       	movw	r24, r22
    4716:	9e 83       	std	Y+6, r25	; 0x06
    4718:	8d 83       	std	Y+5, r24	; 0x05
    471a:	8d 81       	ldd	r24, Y+5	; 0x05
    471c:	9e 81       	ldd	r25, Y+6	; 0x06
    471e:	9a 83       	std	Y+2, r25	; 0x02
    4720:	89 83       	std	Y+1, r24	; 0x01
    4722:	89 81       	ldd	r24, Y+1	; 0x01
    4724:	9a 81       	ldd	r25, Y+2	; 0x02
    4726:	01 97       	sbiw	r24, 0x01	; 1
    4728:	f1 f7       	brne	.-4      	; 0x4726 <H_LCD_void_Int+0x502>
    472a:	9a 83       	std	Y+2, r25	; 0x02
    472c:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(3);

#endif
}
    472e:	c9 5b       	subi	r28, 0xB9	; 185
    4730:	df 4f       	sbci	r29, 0xFF	; 255
    4732:	0f b6       	in	r0, 0x3f	; 63
    4734:	f8 94       	cli
    4736:	de bf       	out	0x3e, r29	; 62
    4738:	0f be       	out	0x3f, r0	; 63
    473a:	cd bf       	out	0x3d, r28	; 61
    473c:	cf 91       	pop	r28
    473e:	df 91       	pop	r29
    4740:	1f 91       	pop	r17
    4742:	0f 91       	pop	r16
    4744:	08 95       	ret

00004746 <H_DC_Motor_void_MotorForward>:
 */

#include "DC_Motor_init.h"

void H_DC_Motor_void_MotorForward(u8 dutyCycle , u32 freq)
{
    4746:	df 93       	push	r29
    4748:	cf 93       	push	r28
    474a:	00 d0       	rcall	.+0      	; 0x474c <H_DC_Motor_void_MotorForward+0x6>
    474c:	00 d0       	rcall	.+0      	; 0x474e <H_DC_Motor_void_MotorForward+0x8>
    474e:	0f 92       	push	r0
    4750:	cd b7       	in	r28, 0x3d	; 61
    4752:	de b7       	in	r29, 0x3e	; 62
    4754:	89 83       	std	Y+1, r24	; 0x01
    4756:	4a 83       	std	Y+2, r20	; 0x02
    4758:	5b 83       	std	Y+3, r21	; 0x03
    475a:	6c 83       	std	Y+4, r22	; 0x04
    475c:	7d 83       	std	Y+5, r23	; 0x05
	M_DIO_voidSetPinValue(DIO_PB5 , DIO_HIGH);
    475e:	89 e1       	ldi	r24, 0x19	; 25
    4760:	61 e0       	ldi	r22, 0x01	; 1
    4762:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(DIO_PB6 , DIO_HIGH);
    4766:	8a e1       	ldi	r24, 0x1A	; 26
    4768:	61 e0       	ldi	r22, 0x01	; 1
    476a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
	M_Timer0_void_Init(Timer0_FastPWM_Mode ,Timer0_CLR_Mode , Timer0_prescaler_1024);
    476e:	88 e4       	ldi	r24, 0x48	; 72
    4770:	60 e2       	ldi	r22, 0x20	; 32
    4772:	45 e0       	ldi	r20, 0x05	; 5
    4774:	0e 94 0e 09 	call	0x121c	; 0x121c <M_Timer0_void_Init>
	M_Timer0_void_setFastPWM(dutyCycle , freq);
    4778:	2a 81       	ldd	r18, Y+2	; 0x02
    477a:	3b 81       	ldd	r19, Y+3	; 0x03
    477c:	4c 81       	ldd	r20, Y+4	; 0x04
    477e:	5d 81       	ldd	r21, Y+5	; 0x05
    4780:	89 81       	ldd	r24, Y+1	; 0x01
    4782:	ba 01       	movw	r22, r20
    4784:	a9 01       	movw	r20, r18
    4786:	0e 94 33 0b 	call	0x1666	; 0x1666 <M_Timer0_void_setFastPWM>
	M_Timer0_void_start();
    478a:	0e 94 45 09 	call	0x128a	; 0x128a <M_Timer0_void_start>
}
    478e:	0f 90       	pop	r0
    4790:	0f 90       	pop	r0
    4792:	0f 90       	pop	r0
    4794:	0f 90       	pop	r0
    4796:	0f 90       	pop	r0
    4798:	cf 91       	pop	r28
    479a:	df 91       	pop	r29
    479c:	08 95       	ret

0000479e <H_DC_Motor_void_MotorBackward>:


void H_DC_Motor_void_MotorBackward(u8 dutyCycle , u32 freq)
{
    479e:	df 93       	push	r29
    47a0:	cf 93       	push	r28
    47a2:	00 d0       	rcall	.+0      	; 0x47a4 <H_DC_Motor_void_MotorBackward+0x6>
    47a4:	00 d0       	rcall	.+0      	; 0x47a6 <H_DC_Motor_void_MotorBackward+0x8>
    47a6:	0f 92       	push	r0
    47a8:	cd b7       	in	r28, 0x3d	; 61
    47aa:	de b7       	in	r29, 0x3e	; 62
    47ac:	89 83       	std	Y+1, r24	; 0x01
    47ae:	4a 83       	std	Y+2, r20	; 0x02
    47b0:	5b 83       	std	Y+3, r21	; 0x03
    47b2:	6c 83       	std	Y+4, r22	; 0x04
    47b4:	7d 83       	std	Y+5, r23	; 0x05
	M_DIO_voidSetPinValue(DIO_PB5 , DIO_LOW);
    47b6:	89 e1       	ldi	r24, 0x19	; 25
    47b8:	60 e0       	ldi	r22, 0x00	; 0
    47ba:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
	M_DIO_voidSetPinValue(DIO_PB6 , DIO_HIGH);
    47be:	8a e1       	ldi	r24, 0x1A	; 26
    47c0:	61 e0       	ldi	r22, 0x01	; 1
    47c2:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>
	M_Timer0_void_Init(Timer0_FastPWM_Mode ,Timer0_CLR_Mode , Timer0_prescaler_1024);
    47c6:	88 e4       	ldi	r24, 0x48	; 72
    47c8:	60 e2       	ldi	r22, 0x20	; 32
    47ca:	45 e0       	ldi	r20, 0x05	; 5
    47cc:	0e 94 0e 09 	call	0x121c	; 0x121c <M_Timer0_void_Init>
	M_Timer0_void_setFastPWM(dutyCycle , freq);
    47d0:	2a 81       	ldd	r18, Y+2	; 0x02
    47d2:	3b 81       	ldd	r19, Y+3	; 0x03
    47d4:	4c 81       	ldd	r20, Y+4	; 0x04
    47d6:	5d 81       	ldd	r21, Y+5	; 0x05
    47d8:	89 81       	ldd	r24, Y+1	; 0x01
    47da:	ba 01       	movw	r22, r20
    47dc:	a9 01       	movw	r20, r18
    47de:	0e 94 33 0b 	call	0x1666	; 0x1666 <M_Timer0_void_setFastPWM>
	M_Timer0_void_start();
    47e2:	0e 94 45 09 	call	0x128a	; 0x128a <M_Timer0_void_start>

}
    47e6:	0f 90       	pop	r0
    47e8:	0f 90       	pop	r0
    47ea:	0f 90       	pop	r0
    47ec:	0f 90       	pop	r0
    47ee:	0f 90       	pop	r0
    47f0:	cf 91       	pop	r28
    47f2:	df 91       	pop	r29
    47f4:	08 95       	ret

000047f6 <H_DC_Motor_void_MotorStop>:

void H_DC_Motor_void_MotorStop()
{
    47f6:	df 93       	push	r29
    47f8:	cf 93       	push	r28
    47fa:	cd b7       	in	r28, 0x3d	; 61
    47fc:	de b7       	in	r29, 0x3e	; 62
	M_DIO_voidSetPinValue(DIO_PB6 , DIO_LOW);
    47fe:	8a e1       	ldi	r24, 0x1A	; 26
    4800:	60 e0       	ldi	r22, 0x00	; 0
    4802:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <M_DIO_voidSetPinValue>

}
    4806:	cf 91       	pop	r28
    4808:	df 91       	pop	r29
    480a:	08 95       	ret

0000480c <__vector_7>:
#include <avr/interrupt.h>
//#include "Mcu_HW.h"
#include "millis.h"

ISR(TIMER1_COMPA_vect)
{
    480c:	1f 92       	push	r1
    480e:	0f 92       	push	r0
    4810:	0f b6       	in	r0, 0x3f	; 63
    4812:	0f 92       	push	r0
    4814:	11 24       	eor	r1, r1
    4816:	8f 93       	push	r24
    4818:	9f 93       	push	r25
    481a:	af 93       	push	r26
    481c:	bf 93       	push	r27
    481e:	df 93       	push	r29
    4820:	cf 93       	push	r28
    4822:	cd b7       	in	r28, 0x3d	; 61
    4824:	de b7       	in	r29, 0x3e	; 62
  timer1_millis++;
    4826:	80 91 94 05 	lds	r24, 0x0594
    482a:	90 91 95 05 	lds	r25, 0x0595
    482e:	a0 91 96 05 	lds	r26, 0x0596
    4832:	b0 91 97 05 	lds	r27, 0x0597
    4836:	01 96       	adiw	r24, 0x01	; 1
    4838:	a1 1d       	adc	r26, r1
    483a:	b1 1d       	adc	r27, r1
    483c:	80 93 94 05 	sts	0x0594, r24
    4840:	90 93 95 05 	sts	0x0595, r25
    4844:	a0 93 96 05 	sts	0x0596, r26
    4848:	b0 93 97 05 	sts	0x0597, r27
}
    484c:	cf 91       	pop	r28
    484e:	df 91       	pop	r29
    4850:	bf 91       	pop	r27
    4852:	af 91       	pop	r26
    4854:	9f 91       	pop	r25
    4856:	8f 91       	pop	r24
    4858:	0f 90       	pop	r0
    485a:	0f be       	out	0x3f, r0	; 63
    485c:	0f 90       	pop	r0
    485e:	1f 90       	pop	r1
    4860:	18 95       	reti

00004862 <init_millis>:

void init_millis(unsigned long f_cpu)
{
    4862:	df 93       	push	r29
    4864:	cf 93       	push	r28
    4866:	cd b7       	in	r28, 0x3d	; 61
    4868:	de b7       	in	r29, 0x3e	; 62
    486a:	28 97       	sbiw	r28, 0x08	; 8
    486c:	0f b6       	in	r0, 0x3f	; 63
    486e:	f8 94       	cli
    4870:	de bf       	out	0x3e, r29	; 62
    4872:	0f be       	out	0x3f, r0	; 63
    4874:	cd bf       	out	0x3d, r28	; 61
    4876:	6d 83       	std	Y+5, r22	; 0x05
    4878:	7e 83       	std	Y+6, r23	; 0x06
    487a:	8f 83       	std	Y+7, r24	; 0x07
    487c:	98 87       	std	Y+8, r25	; 0x08
  unsigned long ctc_match_overflow;

  ctc_match_overflow = ((f_cpu / 1000) / 8); //when timer1 is this value, 1ms has passed
    487e:	8d 81       	ldd	r24, Y+5	; 0x05
    4880:	9e 81       	ldd	r25, Y+6	; 0x06
    4882:	af 81       	ldd	r26, Y+7	; 0x07
    4884:	b8 85       	ldd	r27, Y+8	; 0x08
    4886:	20 e4       	ldi	r18, 0x40	; 64
    4888:	3f e1       	ldi	r19, 0x1F	; 31
    488a:	40 e0       	ldi	r20, 0x00	; 0
    488c:	50 e0       	ldi	r21, 0x00	; 0
    488e:	bc 01       	movw	r22, r24
    4890:	cd 01       	movw	r24, r26
    4892:	0e 94 ff 28 	call	0x51fe	; 0x51fe <__udivmodsi4>
    4896:	da 01       	movw	r26, r20
    4898:	c9 01       	movw	r24, r18
    489a:	89 83       	std	Y+1, r24	; 0x01
    489c:	9a 83       	std	Y+2, r25	; 0x02
    489e:	ab 83       	std	Y+3, r26	; 0x03
    48a0:	bc 83       	std	Y+4, r27	; 0x04

  // (Set timer to clear when matching ctc_match_overflow) | (Set clock divisor to 8)
  TCCR1B |= (1 << WGM12) | (1 << CS11);
    48a2:	ae e4       	ldi	r26, 0x4E	; 78
    48a4:	b0 e0       	ldi	r27, 0x00	; 0
    48a6:	ee e4       	ldi	r30, 0x4E	; 78
    48a8:	f0 e0       	ldi	r31, 0x00	; 0
    48aa:	80 81       	ld	r24, Z
    48ac:	8a 60       	ori	r24, 0x0A	; 10
    48ae:	8c 93       	st	X, r24

  // high byte first, then low byte
  OCR1AH = (ctc_match_overflow >> 8);
    48b0:	eb e4       	ldi	r30, 0x4B	; 75
    48b2:	f0 e0       	ldi	r31, 0x00	; 0
    48b4:	89 81       	ldd	r24, Y+1	; 0x01
    48b6:	9a 81       	ldd	r25, Y+2	; 0x02
    48b8:	ab 81       	ldd	r26, Y+3	; 0x03
    48ba:	bc 81       	ldd	r27, Y+4	; 0x04
    48bc:	89 2f       	mov	r24, r25
    48be:	9a 2f       	mov	r25, r26
    48c0:	ab 2f       	mov	r26, r27
    48c2:	bb 27       	eor	r27, r27
    48c4:	80 83       	st	Z, r24
  OCR1AL = ctc_match_overflow;
    48c6:	ea e4       	ldi	r30, 0x4A	; 74
    48c8:	f0 e0       	ldi	r31, 0x00	; 0
    48ca:	89 81       	ldd	r24, Y+1	; 0x01
    48cc:	80 83       	st	Z, r24

  // Enable the compare match interrupt
  TIMSK |= (1 << OCIE1A);
    48ce:	a9 e5       	ldi	r26, 0x59	; 89
    48d0:	b0 e0       	ldi	r27, 0x00	; 0
    48d2:	e9 e5       	ldi	r30, 0x59	; 89
    48d4:	f0 e0       	ldi	r31, 0x00	; 0
    48d6:	80 81       	ld	r24, Z
    48d8:	80 61       	ori	r24, 0x10	; 16
    48da:	8c 93       	st	X, r24

  //REMEMBER TO ENABLE GLOBAL INTERRUPTS AFTER THIS WITH sei(); !!!
}
    48dc:	28 96       	adiw	r28, 0x08	; 8
    48de:	0f b6       	in	r0, 0x3f	; 63
    48e0:	f8 94       	cli
    48e2:	de bf       	out	0x3e, r29	; 62
    48e4:	0f be       	out	0x3f, r0	; 63
    48e6:	cd bf       	out	0x3d, r28	; 61
    48e8:	cf 91       	pop	r28
    48ea:	df 91       	pop	r29
    48ec:	08 95       	ret

000048ee <millis>:

unsigned long millis (void)
{
    48ee:	df 93       	push	r29
    48f0:	cf 93       	push	r28
    48f2:	00 d0       	rcall	.+0      	; 0x48f4 <millis+0x6>
    48f4:	00 d0       	rcall	.+0      	; 0x48f6 <millis+0x8>
    48f6:	00 d0       	rcall	.+0      	; 0x48f8 <millis+0xa>
    48f8:	cd b7       	in	r28, 0x3d	; 61
    48fa:	de b7       	in	r29, 0x3e	; 62
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    48fc:	1e 82       	std	Y+6, r1	; 0x06
    48fe:	0e 94 a6 24 	call	0x494c	; 0x494c <__iCliRetVal>
    4902:	89 83       	std	Y+1, r24	; 0x01
    4904:	0d c0       	rjmp	.+26     	; 0x4920 <millis+0x32>
    millis_return = timer1_millis;
    4906:	80 91 94 05 	lds	r24, 0x0594
    490a:	90 91 95 05 	lds	r25, 0x0595
    490e:	a0 91 96 05 	lds	r26, 0x0596
    4912:	b0 91 97 05 	lds	r27, 0x0597
    4916:	8a 83       	std	Y+2, r24	; 0x02
    4918:	9b 83       	std	Y+3, r25	; 0x03
    491a:	ac 83       	std	Y+4, r26	; 0x04
    491c:	bd 83       	std	Y+5, r27	; 0x05
unsigned long millis (void)
{
  unsigned long millis_return;

  // Ensure this cannot be disrupted
  ATOMIC_BLOCK(ATOMIC_FORCEON) {
    491e:	19 82       	std	Y+1, r1	; 0x01
    4920:	89 81       	ldd	r24, Y+1	; 0x01
    4922:	88 23       	and	r24, r24
    4924:	81 f7       	brne	.-32     	; 0x4906 <millis+0x18>
    4926:	ce 01       	movw	r24, r28
    4928:	06 96       	adiw	r24, 0x06	; 6
    492a:	0e 94 af 24 	call	0x495e	; 0x495e <__iSeiParam>
    millis_return = timer1_millis;
  }
  return millis_return;
    492e:	8a 81       	ldd	r24, Y+2	; 0x02
    4930:	9b 81       	ldd	r25, Y+3	; 0x03
    4932:	ac 81       	ldd	r26, Y+4	; 0x04
    4934:	bd 81       	ldd	r27, Y+5	; 0x05
}
    4936:	bc 01       	movw	r22, r24
    4938:	cd 01       	movw	r24, r26
    493a:	26 96       	adiw	r28, 0x06	; 6
    493c:	0f b6       	in	r0, 0x3f	; 63
    493e:	f8 94       	cli
    4940:	de bf       	out	0x3e, r29	; 62
    4942:	0f be       	out	0x3f, r0	; 63
    4944:	cd bf       	out	0x3d, r28	; 61
    4946:	cf 91       	pop	r28
    4948:	df 91       	pop	r29
    494a:	08 95       	ret

0000494c <__iCliRetVal>:
    sei();
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    494c:	df 93       	push	r29
    494e:	cf 93       	push	r28
    4950:	cd b7       	in	r28, 0x3d	; 61
    4952:	de b7       	in	r29, 0x3e	; 62
    cli();
    4954:	f8 94       	cli
    return 1;
    4956:	81 e0       	ldi	r24, 0x01	; 1
}
    4958:	cf 91       	pop	r28
    495a:	df 91       	pop	r29
    495c:	08 95       	ret

0000495e <__iSeiParam>:

static __inline__ void __iSeiParam(const uint8_t *__s)
{
    495e:	df 93       	push	r29
    4960:	cf 93       	push	r28
    4962:	00 d0       	rcall	.+0      	; 0x4964 <__iSeiParam+0x6>
    4964:	cd b7       	in	r28, 0x3d	; 61
    4966:	de b7       	in	r29, 0x3e	; 62
    4968:	9a 83       	std	Y+2, r25	; 0x02
    496a:	89 83       	std	Y+1, r24	; 0x01
    sei();
    496c:	78 94       	sei
    __asm__ volatile ("" ::: "memory");
    (void)__s;
}
    496e:	0f 90       	pop	r0
    4970:	0f 90       	pop	r0
    4972:	cf 91       	pop	r28
    4974:	df 91       	pop	r29
    4976:	08 95       	ret

00004978 <APP_SmartHome_void_UpdateSensorsHub>:
extern APP_SensorsHub_t SensorsHUB;



/*Sensors HUB*/
void APP_SmartHome_void_UpdateSensorsHub(){
    4978:	df 93       	push	r29
    497a:	cf 93       	push	r28
    497c:	cd b7       	in	r28, 0x3d	; 61
    497e:	de b7       	in	r29, 0x3e	; 62
	SensorsHUB.temperature = APP_SmartHome_u8_GetTemperature();
    4980:	0e 94 04 25 	call	0x4a08	; 0x4a08 <APP_SmartHome_u8_GetTemperature>
    4984:	80 93 98 05 	sts	0x0598, r24
	SensorsHUB.illumin = APP_SmartHome_u8_GetIntensityLevel();
    4988:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <APP_SmartHome_u8_GetIntensityLevel>
    498c:	80 93 99 05 	sts	0x0599, r24
	SensorsHUB.intensity = SensorsHUB.illumin;
    4990:	80 91 99 05 	lds	r24, 0x0599
    4994:	80 93 9b 05 	sts	0x059B, r24
	SensorsHUB.speed = APP_SmartHome_u8_GetFanSpeed();
    4998:	0e 94 11 25 	call	0x4a22	; 0x4a22 <APP_SmartHome_u8_GetFanSpeed>
    499c:	80 93 9a 05 	sts	0x059A, r24
}
    49a0:	cf 91       	pop	r28
    49a2:	df 91       	pop	r29
    49a4:	08 95       	ret

000049a6 <APP_SmartHome_void_LightIntensity_init>:

void APP_SmartHome_void_LightIntensity_init(){
    49a6:	df 93       	push	r29
    49a8:	cf 93       	push	r28
    49aa:	cd b7       	in	r28, 0x3d	; 61
    49ac:	de b7       	in	r29, 0x3e	; 62

	H_LDR_void_Init();
    49ae:	0e 94 43 1c 	call	0x3886	; 0x3886 <H_LDR_void_Init>

}
    49b2:	cf 91       	pop	r28
    49b4:	df 91       	pop	r29
    49b6:	08 95       	ret

000049b8 <APP_SmartHome_u8_GetIntensityLevel>:

u8 APP_SmartHome_u8_GetIntensityLevel(){
    49b8:	df 93       	push	r29
    49ba:	cf 93       	push	r28
    49bc:	00 d0       	rcall	.+0      	; 0x49be <APP_SmartHome_u8_GetIntensityLevel+0x6>
    49be:	0f 92       	push	r0
    49c0:	cd b7       	in	r28, 0x3d	; 61
    49c2:	de b7       	in	r29, 0x3e	; 62
	 u8 intensityLVL = 0;
    49c4:	1b 82       	std	Y+3, r1	; 0x03
	 u16 LDRreading = H_LDR_u16_Read();
    49c6:	0e 94 56 1c 	call	0x38ac	; 0x38ac <H_LDR_u16_Read>
    49ca:	9a 83       	std	Y+2, r25	; 0x02
    49cc:	89 83       	std	Y+1, r24	; 0x01
     /*intensityLVL =
    	((LDRreading - LDR_MIN_READING) / (LDR_MAX_READING - LDR_MIN_READING))*
		(LED_MAX_INTENSITY - LED_MIN_INTENSITY) + LED_MIN_INTENSITY;*/

	 //DOES SOME KIND OF MAPPING to ( 0 - 100 )
	 intensityLVL = LDRreading /(u16)50;
    49ce:	89 81       	ldd	r24, Y+1	; 0x01
    49d0:	9a 81       	ldd	r25, Y+2	; 0x02
    49d2:	22 e3       	ldi	r18, 0x32	; 50
    49d4:	30 e0       	ldi	r19, 0x00	; 0
    49d6:	b9 01       	movw	r22, r18
    49d8:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__udivmodhi4>
    49dc:	cb 01       	movw	r24, r22
    49de:	8b 83       	std	Y+3, r24	; 0x03
     return ((intensityLVL-100)*(-1));
    49e0:	94 e6       	ldi	r25, 0x64	; 100
    49e2:	8b 81       	ldd	r24, Y+3	; 0x03
    49e4:	29 2f       	mov	r18, r25
    49e6:	28 1b       	sub	r18, r24
    49e8:	82 2f       	mov	r24, r18
}
    49ea:	0f 90       	pop	r0
    49ec:	0f 90       	pop	r0
    49ee:	0f 90       	pop	r0
    49f0:	cf 91       	pop	r28
    49f2:	df 91       	pop	r29
    49f4:	08 95       	ret

000049f6 <APP_SmartHome_void_TemperatureSensor_init>:


//Temperature Sensor
void APP_SmartHome_void_TemperatureSensor_init(){
    49f6:	df 93       	push	r29
    49f8:	cf 93       	push	r28
    49fa:	cd b7       	in	r28, 0x3d	; 61
    49fc:	de b7       	in	r29, 0x3e	; 62

	H_LM35_void_Init();
    49fe:	0e 94 b4 19 	call	0x3368	; 0x3368 <H_LM35_void_Init>

}
    4a02:	cf 91       	pop	r28
    4a04:	df 91       	pop	r29
    4a06:	08 95       	ret

00004a08 <APP_SmartHome_u8_GetTemperature>:


u8 APP_SmartHome_u8_GetTemperature(){
    4a08:	df 93       	push	r29
    4a0a:	cf 93       	push	r28
    4a0c:	0f 92       	push	r0
    4a0e:	cd b7       	in	r28, 0x3d	; 61
    4a10:	de b7       	in	r29, 0x3e	; 62

	u8 result = H_LM35_u8_ReadTemprature();
    4a12:	0e 94 c7 19 	call	0x338e	; 0x338e <H_LM35_u8_ReadTemprature>
    4a16:	89 83       	std	Y+1, r24	; 0x01
	return result;
    4a18:	89 81       	ldd	r24, Y+1	; 0x01

}
    4a1a:	0f 90       	pop	r0
    4a1c:	cf 91       	pop	r28
    4a1e:	df 91       	pop	r29
    4a20:	08 95       	ret

00004a22 <APP_SmartHome_u8_GetFanSpeed>:

u8 APP_SmartHome_u8_GetFanSpeed(){
    4a22:	df 93       	push	r29
    4a24:	cf 93       	push	r28
    4a26:	00 d0       	rcall	.+0      	; 0x4a28 <APP_SmartHome_u8_GetFanSpeed+0x6>
    4a28:	0f 92       	push	r0
    4a2a:	cd b7       	in	r28, 0x3d	; 61
    4a2c:	de b7       	in	r29, 0x3e	; 62
	u8 factor;
	u8 speed;
	u8 temperature = H_LM35_u8_ReadTemprature();
    4a2e:	0e 94 c7 19 	call	0x338e	; 0x338e <H_LM35_u8_ReadTemprature>
    4a32:	89 83       	std	Y+1, r24	; 0x01
	if(temperature <= 30){
    4a34:	89 81       	ldd	r24, Y+1	; 0x01
    4a36:	8f 31       	cpi	r24, 0x1F	; 31
    4a38:	18 f4       	brcc	.+6      	; 0x4a40 <APP_SmartHome_u8_GetFanSpeed+0x1e>
		factor = 2;
    4a3a:	82 e0       	ldi	r24, 0x02	; 2
    4a3c:	8b 83       	std	Y+3, r24	; 0x03
    4a3e:	02 c0       	rjmp	.+4      	; 0x4a44 <APP_SmartHome_u8_GetFanSpeed+0x22>
	}else{
		factor = 3;
    4a40:	83 e0       	ldi	r24, 0x03	; 3
    4a42:	8b 83       	std	Y+3, r24	; 0x03
	}
	speed = temperature * factor;
    4a44:	99 81       	ldd	r25, Y+1	; 0x01
    4a46:	8b 81       	ldd	r24, Y+3	; 0x03
    4a48:	98 9f       	mul	r25, r24
    4a4a:	80 2d       	mov	r24, r0
    4a4c:	11 24       	eor	r1, r1
    4a4e:	8a 83       	std	Y+2, r24	; 0x02
	//saturating my speed to 100
	if(speed > 100){
    4a50:	8a 81       	ldd	r24, Y+2	; 0x02
    4a52:	85 36       	cpi	r24, 0x65	; 101
    4a54:	10 f0       	brcs	.+4      	; 0x4a5a <APP_SmartHome_u8_GetFanSpeed+0x38>
		speed = 100;
    4a56:	84 e6       	ldi	r24, 0x64	; 100
    4a58:	8a 83       	std	Y+2, r24	; 0x02
	}
	return speed;
    4a5a:	8a 81       	ldd	r24, Y+2	; 0x02

}
    4a5c:	0f 90       	pop	r0
    4a5e:	0f 90       	pop	r0
    4a60:	0f 90       	pop	r0
    4a62:	cf 91       	pop	r28
    4a64:	df 91       	pop	r29
    4a66:	08 95       	ret

00004a68 <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI>:

/* Functions that stands between TCP commands and sensors */
APP_COMMAND_ERROR_t APP_SmartHome_ERROR_t_LocalUpdateFromWIFI(APP_Command_t command){
    4a68:	0f 93       	push	r16
    4a6a:	1f 93       	push	r17
    4a6c:	df 93       	push	r29
    4a6e:	cf 93       	push	r28
    4a70:	cd b7       	in	r28, 0x3d	; 61
    4a72:	de b7       	in	r29, 0x3e	; 62
    4a74:	2c 97       	sbiw	r28, 0x0c	; 12
    4a76:	0f b6       	in	r0, 0x3f	; 63
    4a78:	f8 94       	cli
    4a7a:	de bf       	out	0x3e, r29	; 62
    4a7c:	0f be       	out	0x3f, r0	; 63
    4a7e:	cd bf       	out	0x3d, r28	; 61
    4a80:	0a 83       	std	Y+2, r16	; 0x02
    4a82:	1b 83       	std	Y+3, r17	; 0x03
    4a84:	2c 83       	std	Y+4, r18	; 0x04
    4a86:	3d 83       	std	Y+5, r19	; 0x05
    4a88:	4e 83       	std	Y+6, r20	; 0x06
    4a8a:	5f 83       	std	Y+7, r21	; 0x07
    4a8c:	68 87       	std	Y+8, r22	; 0x08
    4a8e:	79 87       	std	Y+9, r23	; 0x09
    4a90:	8a 87       	std	Y+10, r24	; 0x0a
    4a92:	9b 87       	std	Y+11, r25	; 0x0b

	u8 device_id ;

	if(strcmp(command.device_name,APP_LED) == 0 ){
    4a94:	ce 01       	movw	r24, r28
    4a96:	02 96       	adiw	r24, 0x02	; 2
    4a98:	29 e7       	ldi	r18, 0x79	; 121
    4a9a:	31 e0       	ldi	r19, 0x01	; 1
    4a9c:	b9 01       	movw	r22, r18
    4a9e:	0e 94 78 29 	call	0x52f0	; 0x52f0 <strcmp>
    4aa2:	00 97       	sbiw	r24, 0x00	; 0
    4aa4:	11 f4       	brne	.+4      	; 0x4aaa <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x42>

		device_id = LED_ID;
    4aa6:	19 82       	std	Y+1, r1	; 0x01
    4aa8:	0f c0       	rjmp	.+30     	; 0x4ac8 <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x60>
	}else if(strcmp(command.device_name, APP_FAN)){
    4aaa:	ce 01       	movw	r24, r28
    4aac:	02 96       	adiw	r24, 0x02	; 2
    4aae:	2d e7       	ldi	r18, 0x7D	; 125
    4ab0:	31 e0       	ldi	r19, 0x01	; 1
    4ab2:	b9 01       	movw	r22, r18
    4ab4:	0e 94 78 29 	call	0x52f0	; 0x52f0 <strcmp>
    4ab8:	00 97       	sbiw	r24, 0x00	; 0
    4aba:	19 f0       	breq	.+6      	; 0x4ac2 <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x5a>

				device_id = FAN_ID;
    4abc:	81 e0       	ldi	r24, 0x01	; 1
    4abe:	89 83       	std	Y+1, r24	; 0x01
    4ac0:	03 c0       	rjmp	.+6      	; 0x4ac8 <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x60>
	}else{
		return BAD_DEVICE_NAME;
    4ac2:	82 e0       	ldi	r24, 0x02	; 2
    4ac4:	8c 87       	std	Y+12, r24	; 0x0c
    4ac6:	91 c0       	rjmp	.+290    	; 0x4bea <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x182>
	}


	DEVICES_STATE_LIST[device_id].update_flag = 1;
    4ac8:	89 81       	ldd	r24, Y+1	; 0x01
    4aca:	88 2f       	mov	r24, r24
    4acc:	90 e0       	ldi	r25, 0x00	; 0
    4ace:	9c 01       	movw	r18, r24
    4ad0:	22 0f       	add	r18, r18
    4ad2:	33 1f       	adc	r19, r19
    4ad4:	c9 01       	movw	r24, r18
    4ad6:	88 0f       	add	r24, r24
    4ad8:	99 1f       	adc	r25, r25
    4ada:	88 0f       	add	r24, r24
    4adc:	99 1f       	adc	r25, r25
    4ade:	88 0f       	add	r24, r24
    4ae0:	99 1f       	adc	r25, r25
    4ae2:	82 1b       	sub	r24, r18
    4ae4:	93 0b       	sbc	r25, r19
    4ae6:	fc 01       	movw	r30, r24
    4ae8:	e7 50       	subi	r30, 0x07	; 7
    4aea:	fd 4f       	sbci	r31, 0xFD	; 253
    4aec:	81 e0       	ldi	r24, 0x01	; 1
    4aee:	80 83       	st	Z, r24

	if(strcmp(command.command_type, APP_AV_COMMAND) == 0){
    4af0:	ce 01       	movw	r24, r28
    4af2:	02 96       	adiw	r24, 0x02	; 2
    4af4:	04 96       	adiw	r24, 0x04	; 4
    4af6:	2c e8       	ldi	r18, 0x8C	; 140
    4af8:	31 e0       	ldi	r19, 0x01	; 1
    4afa:	b9 01       	movw	r22, r18
    4afc:	0e 94 78 29 	call	0x52f0	; 0x52f0 <strcmp>
    4b00:	00 97       	sbiw	r24, 0x00	; 0
    4b02:	e9 f4       	brne	.+58     	; 0x4b3e <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0xd6>
		strcpy(DEVICES_STATE_LIST[device_id].value, command.value);
    4b04:	89 81       	ldd	r24, Y+1	; 0x01
    4b06:	88 2f       	mov	r24, r24
    4b08:	90 e0       	ldi	r25, 0x00	; 0
    4b0a:	9c 01       	movw	r18, r24
    4b0c:	22 0f       	add	r18, r18
    4b0e:	33 1f       	adc	r19, r19
    4b10:	c9 01       	movw	r24, r18
    4b12:	88 0f       	add	r24, r24
    4b14:	99 1f       	adc	r25, r25
    4b16:	88 0f       	add	r24, r24
    4b18:	99 1f       	adc	r25, r25
    4b1a:	88 0f       	add	r24, r24
    4b1c:	99 1f       	adc	r25, r25
    4b1e:	82 1b       	sub	r24, r18
    4b20:	93 0b       	sbc	r25, r19
    4b22:	0a 96       	adiw	r24, 0x0a	; 10
    4b24:	ac 01       	movw	r20, r24
    4b26:	44 51       	subi	r20, 0x14	; 20
    4b28:	5d 4f       	sbci	r21, 0xFD	; 253
    4b2a:	ce 01       	movw	r24, r28
    4b2c:	02 96       	adiw	r24, 0x02	; 2
    4b2e:	9c 01       	movw	r18, r24
    4b30:	29 5f       	subi	r18, 0xF9	; 249
    4b32:	3f 4f       	sbci	r19, 0xFF	; 255
    4b34:	ca 01       	movw	r24, r20
    4b36:	b9 01       	movw	r22, r18
    4b38:	0e 94 81 29 	call	0x5302	; 0x5302 <strcpy>
    4b3c:	51 c0       	rjmp	.+162    	; 0x4be0 <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x178>
	}else if(strcmp(command.command_type, APP_DV_COMMAND) == 0){
    4b3e:	ce 01       	movw	r24, r28
    4b40:	02 96       	adiw	r24, 0x02	; 2
    4b42:	04 96       	adiw	r24, 0x04	; 4
    4b44:	2f e8       	ldi	r18, 0x8F	; 143
    4b46:	31 e0       	ldi	r19, 0x01	; 1
    4b48:	b9 01       	movw	r22, r18
    4b4a:	0e 94 78 29 	call	0x52f0	; 0x52f0 <strcmp>
    4b4e:	00 97       	sbiw	r24, 0x00	; 0
    4b50:	e9 f4       	brne	.+58     	; 0x4b8c <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x124>
		strcpy(DEVICES_STATE_LIST[device_id].device_state, command.value);
    4b52:	89 81       	ldd	r24, Y+1	; 0x01
    4b54:	88 2f       	mov	r24, r24
    4b56:	90 e0       	ldi	r25, 0x00	; 0
    4b58:	9c 01       	movw	r18, r24
    4b5a:	22 0f       	add	r18, r18
    4b5c:	33 1f       	adc	r19, r19
    4b5e:	c9 01       	movw	r24, r18
    4b60:	88 0f       	add	r24, r24
    4b62:	99 1f       	adc	r25, r25
    4b64:	88 0f       	add	r24, r24
    4b66:	99 1f       	adc	r25, r25
    4b68:	88 0f       	add	r24, r24
    4b6a:	99 1f       	adc	r25, r25
    4b6c:	82 1b       	sub	r24, r18
    4b6e:	93 0b       	sbc	r25, r19
    4b70:	06 96       	adiw	r24, 0x06	; 6
    4b72:	ac 01       	movw	r20, r24
    4b74:	44 51       	subi	r20, 0x14	; 20
    4b76:	5d 4f       	sbci	r21, 0xFD	; 253
    4b78:	ce 01       	movw	r24, r28
    4b7a:	02 96       	adiw	r24, 0x02	; 2
    4b7c:	9c 01       	movw	r18, r24
    4b7e:	29 5f       	subi	r18, 0xF9	; 249
    4b80:	3f 4f       	sbci	r19, 0xFF	; 255
    4b82:	ca 01       	movw	r24, r20
    4b84:	b9 01       	movw	r22, r18
    4b86:	0e 94 81 29 	call	0x5302	; 0x5302 <strcpy>
    4b8a:	2a c0       	rjmp	.+84     	; 0x4be0 <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x178>
	}else if(strcmp(command.command_type, APP_M_COMMAND) == 0){
    4b8c:	ce 01       	movw	r24, r28
    4b8e:	02 96       	adiw	r24, 0x02	; 2
    4b90:	04 96       	adiw	r24, 0x04	; 4
    4b92:	21 e8       	ldi	r18, 0x81	; 129
    4b94:	31 e0       	ldi	r19, 0x01	; 1
    4b96:	b9 01       	movw	r22, r18
    4b98:	0e 94 78 29 	call	0x52f0	; 0x52f0 <strcmp>
    4b9c:	00 97       	sbiw	r24, 0x00	; 0
    4b9e:	e9 f4       	brne	.+58     	; 0x4bda <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x172>
		strcpy(DEVICES_STATE_LIST[device_id].device_mode, command.value);
    4ba0:	89 81       	ldd	r24, Y+1	; 0x01
    4ba2:	88 2f       	mov	r24, r24
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	9c 01       	movw	r18, r24
    4ba8:	22 0f       	add	r18, r18
    4baa:	33 1f       	adc	r19, r19
    4bac:	c9 01       	movw	r24, r18
    4bae:	88 0f       	add	r24, r24
    4bb0:	99 1f       	adc	r25, r25
    4bb2:	88 0f       	add	r24, r24
    4bb4:	99 1f       	adc	r25, r25
    4bb6:	88 0f       	add	r24, r24
    4bb8:	99 1f       	adc	r25, r25
    4bba:	82 1b       	sub	r24, r18
    4bbc:	93 0b       	sbc	r25, r19
    4bbe:	04 96       	adiw	r24, 0x04	; 4
    4bc0:	ac 01       	movw	r20, r24
    4bc2:	44 51       	subi	r20, 0x14	; 20
    4bc4:	5d 4f       	sbci	r21, 0xFD	; 253
    4bc6:	ce 01       	movw	r24, r28
    4bc8:	02 96       	adiw	r24, 0x02	; 2
    4bca:	9c 01       	movw	r18, r24
    4bcc:	29 5f       	subi	r18, 0xF9	; 249
    4bce:	3f 4f       	sbci	r19, 0xFF	; 255
    4bd0:	ca 01       	movw	r24, r20
    4bd2:	b9 01       	movw	r22, r18
    4bd4:	0e 94 81 29 	call	0x5302	; 0x5302 <strcpy>
    4bd8:	03 c0       	rjmp	.+6      	; 0x4be0 <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x178>
	}else{
		return BAD_COMMAND_TYPE;
    4bda:	88 e0       	ldi	r24, 0x08	; 8
    4bdc:	8c 87       	std	Y+12, r24	; 0x0c
    4bde:	05 c0       	rjmp	.+10     	; 0x4bea <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI+0x182>
	}


	DEVICES_STATE_LIST[LED_ID].update_flag = 1;
    4be0:	81 e0       	ldi	r24, 0x01	; 1
    4be2:	80 93 f9 02 	sts	0x02F9, r24


	return SUCCEEDED;
    4be6:	8a e0       	ldi	r24, 0x0A	; 10
    4be8:	8c 87       	std	Y+12, r24	; 0x0c
    4bea:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    4bec:	2c 96       	adiw	r28, 0x0c	; 12
    4bee:	0f b6       	in	r0, 0x3f	; 63
    4bf0:	f8 94       	cli
    4bf2:	de bf       	out	0x3e, r29	; 62
    4bf4:	0f be       	out	0x3f, r0	; 63
    4bf6:	cd bf       	out	0x3d, r28	; 61
    4bf8:	cf 91       	pop	r28
    4bfa:	df 91       	pop	r29
    4bfc:	1f 91       	pop	r17
    4bfe:	0f 91       	pop	r16
    4c00:	08 95       	ret

00004c02 <APP_SmartHome_void_LocalUpdateFromSensorsHub>:

//BADLY-DESIGNED
void APP_SmartHome_void_LocalUpdateFromSensorsHub(){
    4c02:	df 93       	push	r29
    4c04:	cf 93       	push	r28
    4c06:	cd b7       	in	r28, 0x3d	; 61
    4c08:	de b7       	in	r29, 0x3e	; 62
    4c0a:	2e 97       	sbiw	r28, 0x0e	; 14
    4c0c:	0f b6       	in	r0, 0x3f	; 63
    4c0e:	f8 94       	cli
    4c10:	de bf       	out	0x3e, r29	; 62
    4c12:	0f be       	out	0x3f, r0	; 63
    4c14:	cd bf       	out	0x3d, r28	; 61

	APP_Command_t hubCommand;

	for(int loopVar = 0; loopVar < DEVICES_COUNT; loopVar++){
    4c16:	1a 82       	std	Y+2, r1	; 0x02
    4c18:	19 82       	std	Y+1, r1	; 0x01
    4c1a:	42 c0       	rjmp	.+132    	; 0x4ca0 <APP_SmartHome_void_LocalUpdateFromSensorsHub+0x9e>

		if(strcmp(DEVICES_STATE_LIST[loopVar].device_mode, APP_AUTO) == 0){
    4c1c:	89 81       	ldd	r24, Y+1	; 0x01
    4c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c20:	9c 01       	movw	r18, r24
    4c22:	22 0f       	add	r18, r18
    4c24:	33 1f       	adc	r19, r19
    4c26:	c9 01       	movw	r24, r18
    4c28:	88 0f       	add	r24, r24
    4c2a:	99 1f       	adc	r25, r25
    4c2c:	88 0f       	add	r24, r24
    4c2e:	99 1f       	adc	r25, r25
    4c30:	88 0f       	add	r24, r24
    4c32:	99 1f       	adc	r25, r25
    4c34:	82 1b       	sub	r24, r18
    4c36:	93 0b       	sbc	r25, r19
    4c38:	04 96       	adiw	r24, 0x04	; 4
    4c3a:	84 51       	subi	r24, 0x14	; 20
    4c3c:	9d 4f       	sbci	r25, 0xFD	; 253
    4c3e:	23 e8       	ldi	r18, 0x83	; 131
    4c40:	31 e0       	ldi	r19, 0x01	; 1
    4c42:	b9 01       	movw	r22, r18
    4c44:	0e 94 78 29 	call	0x52f0	; 0x52f0 <strcmp>
    4c48:	00 97       	sbiw	r24, 0x00	; 0
    4c4a:	29 f5       	brne	.+74     	; 0x4c96 <APP_SmartHome_void_LocalUpdateFromSensorsHub+0x94>
			switch(loopVar){
    4c4c:	89 81       	ldd	r24, Y+1	; 0x01
    4c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c50:	9e 87       	std	Y+14, r25	; 0x0e
    4c52:	8d 87       	std	Y+13, r24	; 0x0d
    4c54:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c56:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c58:	00 97       	sbiw	r24, 0x00	; 0
    4c5a:	31 f0       	breq	.+12     	; 0x4c68 <APP_SmartHome_void_LocalUpdateFromSensorsHub+0x66>
    4c5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    4c5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4c60:	81 30       	cpi	r24, 0x01	; 1
    4c62:	91 05       	cpc	r25, r1
    4c64:	69 f0       	breq	.+26     	; 0x4c80 <APP_SmartHome_void_LocalUpdateFromSensorsHub+0x7e>
    4c66:	17 c0       	rjmp	.+46     	; 0x4c96 <APP_SmartHome_void_LocalUpdateFromSensorsHub+0x94>
			case LED_ID:
				itoa(SensorsHUB.intensity,DEVICES_STATE_LIST[LED_ID].value,10);
    4c68:	80 91 9b 05 	lds	r24, 0x059B
    4c6c:	88 2f       	mov	r24, r24
    4c6e:	90 e0       	ldi	r25, 0x00	; 0
    4c70:	26 ef       	ldi	r18, 0xF6	; 246
    4c72:	32 e0       	ldi	r19, 0x02	; 2
    4c74:	b9 01       	movw	r22, r18
    4c76:	4a e0       	ldi	r20, 0x0A	; 10
    4c78:	50 e0       	ldi	r21, 0x00	; 0
    4c7a:	0e 94 c9 29 	call	0x5392	; 0x5392 <itoa>
    4c7e:	0b c0       	rjmp	.+22     	; 0x4c96 <APP_SmartHome_void_LocalUpdateFromSensorsHub+0x94>
				break;
			case FAN_ID:
				itoa(SensorsHUB.speed,DEVICES_STATE_LIST[FAN_ID].value,10);
    4c80:	80 91 9a 05 	lds	r24, 0x059A
    4c84:	88 2f       	mov	r24, r24
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	24 e0       	ldi	r18, 0x04	; 4
    4c8a:	33 e0       	ldi	r19, 0x03	; 3
    4c8c:	b9 01       	movw	r22, r18
    4c8e:	4a e0       	ldi	r20, 0x0A	; 10
    4c90:	50 e0       	ldi	r21, 0x00	; 0
    4c92:	0e 94 c9 29 	call	0x5392	; 0x5392 <itoa>
//BADLY-DESIGNED
void APP_SmartHome_void_LocalUpdateFromSensorsHub(){

	APP_Command_t hubCommand;

	for(int loopVar = 0; loopVar < DEVICES_COUNT; loopVar++){
    4c96:	89 81       	ldd	r24, Y+1	; 0x01
    4c98:	9a 81       	ldd	r25, Y+2	; 0x02
    4c9a:	01 96       	adiw	r24, 0x01	; 1
    4c9c:	9a 83       	std	Y+2, r25	; 0x02
    4c9e:	89 83       	std	Y+1, r24	; 0x01
    4ca0:	89 81       	ldd	r24, Y+1	; 0x01
    4ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    4ca4:	82 30       	cpi	r24, 0x02	; 2
    4ca6:	91 05       	cpc	r25, r1
    4ca8:	0c f4       	brge	.+2      	; 0x4cac <APP_SmartHome_void_LocalUpdateFromSensorsHub+0xaa>
    4caa:	b8 cf       	rjmp	.-144    	; 0x4c1c <APP_SmartHome_void_LocalUpdateFromSensorsHub+0x1a>
				itoa(SensorsHUB.speed,DEVICES_STATE_LIST[FAN_ID].value,10);
				break;
			}
		}
	}
}
    4cac:	2e 96       	adiw	r28, 0x0e	; 14
    4cae:	0f b6       	in	r0, 0x3f	; 63
    4cb0:	f8 94       	cli
    4cb2:	de bf       	out	0x3e, r29	; 62
    4cb4:	0f be       	out	0x3f, r0	; 63
    4cb6:	cd bf       	out	0x3d, r28	; 61
    4cb8:	cf 91       	pop	r28
    4cba:	df 91       	pop	r29
    4cbc:	08 95       	ret

00004cbe <APP_SmartHome_void_ApplianceUpdate>:

void APP_SmartHome_void_ApplianceUpdate(){
    4cbe:	df 93       	push	r29
    4cc0:	cf 93       	push	r28
    4cc2:	cd b7       	in	r28, 0x3d	; 61
    4cc4:	de b7       	in	r29, 0x3e	; 62
	if(strcmp(DEVICES_STATE_LIST[0].device_state,APP_STATE_ON) == 0){
    4cc6:	82 ef       	ldi	r24, 0xF2	; 242
    4cc8:	92 e0       	ldi	r25, 0x02	; 2
    4cca:	25 e8       	ldi	r18, 0x85	; 133
    4ccc:	31 e0       	ldi	r19, 0x01	; 1
    4cce:	b9 01       	movw	r22, r18
    4cd0:	0e 94 78 29 	call	0x52f0	; 0x52f0 <strcmp>
    4cd4:	00 97       	sbiw	r24, 0x00	; 0
    4cd6:	21 f4       	brne	.+8      	; 0x4ce0 <APP_SmartHome_void_ApplianceUpdate+0x22>
		H_LED_voidTurnOn(LED_RED);
    4cd8:	80 e0       	ldi	r24, 0x00	; 0
    4cda:	0e 94 8a 1b 	call	0x3714	; 0x3714 <H_LED_voidTurnOn>
    4cde:	0c c0       	rjmp	.+24     	; 0x4cf8 <APP_SmartHome_void_ApplianceUpdate+0x3a>
	}else if(strcmp(DEVICES_STATE_LIST[0].device_state,APP_STATE_OFF) == 0){
    4ce0:	82 ef       	ldi	r24, 0xF2	; 242
    4ce2:	92 e0       	ldi	r25, 0x02	; 2
    4ce4:	28 e8       	ldi	r18, 0x88	; 136
    4ce6:	31 e0       	ldi	r19, 0x01	; 1
    4ce8:	b9 01       	movw	r22, r18
    4cea:	0e 94 78 29 	call	0x52f0	; 0x52f0 <strcmp>
    4cee:	00 97       	sbiw	r24, 0x00	; 0
    4cf0:	19 f4       	brne	.+6      	; 0x4cf8 <APP_SmartHome_void_ApplianceUpdate+0x3a>
		H_LED_voidTurnOff(LED_RED);
    4cf2:	80 e0       	ldi	r24, 0x00	; 0
    4cf4:	0e 94 c9 1b 	call	0x3792	; 0x3792 <H_LED_voidTurnOff>
	}
}
    4cf8:	cf 91       	pop	r28
    4cfa:	df 91       	pop	r29
    4cfc:	08 95       	ret

00004cfe <APP_SmartHome_ERROR_t_GetCommand>:

APP_COMMAND_ERROR_t APP_SmartHome_ERROR_t_GetCommand(u8* msgArray, APP_Command_t* command){
    4cfe:	df 93       	push	r29
    4d00:	cf 93       	push	r28
    4d02:	cd b7       	in	r28, 0x3d	; 61
    4d04:	de b7       	in	r29, 0x3e	; 62
    4d06:	2b 97       	sbiw	r28, 0x0b	; 11
    4d08:	0f b6       	in	r0, 0x3f	; 63
    4d0a:	f8 94       	cli
    4d0c:	de bf       	out	0x3e, r29	; 62
    4d0e:	0f be       	out	0x3f, r0	; 63
    4d10:	cd bf       	out	0x3d, r28	; 61
    4d12:	99 87       	std	Y+9, r25	; 0x09
    4d14:	88 87       	std	Y+8, r24	; 0x08
    4d16:	7b 87       	std	Y+11, r23	; 0x0b
    4d18:	6a 87       	std	Y+10, r22	; 0x0a

	APP_COMMAND_ERROR_t error_status = SUCCEEDED;
    4d1a:	8a e0       	ldi	r24, 0x0A	; 10
    4d1c:	8f 83       	std	Y+7, r24	; 0x07
	char *token;

	//search the message Header
	msgArray = strstr(msgArray,COMMAND_HEADER);
    4d1e:	88 85       	ldd	r24, Y+8	; 0x08
    4d20:	99 85       	ldd	r25, Y+9	; 0x09
    4d22:	22 e9       	ldi	r18, 0x92	; 146
    4d24:	31 e0       	ldi	r19, 0x01	; 1
    4d26:	b9 01       	movw	r22, r18
    4d28:	0e 94 88 29 	call	0x5310	; 0x5310 <strstr>
    4d2c:	99 87       	std	Y+9, r25	; 0x09
    4d2e:	88 87       	std	Y+8, r24	; 0x08

	/* get the first token */
	token = strtok(msgArray, TOKEN_DELIMETER);
    4d30:	88 85       	ldd	r24, Y+8	; 0x08
    4d32:	99 85       	ldd	r25, Y+9	; 0x09
    4d34:	27 e9       	ldi	r18, 0x97	; 151
    4d36:	31 e0       	ldi	r19, 0x01	; 1
    4d38:	b9 01       	movw	r22, r18
    4d3a:	0e 94 73 29 	call	0x52e6	; 0x52e6 <strtok>
    4d3e:	9e 83       	std	Y+6, r25	; 0x06
    4d40:	8d 83       	std	Y+5, r24	; 0x05

	if(token != 0){
    4d42:	8d 81       	ldd	r24, Y+5	; 0x05
    4d44:	9e 81       	ldd	r25, Y+6	; 0x06
    4d46:	00 97       	sbiw	r24, 0x00	; 0
    4d48:	09 f4       	brne	.+2      	; 0x4d4c <APP_SmartHome_ERROR_t_GetCommand+0x4e>
    4d4a:	9a c0       	rjmp	.+308    	; 0x4e80 <APP_SmartHome_ERROR_t_GetCommand+0x182>

	/* walk through other tokens */
		if(strcmp(token,COMMAND_HEADER) == 0){
    4d4c:	8d 81       	ldd	r24, Y+5	; 0x05
    4d4e:	9e 81       	ldd	r25, Y+6	; 0x06
    4d50:	22 e9       	ldi	r18, 0x92	; 146
    4d52:	31 e0       	ldi	r19, 0x01	; 1
    4d54:	b9 01       	movw	r22, r18
    4d56:	0e 94 78 29 	call	0x52f0	; 0x52f0 <strcmp>
    4d5a:	00 97       	sbiw	r24, 0x00	; 0
    4d5c:	09 f0       	breq	.+2      	; 0x4d60 <APP_SmartHome_ERROR_t_GetCommand+0x62>
    4d5e:	8e c0       	rjmp	.+284    	; 0x4e7c <APP_SmartHome_ERROR_t_GetCommand+0x17e>
			//it's Correct Header
			//Get next token [Device Name]
			token = strtok(0, TOKEN_DELIMETER);
    4d60:	27 e9       	ldi	r18, 0x97	; 151
    4d62:	31 e0       	ldi	r19, 0x01	; 1
    4d64:	80 e0       	ldi	r24, 0x00	; 0
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	b9 01       	movw	r22, r18
    4d6a:	0e 94 73 29 	call	0x52e6	; 0x52e6 <strtok>
    4d6e:	9e 83       	std	Y+6, r25	; 0x06
    4d70:	8d 83       	std	Y+5, r24	; 0x05

			if(token != 0){
    4d72:	8d 81       	ldd	r24, Y+5	; 0x05
    4d74:	9e 81       	ldd	r25, Y+6	; 0x06
    4d76:	00 97       	sbiw	r24, 0x00	; 0
    4d78:	51 f1       	breq	.+84     	; 0x4dce <APP_SmartHome_ERROR_t_GetCommand+0xd0>
				//check if any device name exists
				for(int loopVar = 0; loopVar < DEVICES_COUNT; loopVar++){
    4d7a:	1c 82       	std	Y+4, r1	; 0x04
    4d7c:	1b 82       	std	Y+3, r1	; 0x03
    4d7e:	21 c0       	rjmp	.+66     	; 0x4dc2 <APP_SmartHome_ERROR_t_GetCommand+0xc4>
					error_status = BAD_DEVICE_NAME;
    4d80:	82 e0       	ldi	r24, 0x02	; 2
    4d82:	8f 83       	std	Y+7, r24	; 0x07
					if(strcmp(token,devices_names[loopVar]) == 0){
    4d84:	8b 81       	ldd	r24, Y+3	; 0x03
    4d86:	9c 81       	ldd	r25, Y+4	; 0x04
    4d88:	88 0f       	add	r24, r24
    4d8a:	99 1f       	adc	r25, r25
    4d8c:	fc 01       	movw	r30, r24
    4d8e:	e5 5d       	subi	r30, 0xD5	; 213
    4d90:	fc 4f       	sbci	r31, 0xFC	; 252
    4d92:	20 81       	ld	r18, Z
    4d94:	31 81       	ldd	r19, Z+1	; 0x01
    4d96:	8d 81       	ldd	r24, Y+5	; 0x05
    4d98:	9e 81       	ldd	r25, Y+6	; 0x06
    4d9a:	b9 01       	movw	r22, r18
    4d9c:	0e 94 78 29 	call	0x52f0	; 0x52f0 <strcmp>
    4da0:	00 97       	sbiw	r24, 0x00	; 0
    4da2:	51 f4       	brne	.+20     	; 0x4db8 <APP_SmartHome_ERROR_t_GetCommand+0xba>
						//there's correct Device Name
						strcpy(command->device_name, token);
    4da4:	8a 85       	ldd	r24, Y+10	; 0x0a
    4da6:	9b 85       	ldd	r25, Y+11	; 0x0b
    4da8:	2d 81       	ldd	r18, Y+5	; 0x05
    4daa:	3e 81       	ldd	r19, Y+6	; 0x06
    4dac:	b9 01       	movw	r22, r18
    4dae:	0e 94 81 29 	call	0x5302	; 0x5302 <strcpy>
						error_status = SUCCEEDED;
    4db2:	8a e0       	ldi	r24, 0x0A	; 10
    4db4:	8f 83       	std	Y+7, r24	; 0x07
    4db6:	0d c0       	rjmp	.+26     	; 0x4dd2 <APP_SmartHome_ERROR_t_GetCommand+0xd4>
			//Get next token [Device Name]
			token = strtok(0, TOKEN_DELIMETER);

			if(token != 0){
				//check if any device name exists
				for(int loopVar = 0; loopVar < DEVICES_COUNT; loopVar++){
    4db8:	8b 81       	ldd	r24, Y+3	; 0x03
    4dba:	9c 81       	ldd	r25, Y+4	; 0x04
    4dbc:	01 96       	adiw	r24, 0x01	; 1
    4dbe:	9c 83       	std	Y+4, r25	; 0x04
    4dc0:	8b 83       	std	Y+3, r24	; 0x03
    4dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    4dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    4dc6:	82 30       	cpi	r24, 0x02	; 2
    4dc8:	91 05       	cpc	r25, r1
    4dca:	d4 f2       	brlt	.-76     	; 0x4d80 <APP_SmartHome_ERROR_t_GetCommand+0x82>
    4dcc:	02 c0       	rjmp	.+4      	; 0x4dd2 <APP_SmartHome_ERROR_t_GetCommand+0xd4>
						error_status = SUCCEEDED;
						break;
					}
				}
			}else{
				error_status = NON_EXISTING_DEVICE_NAME;
    4dce:	83 e0       	ldi	r24, 0x03	; 3
    4dd0:	8f 83       	std	Y+7, r24	; 0x07
			}

			//Get next token [Command Type]
			token = strtok(0, TOKEN_DELIMETER);
    4dd2:	27 e9       	ldi	r18, 0x97	; 151
    4dd4:	31 e0       	ldi	r19, 0x01	; 1
    4dd6:	80 e0       	ldi	r24, 0x00	; 0
    4dd8:	90 e0       	ldi	r25, 0x00	; 0
    4dda:	b9 01       	movw	r22, r18
    4ddc:	0e 94 73 29 	call	0x52e6	; 0x52e6 <strtok>
    4de0:	9e 83       	std	Y+6, r25	; 0x06
    4de2:	8d 83       	std	Y+5, r24	; 0x05
			if(token != 0){
    4de4:	8d 81       	ldd	r24, Y+5	; 0x05
    4de6:	9e 81       	ldd	r25, Y+6	; 0x06
    4de8:	00 97       	sbiw	r24, 0x00	; 0
    4dea:	59 f1       	breq	.+86     	; 0x4e42 <APP_SmartHome_ERROR_t_GetCommand+0x144>
				//check if any Modes exists
				for(int loopVar = 0; loopVar < DEVICES_COMMANDS_COUNT; loopVar++){
    4dec:	1a 82       	std	Y+2, r1	; 0x02
    4dee:	19 82       	std	Y+1, r1	; 0x01
    4df0:	22 c0       	rjmp	.+68     	; 0x4e36 <APP_SmartHome_ERROR_t_GetCommand+0x138>
					error_status = BAD_COMMAND_TYPE;
    4df2:	88 e0       	ldi	r24, 0x08	; 8
    4df4:	8f 83       	std	Y+7, r24	; 0x07
					if(strcmp(token,devices_commands[loopVar]) == 0){
    4df6:	89 81       	ldd	r24, Y+1	; 0x01
    4df8:	9a 81       	ldd	r25, Y+2	; 0x02
    4dfa:	88 0f       	add	r24, r24
    4dfc:	99 1f       	adc	r25, r25
    4dfe:	fc 01       	movw	r30, r24
    4e00:	e9 5c       	subi	r30, 0xC9	; 201
    4e02:	fc 4f       	sbci	r31, 0xFC	; 252
    4e04:	20 81       	ld	r18, Z
    4e06:	31 81       	ldd	r19, Z+1	; 0x01
    4e08:	8d 81       	ldd	r24, Y+5	; 0x05
    4e0a:	9e 81       	ldd	r25, Y+6	; 0x06
    4e0c:	b9 01       	movw	r22, r18
    4e0e:	0e 94 78 29 	call	0x52f0	; 0x52f0 <strcmp>
    4e12:	00 97       	sbiw	r24, 0x00	; 0
    4e14:	59 f4       	brne	.+22     	; 0x4e2c <APP_SmartHome_ERROR_t_GetCommand+0x12e>
						//there's correct Mode
						strcpy(command->command_type, token);
    4e16:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e18:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e1a:	04 96       	adiw	r24, 0x04	; 4
    4e1c:	2d 81       	ldd	r18, Y+5	; 0x05
    4e1e:	3e 81       	ldd	r19, Y+6	; 0x06
    4e20:	b9 01       	movw	r22, r18
    4e22:	0e 94 81 29 	call	0x5302	; 0x5302 <strcpy>
						error_status = SUCCEEDED;
    4e26:	8a e0       	ldi	r24, 0x0A	; 10
    4e28:	8f 83       	std	Y+7, r24	; 0x07
    4e2a:	0d c0       	rjmp	.+26     	; 0x4e46 <APP_SmartHome_ERROR_t_GetCommand+0x148>

			//Get next token [Command Type]
			token = strtok(0, TOKEN_DELIMETER);
			if(token != 0){
				//check if any Modes exists
				for(int loopVar = 0; loopVar < DEVICES_COMMANDS_COUNT; loopVar++){
    4e2c:	89 81       	ldd	r24, Y+1	; 0x01
    4e2e:	9a 81       	ldd	r25, Y+2	; 0x02
    4e30:	01 96       	adiw	r24, 0x01	; 1
    4e32:	9a 83       	std	Y+2, r25	; 0x02
    4e34:	89 83       	std	Y+1, r24	; 0x01
    4e36:	89 81       	ldd	r24, Y+1	; 0x01
    4e38:	9a 81       	ldd	r25, Y+2	; 0x02
    4e3a:	83 30       	cpi	r24, 0x03	; 3
    4e3c:	91 05       	cpc	r25, r1
    4e3e:	cc f2       	brlt	.-78     	; 0x4df2 <APP_SmartHome_ERROR_t_GetCommand+0xf4>
    4e40:	02 c0       	rjmp	.+4      	; 0x4e46 <APP_SmartHome_ERROR_t_GetCommand+0x148>
						error_status = SUCCEEDED;
						break;
					}
				}
			}else{
				error_status = NON_EXISTING_COMMAND_TYPE;
    4e42:	89 e0       	ldi	r24, 0x09	; 9
    4e44:	8f 83       	std	Y+7, r24	; 0x07
			}

			//Get next token [value]
			token = strtok(0, TOKEN_DELIMETER);
    4e46:	27 e9       	ldi	r18, 0x97	; 151
    4e48:	31 e0       	ldi	r19, 0x01	; 1
    4e4a:	80 e0       	ldi	r24, 0x00	; 0
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	b9 01       	movw	r22, r18
    4e50:	0e 94 73 29 	call	0x52e6	; 0x52e6 <strtok>
    4e54:	9e 83       	std	Y+6, r25	; 0x06
    4e56:	8d 83       	std	Y+5, r24	; 0x05
			if(token != 0){
    4e58:	8d 81       	ldd	r24, Y+5	; 0x05
    4e5a:	9e 81       	ldd	r25, Y+6	; 0x06
    4e5c:	00 97       	sbiw	r24, 0x00	; 0
    4e5e:	59 f0       	breq	.+22     	; 0x4e76 <APP_SmartHome_ERROR_t_GetCommand+0x178>
				//There's a value exits
				strcpy(command->value, token);
    4e60:	8a 85       	ldd	r24, Y+10	; 0x0a
    4e62:	9b 85       	ldd	r25, Y+11	; 0x0b
    4e64:	07 96       	adiw	r24, 0x07	; 7
    4e66:	2d 81       	ldd	r18, Y+5	; 0x05
    4e68:	3e 81       	ldd	r19, Y+6	; 0x06
    4e6a:	b9 01       	movw	r22, r18
    4e6c:	0e 94 81 29 	call	0x5302	; 0x5302 <strcpy>
				error_status = SUCCEEDED;
    4e70:	8a e0       	ldi	r24, 0x0A	; 10
    4e72:	8f 83       	std	Y+7, r24	; 0x07
    4e74:	07 c0       	rjmp	.+14     	; 0x4e84 <APP_SmartHome_ERROR_t_GetCommand+0x186>
			}else{
				error_status = NON_EXISTING_VALUE;
    4e76:	87 e0       	ldi	r24, 0x07	; 7
    4e78:	8f 83       	std	Y+7, r24	; 0x07
    4e7a:	04 c0       	rjmp	.+8      	; 0x4e84 <APP_SmartHome_ERROR_t_GetCommand+0x186>
			}

		}else{
			error_status =  BAD_HEADER;
    4e7c:	1f 82       	std	Y+7, r1	; 0x07
    4e7e:	02 c0       	rjmp	.+4      	; 0x4e84 <APP_SmartHome_ERROR_t_GetCommand+0x186>
		}

	}else{
		error_status =  NON_EXISTING_HEADER;
    4e80:	81 e0       	ldi	r24, 0x01	; 1
    4e82:	8f 83       	std	Y+7, r24	; 0x07
	}

	return error_status;
    4e84:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4e86:	2b 96       	adiw	r28, 0x0b	; 11
    4e88:	0f b6       	in	r0, 0x3f	; 63
    4e8a:	f8 94       	cli
    4e8c:	de bf       	out	0x3e, r29	; 62
    4e8e:	0f be       	out	0x3f, r0	; 63
    4e90:	cd bf       	out	0x3d, r28	; 61
    4e92:	cf 91       	pop	r28
    4e94:	df 91       	pop	r29
    4e96:	08 95       	ret

00004e98 <APP_void_StartWIFIserver>:


void APP_void_StartWIFIserver(void)
{
    4e98:	df 93       	push	r29
    4e9a:	cf 93       	push	r28
    4e9c:	cd b7       	in	r28, 0x3d	; 61
    4e9e:	de b7       	in	r29, 0x3e	; 62
	H_WIFI_void_WIFIInit( WIFI_Config );
    4ea0:	20 91 24 03 	lds	r18, 0x0324
    4ea4:	30 91 25 03 	lds	r19, 0x0325
    4ea8:	40 91 26 03 	lds	r20, 0x0326
    4eac:	50 91 27 03 	lds	r21, 0x0327
    4eb0:	60 91 28 03 	lds	r22, 0x0328
    4eb4:	70 91 29 03 	lds	r23, 0x0329
    4eb8:	80 91 2a 03 	lds	r24, 0x032A
    4ebc:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <H_WIFI_void_WIFIInit>
	H_WIFI_void_StartTCPServer();
    4ec0:	0e 94 88 17 	call	0x2f10	; 0x2f10 <H_WIFI_void_StartTCPServer>
}
    4ec4:	cf 91       	pop	r28
    4ec6:	df 91       	pop	r29
    4ec8:	08 95       	ret

00004eca <APP_UpdateStatus_t_WIFIUpdate>:


APP_WIFI_UpdateStatus_t APP_UpdateStatus_t_WIFIUpdate(char *recevBuffer)
{
    4eca:	df 93       	push	r29
    4ecc:	cf 93       	push	r28
    4ece:	00 d0       	rcall	.+0      	; 0x4ed0 <APP_UpdateStatus_t_WIFIUpdate+0x6>
    4ed0:	0f 92       	push	r0
    4ed2:	cd b7       	in	r28, 0x3d	; 61
    4ed4:	de b7       	in	r29, 0x3e	; 62
    4ed6:	9a 83       	std	Y+2, r25	; 0x02
    4ed8:	89 83       	std	Y+1, r24	; 0x01
if(H_WIFI_ReceiveStatue_t_WIFIreceive(recevBuffer) == WIFI_Data_Receved)
    4eda:	89 81       	ldd	r24, Y+1	; 0x01
    4edc:	9a 81       	ldd	r25, Y+2	; 0x02
    4ede:	0e 94 99 19 	call	0x3332	; 0x3332 <H_WIFI_ReceiveStatue_t_WIFIreceive>
    4ee2:	88 23       	and	r24, r24
    4ee4:	11 f4       	brne	.+4      	; 0x4eea <APP_UpdateStatus_t_WIFIUpdate+0x20>
{
	return APP_WIFI_Updated;
    4ee6:	1b 82       	std	Y+3, r1	; 0x03
    4ee8:	02 c0       	rjmp	.+4      	; 0x4eee <APP_UpdateStatus_t_WIFIUpdate+0x24>
}
return APP_WIFI_NO_Update;
    4eea:	81 e0       	ldi	r24, 0x01	; 1
    4eec:	8b 83       	std	Y+3, r24	; 0x03
    4eee:	8b 81       	ldd	r24, Y+3	; 0x03

}
    4ef0:	0f 90       	pop	r0
    4ef2:	0f 90       	pop	r0
    4ef4:	0f 90       	pop	r0
    4ef6:	cf 91       	pop	r28
    4ef8:	df 91       	pop	r29
    4efa:	08 95       	ret

00004efc <main>:

extern const Port_Configtype Port_ConfigArr[PORT_PINS_CONFIG_ARR_SIZE];


char buff[100];
int main() {
    4efc:	0f 93       	push	r16
    4efe:	1f 93       	push	r17
    4f00:	df 93       	push	r29
    4f02:	cf 93       	push	r28
    4f04:	cd b7       	in	r28, 0x3d	; 61
    4f06:	de b7       	in	r29, 0x3e	; 62
    4f08:	a6 97       	sbiw	r28, 0x26	; 38
    4f0a:	0f b6       	in	r0, 0x3f	; 63
    4f0c:	f8 94       	cli
    4f0e:	de bf       	out	0x3e, r29	; 62
    4f10:	0f be       	out	0x3f, r0	; 63
    4f12:	cd bf       	out	0x3d, r28	; 61

	/*vars*/
	APP_Command_t mCMD;

	M_PORT_voidInit(Port_ConfigArr);
    4f14:	8d e3       	ldi	r24, 0x3D	; 61
    4f16:	93 e0       	ldi	r25, 0x03	; 3
    4f18:	0e 94 ed 0c 	call	0x19da	; 0x19da <M_PORT_voidInit>
	H_LCD_void_Int();
    4f1c:	0e 94 12 21 	call	0x4224	; 0x4224 <H_LCD_void_Int>

	H_LCD_void_sendString("test");
    4f20:	89 e9       	ldi	r24, 0x99	; 153
    4f22:	91 e0       	ldi	r25, 0x01	; 1
    4f24:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>

	__asm__ __volatile__ ("sei" ::);
    4f28:	78 94       	sei

	APP_void_StartWIFIserver();
    4f2a:	0e 94 4c 27 	call	0x4e98	; 0x4e98 <APP_void_StartWIFIserver>
    4f2e:	80 e0       	ldi	r24, 0x00	; 0
    4f30:	90 e0       	ldi	r25, 0x00	; 0
    4f32:	aa ef       	ldi	r26, 0xFA	; 250
    4f34:	b4 e4       	ldi	r27, 0x44	; 68
    4f36:	89 8f       	std	Y+25, r24	; 0x19
    4f38:	9a 8f       	std	Y+26, r25	; 0x1a
    4f3a:	ab 8f       	std	Y+27, r26	; 0x1b
    4f3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f3e:	69 8d       	ldd	r22, Y+25	; 0x19
    4f40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4f46:	20 e0       	ldi	r18, 0x00	; 0
    4f48:	30 e0       	ldi	r19, 0x00	; 0
    4f4a:	4a e7       	ldi	r20, 0x7A	; 122
    4f4c:	55 e4       	ldi	r21, 0x45	; 69
    4f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f52:	dc 01       	movw	r26, r24
    4f54:	cb 01       	movw	r24, r22
    4f56:	8d 8b       	std	Y+21, r24	; 0x15
    4f58:	9e 8b       	std	Y+22, r25	; 0x16
    4f5a:	af 8b       	std	Y+23, r26	; 0x17
    4f5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4f5e:	6d 89       	ldd	r22, Y+21	; 0x15
    4f60:	7e 89       	ldd	r23, Y+22	; 0x16
    4f62:	8f 89       	ldd	r24, Y+23	; 0x17
    4f64:	98 8d       	ldd	r25, Y+24	; 0x18
    4f66:	20 e0       	ldi	r18, 0x00	; 0
    4f68:	30 e0       	ldi	r19, 0x00	; 0
    4f6a:	40 e8       	ldi	r20, 0x80	; 128
    4f6c:	5f e3       	ldi	r21, 0x3F	; 63
    4f6e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    4f72:	88 23       	and	r24, r24
    4f74:	2c f4       	brge	.+10     	; 0x4f80 <main+0x84>
		__ticks = 1;
    4f76:	81 e0       	ldi	r24, 0x01	; 1
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	9c 8b       	std	Y+20, r25	; 0x14
    4f7c:	8b 8b       	std	Y+19, r24	; 0x13
    4f7e:	3f c0       	rjmp	.+126    	; 0x4ffe <main+0x102>
	else if (__tmp > 65535)
    4f80:	6d 89       	ldd	r22, Y+21	; 0x15
    4f82:	7e 89       	ldd	r23, Y+22	; 0x16
    4f84:	8f 89       	ldd	r24, Y+23	; 0x17
    4f86:	98 8d       	ldd	r25, Y+24	; 0x18
    4f88:	20 e0       	ldi	r18, 0x00	; 0
    4f8a:	3f ef       	ldi	r19, 0xFF	; 255
    4f8c:	4f e7       	ldi	r20, 0x7F	; 127
    4f8e:	57 e4       	ldi	r21, 0x47	; 71
    4f90:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    4f94:	18 16       	cp	r1, r24
    4f96:	4c f5       	brge	.+82     	; 0x4fea <main+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f98:	69 8d       	ldd	r22, Y+25	; 0x19
    4f9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4f9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4f9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fa0:	20 e0       	ldi	r18, 0x00	; 0
    4fa2:	30 e0       	ldi	r19, 0x00	; 0
    4fa4:	40 e2       	ldi	r20, 0x20	; 32
    4fa6:	51 e4       	ldi	r21, 0x41	; 65
    4fa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fac:	dc 01       	movw	r26, r24
    4fae:	cb 01       	movw	r24, r22
    4fb0:	bc 01       	movw	r22, r24
    4fb2:	cd 01       	movw	r24, r26
    4fb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fb8:	dc 01       	movw	r26, r24
    4fba:	cb 01       	movw	r24, r22
    4fbc:	9c 8b       	std	Y+20, r25	; 0x14
    4fbe:	8b 8b       	std	Y+19, r24	; 0x13
    4fc0:	0f c0       	rjmp	.+30     	; 0x4fe0 <main+0xe4>
    4fc2:	80 e9       	ldi	r24, 0x90	; 144
    4fc4:	91 e0       	ldi	r25, 0x01	; 1
    4fc6:	9a 8b       	std	Y+18, r25	; 0x12
    4fc8:	89 8b       	std	Y+17, r24	; 0x11
    4fca:	89 89       	ldd	r24, Y+17	; 0x11
    4fcc:	9a 89       	ldd	r25, Y+18	; 0x12
    4fce:	01 97       	sbiw	r24, 0x01	; 1
    4fd0:	f1 f7       	brne	.-4      	; 0x4fce <main+0xd2>
    4fd2:	9a 8b       	std	Y+18, r25	; 0x12
    4fd4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fd6:	8b 89       	ldd	r24, Y+19	; 0x13
    4fd8:	9c 89       	ldd	r25, Y+20	; 0x14
    4fda:	01 97       	sbiw	r24, 0x01	; 1
    4fdc:	9c 8b       	std	Y+20, r25	; 0x14
    4fde:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fe0:	8b 89       	ldd	r24, Y+19	; 0x13
    4fe2:	9c 89       	ldd	r25, Y+20	; 0x14
    4fe4:	00 97       	sbiw	r24, 0x00	; 0
    4fe6:	69 f7       	brne	.-38     	; 0x4fc2 <main+0xc6>
    4fe8:	14 c0       	rjmp	.+40     	; 0x5012 <main+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4fea:	6d 89       	ldd	r22, Y+21	; 0x15
    4fec:	7e 89       	ldd	r23, Y+22	; 0x16
    4fee:	8f 89       	ldd	r24, Y+23	; 0x17
    4ff0:	98 8d       	ldd	r25, Y+24	; 0x18
    4ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ff6:	dc 01       	movw	r26, r24
    4ff8:	cb 01       	movw	r24, r22
    4ffa:	9c 8b       	std	Y+20, r25	; 0x14
    4ffc:	8b 8b       	std	Y+19, r24	; 0x13
    4ffe:	8b 89       	ldd	r24, Y+19	; 0x13
    5000:	9c 89       	ldd	r25, Y+20	; 0x14
    5002:	98 8b       	std	Y+16, r25	; 0x10
    5004:	8f 87       	std	Y+15, r24	; 0x0f
    5006:	8f 85       	ldd	r24, Y+15	; 0x0f
    5008:	98 89       	ldd	r25, Y+16	; 0x10
    500a:	01 97       	sbiw	r24, 0x01	; 1
    500c:	f1 f7       	brne	.-4      	; 0x500a <main+0x10e>
    500e:	98 8b       	std	Y+16, r25	; 0x10
    5010:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2000);
	H_LCD_void_Clear();
    5012:	0e 94 51 20 	call	0x40a2	; 0x40a2 <H_LCD_void_Clear>
	H_LCD_void_sendString("waiting new user");
    5016:	8e e9       	ldi	r24, 0x9E	; 158
    5018:	91 e0       	ldi	r25, 0x01	; 1
    501a:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>
	while (1) {

		if (APP_UpdateStatus_t_WIFIUpdate(buff) == APP_WIFI_Updated) {
    501e:	80 e3       	ldi	r24, 0x30	; 48
    5020:	95 e0       	ldi	r25, 0x05	; 5
    5022:	0e 94 65 27 	call	0x4eca	; 0x4eca <APP_UpdateStatus_t_WIFIUpdate>
    5026:	88 23       	and	r24, r24
    5028:	d1 f7       	brne	.-12     	; 0x501e <main+0x122>
			H_LCD_void_Clear();
    502a:	0e 94 51 20 	call	0x40a2	; 0x40a2 <H_LCD_void_Clear>
			H_LCD_void_sendString("new command !");
    502e:	8f ea       	ldi	r24, 0xAF	; 175
    5030:	91 e0       	ldi	r25, 0x01	; 1
    5032:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>
			H_DC_Motor_void_MotorForward(50, 100000);
    5036:	82 e3       	ldi	r24, 0x32	; 50
    5038:	40 ea       	ldi	r20, 0xA0	; 160
    503a:	56 e8       	ldi	r21, 0x86	; 134
    503c:	61 e0       	ldi	r22, 0x01	; 1
    503e:	70 e0       	ldi	r23, 0x00	; 0
    5040:	0e 94 a3 23 	call	0x4746	; 0x4746 <H_DC_Motor_void_MotorForward>
    5044:	80 e0       	ldi	r24, 0x00	; 0
    5046:	90 e0       	ldi	r25, 0x00	; 0
    5048:	aa e7       	ldi	r26, 0x7A	; 122
    504a:	b4 e4       	ldi	r27, 0x44	; 68
    504c:	8b 87       	std	Y+11, r24	; 0x0b
    504e:	9c 87       	std	Y+12, r25	; 0x0c
    5050:	ad 87       	std	Y+13, r26	; 0x0d
    5052:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5054:	6b 85       	ldd	r22, Y+11	; 0x0b
    5056:	7c 85       	ldd	r23, Y+12	; 0x0c
    5058:	8d 85       	ldd	r24, Y+13	; 0x0d
    505a:	9e 85       	ldd	r25, Y+14	; 0x0e
    505c:	20 e0       	ldi	r18, 0x00	; 0
    505e:	30 e0       	ldi	r19, 0x00	; 0
    5060:	4a e7       	ldi	r20, 0x7A	; 122
    5062:	55 e4       	ldi	r21, 0x45	; 69
    5064:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5068:	dc 01       	movw	r26, r24
    506a:	cb 01       	movw	r24, r22
    506c:	8f 83       	std	Y+7, r24	; 0x07
    506e:	98 87       	std	Y+8, r25	; 0x08
    5070:	a9 87       	std	Y+9, r26	; 0x09
    5072:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5074:	6f 81       	ldd	r22, Y+7	; 0x07
    5076:	78 85       	ldd	r23, Y+8	; 0x08
    5078:	89 85       	ldd	r24, Y+9	; 0x09
    507a:	9a 85       	ldd	r25, Y+10	; 0x0a
    507c:	20 e0       	ldi	r18, 0x00	; 0
    507e:	30 e0       	ldi	r19, 0x00	; 0
    5080:	40 e8       	ldi	r20, 0x80	; 128
    5082:	5f e3       	ldi	r21, 0x3F	; 63
    5084:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    5088:	88 23       	and	r24, r24
    508a:	2c f4       	brge	.+10     	; 0x5096 <main+0x19a>
		__ticks = 1;
    508c:	81 e0       	ldi	r24, 0x01	; 1
    508e:	90 e0       	ldi	r25, 0x00	; 0
    5090:	9e 83       	std	Y+6, r25	; 0x06
    5092:	8d 83       	std	Y+5, r24	; 0x05
    5094:	3f c0       	rjmp	.+126    	; 0x5114 <main+0x218>
	else if (__tmp > 65535)
    5096:	6f 81       	ldd	r22, Y+7	; 0x07
    5098:	78 85       	ldd	r23, Y+8	; 0x08
    509a:	89 85       	ldd	r24, Y+9	; 0x09
    509c:	9a 85       	ldd	r25, Y+10	; 0x0a
    509e:	20 e0       	ldi	r18, 0x00	; 0
    50a0:	3f ef       	ldi	r19, 0xFF	; 255
    50a2:	4f e7       	ldi	r20, 0x7F	; 127
    50a4:	57 e4       	ldi	r21, 0x47	; 71
    50a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    50aa:	18 16       	cp	r1, r24
    50ac:	4c f5       	brge	.+82     	; 0x5100 <main+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    50ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    50b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    50b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    50b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    50b6:	20 e0       	ldi	r18, 0x00	; 0
    50b8:	30 e0       	ldi	r19, 0x00	; 0
    50ba:	40 e2       	ldi	r20, 0x20	; 32
    50bc:	51 e4       	ldi	r21, 0x41	; 65
    50be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50c2:	dc 01       	movw	r26, r24
    50c4:	cb 01       	movw	r24, r22
    50c6:	bc 01       	movw	r22, r24
    50c8:	cd 01       	movw	r24, r26
    50ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50ce:	dc 01       	movw	r26, r24
    50d0:	cb 01       	movw	r24, r22
    50d2:	9e 83       	std	Y+6, r25	; 0x06
    50d4:	8d 83       	std	Y+5, r24	; 0x05
    50d6:	0f c0       	rjmp	.+30     	; 0x50f6 <main+0x1fa>
    50d8:	80 e9       	ldi	r24, 0x90	; 144
    50da:	91 e0       	ldi	r25, 0x01	; 1
    50dc:	9c 83       	std	Y+4, r25	; 0x04
    50de:	8b 83       	std	Y+3, r24	; 0x03
    50e0:	8b 81       	ldd	r24, Y+3	; 0x03
    50e2:	9c 81       	ldd	r25, Y+4	; 0x04
    50e4:	01 97       	sbiw	r24, 0x01	; 1
    50e6:	f1 f7       	brne	.-4      	; 0x50e4 <main+0x1e8>
    50e8:	9c 83       	std	Y+4, r25	; 0x04
    50ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50ec:	8d 81       	ldd	r24, Y+5	; 0x05
    50ee:	9e 81       	ldd	r25, Y+6	; 0x06
    50f0:	01 97       	sbiw	r24, 0x01	; 1
    50f2:	9e 83       	std	Y+6, r25	; 0x06
    50f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50f6:	8d 81       	ldd	r24, Y+5	; 0x05
    50f8:	9e 81       	ldd	r25, Y+6	; 0x06
    50fa:	00 97       	sbiw	r24, 0x00	; 0
    50fc:	69 f7       	brne	.-38     	; 0x50d8 <main+0x1dc>
    50fe:	14 c0       	rjmp	.+40     	; 0x5128 <main+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5100:	6f 81       	ldd	r22, Y+7	; 0x07
    5102:	78 85       	ldd	r23, Y+8	; 0x08
    5104:	89 85       	ldd	r24, Y+9	; 0x09
    5106:	9a 85       	ldd	r25, Y+10	; 0x0a
    5108:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    510c:	dc 01       	movw	r26, r24
    510e:	cb 01       	movw	r24, r22
    5110:	9e 83       	std	Y+6, r25	; 0x06
    5112:	8d 83       	std	Y+5, r24	; 0x05
    5114:	8d 81       	ldd	r24, Y+5	; 0x05
    5116:	9e 81       	ldd	r25, Y+6	; 0x06
    5118:	9a 83       	std	Y+2, r25	; 0x02
    511a:	89 83       	std	Y+1, r24	; 0x01
    511c:	89 81       	ldd	r24, Y+1	; 0x01
    511e:	9a 81       	ldd	r25, Y+2	; 0x02
    5120:	01 97       	sbiw	r24, 0x01	; 1
    5122:	f1 f7       	brne	.-4      	; 0x5120 <main+0x224>
    5124:	9a 83       	std	Y+2, r25	; 0x02
    5126:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			H_LCD_void_Clear();
    5128:	0e 94 51 20 	call	0x40a2	; 0x40a2 <H_LCD_void_Clear>
			H_DC_Motor_void_MotorStop();
    512c:	0e 94 fb 23 	call	0x47f6	; 0x47f6 <H_DC_Motor_void_MotorStop>
			APP_SmartHome_ERROR_t_GetCommand(buff, &mCMD);
    5130:	80 e3       	ldi	r24, 0x30	; 48
    5132:	95 e0       	ldi	r25, 0x05	; 5
    5134:	9e 01       	movw	r18, r28
    5136:	23 5e       	subi	r18, 0xE3	; 227
    5138:	3f 4f       	sbci	r19, 0xFF	; 255
    513a:	b9 01       	movw	r22, r18
    513c:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <APP_SmartHome_ERROR_t_GetCommand>
			H_LCD_void_sendString("command: ");
    5140:	8d eb       	ldi	r24, 0xBD	; 189
    5142:	91 e0       	ldi	r25, 0x01	; 1
    5144:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>
			H_LCD_void_sendString(mCMD.value);
    5148:	ce 01       	movw	r24, r28
    514a:	4d 96       	adiw	r24, 0x1d	; 29
    514c:	07 96       	adiw	r24, 0x07	; 7
    514e:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>
			APP_SmartHome_ERROR_t_LocalUpdateFromWIFI(mCMD);
    5152:	0d 8d       	ldd	r16, Y+29	; 0x1d
    5154:	1e 8d       	ldd	r17, Y+30	; 0x1e
    5156:	2f 8d       	ldd	r18, Y+31	; 0x1f
    5158:	38 a1       	ldd	r19, Y+32	; 0x20
    515a:	49 a1       	ldd	r20, Y+33	; 0x21
    515c:	5a a1       	ldd	r21, Y+34	; 0x22
    515e:	6b a1       	ldd	r22, Y+35	; 0x23
    5160:	7c a1       	ldd	r23, Y+36	; 0x24
    5162:	8d a1       	ldd	r24, Y+37	; 0x25
    5164:	9e a1       	ldd	r25, Y+38	; 0x26
    5166:	0e 94 34 25 	call	0x4a68	; 0x4a68 <APP_SmartHome_ERROR_t_LocalUpdateFromWIFI>
			H_LCD_void_sendString("struct: ");
    516a:	87 ec       	ldi	r24, 0xC7	; 199
    516c:	91 e0       	ldi	r25, 0x01	; 1
    516e:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>
			H_LCD_void_sendString(DEVICES_STATE_LIST[0].device_state);
    5172:	82 ef       	ldi	r24, 0xF2	; 242
    5174:	92 e0       	ldi	r25, 0x02	; 2
    5176:	0e 94 6c 20 	call	0x40d8	; 0x40d8 <H_LCD_void_sendString>
			APP_SmartHome_void_ApplianceUpdate();
    517a:	0e 94 5f 26 	call	0x4cbe	; 0x4cbe <APP_SmartHome_void_ApplianceUpdate>
    517e:	4f cf       	rjmp	.-354    	; 0x501e <main+0x122>

00005180 <__mulsi3>:
    5180:	62 9f       	mul	r22, r18
    5182:	d0 01       	movw	r26, r0
    5184:	73 9f       	mul	r23, r19
    5186:	f0 01       	movw	r30, r0
    5188:	82 9f       	mul	r24, r18
    518a:	e0 0d       	add	r30, r0
    518c:	f1 1d       	adc	r31, r1
    518e:	64 9f       	mul	r22, r20
    5190:	e0 0d       	add	r30, r0
    5192:	f1 1d       	adc	r31, r1
    5194:	92 9f       	mul	r25, r18
    5196:	f0 0d       	add	r31, r0
    5198:	83 9f       	mul	r24, r19
    519a:	f0 0d       	add	r31, r0
    519c:	74 9f       	mul	r23, r20
    519e:	f0 0d       	add	r31, r0
    51a0:	65 9f       	mul	r22, r21
    51a2:	f0 0d       	add	r31, r0
    51a4:	99 27       	eor	r25, r25
    51a6:	72 9f       	mul	r23, r18
    51a8:	b0 0d       	add	r27, r0
    51aa:	e1 1d       	adc	r30, r1
    51ac:	f9 1f       	adc	r31, r25
    51ae:	63 9f       	mul	r22, r19
    51b0:	b0 0d       	add	r27, r0
    51b2:	e1 1d       	adc	r30, r1
    51b4:	f9 1f       	adc	r31, r25
    51b6:	bd 01       	movw	r22, r26
    51b8:	cf 01       	movw	r24, r30
    51ba:	11 24       	eor	r1, r1
    51bc:	08 95       	ret

000051be <__udivmodqi4>:
    51be:	99 1b       	sub	r25, r25
    51c0:	79 e0       	ldi	r23, 0x09	; 9
    51c2:	04 c0       	rjmp	.+8      	; 0x51cc <__udivmodqi4_ep>

000051c4 <__udivmodqi4_loop>:
    51c4:	99 1f       	adc	r25, r25
    51c6:	96 17       	cp	r25, r22
    51c8:	08 f0       	brcs	.+2      	; 0x51cc <__udivmodqi4_ep>
    51ca:	96 1b       	sub	r25, r22

000051cc <__udivmodqi4_ep>:
    51cc:	88 1f       	adc	r24, r24
    51ce:	7a 95       	dec	r23
    51d0:	c9 f7       	brne	.-14     	; 0x51c4 <__udivmodqi4_loop>
    51d2:	80 95       	com	r24
    51d4:	08 95       	ret

000051d6 <__udivmodhi4>:
    51d6:	aa 1b       	sub	r26, r26
    51d8:	bb 1b       	sub	r27, r27
    51da:	51 e1       	ldi	r21, 0x11	; 17
    51dc:	07 c0       	rjmp	.+14     	; 0x51ec <__udivmodhi4_ep>

000051de <__udivmodhi4_loop>:
    51de:	aa 1f       	adc	r26, r26
    51e0:	bb 1f       	adc	r27, r27
    51e2:	a6 17       	cp	r26, r22
    51e4:	b7 07       	cpc	r27, r23
    51e6:	10 f0       	brcs	.+4      	; 0x51ec <__udivmodhi4_ep>
    51e8:	a6 1b       	sub	r26, r22
    51ea:	b7 0b       	sbc	r27, r23

000051ec <__udivmodhi4_ep>:
    51ec:	88 1f       	adc	r24, r24
    51ee:	99 1f       	adc	r25, r25
    51f0:	5a 95       	dec	r21
    51f2:	a9 f7       	brne	.-22     	; 0x51de <__udivmodhi4_loop>
    51f4:	80 95       	com	r24
    51f6:	90 95       	com	r25
    51f8:	bc 01       	movw	r22, r24
    51fa:	cd 01       	movw	r24, r26
    51fc:	08 95       	ret

000051fe <__udivmodsi4>:
    51fe:	a1 e2       	ldi	r26, 0x21	; 33
    5200:	1a 2e       	mov	r1, r26
    5202:	aa 1b       	sub	r26, r26
    5204:	bb 1b       	sub	r27, r27
    5206:	fd 01       	movw	r30, r26
    5208:	0d c0       	rjmp	.+26     	; 0x5224 <__udivmodsi4_ep>

0000520a <__udivmodsi4_loop>:
    520a:	aa 1f       	adc	r26, r26
    520c:	bb 1f       	adc	r27, r27
    520e:	ee 1f       	adc	r30, r30
    5210:	ff 1f       	adc	r31, r31
    5212:	a2 17       	cp	r26, r18
    5214:	b3 07       	cpc	r27, r19
    5216:	e4 07       	cpc	r30, r20
    5218:	f5 07       	cpc	r31, r21
    521a:	20 f0       	brcs	.+8      	; 0x5224 <__udivmodsi4_ep>
    521c:	a2 1b       	sub	r26, r18
    521e:	b3 0b       	sbc	r27, r19
    5220:	e4 0b       	sbc	r30, r20
    5222:	f5 0b       	sbc	r31, r21

00005224 <__udivmodsi4_ep>:
    5224:	66 1f       	adc	r22, r22
    5226:	77 1f       	adc	r23, r23
    5228:	88 1f       	adc	r24, r24
    522a:	99 1f       	adc	r25, r25
    522c:	1a 94       	dec	r1
    522e:	69 f7       	brne	.-38     	; 0x520a <__udivmodsi4_loop>
    5230:	60 95       	com	r22
    5232:	70 95       	com	r23
    5234:	80 95       	com	r24
    5236:	90 95       	com	r25
    5238:	9b 01       	movw	r18, r22
    523a:	ac 01       	movw	r20, r24
    523c:	bd 01       	movw	r22, r26
    523e:	cf 01       	movw	r24, r30
    5240:	08 95       	ret

00005242 <__divmodsi4>:
    5242:	97 fb       	bst	r25, 7
    5244:	09 2e       	mov	r0, r25
    5246:	05 26       	eor	r0, r21
    5248:	0e d0       	rcall	.+28     	; 0x5266 <__divmodsi4_neg1>
    524a:	57 fd       	sbrc	r21, 7
    524c:	04 d0       	rcall	.+8      	; 0x5256 <__divmodsi4_neg2>
    524e:	d7 df       	rcall	.-82     	; 0x51fe <__udivmodsi4>
    5250:	0a d0       	rcall	.+20     	; 0x5266 <__divmodsi4_neg1>
    5252:	00 1c       	adc	r0, r0
    5254:	38 f4       	brcc	.+14     	; 0x5264 <__divmodsi4_exit>

00005256 <__divmodsi4_neg2>:
    5256:	50 95       	com	r21
    5258:	40 95       	com	r20
    525a:	30 95       	com	r19
    525c:	21 95       	neg	r18
    525e:	3f 4f       	sbci	r19, 0xFF	; 255
    5260:	4f 4f       	sbci	r20, 0xFF	; 255
    5262:	5f 4f       	sbci	r21, 0xFF	; 255

00005264 <__divmodsi4_exit>:
    5264:	08 95       	ret

00005266 <__divmodsi4_neg1>:
    5266:	f6 f7       	brtc	.-4      	; 0x5264 <__divmodsi4_exit>
    5268:	90 95       	com	r25
    526a:	80 95       	com	r24
    526c:	70 95       	com	r23
    526e:	61 95       	neg	r22
    5270:	7f 4f       	sbci	r23, 0xFF	; 255
    5272:	8f 4f       	sbci	r24, 0xFF	; 255
    5274:	9f 4f       	sbci	r25, 0xFF	; 255
    5276:	08 95       	ret

00005278 <__prologue_saves__>:
    5278:	2f 92       	push	r2
    527a:	3f 92       	push	r3
    527c:	4f 92       	push	r4
    527e:	5f 92       	push	r5
    5280:	6f 92       	push	r6
    5282:	7f 92       	push	r7
    5284:	8f 92       	push	r8
    5286:	9f 92       	push	r9
    5288:	af 92       	push	r10
    528a:	bf 92       	push	r11
    528c:	cf 92       	push	r12
    528e:	df 92       	push	r13
    5290:	ef 92       	push	r14
    5292:	ff 92       	push	r15
    5294:	0f 93       	push	r16
    5296:	1f 93       	push	r17
    5298:	cf 93       	push	r28
    529a:	df 93       	push	r29
    529c:	cd b7       	in	r28, 0x3d	; 61
    529e:	de b7       	in	r29, 0x3e	; 62
    52a0:	ca 1b       	sub	r28, r26
    52a2:	db 0b       	sbc	r29, r27
    52a4:	0f b6       	in	r0, 0x3f	; 63
    52a6:	f8 94       	cli
    52a8:	de bf       	out	0x3e, r29	; 62
    52aa:	0f be       	out	0x3f, r0	; 63
    52ac:	cd bf       	out	0x3d, r28	; 61
    52ae:	09 94       	ijmp

000052b0 <__epilogue_restores__>:
    52b0:	2a 88       	ldd	r2, Y+18	; 0x12
    52b2:	39 88       	ldd	r3, Y+17	; 0x11
    52b4:	48 88       	ldd	r4, Y+16	; 0x10
    52b6:	5f 84       	ldd	r5, Y+15	; 0x0f
    52b8:	6e 84       	ldd	r6, Y+14	; 0x0e
    52ba:	7d 84       	ldd	r7, Y+13	; 0x0d
    52bc:	8c 84       	ldd	r8, Y+12	; 0x0c
    52be:	9b 84       	ldd	r9, Y+11	; 0x0b
    52c0:	aa 84       	ldd	r10, Y+10	; 0x0a
    52c2:	b9 84       	ldd	r11, Y+9	; 0x09
    52c4:	c8 84       	ldd	r12, Y+8	; 0x08
    52c6:	df 80       	ldd	r13, Y+7	; 0x07
    52c8:	ee 80       	ldd	r14, Y+6	; 0x06
    52ca:	fd 80       	ldd	r15, Y+5	; 0x05
    52cc:	0c 81       	ldd	r16, Y+4	; 0x04
    52ce:	1b 81       	ldd	r17, Y+3	; 0x03
    52d0:	aa 81       	ldd	r26, Y+2	; 0x02
    52d2:	b9 81       	ldd	r27, Y+1	; 0x01
    52d4:	ce 0f       	add	r28, r30
    52d6:	d1 1d       	adc	r29, r1
    52d8:	0f b6       	in	r0, 0x3f	; 63
    52da:	f8 94       	cli
    52dc:	de bf       	out	0x3e, r29	; 62
    52de:	0f be       	out	0x3f, r0	; 63
    52e0:	cd bf       	out	0x3d, r28	; 61
    52e2:	ed 01       	movw	r28, r26
    52e4:	08 95       	ret

000052e6 <strtok>:
    52e6:	42 eb       	ldi	r20, 0xB2	; 178
    52e8:	54 e0       	ldi	r21, 0x04	; 4
    52ea:	0e 94 a2 29 	call	0x5344	; 0x5344 <strtok_r>
    52ee:	08 95       	ret

000052f0 <strcmp>:
    52f0:	fb 01       	movw	r30, r22
    52f2:	dc 01       	movw	r26, r24
    52f4:	8d 91       	ld	r24, X+
    52f6:	01 90       	ld	r0, Z+
    52f8:	80 19       	sub	r24, r0
    52fa:	01 10       	cpse	r0, r1
    52fc:	d9 f3       	breq	.-10     	; 0x52f4 <strcmp+0x4>
    52fe:	99 0b       	sbc	r25, r25
    5300:	08 95       	ret

00005302 <strcpy>:
    5302:	fb 01       	movw	r30, r22
    5304:	dc 01       	movw	r26, r24
    5306:	01 90       	ld	r0, Z+
    5308:	0d 92       	st	X+, r0
    530a:	00 20       	and	r0, r0
    530c:	e1 f7       	brne	.-8      	; 0x5306 <strcpy+0x4>
    530e:	08 95       	ret

00005310 <strstr>:
    5310:	fb 01       	movw	r30, r22
    5312:	51 91       	ld	r21, Z+
    5314:	55 23       	and	r21, r21
    5316:	a9 f0       	breq	.+42     	; 0x5342 <strstr+0x32>
    5318:	bf 01       	movw	r22, r30
    531a:	dc 01       	movw	r26, r24
    531c:	4d 91       	ld	r20, X+
    531e:	45 17       	cp	r20, r21
    5320:	41 11       	cpse	r20, r1
    5322:	e1 f7       	brne	.-8      	; 0x531c <strstr+0xc>
    5324:	59 f4       	brne	.+22     	; 0x533c <strstr+0x2c>
    5326:	cd 01       	movw	r24, r26
    5328:	01 90       	ld	r0, Z+
    532a:	00 20       	and	r0, r0
    532c:	49 f0       	breq	.+18     	; 0x5340 <strstr+0x30>
    532e:	4d 91       	ld	r20, X+
    5330:	40 15       	cp	r20, r0
    5332:	41 11       	cpse	r20, r1
    5334:	c9 f3       	breq	.-14     	; 0x5328 <strstr+0x18>
    5336:	fb 01       	movw	r30, r22
    5338:	41 11       	cpse	r20, r1
    533a:	ef cf       	rjmp	.-34     	; 0x531a <strstr+0xa>
    533c:	81 e0       	ldi	r24, 0x01	; 1
    533e:	90 e0       	ldi	r25, 0x00	; 0
    5340:	01 97       	sbiw	r24, 0x01	; 1
    5342:	08 95       	ret

00005344 <strtok_r>:
    5344:	fa 01       	movw	r30, r20
    5346:	a1 91       	ld	r26, Z+
    5348:	b0 81       	ld	r27, Z
    534a:	00 97       	sbiw	r24, 0x00	; 0
    534c:	19 f4       	brne	.+6      	; 0x5354 <strtok_r+0x10>
    534e:	10 97       	sbiw	r26, 0x00	; 0
    5350:	e1 f0       	breq	.+56     	; 0x538a <strtok_r+0x46>
    5352:	cd 01       	movw	r24, r26
    5354:	dc 01       	movw	r26, r24
    5356:	cd 01       	movw	r24, r26
    5358:	0d 90       	ld	r0, X+
    535a:	00 20       	and	r0, r0
    535c:	11 f4       	brne	.+4      	; 0x5362 <strtok_r+0x1e>
    535e:	c0 01       	movw	r24, r0
    5360:	13 c0       	rjmp	.+38     	; 0x5388 <strtok_r+0x44>
    5362:	fb 01       	movw	r30, r22
    5364:	21 91       	ld	r18, Z+
    5366:	22 23       	and	r18, r18
    5368:	19 f0       	breq	.+6      	; 0x5370 <strtok_r+0x2c>
    536a:	20 15       	cp	r18, r0
    536c:	d9 f7       	brne	.-10     	; 0x5364 <strtok_r+0x20>
    536e:	f3 cf       	rjmp	.-26     	; 0x5356 <strtok_r+0x12>
    5370:	fb 01       	movw	r30, r22
    5372:	21 91       	ld	r18, Z+
    5374:	20 15       	cp	r18, r0
    5376:	19 f4       	brne	.+6      	; 0x537e <strtok_r+0x3a>
    5378:	1e 92       	st	-X, r1
    537a:	11 96       	adiw	r26, 0x01	; 1
    537c:	06 c0       	rjmp	.+12     	; 0x538a <strtok_r+0x46>
    537e:	22 23       	and	r18, r18
    5380:	c1 f7       	brne	.-16     	; 0x5372 <strtok_r+0x2e>
    5382:	0d 90       	ld	r0, X+
    5384:	00 20       	and	r0, r0
    5386:	a1 f7       	brne	.-24     	; 0x5370 <strtok_r+0x2c>
    5388:	d0 01       	movw	r26, r0
    538a:	fa 01       	movw	r30, r20
    538c:	a1 93       	st	Z+, r26
    538e:	b0 83       	st	Z, r27
    5390:	08 95       	ret

00005392 <itoa>:
    5392:	fb 01       	movw	r30, r22
    5394:	9f 01       	movw	r18, r30
    5396:	e8 94       	clt
    5398:	42 30       	cpi	r20, 0x02	; 2
    539a:	c4 f0       	brlt	.+48     	; 0x53cc <itoa+0x3a>
    539c:	45 32       	cpi	r20, 0x25	; 37
    539e:	b4 f4       	brge	.+44     	; 0x53cc <itoa+0x3a>
    53a0:	4a 30       	cpi	r20, 0x0A	; 10
    53a2:	29 f4       	brne	.+10     	; 0x53ae <itoa+0x1c>
    53a4:	97 fb       	bst	r25, 7
    53a6:	1e f4       	brtc	.+6      	; 0x53ae <itoa+0x1c>
    53a8:	90 95       	com	r25
    53aa:	81 95       	neg	r24
    53ac:	9f 4f       	sbci	r25, 0xFF	; 255
    53ae:	64 2f       	mov	r22, r20
    53b0:	77 27       	eor	r23, r23
    53b2:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <__udivmodhi4>
    53b6:	80 5d       	subi	r24, 0xD0	; 208
    53b8:	8a 33       	cpi	r24, 0x3A	; 58
    53ba:	0c f0       	brlt	.+2      	; 0x53be <itoa+0x2c>
    53bc:	89 5d       	subi	r24, 0xD9	; 217
    53be:	81 93       	st	Z+, r24
    53c0:	cb 01       	movw	r24, r22
    53c2:	00 97       	sbiw	r24, 0x00	; 0
    53c4:	a1 f7       	brne	.-24     	; 0x53ae <itoa+0x1c>
    53c6:	16 f4       	brtc	.+4      	; 0x53cc <itoa+0x3a>
    53c8:	5d e2       	ldi	r21, 0x2D	; 45
    53ca:	51 93       	st	Z+, r21
    53cc:	10 82       	st	Z, r1
    53ce:	c9 01       	movw	r24, r18
    53d0:	0c 94 01 2c 	jmp	0x5802	; 0x5802 <strrev>

000053d4 <sprintf>:
    53d4:	ae e0       	ldi	r26, 0x0E	; 14
    53d6:	b0 e0       	ldi	r27, 0x00	; 0
    53d8:	e0 ef       	ldi	r30, 0xF0	; 240
    53da:	f9 e2       	ldi	r31, 0x29	; 41
    53dc:	0c 94 4a 29 	jmp	0x5294	; 0x5294 <__prologue_saves__+0x1c>
    53e0:	0d 89       	ldd	r16, Y+21	; 0x15
    53e2:	1e 89       	ldd	r17, Y+22	; 0x16
    53e4:	86 e0       	ldi	r24, 0x06	; 6
    53e6:	8c 83       	std	Y+4, r24	; 0x04
    53e8:	1a 83       	std	Y+2, r17	; 0x02
    53ea:	09 83       	std	Y+1, r16	; 0x01
    53ec:	8f ef       	ldi	r24, 0xFF	; 255
    53ee:	9f e7       	ldi	r25, 0x7F	; 127
    53f0:	9e 83       	std	Y+6, r25	; 0x06
    53f2:	8d 83       	std	Y+5, r24	; 0x05
    53f4:	9e 01       	movw	r18, r28
    53f6:	27 5e       	subi	r18, 0xE7	; 231
    53f8:	3f 4f       	sbci	r19, 0xFF	; 255
    53fa:	ce 01       	movw	r24, r28
    53fc:	01 96       	adiw	r24, 0x01	; 1
    53fe:	6f 89       	ldd	r22, Y+23	; 0x17
    5400:	78 8d       	ldd	r23, Y+24	; 0x18
    5402:	a9 01       	movw	r20, r18
    5404:	0e 94 0e 2a 	call	0x541c	; 0x541c <vfprintf>
    5408:	2f 81       	ldd	r18, Y+7	; 0x07
    540a:	38 85       	ldd	r19, Y+8	; 0x08
    540c:	02 0f       	add	r16, r18
    540e:	13 1f       	adc	r17, r19
    5410:	f8 01       	movw	r30, r16
    5412:	10 82       	st	Z, r1
    5414:	2e 96       	adiw	r28, 0x0e	; 14
    5416:	e4 e0       	ldi	r30, 0x04	; 4
    5418:	0c 94 66 29 	jmp	0x52cc	; 0x52cc <__epilogue_restores__+0x1c>

0000541c <vfprintf>:
    541c:	ab e0       	ldi	r26, 0x0B	; 11
    541e:	b0 e0       	ldi	r27, 0x00	; 0
    5420:	e4 e1       	ldi	r30, 0x14	; 20
    5422:	fa e2       	ldi	r31, 0x2A	; 42
    5424:	0c 94 3c 29 	jmp	0x5278	; 0x5278 <__prologue_saves__>
    5428:	3c 01       	movw	r6, r24
    542a:	2b 01       	movw	r4, r22
    542c:	5a 01       	movw	r10, r20
    542e:	fc 01       	movw	r30, r24
    5430:	17 82       	std	Z+7, r1	; 0x07
    5432:	16 82       	std	Z+6, r1	; 0x06
    5434:	83 81       	ldd	r24, Z+3	; 0x03
    5436:	81 fd       	sbrc	r24, 1
    5438:	03 c0       	rjmp	.+6      	; 0x5440 <vfprintf+0x24>
    543a:	6f ef       	ldi	r22, 0xFF	; 255
    543c:	7f ef       	ldi	r23, 0xFF	; 255
    543e:	c6 c1       	rjmp	.+908    	; 0x57cc <vfprintf+0x3b0>
    5440:	9a e0       	ldi	r25, 0x0A	; 10
    5442:	89 2e       	mov	r8, r25
    5444:	1e 01       	movw	r2, r28
    5446:	08 94       	sec
    5448:	21 1c       	adc	r2, r1
    544a:	31 1c       	adc	r3, r1
    544c:	f3 01       	movw	r30, r6
    544e:	23 81       	ldd	r18, Z+3	; 0x03
    5450:	f2 01       	movw	r30, r4
    5452:	23 fd       	sbrc	r18, 3
    5454:	85 91       	lpm	r24, Z+
    5456:	23 ff       	sbrs	r18, 3
    5458:	81 91       	ld	r24, Z+
    545a:	2f 01       	movw	r4, r30
    545c:	88 23       	and	r24, r24
    545e:	09 f4       	brne	.+2      	; 0x5462 <vfprintf+0x46>
    5460:	b2 c1       	rjmp	.+868    	; 0x57c6 <vfprintf+0x3aa>
    5462:	85 32       	cpi	r24, 0x25	; 37
    5464:	39 f4       	brne	.+14     	; 0x5474 <vfprintf+0x58>
    5466:	23 fd       	sbrc	r18, 3
    5468:	85 91       	lpm	r24, Z+
    546a:	23 ff       	sbrs	r18, 3
    546c:	81 91       	ld	r24, Z+
    546e:	2f 01       	movw	r4, r30
    5470:	85 32       	cpi	r24, 0x25	; 37
    5472:	29 f4       	brne	.+10     	; 0x547e <vfprintf+0x62>
    5474:	90 e0       	ldi	r25, 0x00	; 0
    5476:	b3 01       	movw	r22, r6
    5478:	0e 94 11 2c 	call	0x5822	; 0x5822 <fputc>
    547c:	e7 cf       	rjmp	.-50     	; 0x544c <vfprintf+0x30>
    547e:	98 2f       	mov	r25, r24
    5480:	ff 24       	eor	r15, r15
    5482:	ee 24       	eor	r14, r14
    5484:	99 24       	eor	r9, r9
    5486:	ff e1       	ldi	r31, 0x1F	; 31
    5488:	ff 15       	cp	r31, r15
    548a:	d0 f0       	brcs	.+52     	; 0x54c0 <vfprintf+0xa4>
    548c:	9b 32       	cpi	r25, 0x2B	; 43
    548e:	69 f0       	breq	.+26     	; 0x54aa <vfprintf+0x8e>
    5490:	9c 32       	cpi	r25, 0x2C	; 44
    5492:	28 f4       	brcc	.+10     	; 0x549e <vfprintf+0x82>
    5494:	90 32       	cpi	r25, 0x20	; 32
    5496:	59 f0       	breq	.+22     	; 0x54ae <vfprintf+0x92>
    5498:	93 32       	cpi	r25, 0x23	; 35
    549a:	91 f4       	brne	.+36     	; 0x54c0 <vfprintf+0xa4>
    549c:	0e c0       	rjmp	.+28     	; 0x54ba <vfprintf+0x9e>
    549e:	9d 32       	cpi	r25, 0x2D	; 45
    54a0:	49 f0       	breq	.+18     	; 0x54b4 <vfprintf+0x98>
    54a2:	90 33       	cpi	r25, 0x30	; 48
    54a4:	69 f4       	brne	.+26     	; 0x54c0 <vfprintf+0xa4>
    54a6:	41 e0       	ldi	r20, 0x01	; 1
    54a8:	24 c0       	rjmp	.+72     	; 0x54f2 <vfprintf+0xd6>
    54aa:	52 e0       	ldi	r21, 0x02	; 2
    54ac:	f5 2a       	or	r15, r21
    54ae:	84 e0       	ldi	r24, 0x04	; 4
    54b0:	f8 2a       	or	r15, r24
    54b2:	28 c0       	rjmp	.+80     	; 0x5504 <vfprintf+0xe8>
    54b4:	98 e0       	ldi	r25, 0x08	; 8
    54b6:	f9 2a       	or	r15, r25
    54b8:	25 c0       	rjmp	.+74     	; 0x5504 <vfprintf+0xe8>
    54ba:	e0 e1       	ldi	r30, 0x10	; 16
    54bc:	fe 2a       	or	r15, r30
    54be:	22 c0       	rjmp	.+68     	; 0x5504 <vfprintf+0xe8>
    54c0:	f7 fc       	sbrc	r15, 7
    54c2:	29 c0       	rjmp	.+82     	; 0x5516 <vfprintf+0xfa>
    54c4:	89 2f       	mov	r24, r25
    54c6:	80 53       	subi	r24, 0x30	; 48
    54c8:	8a 30       	cpi	r24, 0x0A	; 10
    54ca:	70 f4       	brcc	.+28     	; 0x54e8 <vfprintf+0xcc>
    54cc:	f6 fe       	sbrs	r15, 6
    54ce:	05 c0       	rjmp	.+10     	; 0x54da <vfprintf+0xbe>
    54d0:	98 9c       	mul	r9, r8
    54d2:	90 2c       	mov	r9, r0
    54d4:	11 24       	eor	r1, r1
    54d6:	98 0e       	add	r9, r24
    54d8:	15 c0       	rjmp	.+42     	; 0x5504 <vfprintf+0xe8>
    54da:	e8 9c       	mul	r14, r8
    54dc:	e0 2c       	mov	r14, r0
    54de:	11 24       	eor	r1, r1
    54e0:	e8 0e       	add	r14, r24
    54e2:	f0 e2       	ldi	r31, 0x20	; 32
    54e4:	ff 2a       	or	r15, r31
    54e6:	0e c0       	rjmp	.+28     	; 0x5504 <vfprintf+0xe8>
    54e8:	9e 32       	cpi	r25, 0x2E	; 46
    54ea:	29 f4       	brne	.+10     	; 0x54f6 <vfprintf+0xda>
    54ec:	f6 fc       	sbrc	r15, 6
    54ee:	6b c1       	rjmp	.+726    	; 0x57c6 <vfprintf+0x3aa>
    54f0:	40 e4       	ldi	r20, 0x40	; 64
    54f2:	f4 2a       	or	r15, r20
    54f4:	07 c0       	rjmp	.+14     	; 0x5504 <vfprintf+0xe8>
    54f6:	9c 36       	cpi	r25, 0x6C	; 108
    54f8:	19 f4       	brne	.+6      	; 0x5500 <vfprintf+0xe4>
    54fa:	50 e8       	ldi	r21, 0x80	; 128
    54fc:	f5 2a       	or	r15, r21
    54fe:	02 c0       	rjmp	.+4      	; 0x5504 <vfprintf+0xe8>
    5500:	98 36       	cpi	r25, 0x68	; 104
    5502:	49 f4       	brne	.+18     	; 0x5516 <vfprintf+0xfa>
    5504:	f2 01       	movw	r30, r4
    5506:	23 fd       	sbrc	r18, 3
    5508:	95 91       	lpm	r25, Z+
    550a:	23 ff       	sbrs	r18, 3
    550c:	91 91       	ld	r25, Z+
    550e:	2f 01       	movw	r4, r30
    5510:	99 23       	and	r25, r25
    5512:	09 f0       	breq	.+2      	; 0x5516 <vfprintf+0xfa>
    5514:	b8 cf       	rjmp	.-144    	; 0x5486 <vfprintf+0x6a>
    5516:	89 2f       	mov	r24, r25
    5518:	85 54       	subi	r24, 0x45	; 69
    551a:	83 30       	cpi	r24, 0x03	; 3
    551c:	18 f0       	brcs	.+6      	; 0x5524 <vfprintf+0x108>
    551e:	80 52       	subi	r24, 0x20	; 32
    5520:	83 30       	cpi	r24, 0x03	; 3
    5522:	38 f4       	brcc	.+14     	; 0x5532 <vfprintf+0x116>
    5524:	44 e0       	ldi	r20, 0x04	; 4
    5526:	50 e0       	ldi	r21, 0x00	; 0
    5528:	a4 0e       	add	r10, r20
    552a:	b5 1e       	adc	r11, r21
    552c:	5f e3       	ldi	r21, 0x3F	; 63
    552e:	59 83       	std	Y+1, r21	; 0x01
    5530:	0f c0       	rjmp	.+30     	; 0x5550 <vfprintf+0x134>
    5532:	93 36       	cpi	r25, 0x63	; 99
    5534:	31 f0       	breq	.+12     	; 0x5542 <vfprintf+0x126>
    5536:	93 37       	cpi	r25, 0x73	; 115
    5538:	79 f0       	breq	.+30     	; 0x5558 <vfprintf+0x13c>
    553a:	93 35       	cpi	r25, 0x53	; 83
    553c:	09 f0       	breq	.+2      	; 0x5540 <vfprintf+0x124>
    553e:	56 c0       	rjmp	.+172    	; 0x55ec <vfprintf+0x1d0>
    5540:	20 c0       	rjmp	.+64     	; 0x5582 <vfprintf+0x166>
    5542:	f5 01       	movw	r30, r10
    5544:	80 81       	ld	r24, Z
    5546:	89 83       	std	Y+1, r24	; 0x01
    5548:	42 e0       	ldi	r20, 0x02	; 2
    554a:	50 e0       	ldi	r21, 0x00	; 0
    554c:	a4 0e       	add	r10, r20
    554e:	b5 1e       	adc	r11, r21
    5550:	61 01       	movw	r12, r2
    5552:	01 e0       	ldi	r16, 0x01	; 1
    5554:	10 e0       	ldi	r17, 0x00	; 0
    5556:	12 c0       	rjmp	.+36     	; 0x557c <vfprintf+0x160>
    5558:	f5 01       	movw	r30, r10
    555a:	c0 80       	ld	r12, Z
    555c:	d1 80       	ldd	r13, Z+1	; 0x01
    555e:	f6 fc       	sbrc	r15, 6
    5560:	03 c0       	rjmp	.+6      	; 0x5568 <vfprintf+0x14c>
    5562:	6f ef       	ldi	r22, 0xFF	; 255
    5564:	7f ef       	ldi	r23, 0xFF	; 255
    5566:	02 c0       	rjmp	.+4      	; 0x556c <vfprintf+0x150>
    5568:	69 2d       	mov	r22, r9
    556a:	70 e0       	ldi	r23, 0x00	; 0
    556c:	42 e0       	ldi	r20, 0x02	; 2
    556e:	50 e0       	ldi	r21, 0x00	; 0
    5570:	a4 0e       	add	r10, r20
    5572:	b5 1e       	adc	r11, r21
    5574:	c6 01       	movw	r24, r12
    5576:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <strnlen>
    557a:	8c 01       	movw	r16, r24
    557c:	5f e7       	ldi	r21, 0x7F	; 127
    557e:	f5 22       	and	r15, r21
    5580:	14 c0       	rjmp	.+40     	; 0x55aa <vfprintf+0x18e>
    5582:	f5 01       	movw	r30, r10
    5584:	c0 80       	ld	r12, Z
    5586:	d1 80       	ldd	r13, Z+1	; 0x01
    5588:	f6 fc       	sbrc	r15, 6
    558a:	03 c0       	rjmp	.+6      	; 0x5592 <vfprintf+0x176>
    558c:	6f ef       	ldi	r22, 0xFF	; 255
    558e:	7f ef       	ldi	r23, 0xFF	; 255
    5590:	02 c0       	rjmp	.+4      	; 0x5596 <vfprintf+0x17a>
    5592:	69 2d       	mov	r22, r9
    5594:	70 e0       	ldi	r23, 0x00	; 0
    5596:	42 e0       	ldi	r20, 0x02	; 2
    5598:	50 e0       	ldi	r21, 0x00	; 0
    559a:	a4 0e       	add	r10, r20
    559c:	b5 1e       	adc	r11, r21
    559e:	c6 01       	movw	r24, r12
    55a0:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <strnlen_P>
    55a4:	8c 01       	movw	r16, r24
    55a6:	50 e8       	ldi	r21, 0x80	; 128
    55a8:	f5 2a       	or	r15, r21
    55aa:	f3 fe       	sbrs	r15, 3
    55ac:	07 c0       	rjmp	.+14     	; 0x55bc <vfprintf+0x1a0>
    55ae:	1a c0       	rjmp	.+52     	; 0x55e4 <vfprintf+0x1c8>
    55b0:	80 e2       	ldi	r24, 0x20	; 32
    55b2:	90 e0       	ldi	r25, 0x00	; 0
    55b4:	b3 01       	movw	r22, r6
    55b6:	0e 94 11 2c 	call	0x5822	; 0x5822 <fputc>
    55ba:	ea 94       	dec	r14
    55bc:	8e 2d       	mov	r24, r14
    55be:	90 e0       	ldi	r25, 0x00	; 0
    55c0:	08 17       	cp	r16, r24
    55c2:	19 07       	cpc	r17, r25
    55c4:	a8 f3       	brcs	.-22     	; 0x55b0 <vfprintf+0x194>
    55c6:	0e c0       	rjmp	.+28     	; 0x55e4 <vfprintf+0x1c8>
    55c8:	f6 01       	movw	r30, r12
    55ca:	f7 fc       	sbrc	r15, 7
    55cc:	85 91       	lpm	r24, Z+
    55ce:	f7 fe       	sbrs	r15, 7
    55d0:	81 91       	ld	r24, Z+
    55d2:	6f 01       	movw	r12, r30
    55d4:	90 e0       	ldi	r25, 0x00	; 0
    55d6:	b3 01       	movw	r22, r6
    55d8:	0e 94 11 2c 	call	0x5822	; 0x5822 <fputc>
    55dc:	e1 10       	cpse	r14, r1
    55de:	ea 94       	dec	r14
    55e0:	01 50       	subi	r16, 0x01	; 1
    55e2:	10 40       	sbci	r17, 0x00	; 0
    55e4:	01 15       	cp	r16, r1
    55e6:	11 05       	cpc	r17, r1
    55e8:	79 f7       	brne	.-34     	; 0x55c8 <vfprintf+0x1ac>
    55ea:	ea c0       	rjmp	.+468    	; 0x57c0 <vfprintf+0x3a4>
    55ec:	94 36       	cpi	r25, 0x64	; 100
    55ee:	11 f0       	breq	.+4      	; 0x55f4 <vfprintf+0x1d8>
    55f0:	99 36       	cpi	r25, 0x69	; 105
    55f2:	69 f5       	brne	.+90     	; 0x564e <vfprintf+0x232>
    55f4:	f7 fe       	sbrs	r15, 7
    55f6:	08 c0       	rjmp	.+16     	; 0x5608 <vfprintf+0x1ec>
    55f8:	f5 01       	movw	r30, r10
    55fa:	20 81       	ld	r18, Z
    55fc:	31 81       	ldd	r19, Z+1	; 0x01
    55fe:	42 81       	ldd	r20, Z+2	; 0x02
    5600:	53 81       	ldd	r21, Z+3	; 0x03
    5602:	84 e0       	ldi	r24, 0x04	; 4
    5604:	90 e0       	ldi	r25, 0x00	; 0
    5606:	0a c0       	rjmp	.+20     	; 0x561c <vfprintf+0x200>
    5608:	f5 01       	movw	r30, r10
    560a:	80 81       	ld	r24, Z
    560c:	91 81       	ldd	r25, Z+1	; 0x01
    560e:	9c 01       	movw	r18, r24
    5610:	44 27       	eor	r20, r20
    5612:	37 fd       	sbrc	r19, 7
    5614:	40 95       	com	r20
    5616:	54 2f       	mov	r21, r20
    5618:	82 e0       	ldi	r24, 0x02	; 2
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	a8 0e       	add	r10, r24
    561e:	b9 1e       	adc	r11, r25
    5620:	9f e6       	ldi	r25, 0x6F	; 111
    5622:	f9 22       	and	r15, r25
    5624:	57 ff       	sbrs	r21, 7
    5626:	09 c0       	rjmp	.+18     	; 0x563a <vfprintf+0x21e>
    5628:	50 95       	com	r21
    562a:	40 95       	com	r20
    562c:	30 95       	com	r19
    562e:	21 95       	neg	r18
    5630:	3f 4f       	sbci	r19, 0xFF	; 255
    5632:	4f 4f       	sbci	r20, 0xFF	; 255
    5634:	5f 4f       	sbci	r21, 0xFF	; 255
    5636:	e0 e8       	ldi	r30, 0x80	; 128
    5638:	fe 2a       	or	r15, r30
    563a:	ca 01       	movw	r24, r20
    563c:	b9 01       	movw	r22, r18
    563e:	a1 01       	movw	r20, r2
    5640:	2a e0       	ldi	r18, 0x0A	; 10
    5642:	30 e0       	ldi	r19, 0x00	; 0
    5644:	0e 94 3d 2c 	call	0x587a	; 0x587a <__ultoa_invert>
    5648:	d8 2e       	mov	r13, r24
    564a:	d2 18       	sub	r13, r2
    564c:	40 c0       	rjmp	.+128    	; 0x56ce <vfprintf+0x2b2>
    564e:	95 37       	cpi	r25, 0x75	; 117
    5650:	29 f4       	brne	.+10     	; 0x565c <vfprintf+0x240>
    5652:	1f 2d       	mov	r17, r15
    5654:	1f 7e       	andi	r17, 0xEF	; 239
    5656:	2a e0       	ldi	r18, 0x0A	; 10
    5658:	30 e0       	ldi	r19, 0x00	; 0
    565a:	1d c0       	rjmp	.+58     	; 0x5696 <vfprintf+0x27a>
    565c:	1f 2d       	mov	r17, r15
    565e:	19 7f       	andi	r17, 0xF9	; 249
    5660:	9f 36       	cpi	r25, 0x6F	; 111
    5662:	61 f0       	breq	.+24     	; 0x567c <vfprintf+0x260>
    5664:	90 37       	cpi	r25, 0x70	; 112
    5666:	20 f4       	brcc	.+8      	; 0x5670 <vfprintf+0x254>
    5668:	98 35       	cpi	r25, 0x58	; 88
    566a:	09 f0       	breq	.+2      	; 0x566e <vfprintf+0x252>
    566c:	ac c0       	rjmp	.+344    	; 0x57c6 <vfprintf+0x3aa>
    566e:	0f c0       	rjmp	.+30     	; 0x568e <vfprintf+0x272>
    5670:	90 37       	cpi	r25, 0x70	; 112
    5672:	39 f0       	breq	.+14     	; 0x5682 <vfprintf+0x266>
    5674:	98 37       	cpi	r25, 0x78	; 120
    5676:	09 f0       	breq	.+2      	; 0x567a <vfprintf+0x25e>
    5678:	a6 c0       	rjmp	.+332    	; 0x57c6 <vfprintf+0x3aa>
    567a:	04 c0       	rjmp	.+8      	; 0x5684 <vfprintf+0x268>
    567c:	28 e0       	ldi	r18, 0x08	; 8
    567e:	30 e0       	ldi	r19, 0x00	; 0
    5680:	0a c0       	rjmp	.+20     	; 0x5696 <vfprintf+0x27a>
    5682:	10 61       	ori	r17, 0x10	; 16
    5684:	14 fd       	sbrc	r17, 4
    5686:	14 60       	ori	r17, 0x04	; 4
    5688:	20 e1       	ldi	r18, 0x10	; 16
    568a:	30 e0       	ldi	r19, 0x00	; 0
    568c:	04 c0       	rjmp	.+8      	; 0x5696 <vfprintf+0x27a>
    568e:	14 fd       	sbrc	r17, 4
    5690:	16 60       	ori	r17, 0x06	; 6
    5692:	20 e1       	ldi	r18, 0x10	; 16
    5694:	32 e0       	ldi	r19, 0x02	; 2
    5696:	17 ff       	sbrs	r17, 7
    5698:	08 c0       	rjmp	.+16     	; 0x56aa <vfprintf+0x28e>
    569a:	f5 01       	movw	r30, r10
    569c:	60 81       	ld	r22, Z
    569e:	71 81       	ldd	r23, Z+1	; 0x01
    56a0:	82 81       	ldd	r24, Z+2	; 0x02
    56a2:	93 81       	ldd	r25, Z+3	; 0x03
    56a4:	44 e0       	ldi	r20, 0x04	; 4
    56a6:	50 e0       	ldi	r21, 0x00	; 0
    56a8:	08 c0       	rjmp	.+16     	; 0x56ba <vfprintf+0x29e>
    56aa:	f5 01       	movw	r30, r10
    56ac:	80 81       	ld	r24, Z
    56ae:	91 81       	ldd	r25, Z+1	; 0x01
    56b0:	bc 01       	movw	r22, r24
    56b2:	80 e0       	ldi	r24, 0x00	; 0
    56b4:	90 e0       	ldi	r25, 0x00	; 0
    56b6:	42 e0       	ldi	r20, 0x02	; 2
    56b8:	50 e0       	ldi	r21, 0x00	; 0
    56ba:	a4 0e       	add	r10, r20
    56bc:	b5 1e       	adc	r11, r21
    56be:	a1 01       	movw	r20, r2
    56c0:	0e 94 3d 2c 	call	0x587a	; 0x587a <__ultoa_invert>
    56c4:	d8 2e       	mov	r13, r24
    56c6:	d2 18       	sub	r13, r2
    56c8:	8f e7       	ldi	r24, 0x7F	; 127
    56ca:	f8 2e       	mov	r15, r24
    56cc:	f1 22       	and	r15, r17
    56ce:	f6 fe       	sbrs	r15, 6
    56d0:	0b c0       	rjmp	.+22     	; 0x56e8 <vfprintf+0x2cc>
    56d2:	5e ef       	ldi	r21, 0xFE	; 254
    56d4:	f5 22       	and	r15, r21
    56d6:	d9 14       	cp	r13, r9
    56d8:	38 f4       	brcc	.+14     	; 0x56e8 <vfprintf+0x2cc>
    56da:	f4 fe       	sbrs	r15, 4
    56dc:	07 c0       	rjmp	.+14     	; 0x56ec <vfprintf+0x2d0>
    56de:	f2 fc       	sbrc	r15, 2
    56e0:	05 c0       	rjmp	.+10     	; 0x56ec <vfprintf+0x2d0>
    56e2:	8f ee       	ldi	r24, 0xEF	; 239
    56e4:	f8 22       	and	r15, r24
    56e6:	02 c0       	rjmp	.+4      	; 0x56ec <vfprintf+0x2d0>
    56e8:	1d 2d       	mov	r17, r13
    56ea:	01 c0       	rjmp	.+2      	; 0x56ee <vfprintf+0x2d2>
    56ec:	19 2d       	mov	r17, r9
    56ee:	f4 fe       	sbrs	r15, 4
    56f0:	0d c0       	rjmp	.+26     	; 0x570c <vfprintf+0x2f0>
    56f2:	fe 01       	movw	r30, r28
    56f4:	ed 0d       	add	r30, r13
    56f6:	f1 1d       	adc	r31, r1
    56f8:	80 81       	ld	r24, Z
    56fa:	80 33       	cpi	r24, 0x30	; 48
    56fc:	19 f4       	brne	.+6      	; 0x5704 <vfprintf+0x2e8>
    56fe:	99 ee       	ldi	r25, 0xE9	; 233
    5700:	f9 22       	and	r15, r25
    5702:	08 c0       	rjmp	.+16     	; 0x5714 <vfprintf+0x2f8>
    5704:	1f 5f       	subi	r17, 0xFF	; 255
    5706:	f2 fe       	sbrs	r15, 2
    5708:	05 c0       	rjmp	.+10     	; 0x5714 <vfprintf+0x2f8>
    570a:	03 c0       	rjmp	.+6      	; 0x5712 <vfprintf+0x2f6>
    570c:	8f 2d       	mov	r24, r15
    570e:	86 78       	andi	r24, 0x86	; 134
    5710:	09 f0       	breq	.+2      	; 0x5714 <vfprintf+0x2f8>
    5712:	1f 5f       	subi	r17, 0xFF	; 255
    5714:	0f 2d       	mov	r16, r15
    5716:	f3 fc       	sbrc	r15, 3
    5718:	14 c0       	rjmp	.+40     	; 0x5742 <vfprintf+0x326>
    571a:	f0 fe       	sbrs	r15, 0
    571c:	0f c0       	rjmp	.+30     	; 0x573c <vfprintf+0x320>
    571e:	1e 15       	cp	r17, r14
    5720:	10 f0       	brcs	.+4      	; 0x5726 <vfprintf+0x30a>
    5722:	9d 2c       	mov	r9, r13
    5724:	0b c0       	rjmp	.+22     	; 0x573c <vfprintf+0x320>
    5726:	9d 2c       	mov	r9, r13
    5728:	9e 0c       	add	r9, r14
    572a:	91 1a       	sub	r9, r17
    572c:	1e 2d       	mov	r17, r14
    572e:	06 c0       	rjmp	.+12     	; 0x573c <vfprintf+0x320>
    5730:	80 e2       	ldi	r24, 0x20	; 32
    5732:	90 e0       	ldi	r25, 0x00	; 0
    5734:	b3 01       	movw	r22, r6
    5736:	0e 94 11 2c 	call	0x5822	; 0x5822 <fputc>
    573a:	1f 5f       	subi	r17, 0xFF	; 255
    573c:	1e 15       	cp	r17, r14
    573e:	c0 f3       	brcs	.-16     	; 0x5730 <vfprintf+0x314>
    5740:	04 c0       	rjmp	.+8      	; 0x574a <vfprintf+0x32e>
    5742:	1e 15       	cp	r17, r14
    5744:	10 f4       	brcc	.+4      	; 0x574a <vfprintf+0x32e>
    5746:	e1 1a       	sub	r14, r17
    5748:	01 c0       	rjmp	.+2      	; 0x574c <vfprintf+0x330>
    574a:	ee 24       	eor	r14, r14
    574c:	04 ff       	sbrs	r16, 4
    574e:	0f c0       	rjmp	.+30     	; 0x576e <vfprintf+0x352>
    5750:	80 e3       	ldi	r24, 0x30	; 48
    5752:	90 e0       	ldi	r25, 0x00	; 0
    5754:	b3 01       	movw	r22, r6
    5756:	0e 94 11 2c 	call	0x5822	; 0x5822 <fputc>
    575a:	02 ff       	sbrs	r16, 2
    575c:	1d c0       	rjmp	.+58     	; 0x5798 <vfprintf+0x37c>
    575e:	01 fd       	sbrc	r16, 1
    5760:	03 c0       	rjmp	.+6      	; 0x5768 <vfprintf+0x34c>
    5762:	88 e7       	ldi	r24, 0x78	; 120
    5764:	90 e0       	ldi	r25, 0x00	; 0
    5766:	0e c0       	rjmp	.+28     	; 0x5784 <vfprintf+0x368>
    5768:	88 e5       	ldi	r24, 0x58	; 88
    576a:	90 e0       	ldi	r25, 0x00	; 0
    576c:	0b c0       	rjmp	.+22     	; 0x5784 <vfprintf+0x368>
    576e:	80 2f       	mov	r24, r16
    5770:	86 78       	andi	r24, 0x86	; 134
    5772:	91 f0       	breq	.+36     	; 0x5798 <vfprintf+0x37c>
    5774:	01 ff       	sbrs	r16, 1
    5776:	02 c0       	rjmp	.+4      	; 0x577c <vfprintf+0x360>
    5778:	8b e2       	ldi	r24, 0x2B	; 43
    577a:	01 c0       	rjmp	.+2      	; 0x577e <vfprintf+0x362>
    577c:	80 e2       	ldi	r24, 0x20	; 32
    577e:	f7 fc       	sbrc	r15, 7
    5780:	8d e2       	ldi	r24, 0x2D	; 45
    5782:	90 e0       	ldi	r25, 0x00	; 0
    5784:	b3 01       	movw	r22, r6
    5786:	0e 94 11 2c 	call	0x5822	; 0x5822 <fputc>
    578a:	06 c0       	rjmp	.+12     	; 0x5798 <vfprintf+0x37c>
    578c:	80 e3       	ldi	r24, 0x30	; 48
    578e:	90 e0       	ldi	r25, 0x00	; 0
    5790:	b3 01       	movw	r22, r6
    5792:	0e 94 11 2c 	call	0x5822	; 0x5822 <fputc>
    5796:	9a 94       	dec	r9
    5798:	d9 14       	cp	r13, r9
    579a:	c0 f3       	brcs	.-16     	; 0x578c <vfprintf+0x370>
    579c:	da 94       	dec	r13
    579e:	f1 01       	movw	r30, r2
    57a0:	ed 0d       	add	r30, r13
    57a2:	f1 1d       	adc	r31, r1
    57a4:	80 81       	ld	r24, Z
    57a6:	90 e0       	ldi	r25, 0x00	; 0
    57a8:	b3 01       	movw	r22, r6
    57aa:	0e 94 11 2c 	call	0x5822	; 0x5822 <fputc>
    57ae:	dd 20       	and	r13, r13
    57b0:	a9 f7       	brne	.-22     	; 0x579c <vfprintf+0x380>
    57b2:	06 c0       	rjmp	.+12     	; 0x57c0 <vfprintf+0x3a4>
    57b4:	80 e2       	ldi	r24, 0x20	; 32
    57b6:	90 e0       	ldi	r25, 0x00	; 0
    57b8:	b3 01       	movw	r22, r6
    57ba:	0e 94 11 2c 	call	0x5822	; 0x5822 <fputc>
    57be:	ea 94       	dec	r14
    57c0:	ee 20       	and	r14, r14
    57c2:	c1 f7       	brne	.-16     	; 0x57b4 <vfprintf+0x398>
    57c4:	43 ce       	rjmp	.-890    	; 0x544c <vfprintf+0x30>
    57c6:	f3 01       	movw	r30, r6
    57c8:	66 81       	ldd	r22, Z+6	; 0x06
    57ca:	77 81       	ldd	r23, Z+7	; 0x07
    57cc:	cb 01       	movw	r24, r22
    57ce:	2b 96       	adiw	r28, 0x0b	; 11
    57d0:	e2 e1       	ldi	r30, 0x12	; 18
    57d2:	0c 94 58 29 	jmp	0x52b0	; 0x52b0 <__epilogue_restores__>

000057d6 <strnlen_P>:
    57d6:	fc 01       	movw	r30, r24
    57d8:	05 90       	lpm	r0, Z+
    57da:	61 50       	subi	r22, 0x01	; 1
    57dc:	70 40       	sbci	r23, 0x00	; 0
    57de:	01 10       	cpse	r0, r1
    57e0:	d8 f7       	brcc	.-10     	; 0x57d8 <strnlen_P+0x2>
    57e2:	80 95       	com	r24
    57e4:	90 95       	com	r25
    57e6:	8e 0f       	add	r24, r30
    57e8:	9f 1f       	adc	r25, r31
    57ea:	08 95       	ret

000057ec <strnlen>:
    57ec:	fc 01       	movw	r30, r24
    57ee:	61 50       	subi	r22, 0x01	; 1
    57f0:	70 40       	sbci	r23, 0x00	; 0
    57f2:	01 90       	ld	r0, Z+
    57f4:	01 10       	cpse	r0, r1
    57f6:	d8 f7       	brcc	.-10     	; 0x57ee <strnlen+0x2>
    57f8:	80 95       	com	r24
    57fa:	90 95       	com	r25
    57fc:	8e 0f       	add	r24, r30
    57fe:	9f 1f       	adc	r25, r31
    5800:	08 95       	ret

00005802 <strrev>:
    5802:	dc 01       	movw	r26, r24
    5804:	fc 01       	movw	r30, r24
    5806:	67 2f       	mov	r22, r23
    5808:	71 91       	ld	r23, Z+
    580a:	77 23       	and	r23, r23
    580c:	e1 f7       	brne	.-8      	; 0x5806 <strrev+0x4>
    580e:	32 97       	sbiw	r30, 0x02	; 2
    5810:	04 c0       	rjmp	.+8      	; 0x581a <strrev+0x18>
    5812:	7c 91       	ld	r23, X
    5814:	6d 93       	st	X+, r22
    5816:	70 83       	st	Z, r23
    5818:	62 91       	ld	r22, -Z
    581a:	ae 17       	cp	r26, r30
    581c:	bf 07       	cpc	r27, r31
    581e:	c8 f3       	brcs	.-14     	; 0x5812 <strrev+0x10>
    5820:	08 95       	ret

00005822 <fputc>:
    5822:	0f 93       	push	r16
    5824:	1f 93       	push	r17
    5826:	cf 93       	push	r28
    5828:	df 93       	push	r29
    582a:	8c 01       	movw	r16, r24
    582c:	eb 01       	movw	r28, r22
    582e:	8b 81       	ldd	r24, Y+3	; 0x03
    5830:	81 ff       	sbrs	r24, 1
    5832:	1b c0       	rjmp	.+54     	; 0x586a <fputc+0x48>
    5834:	82 ff       	sbrs	r24, 2
    5836:	0d c0       	rjmp	.+26     	; 0x5852 <fputc+0x30>
    5838:	2e 81       	ldd	r18, Y+6	; 0x06
    583a:	3f 81       	ldd	r19, Y+7	; 0x07
    583c:	8c 81       	ldd	r24, Y+4	; 0x04
    583e:	9d 81       	ldd	r25, Y+5	; 0x05
    5840:	28 17       	cp	r18, r24
    5842:	39 07       	cpc	r19, r25
    5844:	64 f4       	brge	.+24     	; 0x585e <fputc+0x3c>
    5846:	e8 81       	ld	r30, Y
    5848:	f9 81       	ldd	r31, Y+1	; 0x01
    584a:	01 93       	st	Z+, r16
    584c:	f9 83       	std	Y+1, r31	; 0x01
    584e:	e8 83       	st	Y, r30
    5850:	06 c0       	rjmp	.+12     	; 0x585e <fputc+0x3c>
    5852:	e8 85       	ldd	r30, Y+8	; 0x08
    5854:	f9 85       	ldd	r31, Y+9	; 0x09
    5856:	80 2f       	mov	r24, r16
    5858:	09 95       	icall
    585a:	89 2b       	or	r24, r25
    585c:	31 f4       	brne	.+12     	; 0x586a <fputc+0x48>
    585e:	8e 81       	ldd	r24, Y+6	; 0x06
    5860:	9f 81       	ldd	r25, Y+7	; 0x07
    5862:	01 96       	adiw	r24, 0x01	; 1
    5864:	9f 83       	std	Y+7, r25	; 0x07
    5866:	8e 83       	std	Y+6, r24	; 0x06
    5868:	02 c0       	rjmp	.+4      	; 0x586e <fputc+0x4c>
    586a:	0f ef       	ldi	r16, 0xFF	; 255
    586c:	1f ef       	ldi	r17, 0xFF	; 255
    586e:	c8 01       	movw	r24, r16
    5870:	df 91       	pop	r29
    5872:	cf 91       	pop	r28
    5874:	1f 91       	pop	r17
    5876:	0f 91       	pop	r16
    5878:	08 95       	ret

0000587a <__ultoa_invert>:
    587a:	fa 01       	movw	r30, r20
    587c:	aa 27       	eor	r26, r26
    587e:	28 30       	cpi	r18, 0x08	; 8
    5880:	51 f1       	breq	.+84     	; 0x58d6 <__ultoa_invert+0x5c>
    5882:	20 31       	cpi	r18, 0x10	; 16
    5884:	81 f1       	breq	.+96     	; 0x58e6 <__ultoa_invert+0x6c>
    5886:	e8 94       	clt
    5888:	6f 93       	push	r22
    588a:	6e 7f       	andi	r22, 0xFE	; 254
    588c:	6e 5f       	subi	r22, 0xFE	; 254
    588e:	7f 4f       	sbci	r23, 0xFF	; 255
    5890:	8f 4f       	sbci	r24, 0xFF	; 255
    5892:	9f 4f       	sbci	r25, 0xFF	; 255
    5894:	af 4f       	sbci	r26, 0xFF	; 255
    5896:	b1 e0       	ldi	r27, 0x01	; 1
    5898:	3e d0       	rcall	.+124    	; 0x5916 <__ultoa_invert+0x9c>
    589a:	b4 e0       	ldi	r27, 0x04	; 4
    589c:	3c d0       	rcall	.+120    	; 0x5916 <__ultoa_invert+0x9c>
    589e:	67 0f       	add	r22, r23
    58a0:	78 1f       	adc	r23, r24
    58a2:	89 1f       	adc	r24, r25
    58a4:	9a 1f       	adc	r25, r26
    58a6:	a1 1d       	adc	r26, r1
    58a8:	68 0f       	add	r22, r24
    58aa:	79 1f       	adc	r23, r25
    58ac:	8a 1f       	adc	r24, r26
    58ae:	91 1d       	adc	r25, r1
    58b0:	a1 1d       	adc	r26, r1
    58b2:	6a 0f       	add	r22, r26
    58b4:	71 1d       	adc	r23, r1
    58b6:	81 1d       	adc	r24, r1
    58b8:	91 1d       	adc	r25, r1
    58ba:	a1 1d       	adc	r26, r1
    58bc:	20 d0       	rcall	.+64     	; 0x58fe <__ultoa_invert+0x84>
    58be:	09 f4       	brne	.+2      	; 0x58c2 <__ultoa_invert+0x48>
    58c0:	68 94       	set
    58c2:	3f 91       	pop	r19
    58c4:	2a e0       	ldi	r18, 0x0A	; 10
    58c6:	26 9f       	mul	r18, r22
    58c8:	11 24       	eor	r1, r1
    58ca:	30 19       	sub	r19, r0
    58cc:	30 5d       	subi	r19, 0xD0	; 208
    58ce:	31 93       	st	Z+, r19
    58d0:	de f6       	brtc	.-74     	; 0x5888 <__ultoa_invert+0xe>
    58d2:	cf 01       	movw	r24, r30
    58d4:	08 95       	ret
    58d6:	46 2f       	mov	r20, r22
    58d8:	47 70       	andi	r20, 0x07	; 7
    58da:	40 5d       	subi	r20, 0xD0	; 208
    58dc:	41 93       	st	Z+, r20
    58de:	b3 e0       	ldi	r27, 0x03	; 3
    58e0:	0f d0       	rcall	.+30     	; 0x5900 <__ultoa_invert+0x86>
    58e2:	c9 f7       	brne	.-14     	; 0x58d6 <__ultoa_invert+0x5c>
    58e4:	f6 cf       	rjmp	.-20     	; 0x58d2 <__ultoa_invert+0x58>
    58e6:	46 2f       	mov	r20, r22
    58e8:	4f 70       	andi	r20, 0x0F	; 15
    58ea:	40 5d       	subi	r20, 0xD0	; 208
    58ec:	4a 33       	cpi	r20, 0x3A	; 58
    58ee:	18 f0       	brcs	.+6      	; 0x58f6 <__ultoa_invert+0x7c>
    58f0:	49 5d       	subi	r20, 0xD9	; 217
    58f2:	31 fd       	sbrc	r19, 1
    58f4:	40 52       	subi	r20, 0x20	; 32
    58f6:	41 93       	st	Z+, r20
    58f8:	02 d0       	rcall	.+4      	; 0x58fe <__ultoa_invert+0x84>
    58fa:	a9 f7       	brne	.-22     	; 0x58e6 <__ultoa_invert+0x6c>
    58fc:	ea cf       	rjmp	.-44     	; 0x58d2 <__ultoa_invert+0x58>
    58fe:	b4 e0       	ldi	r27, 0x04	; 4
    5900:	a6 95       	lsr	r26
    5902:	97 95       	ror	r25
    5904:	87 95       	ror	r24
    5906:	77 95       	ror	r23
    5908:	67 95       	ror	r22
    590a:	ba 95       	dec	r27
    590c:	c9 f7       	brne	.-14     	; 0x5900 <__ultoa_invert+0x86>
    590e:	00 97       	sbiw	r24, 0x00	; 0
    5910:	61 05       	cpc	r22, r1
    5912:	71 05       	cpc	r23, r1
    5914:	08 95       	ret
    5916:	9b 01       	movw	r18, r22
    5918:	ac 01       	movw	r20, r24
    591a:	0a 2e       	mov	r0, r26
    591c:	06 94       	lsr	r0
    591e:	57 95       	ror	r21
    5920:	47 95       	ror	r20
    5922:	37 95       	ror	r19
    5924:	27 95       	ror	r18
    5926:	ba 95       	dec	r27
    5928:	c9 f7       	brne	.-14     	; 0x591c <__ultoa_invert+0xa2>
    592a:	62 0f       	add	r22, r18
    592c:	73 1f       	adc	r23, r19
    592e:	84 1f       	adc	r24, r20
    5930:	95 1f       	adc	r25, r21
    5932:	a0 1d       	adc	r26, r0
    5934:	08 95       	ret

00005936 <_exit>:
    5936:	f8 94       	cli

00005938 <__stop_program>:
    5938:	ff cf       	rjmp	.-2      	; 0x5938 <__stop_program>
